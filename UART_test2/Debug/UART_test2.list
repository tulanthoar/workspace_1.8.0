
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009698  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009930  08009930  00019930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009984  08009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009988  08009988  00019988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  0800998c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d080  24000040  080099b4  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  2400d0c0  080099b4  0002d0c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dafc  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ff7  00000000  00000000  0003db52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc8  00000000  00000000  00040b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf0  00000000  00000000  00041918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374f9  00000000  00000000  00042608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013045  00000000  00000000  00079b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f76e  00000000  00000000  0008cb46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec2b4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038e4  00000000  00000000  001ec308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009918 	.word	0x08009918

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009918 	.word	0x08009918

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af02      	add	r7, sp, #8
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005da:	817b      	strh	r3, [r7, #10]
	unsigned short rxOffset = rxCount / 2;
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	813b      	strh	r3, [r7, #8]
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < txCount; ++i ){
 80005e8:	2300      	movs	r3, #0
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ec:	e00f      	b.n	800060e <main+0x3e>
	  aTxBuffer[i] = i % 16384;
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4a9b      	ldr	r2, [pc, #620]	; (8000870 <main+0x2a0>)
 8000602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	3301      	adds	r3, #1
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4b97      	ldr	r3, [pc, #604]	; (8000874 <main+0x2a4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b91      	ldr	r3, [pc, #580]	; (8000874 <main+0x2a4>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b8c      	ldr	r3, [pc, #560]	; (8000874 <main+0x2a4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a8b      	ldr	r2, [pc, #556]	; (8000874 <main+0x2a4>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 fa2c 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 fa14 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fb8a 	bl	8000d7c <MX_GPIO_Init>
  HAL_EnableCompensationCell();
 8000668:	f001 fae8 	bl	8001c3c <HAL_EnableCompensationCell>
  MX_DMA_Init();
 800066c:	f000 fb46 	bl	8000cfc <MX_DMA_Init>
  //  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8000670:	f000 faea 	bl	8000c48 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000674:	f000 fa90 	bl	8000b98 <MX_SPI1_Init>
//  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */

  while(UserButtonStatus == 0)
 8000678:	e005      	b.n	8000686 <main+0xb6>
  {
    BSP_LED_Toggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f001 f8b8 	bl	80017f0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f001 faab 	bl	8001bdc <HAL_Delay>
  while(UserButtonStatus == 0)
 8000686:	4b7c      	ldr	r3, [pc, #496]	; (8000878 <main+0x2a8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <main+0xaa>
  }
  UserButtonStatus = 0;
 800068e:	4b7a      	ldr	r3, [pc, #488]	; (8000878 <main+0x2a8>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f001 fa96 	bl	8001bc4 <HAL_GetTick>
 8000698:	6038      	str	r0, [r7, #0]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
 800069e:	e030      	b.n	8000702 <main+0x132>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	4873      	ldr	r0, [pc, #460]	; (800087c <main+0x2ac>)
 80006ae:	f008 fe6c 	bl	800938a <UART_WaitOnFlagUntilTimeout>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xec>
      {
        return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e1d4      	b.n	8000a66 <main+0x496>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006bc:	4a6c      	ldr	r2, [pc, #432]	; (8000870 <main+0x2a0>)
 80006be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b6d      	ldr	r3, [pc, #436]	; (800087c <main+0x2ac>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4868      	ldr	r0, [pc, #416]	; (800087c <main+0x2ac>)
 80006dc:	f008 fe55 	bl	800938a <UART_WaitOnFlagUntilTimeout>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0x11a>
      {
        return HAL_TIMEOUT;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e1bd      	b.n	8000a66 <main+0x496>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006ea:	4a61      	ldr	r2, [pc, #388]	; (8000870 <main+0x2a0>)
 80006ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b61      	ldr	r3, [pc, #388]	; (800087c <main+0x2ac>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 80006fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fe:	3301      	adds	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
 8000702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000708:	d3ca      	bcc.n	80006a0 <main+0xd0>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 800070a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4859      	ldr	r0, [pc, #356]	; (800087c <main+0x2ac>)
 8000718:	f008 fe37 	bl	800938a <UART_WaitOnFlagUntilTimeout>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x156>
  {
    return HAL_TIMEOUT;
 8000722:	2303      	movs	r3, #3
 8000724:	e19f      	b.n	8000a66 <main+0x496>
  }
//  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
  BSP_LED_Off(LED1);
 8000726:	2000      	movs	r0, #0
 8000728:	f001 f838 	bl	800179c <BSP_LED_Off>
  while(UserButtonStatus == 0)
 800072c:	e005      	b.n	800073a <main+0x16a>
  {
    BSP_LED_Toggle(LED2);
 800072e:	2001      	movs	r0, #1
 8000730:	f001 f85e 	bl	80017f0 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 fa51 	bl	8001bdc <HAL_Delay>
  while(UserButtonStatus == 0)
 800073a:	4b4f      	ldr	r3, [pc, #316]	; (8000878 <main+0x2a8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f5      	beq.n	800072e <main+0x15e>
  }
  UserButtonStatus = 0;
 8000742:	4b4d      	ldr	r3, [pc, #308]	; (8000878 <main+0x2a8>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
  UartReady = RESET;
 8000748:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <main+0x2b0>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED1);
 800074e:	2000      	movs	r0, #0
 8000750:	f001 f824 	bl	800179c <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000754:	2001      	movs	r0, #1
 8000756:	f001 f821 	bl	800179c <BSP_LED_Off>
    /* Process Locked */
    __HAL_LOCK(&hspi1);
 800075a:	4b4a      	ldr	r3, [pc, #296]	; (8000884 <main+0x2b4>)
 800075c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000760:	2b01      	cmp	r3, #1
 8000762:	d101      	bne.n	8000768 <main+0x198>
 8000764:	2302      	movs	r3, #2
 8000766:	e17e      	b.n	8000a66 <main+0x496>
 8000768:	4b46      	ldr	r3, [pc, #280]	; (8000884 <main+0x2b4>)
 800076a:	2201      	movs	r2, #1
 800076c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Configure communication direction : 1Line */
    if (hspi1.Init.Direction == SPI_DIRECTION_1LINE)
 8000770:	4b44      	ldr	r3, [pc, #272]	; (8000884 <main+0x2b4>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000778:	d107      	bne.n	800078a <main+0x1ba>
    {
      SPI_1LINE_RX(&hspi1);
 800077a:	4b42      	ldr	r3, [pc, #264]	; (8000884 <main+0x2b4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b40      	ldr	r3, [pc, #256]	; (8000884 <main+0x2b4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000788:	601a      	str	r2, [r3, #0]
    }

    /* Clear RXDMAEN bit */
    CLEAR_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800078a:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <main+0x2b4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <main+0x2b4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000798:	609a      	str	r2, [r3, #8]

    /* Set the SPI Rx DMA transfer complete callback */
    hspi1.hdmarx->XferCpltCallback = tx_complete;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <main+0x2b4>)
 800079c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800079e:	4a3a      	ldr	r2, [pc, #232]	; (8000888 <main+0x2b8>)
 80007a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <main+0x2b4>)
 80007a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007a6:	4a39      	ldr	r2, [pc, #228]	; (800088c <main+0x2bc>)
 80007a8:	641a      	str	r2, [r3, #64]	; 0x40

    MODIFY_REG(((DMA_Stream_TypeDef   *)hdma_spi1_rx.Instance)->CR, (DMA_IT_TC | DMA_IT_HT), (DMA_IT_TC | DMA_IT_HT));
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <main+0x2c0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <main+0x2c0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0218 	orr.w	r2, r2, #24
 80007b8:	601a      	str	r2, [r3, #0]
    /* Enable the Rx DMA Stream/Channel  */
    if (HAL_OK != HAL_DMA_Start(hspi1.hdmarx, (uint32_t)&hspi1.Instance->RXDR, (uint32_t)aRxBuffer, rxCount))
 80007ba:	4b32      	ldr	r3, [pc, #200]	; (8000884 <main+0x2b4>)
 80007bc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <main+0x2b4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3330      	adds	r3, #48	; 0x30
 80007c4:	4619      	mov	r1, r3
 80007c6:	4a33      	ldr	r2, [pc, #204]	; (8000894 <main+0x2c4>)
 80007c8:	897b      	ldrh	r3, [r7, #10]
 80007ca:	f001 feb3 	bl	8002534 <HAL_DMA_Start>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00d      	beq.n	80007f0 <main+0x220>
    {
      /* Update SPI error code */
      SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <main+0x2b4>)
 80007d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <main+0x2b4>)
 80007e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      hspi1.State = HAL_SPI_STATE_READY;
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <main+0x2b4>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      Error_Handler();
 80007ec:	f000 fbed 	bl	8000fca <Error_Handler>
    }

      MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <main+0x2b4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6859      	ldr	r1, [r3, #4]
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <main+0x2b4>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <main+0x2c8>)
 80007fc:	400b      	ands	r3, r1
 80007fe:	6053      	str	r3, [r2, #4]

    /* Enable Rx DMA Request */
    SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <main+0x2b4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <main+0x2b4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800080e:	609a      	str	r2, [r3, #8]

    /* Enable the SPI Error Interrupt Bit */
    __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <main+0x2b4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	691a      	ldr	r2, [r3, #16]
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <main+0x2b4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800081e:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi1);
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <main+0x2b4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0x2b4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0201 	orr.w	r2, r2, #1
 800082e:	601a      	str	r2, [r3, #0]

      SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <main+0x2b4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <main+0x2b4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800083e:	601a      	str	r2, [r3, #0]

  while (wTransferState != TRANSFER_H_COMPLETE)
 8000840:	e002      	b.n	8000848 <main+0x278>
  {
	    BSP_LED_Toggle(LED3);
 8000842:	2002      	movs	r0, #2
 8000844:	f000 ffd4 	bl	80017f0 <BSP_LED_Toggle>
  while (wTransferState != TRANSFER_H_COMPLETE)
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <main+0x2cc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d1f8      	bne.n	8000842 <main+0x272>
  }
  wTransferState = TRANSFER_WAIT;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <main+0x2cc>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
  int j = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  aTxBuffer[0] = aRxBuffer[0];
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <main+0x2c4>)
 800085c:	881a      	ldrh	r2, [r3, #0]
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <main+0x2a0>)
 8000860:	801a      	strh	r2, [r3, #0]
  for( int i = 1; i < txCount; ++i){
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
 8000866:	e03f      	b.n	80008e8 <main+0x318>
	  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	e02e      	b.n	80008cc <main+0x2fc>
 800086e:	bf00      	nop
 8000870:	24000080 	.word	0x24000080
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	24000060 	.word	0x24000060
 800087c:	2400c90c 	.word	0x2400c90c
 8000880:	2400005c 	.word	0x2400005c
 8000884:	2400cf24 	.word	0x2400cf24
 8000888:	08000f31 	.word	0x08000f31
 800088c:	08000f51 	.word	0x08000f51
 8000890:	2400cfac 	.word	0x2400cfac
 8000894:	24000880 	.word	0x24000880
 8000898:	ffff0000 	.word	0xffff0000
 800089c:	2400c880 	.word	0x2400c880
		  yi[j] = aRxBuffer[j] * 1.0;
 80008a0:	4a73      	ldr	r2, [pc, #460]	; (8000a70 <main+0x4a0>)
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008b4:	4a6f      	ldr	r2, [pc, #444]	; (8000a74 <main+0x4a4>)
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	edc3 7a00 	vstr	s15, [r3]
	  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	3301      	adds	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	3301      	adds	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	dde6      	ble.n	80008a0 <main+0x2d0>
	  }
	  aTxBuffer[i] = aRxBuffer[j];
 80008d2:	4a67      	ldr	r2, [pc, #412]	; (8000a70 <main+0x4a0>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008da:	4a67      	ldr	r2, [pc, #412]	; (8000a78 <main+0x4a8>)
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 1; i < txCount; ++i){
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	3301      	adds	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	6a3a      	ldr	r2, [r7, #32]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbbb      	blt.n	8000868 <main+0x298>
  }
  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 80008f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f4:	4960      	ldr	r1, [pc, #384]	; (8000a78 <main+0x4a8>)
 80008f6:	4861      	ldr	r0, [pc, #388]	; (8000a7c <main+0x4ac>)
 80008f8:	f007 fbaa 	bl	8008050 <HAL_UART_Transmit_DMA>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <main+0x336>
  {
    Error_Handler();
 8000902:	f000 fb62 	bl	8000fca <Error_Handler>
  }
//  HAL_NVIC_DisableIRQ(USART3_IRQn);
//  HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
//  CLEAR_BIT(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME ));
//  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
  BSP_LED_Off(LED3);
 8000906:	2002      	movs	r0, #2
 8000908:	f000 ff48 	bl	800179c <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (wTransferState != TRANSFER_COMPLETE) {}
 800090c:	bf00      	nop
 800090e:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <main+0x4b0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d1fb      	bne.n	800090e <main+0x33e>
	  wTransferState = TRANSFER_WAIT;
 8000916:	4b5a      	ldr	r3, [pc, #360]	; (8000a80 <main+0x4b0>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
	  j = rxOffset;
 800091c:	893b      	ldrh	r3, [r7, #8]
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[j];
 8000920:	4a53      	ldr	r2, [pc, #332]	; (8000a70 <main+0x4a0>)
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000928:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <main+0x4a8>)
 800092a:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i ){
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	e026      	b.n	8000980 <main+0x3b0>
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	e015      	b.n	8000964 <main+0x394>
			  yi[j] = aRxBuffer[j] * 1.0;
 8000938:	4a4d      	ldr	r2, [pc, #308]	; (8000a70 <main+0x4a0>)
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000940:	ee07 3a90 	vmov	s15, r3
 8000944:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000948:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800094c:	4a49      	ldr	r2, [pc, #292]	; (8000a74 <main+0x4a4>)
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	3301      	adds	r3, #1
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	2b03      	cmp	r3, #3
 8000968:	dde6      	ble.n	8000938 <main+0x368>
		  }
//		  yi[j] = aRxBuffer[j] * 1.0;
//		  aTxBuffer[i] = (uint16_t)yi[j];
		  aTxBuffer[i] = aRxBuffer[j];
 800096a:	4a41      	ldr	r2, [pc, #260]	; (8000a70 <main+0x4a0>)
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000972:	4a41      	ldr	r2, [pc, #260]	; (8000a78 <main+0x4a8>)
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i ){
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	3301      	adds	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	429a      	cmp	r2, r3
 8000986:	dbd4      	blt.n	8000932 <main+0x362>
	  }
	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 8000988:	bf00      	nop
 800098a:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <main+0x4b4>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000992:	2b40      	cmp	r3, #64	; 0x40
 8000994:	d1f9      	bne.n	800098a <main+0x3ba>
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_SxCR_EN));
 8000996:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <main+0x4b8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a3b      	ldr	r2, [pc, #236]	; (8000a88 <main+0x4b8>)
 800099c:	f043 0317 	orr.w	r3, r3, #23
 80009a0:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->ICR, UART_CLEAR_TCF);
 80009a2:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <main+0x4b4>)
 80009a4:	6a1b      	ldr	r3, [r3, #32]
 80009a6:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <main+0x4b4>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	6213      	str	r3, [r2, #32]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 80009ae:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <main+0x4b4>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	4a34      	ldr	r2, [pc, #208]	; (8000a84 <main+0x4b4>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6093      	str	r3, [r2, #8]

	  while (wTransferState != TRANSFER_H_COMPLETE) {}
 80009ba:	bf00      	nop
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <main+0x4b0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d1fb      	bne.n	80009bc <main+0x3ec>
	  wTransferState = TRANSFER_WAIT;
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <main+0x4b0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
	  j = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[0];
 80009ce:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <main+0x4a0>)
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <main+0x4a8>)
 80009d4:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i){
 80009d6:	2301      	movs	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	e026      	b.n	8000a2a <main+0x45a>
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e015      	b.n	8000a0e <main+0x43e>
			  yi[j] = aRxBuffer[j] * 1.0;
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <main+0x4a0>)
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ea:	ee07 3a90 	vmov	s15, r3
 80009ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009f6:	4a1f      	ldr	r2, [pc, #124]	; (8000a74 <main+0x4a4>)
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3301      	adds	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	dde6      	ble.n	80009e2 <main+0x412>
		  }
		  aTxBuffer[i] = aRxBuffer[j];
 8000a14:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <main+0x4a0>)
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <main+0x4a8>)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i){
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	3301      	adds	r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dbd4      	blt.n	80009dc <main+0x40c>
	  }

	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 8000a32:	bf00      	nop
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <main+0x4b4>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3c:	2b40      	cmp	r3, #64	; 0x40
 8000a3e:	d1f9      	bne.n	8000a34 <main+0x464>
	  /*##-2- Start the transmission process #####################################*/
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_SxCR_EN));
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <main+0x4b8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <main+0x4b8>)
 8000a46:	f043 0317 	orr.w	r3, r3, #23
 8000a4a:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->ICR, UART_CLEAR_TCF);
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <main+0x4b4>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <main+0x4b4>)
 8000a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a56:	6213      	str	r3, [r2, #32]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <main+0x4b4>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <main+0x4b4>)
 8000a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a62:	6093      	str	r3, [r2, #8]
	  while (wTransferState != TRANSFER_COMPLETE) {}
 8000a64:	e752      	b.n	800090c <main+0x33c>
  }
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3730      	adds	r7, #48	; 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24000880 	.word	0x24000880
 8000a74:	24004880 	.word	0x24004880
 8000a78:	24000080 	.word	0x24000080
 8000a7c:	2400c90c 	.word	0x2400c90c
 8000a80:	2400c880 	.word	0x2400c880
 8000a84:	40004800 	.word	0x40004800
 8000a88:	40020028 	.word	0x40020028

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09c      	sub	sp, #112	; 0x70
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	224c      	movs	r2, #76	; 0x4c
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f008 ff34 	bl	8009908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f008 ff2e 	bl	8009908 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f004 fb71 	bl	8005194 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <SystemClock_Config+0x100>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a34      	ldr	r2, [pc, #208]	; (8000b8c <SystemClock_Config+0x100>)
 8000abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <SystemClock_Config+0x100>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <SystemClock_Config+0x104>)
 8000ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad0:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <SystemClock_Config+0x104>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <SystemClock_Config+0x104>)
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ae4:	bf00      	nop
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <SystemClock_Config+0x100>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000af2:	d1f8      	bne.n	8000ae6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <SystemClock_Config+0x108>)
 8000af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af8:	f023 0303 	bic.w	r3, r3, #3
 8000afc:	4a25      	ldr	r2, [pc, #148]	; (8000b94 <SystemClock_Config+0x108>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b04:	2321      	movs	r3, #33	; 0x21
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	2302      	movs	r3, #2
 8000b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 115;
 8000b1e:	2373      	movs	r3, #115	; 0x73
 8000b20:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b26:	2304      	movs	r3, #4
 8000b28:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b2e:	230c      	movs	r3, #12
 8000b30:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fb62 	bl	8005208 <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b4a:	f000 fa3e 	bl	8000fca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	233f      	movs	r3, #63	; 0x3f
 8000b50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2303      	movs	r3, #3
 8000b54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b5e:	2340      	movs	r3, #64	; 0x40
 8000b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b62:	2340      	movs	r3, #64	; 0x40
 8000b64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2104      	movs	r1, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 ff57 	bl	8005a28 <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000b80:	f000 fa23 	bl	8000fca <Error_Handler>
  }


}
 8000b84:	bf00      	nop
 8000b86:	3770      	adds	r7, #112	; 0x70
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	58024800 	.word	0x58024800
 8000b90:	58000400 	.word	0x58000400
 8000b94:	58024400 	.word	0x58024400

08000b98 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000b9e:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <MX_SPI1_Init+0xac>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba2:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000ba4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ba8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bb0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bb4:	220d      	movs	r2, #13
 8000bb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000c14:	2220      	movs	r2, #32
 8000c16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_SPI1_Init+0xa8>)
 8000c2c:	f006 fdea 	bl	8007804 <HAL_SPI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c36:	f000 f9c8 	bl	8000fca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2400cf24 	.word	0x2400cf24
 8000c44:	40013000 	.word	0x40013000

08000c48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <MX_USART3_UART_Init+0xac>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11978688;
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c54:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <MX_USART3_UART_Init+0xb0>)
 8000c56:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c58:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c6c:	220c      	movs	r2, #12
 8000c6e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c96:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000c98:	f007 f989 	bl	8007fae <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000ca2:	f000 f992 	bl	8000fca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000caa:	f008 fd3e 	bl	800972a <HAL_UARTEx_SetTxFifoThreshold>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000cb4:	f000 f989 	bl	8000fca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000cbc:	f008 fd73 	bl	80097a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000cc6:	f000 f980 	bl	8000fca <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <MX_USART3_UART_Init+0xa8>)
 8000ccc:	f008 fcf2 	bl	80096b4 <HAL_UARTEx_EnableFifoMode>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000cd6:	f000 f978 	bl	8000fca <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2027      	movs	r0, #39	; 0x27
 8000ce0:	f001 f897 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ce4:	2027      	movs	r0, #39	; 0x27
 8000ce6:	f001 f8ae 	bl	8001e46 <HAL_NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2400c90c 	.word	0x2400c90c
 8000cf4:	40004800 	.word	0x40004800
 8000cf8:	00b6c7c0 	.word	0x00b6c7c0

08000cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_DMA_Init+0x7c>)
 8000d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d08:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <MX_DMA_Init+0x7c>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_DMA_Init+0x7c>)
 8000d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_DMA_Init+0x7c>)
 8000d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d26:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <MX_DMA_Init+0x7c>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_DMA_Init+0x7c>)
 8000d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2100      	movs	r1, #0
 8000d42:	200b      	movs	r0, #11
 8000d44:	f001 f865 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d48:	200b      	movs	r0, #11
 8000d4a:	f001 f87c 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2100      	movs	r1, #0
 8000d52:	200c      	movs	r0, #12
 8000d54:	f001 f85d 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d58:	200c      	movs	r0, #12
 8000d5a:	f001 f874 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2100      	movs	r1, #0
 8000d62:	2038      	movs	r0, #56	; 0x38
 8000d64:	f001 f855 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d68:	2038      	movs	r0, #56	; 0x38
 8000d6a:	f001 f86c 	bl	8001e46 <HAL_NVIC_EnableIRQ>

}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58024400 	.word	0x58024400

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	; 0x30
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b57      	ldr	r3, [pc, #348]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	4a55      	ldr	r2, [pc, #340]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da2:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db0:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	4a4e      	ldr	r2, [pc, #312]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b48      	ldr	r3, [pc, #288]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a46      	ldr	r2, [pc, #280]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b40      	ldr	r3, [pc, #256]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfc:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a37      	ldr	r2, [pc, #220]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a30      	ldr	r2, [pc, #192]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	4a28      	ldr	r2, [pc, #160]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e6a:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <MX_GPIO_Init+0x178>)
 8000e6c:	f004 f944 	bl	80050f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2102      	movs	r1, #2
 8000e74:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <MX_GPIO_Init+0x17c>)
 8000e76:	f004 f93f 	bl	80050f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481b      	ldr	r0, [pc, #108]	; (8000efc <MX_GPIO_Init+0x180>)
 8000e90:	f003 ff82 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e94:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <MX_GPIO_Init+0x178>)
 8000eae:	f003 ff73 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <MX_GPIO_Init+0x17c>)
 8000eca:	f003 ff65 	bl	8004d98 <HAL_GPIO_Init>

  BSP_LED_Init(LED1);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 fbc4 	bl	800165c <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f000 fbc1 	bl	800165c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000eda:	2002      	movs	r0, #2
 8000edc:	f000 fbbe 	bl	800165c <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fcae 	bl	8001844 <BSP_PB_Init>
}
 8000ee8:	bf00      	nop
 8000eea:	3730      	adds	r7, #48	; 0x30
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58020400 	.word	0x58020400
 8000ef8:	58021000 	.word	0x58021000
 8000efc:	58020800 	.word	0x58020800

08000f00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f10:	d105      	bne.n	8000f1e <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f083 0301 	eor.w	r3, r3, #1
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f1c:	6013      	str	r3, [r2, #0]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	24000060 	.word	0x24000060

08000f30 <tx_complete>:
//  BSP_LED_On(LED1);
//  wTransferState = TRANSFER_COMPLETE;
//}

void tx_complete(DMA_HandleTypeDef *hdma)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_COMPLETE;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <tx_complete+0x1c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2400c880 	.word	0x2400c880

08000f50 <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_H_COMPLETE;
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <tx_h_complete+0x1c>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2400c880 	.word	0x2400c880

08000f70 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <HAL_SPI_ErrorCallback+0x1c>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2400c880 	.word	0x2400c880

08000f90 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <HAL_UART_TxCpltCallback+0x1c>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2400005c 	.word	0x2400005c

08000fb0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f000 fbc5 	bl	8001748 <BSP_LED_On>
  Error_Handler();
 8000fbe:	f000 f804 	bl	8000fca <Error_Handler>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fce:	b672      	cpsid	i
}
 8000fd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f000 fc0c 	bl	80017f0 <BSP_LED_Toggle>
	    HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f000 fdff 	bl	8001bdc <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8000fde:	e7f8      	b.n	8000fd2 <Error_Handler+0x8>

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_MspInit+0x30>)
 8000fe8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fec:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x30>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x30>)
 8000ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	58024400 	.word	0x58024400

08001014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0bc      	sub	sp, #240	; 0xf0
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	22bc      	movs	r2, #188	; 0xbc
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f008 fc67 	bl	8009908 <memset>
  if(hspi->Instance==SPI1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4aa0      	ldr	r2, [pc, #640]	; (80012c0 <HAL_SPI_MspInit+0x2ac>)
 8001040:	4293      	cmp	r3, r2
 8001042:	f040 8096 	bne.w	8001172 <HAL_SPI_MspInit+0x15e>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104a:	623b      	str	r3, [r7, #32]
      PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	67fb      	str	r3, [r7, #124]	; 0x7c
      PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001052:	2304      	movs	r3, #4
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
      PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8001056:	f240 1317 	movw	r3, #279	; 0x117
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
      PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 800105c:	2308      	movs	r3, #8
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
      PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001060:	2302      	movs	r3, #2
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
      PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001064:	2302      	movs	r3, #2
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
      PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001068:	2340      	movs	r3, #64	; 0x40
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
      PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800106c:	2300      	movs	r3, #0
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
      PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	643b      	str	r3, [r7, #64]	; 0x40
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	4618      	mov	r0, r3
 800107a:	f005 f861 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_SPI_MspInit+0x74>
      {
        Error_Handler();
 8001084:	f7ff ffa1 	bl	8000fca <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 8001088:	4b8e      	ldr	r3, [pc, #568]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 800108a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800108e:	4a8d      	ldr	r2, [pc, #564]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 8001090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001094:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001098:	4b8a      	ldr	r3, [pc, #552]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 800109a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800109e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b87      	ldr	r3, [pc, #540]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	4a85      	ldr	r2, [pc, #532]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b6:	4b83      	ldr	r3, [pc, #524]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69bb      	ldr	r3, [r7, #24]
      /**SPI1 GPIO Configuration
      PA5     ------> SPI1_SCK
      PA6     ------> SPI1_MISO
      PA15 (JTDI)     ------> SPI1_NSS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 80010c4:	f248 0360 	movw	r3, #32864	; 0x8060
 80010c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010de:	2305      	movs	r3, #5
 80010e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010e8:	4619      	mov	r1, r3
 80010ea:	4877      	ldr	r0, [pc, #476]	; (80012c8 <HAL_SPI_MspInit+0x2b4>)
 80010ec:	f003 fe54 	bl	8004d98 <HAL_GPIO_Init>

      /* SPI1 DMA Init */
      /* SPI1_RX Init */
      hdma_spi1_rx.Instance = DMA2_Stream0;
 80010f0:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 80010f2:	4a77      	ldr	r2, [pc, #476]	; (80012d0 <HAL_SPI_MspInit+0x2bc>)
 80010f4:	601a      	str	r2, [r3, #0]
      hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80010f6:	4b75      	ldr	r3, [pc, #468]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 80010f8:	2225      	movs	r2, #37	; 0x25
 80010fa:	605a      	str	r2, [r3, #4]
      hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fc:	4b73      	ldr	r3, [pc, #460]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
      hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001102:	4b72      	ldr	r3, [pc, #456]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
      hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001108:	4b70      	ldr	r3, [pc, #448]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 800110a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800110e:	611a      	str	r2, [r3, #16]
      hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001110:	4b6e      	ldr	r3, [pc, #440]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 8001112:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001116:	615a      	str	r2, [r3, #20]
      hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001118:	4b6c      	ldr	r3, [pc, #432]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 800111a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111e:	619a      	str	r2, [r3, #24]
      hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001120:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 8001122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001126:	61da      	str	r2, [r3, #28]
      hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
      hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 8001130:	2204      	movs	r2, #4
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001134:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 800113c:	2200      	movs	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 8001142:	2200      	movs	r2, #0
 8001144:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001146:	4861      	ldr	r0, [pc, #388]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 8001148:	f000 fe98 	bl	8001e7c <HAL_DMA_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_SPI_MspInit+0x142>
      {
        Error_Handler();
 8001152:	f7ff ff3a 	bl	8000fca <Error_Handler>
      }

      __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a5c      	ldr	r2, [pc, #368]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 800115a:	67da      	str	r2, [r3, #124]	; 0x7c
 800115c:	4a5b      	ldr	r2, [pc, #364]	; (80012cc <HAL_SPI_MspInit+0x2b8>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6393      	str	r3, [r2, #56]	; 0x38

      /* SPI1 interrupt Init */
      HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2023      	movs	r0, #35	; 0x23
 8001168:	f000 fe53 	bl	8001e12 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800116c:	2023      	movs	r0, #35	; 0x23
 800116e:	f000 fe6a 	bl	8001e46 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
    }
  if(hspi->Instance==SPI2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a57      	ldr	r2, [pc, #348]	; (80012d4 <HAL_SPI_MspInit+0x2c0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	f040 809d 	bne.w	80012b8 <HAL_SPI_MspInit+0x2a4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 800118a:	2304      	movs	r3, #4
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800118e:	f240 1317 	movw	r3, #279	; 0x117
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001194:	2308      	movs	r3, #8
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001198:	2302      	movs	r3, #2
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 800119c:	2302      	movs	r3, #2
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80011a0:	2340      	movs	r3, #64	; 0x40
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 ffc5 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 80011bc:	f7ff ff05 	bl	8000fca <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80011c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c6:	4a3f      	ldr	r2, [pc, #252]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011d0:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80011d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	4a37      	ldr	r2, [pc, #220]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001202:	4a30      	ldr	r2, [pc, #192]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_SPI_MspInit+0x2b0>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001238:	230c      	movs	r3, #12
 800123a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001250:	2305      	movs	r3, #5
 8001252:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800125a:	4619      	mov	r1, r3
 800125c:	481e      	ldr	r0, [pc, #120]	; (80012d8 <HAL_SPI_MspInit+0x2c4>)
 800125e:	f003 fd9b 	bl	8004d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127c:	2305      	movs	r3, #5
 800127e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001286:	4619      	mov	r1, r3
 8001288:	4814      	ldr	r0, [pc, #80]	; (80012dc <HAL_SPI_MspInit+0x2c8>)
 800128a:	f003 fd85 	bl	8004d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800128e:	2308      	movs	r3, #8
 8001290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a6:	2305      	movs	r3, #5
 80012a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012b0:	4619      	mov	r1, r3
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <HAL_SPI_MspInit+0x2cc>)
 80012b4:	f003 fd70 	bl	8004d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	37f0      	adds	r7, #240	; 0xf0
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40013000 	.word	0x40013000
 80012c4:	58024400 	.word	0x58024400
 80012c8:	58020000 	.word	0x58020000
 80012cc:	2400cfac 	.word	0x2400cfac
 80012d0:	40020410 	.word	0x40020410
 80012d4:	40003800 	.word	0x40003800
 80012d8:	58020800 	.word	0x58020800
 80012dc:	58020400 	.word	0x58020400
 80012e0:	58020c00 	.word	0x58020c00

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0ba      	sub	sp, #232	; 0xe8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	22bc      	movs	r2, #188	; 0xbc
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f008 faff 	bl	8009908 <memset>
  if(huart->Instance==USART1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a94      	ldr	r2, [pc, #592]	; (8001560 <HAL_UART_MspInit+0x27c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	f040 8098 	bne.w	8001446 <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 800131a:	2304      	movs	r3, #4
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 800131e:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001322:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001324:	2309      	movs	r3, #9
 8001326:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001328:	2308      	movs	r3, #8
 800132a:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 800132c:	2302      	movs	r3, #2
 800132e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001334:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001336:	2300      	movs	r3, #0
 8001338:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800133e:	2310      	movs	r3, #16
 8001340:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001344:	f107 0318 	add.w	r3, r7, #24
 8001348:	4618      	mov	r0, r3
 800134a:	f004 fef9 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 8001354:	f7ff fe39 	bl	8000fca <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001358:	4b82      	ldr	r3, [pc, #520]	; (8001564 <HAL_UART_MspInit+0x280>)
 800135a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800135e:	4a81      	ldr	r2, [pc, #516]	; (8001564 <HAL_UART_MspInit+0x280>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001368:	4b7e      	ldr	r3, [pc, #504]	; (8001564 <HAL_UART_MspInit+0x280>)
 800136a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b7b      	ldr	r3, [pc, #492]	; (8001564 <HAL_UART_MspInit+0x280>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	4a79      	ldr	r2, [pc, #484]	; (8001564 <HAL_UART_MspInit+0x280>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001386:	4b77      	ldr	r3, [pc, #476]	; (8001564 <HAL_UART_MspInit+0x280>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013ae:	2304      	movs	r3, #4
 80013b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b8:	4619      	mov	r1, r3
 80013ba:	486b      	ldr	r0, [pc, #428]	; (8001568 <HAL_UART_MspInit+0x284>)
 80013bc:	f003 fcec 	bl	8004d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013d8:	2307      	movs	r3, #7
 80013da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4860      	ldr	r0, [pc, #384]	; (8001568 <HAL_UART_MspInit+0x284>)
 80013e6:	f003 fcd7 	bl	8004d98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80013ea:	4b60      	ldr	r3, [pc, #384]	; (800156c <HAL_UART_MspInit+0x288>)
 80013ec:	4a60      	ldr	r2, [pc, #384]	; (8001570 <HAL_UART_MspInit+0x28c>)
 80013ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80013f0:	4b5e      	ldr	r3, [pc, #376]	; (800156c <HAL_UART_MspInit+0x288>)
 80013f2:	222a      	movs	r2, #42	; 0x2a
 80013f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f6:	4b5d      	ldr	r3, [pc, #372]	; (800156c <HAL_UART_MspInit+0x288>)
 80013f8:	2240      	movs	r2, #64	; 0x40
 80013fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	4b5b      	ldr	r3, [pc, #364]	; (800156c <HAL_UART_MspInit+0x288>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001402:	4b5a      	ldr	r3, [pc, #360]	; (800156c <HAL_UART_MspInit+0x288>)
 8001404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001408:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140a:	4b58      	ldr	r3, [pc, #352]	; (800156c <HAL_UART_MspInit+0x288>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001410:	4b56      	ldr	r3, [pc, #344]	; (800156c <HAL_UART_MspInit+0x288>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001416:	4b55      	ldr	r3, [pc, #340]	; (800156c <HAL_UART_MspInit+0x288>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_UART_MspInit+0x288>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001422:	4b52      	ldr	r3, [pc, #328]	; (800156c <HAL_UART_MspInit+0x288>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001428:	4850      	ldr	r0, [pc, #320]	; (800156c <HAL_UART_MspInit+0x288>)
 800142a:	f000 fd27 	bl	8001e7c <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001434:	f7ff fdc9 	bl	8000fca <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a4c      	ldr	r2, [pc, #304]	; (800156c <HAL_UART_MspInit+0x288>)
 800143c:	679a      	str	r2, [r3, #120]	; 0x78
 800143e:	4a4b      	ldr	r2, [pc, #300]	; (800156c <HAL_UART_MspInit+0x288>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001444:	e088      	b.n	8001558 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a4a      	ldr	r2, [pc, #296]	; (8001574 <HAL_UART_MspInit+0x290>)
 800144c:	4293      	cmp	r3, r2
 800144e:	f040 8083 	bne.w	8001558 <HAL_UART_MspInit+0x274>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001456:	2304      	movs	r3, #4
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 800145a:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001460:	2309      	movs	r3, #9
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001464:	2308      	movs	r3, #8
 8001466:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001468:	2302      	movs	r3, #2
 800146a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800146c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001470:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001472:	2300      	movs	r3, #0
 8001474:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	65bb      	str	r3, [r7, #88]	; 0x58
	  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f004 fe5b 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_MspInit+0x1b0>
	    Error_Handler();
 8001490:	f7ff fd9b 	bl	8000fca <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_UART_MspInit+0x280>)
 8001496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800149a:	4a32      	ldr	r2, [pc, #200]	; (8001564 <HAL_UART_MspInit+0x280>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <HAL_UART_MspInit+0x280>)
 80014a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <HAL_UART_MspInit+0x280>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a2a      	ldr	r2, [pc, #168]	; (8001564 <HAL_UART_MspInit+0x280>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_UART_MspInit+0x280>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014ea:	2307      	movs	r3, #7
 80014ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4820      	ldr	r0, [pc, #128]	; (8001578 <HAL_UART_MspInit+0x294>)
 80014f8:	f003 fc4e 	bl	8004d98 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_UART_MspInit+0x298>)
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_UART_MspInit+0x29c>)
 8001500:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_UART_MspInit+0x298>)
 8001504:	222e      	movs	r2, #46	; 0x2e
 8001506:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_UART_MspInit+0x298>)
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_UART_MspInit+0x298>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_UART_MspInit+0x298>)
 8001516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_UART_MspInit+0x298>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_UART_MspInit+0x298>)
 8001524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001528:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_UART_MspInit+0x298>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_UART_MspInit+0x298>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_UART_MspInit+0x298>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800153c:	480f      	ldr	r0, [pc, #60]	; (800157c <HAL_UART_MspInit+0x298>)
 800153e:	f000 fc9d 	bl	8001e7c <HAL_DMA_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_UART_MspInit+0x268>
      Error_Handler();
 8001548:	f7ff fd3f 	bl	8000fca <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_UART_MspInit+0x298>)
 8001550:	679a      	str	r2, [r3, #120]	; 0x78
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_UART_MspInit+0x298>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001558:	bf00      	nop
 800155a:	37e8      	adds	r7, #232	; 0xe8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40011000 	.word	0x40011000
 8001564:	58024400 	.word	0x58024400
 8001568:	58020400 	.word	0x58020400
 800156c:	2400ce1c 	.word	0x2400ce1c
 8001570:	40020010 	.word	0x40020010
 8001574:	40004800 	.word	0x40004800
 8001578:	58020c00 	.word	0x58020c00
 800157c:	2400cda4 	.word	0x2400cda4
 8001580:	40020028 	.word	0x40020028

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 fae4 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Stream0_IRQHandler+0x10>)
 80015de:	f002 f895 	bl	800370c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2400ce1c 	.word	0x2400ce1c

080015ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80015f0:	2002      	movs	r0, #2
 80015f2:	f000 f8a9 	bl	8001748 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <DMA1_Stream1_IRQHandler+0x14>)
 80015f8:	f002 f888 	bl	800370c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2400cda4 	.word	0x2400cda4

08001604 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	  BSP_LED_On(LED1);
 8001608:	2000      	movs	r0, #0
 800160a:	f000 f89d 	bl	8001748 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800160e:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA2_Stream0_IRQHandler+0x14>)
 8001610:	f002 f87c 	bl	800370c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2400cfac 	.word	0x2400cfac

0800161c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8001620:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001624:	f003 fd9b 	bl	800515e <HAL_GPIO_EXTI_IRQHandler>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 8001630:	2002      	movs	r0, #2
 8001632:	f000 f889 	bl	8001748 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 8001636:	4802      	ldr	r0, [pc, #8]	; (8001640 <USART3_IRQHandler+0x14>)
 8001638:	f006 fd8a 	bl	8008150 <HAL_UART_IRQHandler>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2400c90c 	.word	0x2400c90c

08001644 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	  BSP_LED_On(LED3);
 8001648:	2002      	movs	r0, #2
 800164a:	f000 f87d 	bl	8001748 <BSP_LED_On>
  HAL_SPI_IRQHandler(&hspi1);
 800164e:	4802      	ldr	r0, [pc, #8]	; (8001658 <SPI1_IRQHandler+0x14>)
 8001650:	f006 f9da 	bl	8007a08 <HAL_SPI_IRQHandler>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2400cf24 	.word	0x2400cf24

0800165c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <BSP_LED_Init+0x28>
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d006      	beq.n	8001684 <BSP_LED_Init+0x28>
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d003      	beq.n	8001684 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800167c:	f06f 0301 	mvn.w	r3, #1
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001682:	e055      	b.n	8001730 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <BSP_LED_Init+0xe0>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	4a2a      	ldr	r2, [pc, #168]	; (800173c <BSP_LED_Init+0xe0>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <BSP_LED_Init+0xe0>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	e021      	b.n	80016ee <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10f      	bne.n	80016d0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <BSP_LED_Init+0xe0>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b6:	4a21      	ldr	r2, [pc, #132]	; (800173c <BSP_LED_Init+0xe0>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <BSP_LED_Init+0xe0>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	e00e      	b.n	80016ee <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <BSP_LED_Init+0xe0>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a19      	ldr	r2, [pc, #100]	; (800173c <BSP_LED_Init+0xe0>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <BSP_LED_Init+0xe0>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <BSP_LED_Init+0xe4>)
 80016f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016f6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <BSP_LED_Init+0xe8>)
 8001708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170c:	f107 0218 	add.w	r2, r7, #24
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fb40 	bl	8004d98 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <BSP_LED_Init+0xe8>)
 800171c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <BSP_LED_Init+0xe4>)
 8001724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	f003 fce4 	bl	80050f8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001732:	4618      	mov	r0, r3
 8001734:	3730      	adds	r7, #48	; 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	58024400 	.word	0x58024400
 8001740:	08009930 	.word	0x08009930
 8001744:	24000000 	.word	0x24000000

08001748 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d009      	beq.n	8001770 <BSP_LED_On+0x28>
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d006      	beq.n	8001770 <BSP_LED_On+0x28>
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d003      	beq.n	8001770 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001768:	f06f 0301 	mvn.w	r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e00b      	b.n	8001788 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <BSP_LED_On+0x4c>)
 8001774:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <BSP_LED_On+0x50>)
 800177c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001780:	2201      	movs	r2, #1
 8001782:	4619      	mov	r1, r3
 8001784:	f003 fcb8 	bl	80050f8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001788:	68fb      	ldr	r3, [r7, #12]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	24000000 	.word	0x24000000
 8001798:	08009930 	.word	0x08009930

0800179c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <BSP_LED_Off+0x28>
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d006      	beq.n	80017c4 <BSP_LED_Off+0x28>
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d003      	beq.n	80017c4 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017bc:	f06f 0301 	mvn.w	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e00b      	b.n	80017dc <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <BSP_LED_Off+0x4c>)
 80017c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4a07      	ldr	r2, [pc, #28]	; (80017ec <BSP_LED_Off+0x50>)
 80017d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017d4:	2200      	movs	r2, #0
 80017d6:	4619      	mov	r1, r3
 80017d8:	f003 fc8e 	bl	80050f8 <HAL_GPIO_WritePin>
  }

  return ret;
 80017dc:	68fb      	ldr	r3, [r7, #12]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	24000000 	.word	0x24000000
 80017ec:	08009930 	.word	0x08009930

080017f0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <BSP_LED_Toggle+0x28>
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d006      	beq.n	8001818 <BSP_LED_Toggle+0x28>
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d003      	beq.n	8001818 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001810:	f06f 0301 	mvn.w	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e00b      	b.n	8001830 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <BSP_LED_Toggle+0x4c>)
 800181c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4907      	ldr	r1, [pc, #28]	; (8001840 <BSP_LED_Toggle+0x50>)
 8001824:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f003 fc7d 	bl	800512a <HAL_GPIO_TogglePin>
  }

  return ret;
 8001830:	68fb      	ldr	r3, [r7, #12]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	24000000 	.word	0x24000000
 8001840:	08009930 	.word	0x08009930

08001844 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <BSP_PB_Init+0xc8>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	4a2c      	ldr	r2, [pc, #176]	; (800190c <BSP_PB_Init+0xc8>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001864:	4b29      	ldr	r3, [pc, #164]	; (800190c <BSP_PB_Init+0xc8>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001876:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001878:	2302      	movs	r3, #2
 800187a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4a20      	ldr	r2, [pc, #128]	; (8001910 <BSP_PB_Init+0xcc>)
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	f107 020c 	add.w	r2, r7, #12
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fa7d 	bl	8004d98 <HAL_GPIO_Init>
 800189e:	e030      	b.n	8001902 <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <BSP_PB_Init+0xd0>)
 80018a2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <BSP_PB_Init+0xcc>)
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	f107 020c 	add.w	r2, r7, #12
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 fa70 	bl	8004d98 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <BSP_PB_Init+0xd4>)
 80018be:	441a      	add	r2, r3
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4916      	ldr	r1, [pc, #88]	; (800191c <BSP_PB_Init+0xd8>)
 80018c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f003 fa4f 	bl	8004d6e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4a10      	ldr	r2, [pc, #64]	; (8001918 <BSP_PB_Init+0xd4>)
 80018d6:	1898      	adds	r0, r3, r2
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a11      	ldr	r2, [pc, #68]	; (8001920 <BSP_PB_Init+0xdc>)
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	461a      	mov	r2, r3
 80018e2:	2100      	movs	r1, #0
 80018e4:	f003 fa24 	bl	8004d30 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80018e8:	2028      	movs	r0, #40	; 0x28
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <BSP_PB_Init+0xe0>)
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	2200      	movs	r2, #0
 80018f4:	4619      	mov	r1, r3
 80018f6:	f000 fa8c 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80018fa:	2328      	movs	r3, #40	; 0x28
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 faa2 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	58024400 	.word	0x58024400
 8001910:	2400000c 	.word	0x2400000c
 8001914:	11110000 	.word	0x11110000
 8001918:	2400d024 	.word	0x2400d024
 800191c:	08009938 	.word	0x08009938
 8001920:	24000010 	.word	0x24000010
 8001924:	24000014 	.word	0x24000014

08001928 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fff0 	bl	8001928 <BSP_PB_Callback>
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <SystemInit+0xec>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a38      	ldr	r2, [pc, #224]	; (8001a38 <SystemInit+0xec>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <SystemInit+0xf0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	2b06      	cmp	r3, #6
 800196a:	d807      	bhi.n	800197c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <SystemInit+0xf0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 030f 	bic.w	r3, r3, #15
 8001974:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <SystemInit+0xf0>)
 8001976:	f043 0307 	orr.w	r3, r3, #7
 800197a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <SystemInit+0xf4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <SystemInit+0xf4>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <SystemInit+0xf4>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <SystemInit+0xf4>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	492b      	ldr	r1, [pc, #172]	; (8001a40 <SystemInit+0xf4>)
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <SystemInit+0xf8>)
 8001996:	4013      	ands	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <SystemInit+0xf0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <SystemInit+0xf0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 030f 	bic.w	r3, r3, #15
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <SystemInit+0xf0>)
 80019b0:	f043 0307 	orr.w	r3, r3, #7
 80019b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <SystemInit+0xf4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019bc:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <SystemInit+0xf4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <SystemInit+0xf4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <SystemInit+0xf4>)
 80019ca:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <SystemInit+0xfc>)
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <SystemInit+0xf4>)
 80019d0:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <SystemInit+0x100>)
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <SystemInit+0xf4>)
 80019d6:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <SystemInit+0x104>)
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <SystemInit+0xf4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <SystemInit+0xf4>)
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <SystemInit+0x104>)
 80019e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <SystemInit+0xf4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <SystemInit+0xf4>)
 80019ee:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <SystemInit+0x104>)
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <SystemInit+0xf4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <SystemInit+0xf4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <SystemInit+0xf4>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <SystemInit+0xf4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <SystemInit+0x108>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <SystemInit+0x10c>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a16:	d202      	bcs.n	8001a1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <SystemInit+0x110>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <SystemInit+0x114>)
 8001a20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a24:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SystemInit+0xec>)
 8001a28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a2c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00
 8001a3c:	52002000 	.word	0x52002000
 8001a40:	58024400 	.word	0x58024400
 8001a44:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a48:	02020200 	.word	0x02020200
 8001a4c:	01ff0000 	.word	0x01ff0000
 8001a50:	01010280 	.word	0x01010280
 8001a54:	5c001000 	.word	0x5c001000
 8001a58:	ffff0000 	.word	0xffff0000
 8001a5c:	51008108 	.word	0x51008108
 8001a60:	52004000 	.word	0x52004000

08001a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a68:	f7ff ff70 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a6e:	490d      	ldr	r1, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a84:	4c0a      	ldr	r4, [pc, #40]	; (8001ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a92:	f007 ff15 	bl	80098c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a96:	f7fe fd9b 	bl	80005d0 <main>
  bx  lr
 8001a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001aa0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001aa4:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001aa8:	0800998c 	.word	0x0800998c
  ldr r2, =_sbss
 8001aac:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001ab0:	2400d0c0 	.word	0x2400d0c0

08001ab4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC3_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f000 f99c 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ac4:	f004 f966 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_Init+0x68>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	4913      	ldr	r1, [pc, #76]	; (8001b24 <HAL_Init+0x6c>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_Init+0x68>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_Init+0x6c>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_Init+0x70>)
 8001afa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001afc:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_Init+0x74>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b02:	2000      	movs	r0, #0
 8001b04:	f000 f814 	bl	8001b30 <HAL_InitTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e002      	b.n	8001b18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b12:	f7ff fa65 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	58024400 	.word	0x58024400
 8001b24:	0800993c 	.word	0x0800993c
 8001b28:	2400001c 	.word	0x2400001c
 8001b2c:	24000018 	.word	0x24000018

08001b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_InitTick+0x60>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e021      	b.n	8001b88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_InitTick+0x64>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_InitTick+0x60>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f981 	bl	8001e62 <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f94b 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x68>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	24000024 	.word	0x24000024
 8001b94:	24000018 	.word	0x24000018
 8001b98:	24000020 	.word	0x24000020

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	24000024 	.word	0x24000024
 8001bc0:	2400d0bc 	.word	0x2400d0bc

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2400d0bc 	.word	0x2400d0bc

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	24000024 	.word	0x24000024

08001c24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetREVID+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	5c001000 	.word	0x5c001000

08001c3c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_EnableCompensationCell+0x1c>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_EnableCompensationCell+0x1c>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6213      	str	r3, [r2, #32]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	58000400 	.word	0x58000400

08001c5c <__NVIC_SetPriorityGrouping>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <__NVIC_SetPriorityGrouping+0x40>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x40>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00
 8001ca0:	05fa0000 	.word	0x05fa0000

08001ca4 <__NVIC_GetPriorityGrouping>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	; (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff29 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff40 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff90 	bl	8001d50 <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5f 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff33 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa4 	bl	8001db8 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff fe9e 	bl	8001bc4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e316      	b.n	80024c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a66      	ldr	r2, [pc, #408]	; (8002034 <HAL_DMA_Init+0x1b8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d04a      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_DMA_Init+0x1bc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d045      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a63      	ldr	r2, [pc, #396]	; (800203c <HAL_DMA_Init+0x1c0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d040      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a62      	ldr	r2, [pc, #392]	; (8002040 <HAL_DMA_Init+0x1c4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d03b      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a60      	ldr	r2, [pc, #384]	; (8002044 <HAL_DMA_Init+0x1c8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d036      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <HAL_DMA_Init+0x1cc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d031      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5d      	ldr	r2, [pc, #372]	; (800204c <HAL_DMA_Init+0x1d0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d02c      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a5c      	ldr	r2, [pc, #368]	; (8002050 <HAL_DMA_Init+0x1d4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d027      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a5a      	ldr	r2, [pc, #360]	; (8002054 <HAL_DMA_Init+0x1d8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d022      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a59      	ldr	r2, [pc, #356]	; (8002058 <HAL_DMA_Init+0x1dc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d01d      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a57      	ldr	r2, [pc, #348]	; (800205c <HAL_DMA_Init+0x1e0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d018      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a56      	ldr	r2, [pc, #344]	; (8002060 <HAL_DMA_Init+0x1e4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a54      	ldr	r2, [pc, #336]	; (8002064 <HAL_DMA_Init+0x1e8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00e      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a53      	ldr	r2, [pc, #332]	; (8002068 <HAL_DMA_Init+0x1ec>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d009      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a51      	ldr	r2, [pc, #324]	; (800206c <HAL_DMA_Init+0x1f0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d004      	beq.n	8001f34 <HAL_DMA_Init+0xb8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a50      	ldr	r2, [pc, #320]	; (8002070 <HAL_DMA_Init+0x1f4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA_Init+0xbc>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_DMA_Init+0xbe>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 813b 	beq.w	80021b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a37      	ldr	r2, [pc, #220]	; (8002034 <HAL_DMA_Init+0x1b8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d04a      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a36      	ldr	r2, [pc, #216]	; (8002038 <HAL_DMA_Init+0x1bc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d045      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a34      	ldr	r2, [pc, #208]	; (800203c <HAL_DMA_Init+0x1c0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d040      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a33      	ldr	r2, [pc, #204]	; (8002040 <HAL_DMA_Init+0x1c4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d03b      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a31      	ldr	r2, [pc, #196]	; (8002044 <HAL_DMA_Init+0x1c8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d036      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a30      	ldr	r2, [pc, #192]	; (8002048 <HAL_DMA_Init+0x1cc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d031      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2e      	ldr	r2, [pc, #184]	; (800204c <HAL_DMA_Init+0x1d0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02c      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_DMA_Init+0x1d4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d027      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_DMA_Init+0x1d8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d022      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <HAL_DMA_Init+0x1dc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d01d      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	; (800205c <HAL_DMA_Init+0x1e0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d018      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a27      	ldr	r2, [pc, #156]	; (8002060 <HAL_DMA_Init+0x1e4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a25      	ldr	r2, [pc, #148]	; (8002064 <HAL_DMA_Init+0x1e8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_DMA_Init+0x1ec>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_DMA_Init+0x1f0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_DMA_Init+0x174>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_DMA_Init+0x1f4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <HAL_DMA_Init+0x186>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e007      	b.n	8002012 <HAL_DMA_Init+0x196>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002012:	e02f      	b.n	8002074 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002014:	f7ff fdd6 	bl	8001bc4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b05      	cmp	r3, #5
 8002020:	d928      	bls.n	8002074 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2203      	movs	r2, #3
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e246      	b.n	80024c2 <HAL_DMA_Init+0x646>
 8002034:	40020010 	.word	0x40020010
 8002038:	40020028 	.word	0x40020028
 800203c:	40020040 	.word	0x40020040
 8002040:	40020058 	.word	0x40020058
 8002044:	40020070 	.word	0x40020070
 8002048:	40020088 	.word	0x40020088
 800204c:	400200a0 	.word	0x400200a0
 8002050:	400200b8 	.word	0x400200b8
 8002054:	40020410 	.word	0x40020410
 8002058:	40020428 	.word	0x40020428
 800205c:	40020440 	.word	0x40020440
 8002060:	40020458 	.word	0x40020458
 8002064:	40020470 	.word	0x40020470
 8002068:	40020488 	.word	0x40020488
 800206c:	400204a0 	.word	0x400204a0
 8002070:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1c8      	bne.n	8002014 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4b83      	ldr	r3, [pc, #524]	; (800229c <HAL_DMA_Init+0x420>)
 800208e:	4013      	ands	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800209a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d107      	bne.n	80020d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	4313      	orrs	r3, r2
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80020d8:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <HAL_DMA_Init+0x424>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b71      	ldr	r3, [pc, #452]	; (80022a4 <HAL_DMA_Init+0x428>)
 80020de:	4013      	ands	r3, r2
 80020e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e4:	d328      	bcc.n	8002138 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b28      	cmp	r3, #40	; 0x28
 80020ec:	d903      	bls.n	80020f6 <HAL_DMA_Init+0x27a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b2e      	cmp	r3, #46	; 0x2e
 80020f4:	d917      	bls.n	8002126 <HAL_DMA_Init+0x2aa>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b3e      	cmp	r3, #62	; 0x3e
 80020fc:	d903      	bls.n	8002106 <HAL_DMA_Init+0x28a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b42      	cmp	r3, #66	; 0x42
 8002104:	d90f      	bls.n	8002126 <HAL_DMA_Init+0x2aa>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b46      	cmp	r3, #70	; 0x46
 800210c:	d903      	bls.n	8002116 <HAL_DMA_Init+0x29a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b48      	cmp	r3, #72	; 0x48
 8002114:	d907      	bls.n	8002126 <HAL_DMA_Init+0x2aa>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b4e      	cmp	r3, #78	; 0x4e
 800211c:	d905      	bls.n	800212a <HAL_DMA_Init+0x2ae>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b52      	cmp	r3, #82	; 0x52
 8002124:	d801      	bhi.n	800212a <HAL_DMA_Init+0x2ae>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_DMA_Init+0x2b0>
 800212a:	2300      	movs	r3, #0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002136:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f023 0307 	bic.w	r3, r3, #7
 800214e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	2b04      	cmp	r3, #4
 8002160:	d117      	bne.n	8002192 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00e      	beq.n	8002192 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f002 fc51 	bl	8004a1c <DMA_CheckFifoParam>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2240      	movs	r2, #64	; 0x40
 8002184:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e197      	b.n	80024c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f002 fb8c 	bl	80048b8 <DMA_CalcBaseAndBitshift>
 80021a0:	4603      	mov	r3, r0
 80021a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	223f      	movs	r2, #63	; 0x3f
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	e0cd      	b.n	8002352 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <HAL_DMA_Init+0x42c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d022      	beq.n	8002206 <HAL_DMA_Init+0x38a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a39      	ldr	r2, [pc, #228]	; (80022ac <HAL_DMA_Init+0x430>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01d      	beq.n	8002206 <HAL_DMA_Init+0x38a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_DMA_Init+0x434>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d018      	beq.n	8002206 <HAL_DMA_Init+0x38a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a36      	ldr	r2, [pc, #216]	; (80022b4 <HAL_DMA_Init+0x438>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_DMA_Init+0x38a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a35      	ldr	r2, [pc, #212]	; (80022b8 <HAL_DMA_Init+0x43c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00e      	beq.n	8002206 <HAL_DMA_Init+0x38a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a33      	ldr	r2, [pc, #204]	; (80022bc <HAL_DMA_Init+0x440>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_DMA_Init+0x38a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a32      	ldr	r2, [pc, #200]	; (80022c0 <HAL_DMA_Init+0x444>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d004      	beq.n	8002206 <HAL_DMA_Init+0x38a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a30      	ldr	r2, [pc, #192]	; (80022c4 <HAL_DMA_Init+0x448>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_DMA_Init+0x38e>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_DMA_Init+0x390>
 800220a:	2300      	movs	r3, #0
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8097 	beq.w	8002340 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <HAL_DMA_Init+0x42c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d021      	beq.n	8002260 <HAL_DMA_Init+0x3e4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a22      	ldr	r2, [pc, #136]	; (80022ac <HAL_DMA_Init+0x430>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01c      	beq.n	8002260 <HAL_DMA_Init+0x3e4>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a21      	ldr	r2, [pc, #132]	; (80022b0 <HAL_DMA_Init+0x434>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d017      	beq.n	8002260 <HAL_DMA_Init+0x3e4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <HAL_DMA_Init+0x438>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d012      	beq.n	8002260 <HAL_DMA_Init+0x3e4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <HAL_DMA_Init+0x43c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d00d      	beq.n	8002260 <HAL_DMA_Init+0x3e4>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <HAL_DMA_Init+0x440>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d008      	beq.n	8002260 <HAL_DMA_Init+0x3e4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_DMA_Init+0x444>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <HAL_DMA_Init+0x3e4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_DMA_Init+0x448>)
 800225e:	4293      	cmp	r3, r2
 8002260:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_DMA_Init+0x44c>)
 800227e:	4013      	ands	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d020      	beq.n	80022cc <HAL_DMA_Init+0x450>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b80      	cmp	r3, #128	; 0x80
 8002290:	d102      	bne.n	8002298 <HAL_DMA_Init+0x41c>
 8002292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002296:	e01a      	b.n	80022ce <HAL_DMA_Init+0x452>
 8002298:	2300      	movs	r3, #0
 800229a:	e018      	b.n	80022ce <HAL_DMA_Init+0x452>
 800229c:	fe10803f 	.word	0xfe10803f
 80022a0:	5c001000 	.word	0x5c001000
 80022a4:	ffff0000 	.word	0xffff0000
 80022a8:	58025408 	.word	0x58025408
 80022ac:	5802541c 	.word	0x5802541c
 80022b0:	58025430 	.word	0x58025430
 80022b4:	58025444 	.word	0x58025444
 80022b8:	58025458 	.word	0x58025458
 80022bc:	5802546c 	.word	0x5802546c
 80022c0:	58025480 	.word	0x58025480
 80022c4:	58025494 	.word	0x58025494
 80022c8:	fffe000f 	.word	0xfffe000f
 80022cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68d2      	ldr	r2, [r2, #12]
 80022d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b6e      	ldr	r3, [pc, #440]	; (80024cc <HAL_DMA_Init+0x650>)
 8002314:	4413      	add	r3, r2
 8002316:	4a6e      	ldr	r2, [pc, #440]	; (80024d0 <HAL_DMA_Init+0x654>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f002 fac7 	bl	80048b8 <DMA_CalcBaseAndBitshift>
 800232a:	4603      	mov	r3, r0
 800232c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2201      	movs	r2, #1
 8002338:	409a      	lsls	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	e008      	b.n	8002352 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2203      	movs	r2, #3
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0b7      	b.n	80024c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5f      	ldr	r2, [pc, #380]	; (80024d4 <HAL_DMA_Init+0x658>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d072      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5d      	ldr	r2, [pc, #372]	; (80024d8 <HAL_DMA_Init+0x65c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d06d      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5c      	ldr	r2, [pc, #368]	; (80024dc <HAL_DMA_Init+0x660>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d068      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_DMA_Init+0x664>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d063      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a59      	ldr	r2, [pc, #356]	; (80024e4 <HAL_DMA_Init+0x668>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d05e      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a57      	ldr	r2, [pc, #348]	; (80024e8 <HAL_DMA_Init+0x66c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d059      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a56      	ldr	r2, [pc, #344]	; (80024ec <HAL_DMA_Init+0x670>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d054      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a54      	ldr	r2, [pc, #336]	; (80024f0 <HAL_DMA_Init+0x674>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d04f      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a53      	ldr	r2, [pc, #332]	; (80024f4 <HAL_DMA_Init+0x678>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d04a      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a51      	ldr	r2, [pc, #324]	; (80024f8 <HAL_DMA_Init+0x67c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d045      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a50      	ldr	r2, [pc, #320]	; (80024fc <HAL_DMA_Init+0x680>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d040      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a4e      	ldr	r2, [pc, #312]	; (8002500 <HAL_DMA_Init+0x684>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d03b      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <HAL_DMA_Init+0x688>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d036      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_DMA_Init+0x68c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d031      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_DMA_Init+0x690>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d02c      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a48      	ldr	r2, [pc, #288]	; (8002510 <HAL_DMA_Init+0x694>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d027      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a47      	ldr	r2, [pc, #284]	; (8002514 <HAL_DMA_Init+0x698>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d022      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a45      	ldr	r2, [pc, #276]	; (8002518 <HAL_DMA_Init+0x69c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01d      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a44      	ldr	r2, [pc, #272]	; (800251c <HAL_DMA_Init+0x6a0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d018      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a42      	ldr	r2, [pc, #264]	; (8002520 <HAL_DMA_Init+0x6a4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a41      	ldr	r2, [pc, #260]	; (8002524 <HAL_DMA_Init+0x6a8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a3f      	ldr	r2, [pc, #252]	; (8002528 <HAL_DMA_Init+0x6ac>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a3e      	ldr	r2, [pc, #248]	; (800252c <HAL_DMA_Init+0x6b0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_DMA_Init+0x5c6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3c      	ldr	r2, [pc, #240]	; (8002530 <HAL_DMA_Init+0x6b4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_DMA_Init+0x5ca>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_DMA_Init+0x5cc>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d032      	beq.n	80024b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f002 fb61 	bl	8004b14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b80      	cmp	r3, #128	; 0x80
 8002458:	d102      	bne.n	8002460 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002474:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d010      	beq.n	80024a0 <HAL_DMA_Init+0x624>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b08      	cmp	r3, #8
 8002484:	d80c      	bhi.n	80024a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f002 fbde 	bl	8004c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	e008      	b.n	80024b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	a7fdabf8 	.word	0xa7fdabf8
 80024d0:	cccccccd 	.word	0xcccccccd
 80024d4:	40020010 	.word	0x40020010
 80024d8:	40020028 	.word	0x40020028
 80024dc:	40020040 	.word	0x40020040
 80024e0:	40020058 	.word	0x40020058
 80024e4:	40020070 	.word	0x40020070
 80024e8:	40020088 	.word	0x40020088
 80024ec:	400200a0 	.word	0x400200a0
 80024f0:	400200b8 	.word	0x400200b8
 80024f4:	40020410 	.word	0x40020410
 80024f8:	40020428 	.word	0x40020428
 80024fc:	40020440 	.word	0x40020440
 8002500:	40020458 	.word	0x40020458
 8002504:	40020470 	.word	0x40020470
 8002508:	40020488 	.word	0x40020488
 800250c:	400204a0 	.word	0x400204a0
 8002510:	400204b8 	.word	0x400204b8
 8002514:	58025408 	.word	0x58025408
 8002518:	5802541c 	.word	0x5802541c
 800251c:	58025430 	.word	0x58025430
 8002520:	58025444 	.word	0x58025444
 8002524:	58025458 	.word	0x58025458
 8002528:	5802546c 	.word	0x5802546c
 800252c:	58025480 	.word	0x58025480
 8002530:	58025494 	.word	0x58025494

08002534 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0ec      	b.n	800272a <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_DMA_Start+0x2a>
 800255a:	2302      	movs	r3, #2
 800255c:	e0e5      	b.n	800272a <HAL_DMA_Start+0x1f6>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	f040 80d0 	bne.w	8002714 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6b      	ldr	r2, [pc, #428]	; (8002734 <HAL_DMA_Start+0x200>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04a      	beq.n	8002622 <HAL_DMA_Start+0xee>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a69      	ldr	r2, [pc, #420]	; (8002738 <HAL_DMA_Start+0x204>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d045      	beq.n	8002622 <HAL_DMA_Start+0xee>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a68      	ldr	r2, [pc, #416]	; (800273c <HAL_DMA_Start+0x208>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d040      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a66      	ldr	r2, [pc, #408]	; (8002740 <HAL_DMA_Start+0x20c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d03b      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_DMA_Start+0x210>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d036      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a63      	ldr	r2, [pc, #396]	; (8002748 <HAL_DMA_Start+0x214>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d031      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a62      	ldr	r2, [pc, #392]	; (800274c <HAL_DMA_Start+0x218>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d02c      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a60      	ldr	r2, [pc, #384]	; (8002750 <HAL_DMA_Start+0x21c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d027      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a5f      	ldr	r2, [pc, #380]	; (8002754 <HAL_DMA_Start+0x220>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d022      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5d      	ldr	r2, [pc, #372]	; (8002758 <HAL_DMA_Start+0x224>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01d      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5c      	ldr	r2, [pc, #368]	; (800275c <HAL_DMA_Start+0x228>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <HAL_DMA_Start+0x22c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_DMA_Start+0xee>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_DMA_Start+0x230>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_DMA_Start+0xee>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a57      	ldr	r2, [pc, #348]	; (8002768 <HAL_DMA_Start+0x234>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_DMA_Start+0xee>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a56      	ldr	r2, [pc, #344]	; (800276c <HAL_DMA_Start+0x238>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_DMA_Start+0xee>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a54      	ldr	r2, [pc, #336]	; (8002770 <HAL_DMA_Start+0x23c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <HAL_DMA_Start+0x100>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e007      	b.n	8002644 <HAL_DMA_Start+0x110>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f001 ff88 	bl	8004560 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a37      	ldr	r2, [pc, #220]	; (8002734 <HAL_DMA_Start+0x200>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d04a      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a36      	ldr	r2, [pc, #216]	; (8002738 <HAL_DMA_Start+0x204>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d045      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_DMA_Start+0x208>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d040      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a33      	ldr	r2, [pc, #204]	; (8002740 <HAL_DMA_Start+0x20c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d03b      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a31      	ldr	r2, [pc, #196]	; (8002744 <HAL_DMA_Start+0x210>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d036      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a30      	ldr	r2, [pc, #192]	; (8002748 <HAL_DMA_Start+0x214>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d031      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2e      	ldr	r2, [pc, #184]	; (800274c <HAL_DMA_Start+0x218>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d02c      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_DMA_Start+0x21c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d027      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <HAL_DMA_Start+0x220>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d022      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_DMA_Start+0x224>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d01d      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a28      	ldr	r2, [pc, #160]	; (800275c <HAL_DMA_Start+0x228>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d018      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_DMA_Start+0x22c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a25      	ldr	r2, [pc, #148]	; (8002764 <HAL_DMA_Start+0x230>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00e      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_DMA_Start+0x234>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <HAL_DMA_Start+0x238>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_DMA_Start+0x1bc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_DMA_Start+0x23c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d108      	bne.n	8002702 <HAL_DMA_Start+0x1ce>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e012      	b.n	8002728 <HAL_DMA_Start+0x1f4>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0201 	orr.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e009      	b.n	8002728 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002722:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002728:	7dfb      	ldrb	r3, [r7, #23]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40020010 	.word	0x40020010
 8002738:	40020028 	.word	0x40020028
 800273c:	40020040 	.word	0x40020040
 8002740:	40020058 	.word	0x40020058
 8002744:	40020070 	.word	0x40020070
 8002748:	40020088 	.word	0x40020088
 800274c:	400200a0 	.word	0x400200a0
 8002750:	400200b8 	.word	0x400200b8
 8002754:	40020410 	.word	0x40020410
 8002758:	40020428 	.word	0x40020428
 800275c:	40020440 	.word	0x40020440
 8002760:	40020458 	.word	0x40020458
 8002764:	40020470 	.word	0x40020470
 8002768:	40020488 	.word	0x40020488
 800276c:	400204a0 	.word	0x400204a0
 8002770:	400204b8 	.word	0x400204b8

08002774 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e226      	b.n	8002bde <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_DMA_Start_IT+0x2a>
 800279a:	2302      	movs	r3, #2
 800279c:	e21f      	b.n	8002bde <HAL_DMA_Start_IT+0x46a>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	f040 820a 	bne.w	8002bc8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a68      	ldr	r2, [pc, #416]	; (8002968 <HAL_DMA_Start_IT+0x1f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d04a      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a66      	ldr	r2, [pc, #408]	; (800296c <HAL_DMA_Start_IT+0x1f8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d045      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a65      	ldr	r2, [pc, #404]	; (8002970 <HAL_DMA_Start_IT+0x1fc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d040      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a63      	ldr	r2, [pc, #396]	; (8002974 <HAL_DMA_Start_IT+0x200>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d03b      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a62      	ldr	r2, [pc, #392]	; (8002978 <HAL_DMA_Start_IT+0x204>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d036      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a60      	ldr	r2, [pc, #384]	; (800297c <HAL_DMA_Start_IT+0x208>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d031      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5f      	ldr	r2, [pc, #380]	; (8002980 <HAL_DMA_Start_IT+0x20c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d02c      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <HAL_DMA_Start_IT+0x210>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d027      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a5c      	ldr	r2, [pc, #368]	; (8002988 <HAL_DMA_Start_IT+0x214>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5a      	ldr	r2, [pc, #360]	; (800298c <HAL_DMA_Start_IT+0x218>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01d      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a59      	ldr	r2, [pc, #356]	; (8002990 <HAL_DMA_Start_IT+0x21c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a57      	ldr	r2, [pc, #348]	; (8002994 <HAL_DMA_Start_IT+0x220>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a56      	ldr	r2, [pc, #344]	; (8002998 <HAL_DMA_Start_IT+0x224>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a54      	ldr	r2, [pc, #336]	; (800299c <HAL_DMA_Start_IT+0x228>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a53      	ldr	r2, [pc, #332]	; (80029a0 <HAL_DMA_Start_IT+0x22c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_DMA_Start_IT+0xee>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <HAL_DMA_Start_IT+0x230>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d108      	bne.n	8002874 <HAL_DMA_Start_IT+0x100>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e007      	b.n	8002884 <HAL_DMA_Start_IT+0x110>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f001 fe68 	bl	8004560 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a34      	ldr	r2, [pc, #208]	; (8002968 <HAL_DMA_Start_IT+0x1f4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d04a      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a33      	ldr	r2, [pc, #204]	; (800296c <HAL_DMA_Start_IT+0x1f8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d045      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a31      	ldr	r2, [pc, #196]	; (8002970 <HAL_DMA_Start_IT+0x1fc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d040      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a30      	ldr	r2, [pc, #192]	; (8002974 <HAL_DMA_Start_IT+0x200>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d03b      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2e      	ldr	r2, [pc, #184]	; (8002978 <HAL_DMA_Start_IT+0x204>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d036      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2d      	ldr	r2, [pc, #180]	; (800297c <HAL_DMA_Start_IT+0x208>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d031      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a2b      	ldr	r2, [pc, #172]	; (8002980 <HAL_DMA_Start_IT+0x20c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d02c      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a2a      	ldr	r2, [pc, #168]	; (8002984 <HAL_DMA_Start_IT+0x210>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d027      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a28      	ldr	r2, [pc, #160]	; (8002988 <HAL_DMA_Start_IT+0x214>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d022      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a27      	ldr	r2, [pc, #156]	; (800298c <HAL_DMA_Start_IT+0x218>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d01d      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a25      	ldr	r2, [pc, #148]	; (8002990 <HAL_DMA_Start_IT+0x21c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d018      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <HAL_DMA_Start_IT+0x220>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_DMA_Start_IT+0x224>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00e      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a21      	ldr	r2, [pc, #132]	; (800299c <HAL_DMA_Start_IT+0x228>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <HAL_DMA_Start_IT+0x22c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_DMA_Start_IT+0x1bc>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <HAL_DMA_Start_IT+0x230>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_DMA_Start_IT+0x1c0>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_DMA_Start_IT+0x1c2>
 8002934:	2300      	movs	r3, #0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d036      	beq.n	80029a8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 021e 	bic.w	r2, r3, #30
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0216 	orr.w	r2, r2, #22
 800294c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03e      	beq.n	80029d4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0208 	orr.w	r2, r2, #8
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e035      	b.n	80029d4 <HAL_DMA_Start_IT+0x260>
 8002968:	40020010 	.word	0x40020010
 800296c:	40020028 	.word	0x40020028
 8002970:	40020040 	.word	0x40020040
 8002974:	40020058 	.word	0x40020058
 8002978:	40020070 	.word	0x40020070
 800297c:	40020088 	.word	0x40020088
 8002980:	400200a0 	.word	0x400200a0
 8002984:	400200b8 	.word	0x400200b8
 8002988:	40020410 	.word	0x40020410
 800298c:	40020428 	.word	0x40020428
 8002990:	40020440 	.word	0x40020440
 8002994:	40020458 	.word	0x40020458
 8002998:	40020470 	.word	0x40020470
 800299c:	40020488 	.word	0x40020488
 80029a0:	400204a0 	.word	0x400204a0
 80029a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 020e 	bic.w	r2, r3, #14
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 020a 	orr.w	r2, r2, #10
 80029ba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0204 	orr.w	r2, r2, #4
 80029d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a83      	ldr	r2, [pc, #524]	; (8002be8 <HAL_DMA_Start_IT+0x474>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d072      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a82      	ldr	r2, [pc, #520]	; (8002bec <HAL_DMA_Start_IT+0x478>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d06d      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a80      	ldr	r2, [pc, #512]	; (8002bf0 <HAL_DMA_Start_IT+0x47c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d068      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a7f      	ldr	r2, [pc, #508]	; (8002bf4 <HAL_DMA_Start_IT+0x480>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d063      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7d      	ldr	r2, [pc, #500]	; (8002bf8 <HAL_DMA_Start_IT+0x484>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d05e      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7c      	ldr	r2, [pc, #496]	; (8002bfc <HAL_DMA_Start_IT+0x488>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d059      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7a      	ldr	r2, [pc, #488]	; (8002c00 <HAL_DMA_Start_IT+0x48c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d054      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a79      	ldr	r2, [pc, #484]	; (8002c04 <HAL_DMA_Start_IT+0x490>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d04f      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a77      	ldr	r2, [pc, #476]	; (8002c08 <HAL_DMA_Start_IT+0x494>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d04a      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a76      	ldr	r2, [pc, #472]	; (8002c0c <HAL_DMA_Start_IT+0x498>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d045      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a74      	ldr	r2, [pc, #464]	; (8002c10 <HAL_DMA_Start_IT+0x49c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d040      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a73      	ldr	r2, [pc, #460]	; (8002c14 <HAL_DMA_Start_IT+0x4a0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d03b      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a71      	ldr	r2, [pc, #452]	; (8002c18 <HAL_DMA_Start_IT+0x4a4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d036      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a70      	ldr	r2, [pc, #448]	; (8002c1c <HAL_DMA_Start_IT+0x4a8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d031      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a6e      	ldr	r2, [pc, #440]	; (8002c20 <HAL_DMA_Start_IT+0x4ac>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02c      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a6d      	ldr	r2, [pc, #436]	; (8002c24 <HAL_DMA_Start_IT+0x4b0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d027      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a6b      	ldr	r2, [pc, #428]	; (8002c28 <HAL_DMA_Start_IT+0x4b4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <HAL_DMA_Start_IT+0x4b8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01d      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a68      	ldr	r2, [pc, #416]	; (8002c30 <HAL_DMA_Start_IT+0x4bc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <HAL_DMA_Start_IT+0x4c0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a65      	ldr	r2, [pc, #404]	; (8002c38 <HAL_DMA_Start_IT+0x4c4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a64      	ldr	r2, [pc, #400]	; (8002c3c <HAL_DMA_Start_IT+0x4c8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a62      	ldr	r2, [pc, #392]	; (8002c40 <HAL_DMA_Start_IT+0x4cc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x350>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a61      	ldr	r2, [pc, #388]	; (8002c44 <HAL_DMA_Start_IT+0x4d0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DMA_Start_IT+0x354>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_DMA_Start_IT+0x356>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01a      	beq.n	8002b04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a37      	ldr	r2, [pc, #220]	; (8002be8 <HAL_DMA_Start_IT+0x474>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d04a      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a36      	ldr	r2, [pc, #216]	; (8002bec <HAL_DMA_Start_IT+0x478>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d045      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <HAL_DMA_Start_IT+0x47c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d040      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <HAL_DMA_Start_IT+0x480>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d03b      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a31      	ldr	r2, [pc, #196]	; (8002bf8 <HAL_DMA_Start_IT+0x484>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d036      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a30      	ldr	r2, [pc, #192]	; (8002bfc <HAL_DMA_Start_IT+0x488>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d031      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2e      	ldr	r2, [pc, #184]	; (8002c00 <HAL_DMA_Start_IT+0x48c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d02c      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2d      	ldr	r2, [pc, #180]	; (8002c04 <HAL_DMA_Start_IT+0x490>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d027      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2b      	ldr	r2, [pc, #172]	; (8002c08 <HAL_DMA_Start_IT+0x494>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d022      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2a      	ldr	r2, [pc, #168]	; (8002c0c <HAL_DMA_Start_IT+0x498>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d01d      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a28      	ldr	r2, [pc, #160]	; (8002c10 <HAL_DMA_Start_IT+0x49c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d018      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <HAL_DMA_Start_IT+0x4a0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d013      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <HAL_DMA_Start_IT+0x4a4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00e      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a24      	ldr	r2, [pc, #144]	; (8002c1c <HAL_DMA_Start_IT+0x4a8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_DMA_Start_IT+0x4ac>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x430>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <HAL_DMA_Start_IT+0x4b0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d108      	bne.n	8002bb6 <HAL_DMA_Start_IT+0x442>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e012      	b.n	8002bdc <HAL_DMA_Start_IT+0x468>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e009      	b.n	8002bdc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40020010 	.word	0x40020010
 8002bec:	40020028 	.word	0x40020028
 8002bf0:	40020040 	.word	0x40020040
 8002bf4:	40020058 	.word	0x40020058
 8002bf8:	40020070 	.word	0x40020070
 8002bfc:	40020088 	.word	0x40020088
 8002c00:	400200a0 	.word	0x400200a0
 8002c04:	400200b8 	.word	0x400200b8
 8002c08:	40020410 	.word	0x40020410
 8002c0c:	40020428 	.word	0x40020428
 8002c10:	40020440 	.word	0x40020440
 8002c14:	40020458 	.word	0x40020458
 8002c18:	40020470 	.word	0x40020470
 8002c1c:	40020488 	.word	0x40020488
 8002c20:	400204a0 	.word	0x400204a0
 8002c24:	400204b8 	.word	0x400204b8
 8002c28:	58025408 	.word	0x58025408
 8002c2c:	5802541c 	.word	0x5802541c
 8002c30:	58025430 	.word	0x58025430
 8002c34:	58025444 	.word	0x58025444
 8002c38:	58025458 	.word	0x58025458
 8002c3c:	5802546c 	.word	0x5802546c
 8002c40:	58025480 	.word	0x58025480
 8002c44:	58025494 	.word	0x58025494

08002c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7fe ffb8 	bl	8001bc4 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e2dc      	b.n	800321a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d008      	beq.n	8002c7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e2cd      	b.n	800321a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a76      	ldr	r2, [pc, #472]	; (8002e5c <HAL_DMA_Abort+0x214>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04a      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a74      	ldr	r2, [pc, #464]	; (8002e60 <HAL_DMA_Abort+0x218>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d045      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a73      	ldr	r2, [pc, #460]	; (8002e64 <HAL_DMA_Abort+0x21c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d040      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a71      	ldr	r2, [pc, #452]	; (8002e68 <HAL_DMA_Abort+0x220>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d03b      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a70      	ldr	r2, [pc, #448]	; (8002e6c <HAL_DMA_Abort+0x224>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d036      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	; (8002e70 <HAL_DMA_Abort+0x228>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6d      	ldr	r2, [pc, #436]	; (8002e74 <HAL_DMA_Abort+0x22c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02c      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6b      	ldr	r2, [pc, #428]	; (8002e78 <HAL_DMA_Abort+0x230>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d027      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6a      	ldr	r2, [pc, #424]	; (8002e7c <HAL_DMA_Abort+0x234>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a68      	ldr	r2, [pc, #416]	; (8002e80 <HAL_DMA_Abort+0x238>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a67      	ldr	r2, [pc, #412]	; (8002e84 <HAL_DMA_Abort+0x23c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d018      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a65      	ldr	r2, [pc, #404]	; (8002e88 <HAL_DMA_Abort+0x240>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a64      	ldr	r2, [pc, #400]	; (8002e8c <HAL_DMA_Abort+0x244>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a62      	ldr	r2, [pc, #392]	; (8002e90 <HAL_DMA_Abort+0x248>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a61      	ldr	r2, [pc, #388]	; (8002e94 <HAL_DMA_Abort+0x24c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_Abort+0xd6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5f      	ldr	r2, [pc, #380]	; (8002e98 <HAL_DMA_Abort+0x250>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_DMA_Abort+0xda>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_DMA_Abort+0xdc>
 8002d22:	2300      	movs	r3, #0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 021e 	bic.w	r2, r2, #30
 8002d36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	e00a      	b.n	8002d66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 020e 	bic.w	r2, r2, #14
 8002d5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a3c      	ldr	r2, [pc, #240]	; (8002e5c <HAL_DMA_Abort+0x214>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d072      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3a      	ldr	r2, [pc, #232]	; (8002e60 <HAL_DMA_Abort+0x218>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d06d      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a39      	ldr	r2, [pc, #228]	; (8002e64 <HAL_DMA_Abort+0x21c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d068      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a37      	ldr	r2, [pc, #220]	; (8002e68 <HAL_DMA_Abort+0x220>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d063      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <HAL_DMA_Abort+0x224>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d05e      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a34      	ldr	r2, [pc, #208]	; (8002e70 <HAL_DMA_Abort+0x228>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d059      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <HAL_DMA_Abort+0x22c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d054      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a31      	ldr	r2, [pc, #196]	; (8002e78 <HAL_DMA_Abort+0x230>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d04f      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a30      	ldr	r2, [pc, #192]	; (8002e7c <HAL_DMA_Abort+0x234>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d04a      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2e      	ldr	r2, [pc, #184]	; (8002e80 <HAL_DMA_Abort+0x238>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d045      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <HAL_DMA_Abort+0x23c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d040      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <HAL_DMA_Abort+0x240>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d03b      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <HAL_DMA_Abort+0x244>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d036      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <HAL_DMA_Abort+0x248>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d031      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <HAL_DMA_Abort+0x24c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d02c      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a25      	ldr	r2, [pc, #148]	; (8002e98 <HAL_DMA_Abort+0x250>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d027      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a24      	ldr	r2, [pc, #144]	; (8002e9c <HAL_DMA_Abort+0x254>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d022      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <HAL_DMA_Abort+0x258>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01d      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <HAL_DMA_Abort+0x25c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d018      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <HAL_DMA_Abort+0x260>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_DMA_Abort+0x264>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00e      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <HAL_DMA_Abort+0x268>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d009      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <HAL_DMA_Abort+0x26c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_DMA_Abort+0x20e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <HAL_DMA_Abort+0x270>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d132      	bne.n	8002ebc <HAL_DMA_Abort+0x274>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e031      	b.n	8002ebe <HAL_DMA_Abort+0x276>
 8002e5a:	bf00      	nop
 8002e5c:	40020010 	.word	0x40020010
 8002e60:	40020028 	.word	0x40020028
 8002e64:	40020040 	.word	0x40020040
 8002e68:	40020058 	.word	0x40020058
 8002e6c:	40020070 	.word	0x40020070
 8002e70:	40020088 	.word	0x40020088
 8002e74:	400200a0 	.word	0x400200a0
 8002e78:	400200b8 	.word	0x400200b8
 8002e7c:	40020410 	.word	0x40020410
 8002e80:	40020428 	.word	0x40020428
 8002e84:	40020440 	.word	0x40020440
 8002e88:	40020458 	.word	0x40020458
 8002e8c:	40020470 	.word	0x40020470
 8002e90:	40020488 	.word	0x40020488
 8002e94:	400204a0 	.word	0x400204a0
 8002e98:	400204b8 	.word	0x400204b8
 8002e9c:	58025408 	.word	0x58025408
 8002ea0:	5802541c 	.word	0x5802541c
 8002ea4:	58025430 	.word	0x58025430
 8002ea8:	58025444 	.word	0x58025444
 8002eac:	58025458 	.word	0x58025458
 8002eb0:	5802546c 	.word	0x5802546c
 8002eb4:	58025480 	.word	0x58025480
 8002eb8:	58025494 	.word	0x58025494
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6d      	ldr	r2, [pc, #436]	; (800308c <HAL_DMA_Abort+0x444>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04a      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6b      	ldr	r2, [pc, #428]	; (8003090 <HAL_DMA_Abort+0x448>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d045      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6a      	ldr	r2, [pc, #424]	; (8003094 <HAL_DMA_Abort+0x44c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d040      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a68      	ldr	r2, [pc, #416]	; (8003098 <HAL_DMA_Abort+0x450>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03b      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a67      	ldr	r2, [pc, #412]	; (800309c <HAL_DMA_Abort+0x454>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d036      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a65      	ldr	r2, [pc, #404]	; (80030a0 <HAL_DMA_Abort+0x458>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a64      	ldr	r2, [pc, #400]	; (80030a4 <HAL_DMA_Abort+0x45c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d02c      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a62      	ldr	r2, [pc, #392]	; (80030a8 <HAL_DMA_Abort+0x460>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a61      	ldr	r2, [pc, #388]	; (80030ac <HAL_DMA_Abort+0x464>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a5f      	ldr	r2, [pc, #380]	; (80030b0 <HAL_DMA_Abort+0x468>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5e      	ldr	r2, [pc, #376]	; (80030b4 <HAL_DMA_Abort+0x46c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5c      	ldr	r2, [pc, #368]	; (80030b8 <HAL_DMA_Abort+0x470>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5b      	ldr	r2, [pc, #364]	; (80030bc <HAL_DMA_Abort+0x474>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a59      	ldr	r2, [pc, #356]	; (80030c0 <HAL_DMA_Abort+0x478>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_DMA_Abort+0x47c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Abort+0x32a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a56      	ldr	r2, [pc, #344]	; (80030c8 <HAL_DMA_Abort+0x480>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d108      	bne.n	8002f84 <HAL_DMA_Abort+0x33c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e007      	b.n	8002f94 <HAL_DMA_Abort+0x34c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f94:	e013      	b.n	8002fbe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f96:	f7fe fe15 	bl	8001bc4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d90c      	bls.n	8002fbe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e12d      	b.n	800321a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e5      	bne.n	8002f96 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2f      	ldr	r2, [pc, #188]	; (800308c <HAL_DMA_Abort+0x444>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d04a      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2d      	ldr	r2, [pc, #180]	; (8003090 <HAL_DMA_Abort+0x448>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d045      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <HAL_DMA_Abort+0x44c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d040      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2a      	ldr	r2, [pc, #168]	; (8003098 <HAL_DMA_Abort+0x450>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d03b      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a29      	ldr	r2, [pc, #164]	; (800309c <HAL_DMA_Abort+0x454>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d036      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a27      	ldr	r2, [pc, #156]	; (80030a0 <HAL_DMA_Abort+0x458>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d031      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a26      	ldr	r2, [pc, #152]	; (80030a4 <HAL_DMA_Abort+0x45c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d02c      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <HAL_DMA_Abort+0x460>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d027      	beq.n	800306a <HAL_DMA_Abort+0x422>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a23      	ldr	r2, [pc, #140]	; (80030ac <HAL_DMA_Abort+0x464>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d022      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <HAL_DMA_Abort+0x468>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01d      	beq.n	800306a <HAL_DMA_Abort+0x422>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a20      	ldr	r2, [pc, #128]	; (80030b4 <HAL_DMA_Abort+0x46c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d018      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_DMA_Abort+0x470>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <HAL_DMA_Abort+0x474>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_DMA_Abort+0x422>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_DMA_Abort+0x478>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_DMA_Abort+0x47c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_DMA_Abort+0x422>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_DMA_Abort+0x480>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_DMA_Abort+0x426>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_DMA_Abort+0x428>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02b      	beq.n	80030cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	223f      	movs	r2, #63	; 0x3f
 8003084:	409a      	lsls	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	e02a      	b.n	80030e2 <HAL_DMA_Abort+0x49a>
 800308c:	40020010 	.word	0x40020010
 8003090:	40020028 	.word	0x40020028
 8003094:	40020040 	.word	0x40020040
 8003098:	40020058 	.word	0x40020058
 800309c:	40020070 	.word	0x40020070
 80030a0:	40020088 	.word	0x40020088
 80030a4:	400200a0 	.word	0x400200a0
 80030a8:	400200b8 	.word	0x400200b8
 80030ac:	40020410 	.word	0x40020410
 80030b0:	40020428 	.word	0x40020428
 80030b4:	40020440 	.word	0x40020440
 80030b8:	40020458 	.word	0x40020458
 80030bc:	40020470 	.word	0x40020470
 80030c0:	40020488 	.word	0x40020488
 80030c4:	400204a0 	.word	0x400204a0
 80030c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2201      	movs	r2, #1
 80030dc:	409a      	lsls	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <HAL_DMA_Abort+0x5dc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d072      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a4d      	ldr	r2, [pc, #308]	; (8003228 <HAL_DMA_Abort+0x5e0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d06d      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a4c      	ldr	r2, [pc, #304]	; (800322c <HAL_DMA_Abort+0x5e4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d068      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a4a      	ldr	r2, [pc, #296]	; (8003230 <HAL_DMA_Abort+0x5e8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d063      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a49      	ldr	r2, [pc, #292]	; (8003234 <HAL_DMA_Abort+0x5ec>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d05e      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a47      	ldr	r2, [pc, #284]	; (8003238 <HAL_DMA_Abort+0x5f0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d059      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a46      	ldr	r2, [pc, #280]	; (800323c <HAL_DMA_Abort+0x5f4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d054      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a44      	ldr	r2, [pc, #272]	; (8003240 <HAL_DMA_Abort+0x5f8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d04f      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a43      	ldr	r2, [pc, #268]	; (8003244 <HAL_DMA_Abort+0x5fc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d04a      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a41      	ldr	r2, [pc, #260]	; (8003248 <HAL_DMA_Abort+0x600>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d045      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a40      	ldr	r2, [pc, #256]	; (800324c <HAL_DMA_Abort+0x604>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d040      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a3e      	ldr	r2, [pc, #248]	; (8003250 <HAL_DMA_Abort+0x608>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d03b      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3d      	ldr	r2, [pc, #244]	; (8003254 <HAL_DMA_Abort+0x60c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d036      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <HAL_DMA_Abort+0x610>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d031      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a3a      	ldr	r2, [pc, #232]	; (800325c <HAL_DMA_Abort+0x614>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d02c      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a38      	ldr	r2, [pc, #224]	; (8003260 <HAL_DMA_Abort+0x618>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d027      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a37      	ldr	r2, [pc, #220]	; (8003264 <HAL_DMA_Abort+0x61c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d022      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a35      	ldr	r2, [pc, #212]	; (8003268 <HAL_DMA_Abort+0x620>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01d      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a34      	ldr	r2, [pc, #208]	; (800326c <HAL_DMA_Abort+0x624>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d018      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a32      	ldr	r2, [pc, #200]	; (8003270 <HAL_DMA_Abort+0x628>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a31      	ldr	r2, [pc, #196]	; (8003274 <HAL_DMA_Abort+0x62c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00e      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <HAL_DMA_Abort+0x630>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d009      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2e      	ldr	r2, [pc, #184]	; (800327c <HAL_DMA_Abort+0x634>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_DMA_Abort+0x58a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <HAL_DMA_Abort+0x638>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_DMA_Abort+0x58e>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_DMA_Abort+0x590>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003206:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40020010 	.word	0x40020010
 8003228:	40020028 	.word	0x40020028
 800322c:	40020040 	.word	0x40020040
 8003230:	40020058 	.word	0x40020058
 8003234:	40020070 	.word	0x40020070
 8003238:	40020088 	.word	0x40020088
 800323c:	400200a0 	.word	0x400200a0
 8003240:	400200b8 	.word	0x400200b8
 8003244:	40020410 	.word	0x40020410
 8003248:	40020428 	.word	0x40020428
 800324c:	40020440 	.word	0x40020440
 8003250:	40020458 	.word	0x40020458
 8003254:	40020470 	.word	0x40020470
 8003258:	40020488 	.word	0x40020488
 800325c:	400204a0 	.word	0x400204a0
 8003260:	400204b8 	.word	0x400204b8
 8003264:	58025408 	.word	0x58025408
 8003268:	5802541c 	.word	0x5802541c
 800326c:	58025430 	.word	0x58025430
 8003270:	58025444 	.word	0x58025444
 8003274:	58025458 	.word	0x58025458
 8003278:	5802546c 	.word	0x5802546c
 800327c:	58025480 	.word	0x58025480
 8003280:	58025494 	.word	0x58025494

08003284 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e205      	b.n	80036a2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d004      	beq.n	80032ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e1fa      	b.n	80036a2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a8c      	ldr	r2, [pc, #560]	; (80034e4 <HAL_DMA_Abort_IT+0x260>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d04a      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a8b      	ldr	r2, [pc, #556]	; (80034e8 <HAL_DMA_Abort_IT+0x264>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d045      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a89      	ldr	r2, [pc, #548]	; (80034ec <HAL_DMA_Abort_IT+0x268>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d040      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a88      	ldr	r2, [pc, #544]	; (80034f0 <HAL_DMA_Abort_IT+0x26c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d03b      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a86      	ldr	r2, [pc, #536]	; (80034f4 <HAL_DMA_Abort_IT+0x270>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d036      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a85      	ldr	r2, [pc, #532]	; (80034f8 <HAL_DMA_Abort_IT+0x274>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d031      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a83      	ldr	r2, [pc, #524]	; (80034fc <HAL_DMA_Abort_IT+0x278>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d02c      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a82      	ldr	r2, [pc, #520]	; (8003500 <HAL_DMA_Abort_IT+0x27c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d027      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a80      	ldr	r2, [pc, #512]	; (8003504 <HAL_DMA_Abort_IT+0x280>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d022      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7f      	ldr	r2, [pc, #508]	; (8003508 <HAL_DMA_Abort_IT+0x284>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d01d      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a7d      	ldr	r2, [pc, #500]	; (800350c <HAL_DMA_Abort_IT+0x288>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d018      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7c      	ldr	r2, [pc, #496]	; (8003510 <HAL_DMA_Abort_IT+0x28c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d013      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a7a      	ldr	r2, [pc, #488]	; (8003514 <HAL_DMA_Abort_IT+0x290>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00e      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a79      	ldr	r2, [pc, #484]	; (8003518 <HAL_DMA_Abort_IT+0x294>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d009      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a77      	ldr	r2, [pc, #476]	; (800351c <HAL_DMA_Abort_IT+0x298>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_DMA_Abort_IT+0xc8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a76      	ldr	r2, [pc, #472]	; (8003520 <HAL_DMA_Abort_IT+0x29c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_DMA_Abort_IT+0xcc>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_DMA_Abort_IT+0xce>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d065      	beq.n	8003422 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2204      	movs	r2, #4
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a60      	ldr	r2, [pc, #384]	; (80034e4 <HAL_DMA_Abort_IT+0x260>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d04a      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a5e      	ldr	r2, [pc, #376]	; (80034e8 <HAL_DMA_Abort_IT+0x264>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d045      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5d      	ldr	r2, [pc, #372]	; (80034ec <HAL_DMA_Abort_IT+0x268>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d040      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5b      	ldr	r2, [pc, #364]	; (80034f0 <HAL_DMA_Abort_IT+0x26c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d03b      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5a      	ldr	r2, [pc, #360]	; (80034f4 <HAL_DMA_Abort_IT+0x270>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d036      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_DMA_Abort_IT+0x274>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d031      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a57      	ldr	r2, [pc, #348]	; (80034fc <HAL_DMA_Abort_IT+0x278>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d02c      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a55      	ldr	r2, [pc, #340]	; (8003500 <HAL_DMA_Abort_IT+0x27c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d027      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a54      	ldr	r2, [pc, #336]	; (8003504 <HAL_DMA_Abort_IT+0x280>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d022      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a52      	ldr	r2, [pc, #328]	; (8003508 <HAL_DMA_Abort_IT+0x284>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01d      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a51      	ldr	r2, [pc, #324]	; (800350c <HAL_DMA_Abort_IT+0x288>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d018      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a4f      	ldr	r2, [pc, #316]	; (8003510 <HAL_DMA_Abort_IT+0x28c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <HAL_DMA_Abort_IT+0x290>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00e      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a4c      	ldr	r2, [pc, #304]	; (8003518 <HAL_DMA_Abort_IT+0x294>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d009      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4b      	ldr	r2, [pc, #300]	; (800351c <HAL_DMA_Abort_IT+0x298>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_DMA_Abort_IT+0x17a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a49      	ldr	r2, [pc, #292]	; (8003520 <HAL_DMA_Abort_IT+0x29c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d108      	bne.n	8003410 <HAL_DMA_Abort_IT+0x18c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e147      	b.n	80036a0 <HAL_DMA_Abort_IT+0x41c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e13e      	b.n	80036a0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 020e 	bic.w	r2, r2, #14
 8003430:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <HAL_DMA_Abort_IT+0x260>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d04a      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <HAL_DMA_Abort_IT+0x264>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d045      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a28      	ldr	r2, [pc, #160]	; (80034ec <HAL_DMA_Abort_IT+0x268>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d040      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a26      	ldr	r2, [pc, #152]	; (80034f0 <HAL_DMA_Abort_IT+0x26c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d03b      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a25      	ldr	r2, [pc, #148]	; (80034f4 <HAL_DMA_Abort_IT+0x270>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d036      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a23      	ldr	r2, [pc, #140]	; (80034f8 <HAL_DMA_Abort_IT+0x274>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d031      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a22      	ldr	r2, [pc, #136]	; (80034fc <HAL_DMA_Abort_IT+0x278>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d02c      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a20      	ldr	r2, [pc, #128]	; (8003500 <HAL_DMA_Abort_IT+0x27c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d027      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_DMA_Abort_IT+0x280>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d022      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <HAL_DMA_Abort_IT+0x284>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01d      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_DMA_Abort_IT+0x288>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d018      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1a      	ldr	r2, [pc, #104]	; (8003510 <HAL_DMA_Abort_IT+0x28c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a19      	ldr	r2, [pc, #100]	; (8003514 <HAL_DMA_Abort_IT+0x290>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a17      	ldr	r2, [pc, #92]	; (8003518 <HAL_DMA_Abort_IT+0x294>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_DMA_Abort_IT+0x298>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x24e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <HAL_DMA_Abort_IT+0x29c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d128      	bne.n	8003524 <HAL_DMA_Abort_IT+0x2a0>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	e027      	b.n	8003534 <HAL_DMA_Abort_IT+0x2b0>
 80034e4:	40020010 	.word	0x40020010
 80034e8:	40020028 	.word	0x40020028
 80034ec:	40020040 	.word	0x40020040
 80034f0:	40020058 	.word	0x40020058
 80034f4:	40020070 	.word	0x40020070
 80034f8:	40020088 	.word	0x40020088
 80034fc:	400200a0 	.word	0x400200a0
 8003500:	400200b8 	.word	0x400200b8
 8003504:	40020410 	.word	0x40020410
 8003508:	40020428 	.word	0x40020428
 800350c:	40020440 	.word	0x40020440
 8003510:	40020458 	.word	0x40020458
 8003514:	40020470 	.word	0x40020470
 8003518:	40020488 	.word	0x40020488
 800351c:	400204a0 	.word	0x400204a0
 8003520:	400204b8 	.word	0x400204b8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5c      	ldr	r2, [pc, #368]	; (80036ac <HAL_DMA_Abort_IT+0x428>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d072      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a5b      	ldr	r2, [pc, #364]	; (80036b0 <HAL_DMA_Abort_IT+0x42c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d06d      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a59      	ldr	r2, [pc, #356]	; (80036b4 <HAL_DMA_Abort_IT+0x430>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d068      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_DMA_Abort_IT+0x434>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d063      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a56      	ldr	r2, [pc, #344]	; (80036bc <HAL_DMA_Abort_IT+0x438>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d05e      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a55      	ldr	r2, [pc, #340]	; (80036c0 <HAL_DMA_Abort_IT+0x43c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d059      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a53      	ldr	r2, [pc, #332]	; (80036c4 <HAL_DMA_Abort_IT+0x440>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d054      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_DMA_Abort_IT+0x444>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d04f      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a50      	ldr	r2, [pc, #320]	; (80036cc <HAL_DMA_Abort_IT+0x448>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04a      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a4f      	ldr	r2, [pc, #316]	; (80036d0 <HAL_DMA_Abort_IT+0x44c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d045      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a4d      	ldr	r2, [pc, #308]	; (80036d4 <HAL_DMA_Abort_IT+0x450>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a4c      	ldr	r2, [pc, #304]	; (80036d8 <HAL_DMA_Abort_IT+0x454>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d03b      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a4a      	ldr	r2, [pc, #296]	; (80036dc <HAL_DMA_Abort_IT+0x458>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a49      	ldr	r2, [pc, #292]	; (80036e0 <HAL_DMA_Abort_IT+0x45c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d031      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a47      	ldr	r2, [pc, #284]	; (80036e4 <HAL_DMA_Abort_IT+0x460>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a46      	ldr	r2, [pc, #280]	; (80036e8 <HAL_DMA_Abort_IT+0x464>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a44      	ldr	r2, [pc, #272]	; (80036ec <HAL_DMA_Abort_IT+0x468>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a43      	ldr	r2, [pc, #268]	; (80036f0 <HAL_DMA_Abort_IT+0x46c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a41      	ldr	r2, [pc, #260]	; (80036f4 <HAL_DMA_Abort_IT+0x470>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a40      	ldr	r2, [pc, #256]	; (80036f8 <HAL_DMA_Abort_IT+0x474>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3e      	ldr	r2, [pc, #248]	; (80036fc <HAL_DMA_Abort_IT+0x478>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3d      	ldr	r2, [pc, #244]	; (8003700 <HAL_DMA_Abort_IT+0x47c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a3b      	ldr	r2, [pc, #236]	; (8003704 <HAL_DMA_Abort_IT+0x480>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_DMA_Abort_IT+0x3a0>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a3a      	ldr	r2, [pc, #232]	; (8003708 <HAL_DMA_Abort_IT+0x484>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <HAL_DMA_Abort_IT+0x3a4>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_DMA_Abort_IT+0x3a6>
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d028      	beq.n	8003680 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800363c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800365c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00c      	beq.n	8003680 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800367e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40020010 	.word	0x40020010
 80036b0:	40020028 	.word	0x40020028
 80036b4:	40020040 	.word	0x40020040
 80036b8:	40020058 	.word	0x40020058
 80036bc:	40020070 	.word	0x40020070
 80036c0:	40020088 	.word	0x40020088
 80036c4:	400200a0 	.word	0x400200a0
 80036c8:	400200b8 	.word	0x400200b8
 80036cc:	40020410 	.word	0x40020410
 80036d0:	40020428 	.word	0x40020428
 80036d4:	40020440 	.word	0x40020440
 80036d8:	40020458 	.word	0x40020458
 80036dc:	40020470 	.word	0x40020470
 80036e0:	40020488 	.word	0x40020488
 80036e4:	400204a0 	.word	0x400204a0
 80036e8:	400204b8 	.word	0x400204b8
 80036ec:	58025408 	.word	0x58025408
 80036f0:	5802541c 	.word	0x5802541c
 80036f4:	58025430 	.word	0x58025430
 80036f8:	58025444 	.word	0x58025444
 80036fc:	58025458 	.word	0x58025458
 8003700:	5802546c 	.word	0x5802546c
 8003704:	58025480 	.word	0x58025480
 8003708:	58025494 	.word	0x58025494

0800370c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003718:	4b67      	ldr	r3, [pc, #412]	; (80038b8 <HAL_DMA_IRQHandler+0x1ac>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a67      	ldr	r2, [pc, #412]	; (80038bc <HAL_DMA_IRQHandler+0x1b0>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0a9b      	lsrs	r3, r3, #10
 8003724:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a5f      	ldr	r2, [pc, #380]	; (80038c0 <HAL_DMA_IRQHandler+0x1b4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d04a      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a5d      	ldr	r2, [pc, #372]	; (80038c4 <HAL_DMA_IRQHandler+0x1b8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d045      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a5c      	ldr	r2, [pc, #368]	; (80038c8 <HAL_DMA_IRQHandler+0x1bc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d040      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5a      	ldr	r2, [pc, #360]	; (80038cc <HAL_DMA_IRQHandler+0x1c0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d03b      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a59      	ldr	r2, [pc, #356]	; (80038d0 <HAL_DMA_IRQHandler+0x1c4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d036      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a57      	ldr	r2, [pc, #348]	; (80038d4 <HAL_DMA_IRQHandler+0x1c8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d031      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a56      	ldr	r2, [pc, #344]	; (80038d8 <HAL_DMA_IRQHandler+0x1cc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d02c      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a54      	ldr	r2, [pc, #336]	; (80038dc <HAL_DMA_IRQHandler+0x1d0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d027      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a53      	ldr	r2, [pc, #332]	; (80038e0 <HAL_DMA_IRQHandler+0x1d4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a51      	ldr	r2, [pc, #324]	; (80038e4 <HAL_DMA_IRQHandler+0x1d8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01d      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a50      	ldr	r2, [pc, #320]	; (80038e8 <HAL_DMA_IRQHandler+0x1dc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d018      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a4e      	ldr	r2, [pc, #312]	; (80038ec <HAL_DMA_IRQHandler+0x1e0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a4d      	ldr	r2, [pc, #308]	; (80038f0 <HAL_DMA_IRQHandler+0x1e4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a4b      	ldr	r2, [pc, #300]	; (80038f4 <HAL_DMA_IRQHandler+0x1e8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a4a      	ldr	r2, [pc, #296]	; (80038f8 <HAL_DMA_IRQHandler+0x1ec>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_DMA_IRQHandler+0xd2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a48      	ldr	r2, [pc, #288]	; (80038fc <HAL_DMA_IRQHandler+0x1f0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_DMA_IRQHandler+0xd6>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_DMA_IRQHandler+0xd8>
 80037e2:	2300      	movs	r3, #0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 842b 	beq.w	8004040 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2208      	movs	r2, #8
 80037f4:	409a      	lsls	r2, r3
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80a2 	beq.w	8003944 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2e      	ldr	r2, [pc, #184]	; (80038c0 <HAL_DMA_IRQHandler+0x1b4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04a      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <HAL_DMA_IRQHandler+0x1b8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d045      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <HAL_DMA_IRQHandler+0x1bc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <HAL_DMA_IRQHandler+0x1c0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03b      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a28      	ldr	r2, [pc, #160]	; (80038d0 <HAL_DMA_IRQHandler+0x1c4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d036      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a27      	ldr	r2, [pc, #156]	; (80038d4 <HAL_DMA_IRQHandler+0x1c8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d031      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a25      	ldr	r2, [pc, #148]	; (80038d8 <HAL_DMA_IRQHandler+0x1cc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a24      	ldr	r2, [pc, #144]	; (80038dc <HAL_DMA_IRQHandler+0x1d0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d027      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <HAL_DMA_IRQHandler+0x1d4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a21      	ldr	r2, [pc, #132]	; (80038e4 <HAL_DMA_IRQHandler+0x1d8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01d      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1f      	ldr	r2, [pc, #124]	; (80038e8 <HAL_DMA_IRQHandler+0x1dc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <HAL_DMA_IRQHandler+0x1e0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <HAL_DMA_IRQHandler+0x1e4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_DMA_IRQHandler+0x1e8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_DMA_IRQHandler+0x1ec>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x194>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a18      	ldr	r2, [pc, #96]	; (80038fc <HAL_DMA_IRQHandler+0x1f0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d12f      	bne.n	8003900 <HAL_DMA_IRQHandler+0x1f4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	e02e      	b.n	8003914 <HAL_DMA_IRQHandler+0x208>
 80038b6:	bf00      	nop
 80038b8:	24000018 	.word	0x24000018
 80038bc:	1b4e81b5 	.word	0x1b4e81b5
 80038c0:	40020010 	.word	0x40020010
 80038c4:	40020028 	.word	0x40020028
 80038c8:	40020040 	.word	0x40020040
 80038cc:	40020058 	.word	0x40020058
 80038d0:	40020070 	.word	0x40020070
 80038d4:	40020088 	.word	0x40020088
 80038d8:	400200a0 	.word	0x400200a0
 80038dc:	400200b8 	.word	0x400200b8
 80038e0:	40020410 	.word	0x40020410
 80038e4:	40020428 	.word	0x40020428
 80038e8:	40020440 	.word	0x40020440
 80038ec:	40020458 	.word	0x40020458
 80038f0:	40020470 	.word	0x40020470
 80038f4:	40020488 	.word	0x40020488
 80038f8:	400204a0 	.word	0x400204a0
 80038fc:	400204b8 	.word	0x400204b8
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf14      	ite	ne
 800390e:	2301      	movne	r3, #1
 8003910:	2300      	moveq	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d015      	beq.n	8003944 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2208      	movs	r2, #8
 8003932:	409a      	lsls	r2, r3
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d06e      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a69      	ldr	r2, [pc, #420]	; (8003b04 <HAL_DMA_IRQHandler+0x3f8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d04a      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a67      	ldr	r2, [pc, #412]	; (8003b08 <HAL_DMA_IRQHandler+0x3fc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d045      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a66      	ldr	r2, [pc, #408]	; (8003b0c <HAL_DMA_IRQHandler+0x400>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d040      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a64      	ldr	r2, [pc, #400]	; (8003b10 <HAL_DMA_IRQHandler+0x404>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d03b      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a63      	ldr	r2, [pc, #396]	; (8003b14 <HAL_DMA_IRQHandler+0x408>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d036      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a61      	ldr	r2, [pc, #388]	; (8003b18 <HAL_DMA_IRQHandler+0x40c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d031      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a60      	ldr	r2, [pc, #384]	; (8003b1c <HAL_DMA_IRQHandler+0x410>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d02c      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a5e      	ldr	r2, [pc, #376]	; (8003b20 <HAL_DMA_IRQHandler+0x414>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d027      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a5d      	ldr	r2, [pc, #372]	; (8003b24 <HAL_DMA_IRQHandler+0x418>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d022      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a5b      	ldr	r2, [pc, #364]	; (8003b28 <HAL_DMA_IRQHandler+0x41c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01d      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a5a      	ldr	r2, [pc, #360]	; (8003b2c <HAL_DMA_IRQHandler+0x420>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d018      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a58      	ldr	r2, [pc, #352]	; (8003b30 <HAL_DMA_IRQHandler+0x424>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a57      	ldr	r2, [pc, #348]	; (8003b34 <HAL_DMA_IRQHandler+0x428>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00e      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a55      	ldr	r2, [pc, #340]	; (8003b38 <HAL_DMA_IRQHandler+0x42c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d009      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a54      	ldr	r2, [pc, #336]	; (8003b3c <HAL_DMA_IRQHandler+0x430>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_DMA_IRQHandler+0x2ee>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a52      	ldr	r2, [pc, #328]	; (8003b40 <HAL_DMA_IRQHandler+0x434>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10a      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x304>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e003      	b.n	8003a18 <HAL_DMA_IRQHandler+0x30c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00d      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2201      	movs	r2, #1
 8003a26:	409a      	lsls	r2, r3
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	f043 0202 	orr.w	r2, r3, #2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	2204      	movs	r2, #4
 8003a42:	409a      	lsls	r2, r3
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 808f 	beq.w	8003b6c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	; (8003b04 <HAL_DMA_IRQHandler+0x3f8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d04a      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <HAL_DMA_IRQHandler+0x3fc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d045      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <HAL_DMA_IRQHandler+0x400>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d040      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a27      	ldr	r2, [pc, #156]	; (8003b10 <HAL_DMA_IRQHandler+0x404>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d03b      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <HAL_DMA_IRQHandler+0x408>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d036      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <HAL_DMA_IRQHandler+0x40c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d031      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <HAL_DMA_IRQHandler+0x410>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d02c      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <HAL_DMA_IRQHandler+0x414>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d027      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <HAL_DMA_IRQHandler+0x418>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d022      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_DMA_IRQHandler+0x41c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01d      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_DMA_IRQHandler+0x420>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_DMA_IRQHandler+0x424>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <HAL_DMA_IRQHandler+0x428>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_DMA_IRQHandler+0x42c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <HAL_DMA_IRQHandler+0x430>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_DMA_IRQHandler+0x3e2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <HAL_DMA_IRQHandler+0x434>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d12a      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x438>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e023      	b.n	8003b4c <HAL_DMA_IRQHandler+0x440>
 8003b04:	40020010 	.word	0x40020010
 8003b08:	40020028 	.word	0x40020028
 8003b0c:	40020040 	.word	0x40020040
 8003b10:	40020058 	.word	0x40020058
 8003b14:	40020070 	.word	0x40020070
 8003b18:	40020088 	.word	0x40020088
 8003b1c:	400200a0 	.word	0x400200a0
 8003b20:	400200b8 	.word	0x400200b8
 8003b24:	40020410 	.word	0x40020410
 8003b28:	40020428 	.word	0x40020428
 8003b2c:	40020440 	.word	0x40020440
 8003b30:	40020458 	.word	0x40020458
 8003b34:	40020470 	.word	0x40020470
 8003b38:	40020488 	.word	0x40020488
 8003b3c:	400204a0 	.word	0x400204a0
 8003b40:	400204b8 	.word	0x400204b8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00d      	beq.n	8003b6c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2204      	movs	r2, #4
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	f043 0204 	orr.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2210      	movs	r2, #16
 8003b76:	409a      	lsls	r2, r3
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80a6 	beq.w	8003cce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a85      	ldr	r2, [pc, #532]	; (8003d9c <HAL_DMA_IRQHandler+0x690>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d04a      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a83      	ldr	r2, [pc, #524]	; (8003da0 <HAL_DMA_IRQHandler+0x694>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d045      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a82      	ldr	r2, [pc, #520]	; (8003da4 <HAL_DMA_IRQHandler+0x698>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d040      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a80      	ldr	r2, [pc, #512]	; (8003da8 <HAL_DMA_IRQHandler+0x69c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d03b      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a7f      	ldr	r2, [pc, #508]	; (8003dac <HAL_DMA_IRQHandler+0x6a0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d036      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a7d      	ldr	r2, [pc, #500]	; (8003db0 <HAL_DMA_IRQHandler+0x6a4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d031      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a7c      	ldr	r2, [pc, #496]	; (8003db4 <HAL_DMA_IRQHandler+0x6a8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d02c      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7a      	ldr	r2, [pc, #488]	; (8003db8 <HAL_DMA_IRQHandler+0x6ac>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d027      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a79      	ldr	r2, [pc, #484]	; (8003dbc <HAL_DMA_IRQHandler+0x6b0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d022      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a77      	ldr	r2, [pc, #476]	; (8003dc0 <HAL_DMA_IRQHandler+0x6b4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01d      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a76      	ldr	r2, [pc, #472]	; (8003dc4 <HAL_DMA_IRQHandler+0x6b8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d018      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a74      	ldr	r2, [pc, #464]	; (8003dc8 <HAL_DMA_IRQHandler+0x6bc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a73      	ldr	r2, [pc, #460]	; (8003dcc <HAL_DMA_IRQHandler+0x6c0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00e      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a71      	ldr	r2, [pc, #452]	; (8003dd0 <HAL_DMA_IRQHandler+0x6c4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d009      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a70      	ldr	r2, [pc, #448]	; (8003dd4 <HAL_DMA_IRQHandler+0x6c8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d004      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x516>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6e      	ldr	r2, [pc, #440]	; (8003dd8 <HAL_DMA_IRQHandler+0x6cc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10a      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x52c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e009      	b.n	8003c4c <HAL_DMA_IRQHandler+0x540>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d03e      	beq.n	8003cce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2210      	movs	r2, #16
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d018      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d024      	beq.n	8003cce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
 8003c8c:	e01f      	b.n	8003cce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01b      	beq.n	8003cce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
 8003c9e:	e016      	b.n	8003cce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d107      	bne.n	8003cbe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0208 	bic.w	r2, r2, #8
 8003cbc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8110 	beq.w	8003f04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <HAL_DMA_IRQHandler+0x690>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d04a      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <HAL_DMA_IRQHandler+0x694>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d045      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <HAL_DMA_IRQHandler+0x698>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d040      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a28      	ldr	r2, [pc, #160]	; (8003da8 <HAL_DMA_IRQHandler+0x69c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d03b      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <HAL_DMA_IRQHandler+0x6a0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d036      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <HAL_DMA_IRQHandler+0x6a4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d031      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a23      	ldr	r2, [pc, #140]	; (8003db4 <HAL_DMA_IRQHandler+0x6a8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d02c      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a22      	ldr	r2, [pc, #136]	; (8003db8 <HAL_DMA_IRQHandler+0x6ac>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d027      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a20      	ldr	r2, [pc, #128]	; (8003dbc <HAL_DMA_IRQHandler+0x6b0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d022      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <HAL_DMA_IRQHandler+0x6b4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d01d      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1d      	ldr	r2, [pc, #116]	; (8003dc4 <HAL_DMA_IRQHandler+0x6b8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d018      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <HAL_DMA_IRQHandler+0x6bc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_DMA_IRQHandler+0x6c0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00e      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <HAL_DMA_IRQHandler+0x6c4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <HAL_DMA_IRQHandler+0x6c8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x678>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <HAL_DMA_IRQHandler+0x6cc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d12b      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x6d0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf14      	ite	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	2300      	moveq	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e02a      	b.n	8003df0 <HAL_DMA_IRQHandler+0x6e4>
 8003d9a:	bf00      	nop
 8003d9c:	40020010 	.word	0x40020010
 8003da0:	40020028 	.word	0x40020028
 8003da4:	40020040 	.word	0x40020040
 8003da8:	40020058 	.word	0x40020058
 8003dac:	40020070 	.word	0x40020070
 8003db0:	40020088 	.word	0x40020088
 8003db4:	400200a0 	.word	0x400200a0
 8003db8:	400200b8 	.word	0x400200b8
 8003dbc:	40020410 	.word	0x40020410
 8003dc0:	40020428 	.word	0x40020428
 8003dc4:	40020440 	.word	0x40020440
 8003dc8:	40020458 	.word	0x40020458
 8003dcc:	40020470 	.word	0x40020470
 8003dd0:	40020488 	.word	0x40020488
 8003dd4:	400204a0 	.word	0x400204a0
 8003dd8:	400204b8 	.word	0x400204b8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8087 	beq.w	8003f04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2220      	movs	r2, #32
 8003e00:	409a      	lsls	r2, r3
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d139      	bne.n	8003e86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0216 	bic.w	r2, r2, #22
 8003e20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_DMA_IRQHandler+0x736>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0208 	bic.w	r2, r2, #8
 8003e50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	223f      	movs	r2, #63	; 0x3f
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 834a 	beq.w	8004510 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
          }
          return;
 8003e84:	e344      	b.n	8004510 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d018      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02c      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
 8003eb2:	e027      	b.n	8003f04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d023      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
 8003ec4:	e01e      	b.n	8003f04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10f      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0210 	bic.w	r2, r2, #16
 8003ee2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8306 	beq.w	800451a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8088 	beq.w	800402c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2204      	movs	r2, #4
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a7a      	ldr	r2, [pc, #488]	; (8004114 <HAL_DMA_IRQHandler+0xa08>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d04a      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a79      	ldr	r2, [pc, #484]	; (8004118 <HAL_DMA_IRQHandler+0xa0c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d045      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a77      	ldr	r2, [pc, #476]	; (800411c <HAL_DMA_IRQHandler+0xa10>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d040      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a76      	ldr	r2, [pc, #472]	; (8004120 <HAL_DMA_IRQHandler+0xa14>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d03b      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a74      	ldr	r2, [pc, #464]	; (8004124 <HAL_DMA_IRQHandler+0xa18>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d036      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a73      	ldr	r2, [pc, #460]	; (8004128 <HAL_DMA_IRQHandler+0xa1c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d031      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a71      	ldr	r2, [pc, #452]	; (800412c <HAL_DMA_IRQHandler+0xa20>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d02c      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a70      	ldr	r2, [pc, #448]	; (8004130 <HAL_DMA_IRQHandler+0xa24>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d027      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6e      	ldr	r2, [pc, #440]	; (8004134 <HAL_DMA_IRQHandler+0xa28>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d022      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6d      	ldr	r2, [pc, #436]	; (8004138 <HAL_DMA_IRQHandler+0xa2c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d01d      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a6b      	ldr	r2, [pc, #428]	; (800413c <HAL_DMA_IRQHandler+0xa30>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d018      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6a      	ldr	r2, [pc, #424]	; (8004140 <HAL_DMA_IRQHandler+0xa34>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a68      	ldr	r2, [pc, #416]	; (8004144 <HAL_DMA_IRQHandler+0xa38>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a67      	ldr	r2, [pc, #412]	; (8004148 <HAL_DMA_IRQHandler+0xa3c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_DMA_IRQHandler+0xa40>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x8b8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a64      	ldr	r2, [pc, #400]	; (8004150 <HAL_DMA_IRQHandler+0xa44>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <HAL_DMA_IRQHandler+0x8ca>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e007      	b.n	8003fe6 <HAL_DMA_IRQHandler+0x8da>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d307      	bcc.n	8004002 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f2      	bne.n	8003fe6 <HAL_DMA_IRQHandler+0x8da>
 8004000:	e000      	b.n	8004004 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004002:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2203      	movs	r2, #3
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004022:	e003      	b.n	800402c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8272 	beq.w	800451a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
 800403e:	e26c      	b.n	800451a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a43      	ldr	r2, [pc, #268]	; (8004154 <HAL_DMA_IRQHandler+0xa48>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <HAL_DMA_IRQHandler+0x984>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a42      	ldr	r2, [pc, #264]	; (8004158 <HAL_DMA_IRQHandler+0xa4c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d01d      	beq.n	8004090 <HAL_DMA_IRQHandler+0x984>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a40      	ldr	r2, [pc, #256]	; (800415c <HAL_DMA_IRQHandler+0xa50>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <HAL_DMA_IRQHandler+0x984>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3f      	ldr	r2, [pc, #252]	; (8004160 <HAL_DMA_IRQHandler+0xa54>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <HAL_DMA_IRQHandler+0x984>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3d      	ldr	r2, [pc, #244]	; (8004164 <HAL_DMA_IRQHandler+0xa58>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_DMA_IRQHandler+0x984>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3c      	ldr	r2, [pc, #240]	; (8004168 <HAL_DMA_IRQHandler+0xa5c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_DMA_IRQHandler+0x984>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3a      	ldr	r2, [pc, #232]	; (800416c <HAL_DMA_IRQHandler+0xa60>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_DMA_IRQHandler+0x984>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a39      	ldr	r2, [pc, #228]	; (8004170 <HAL_DMA_IRQHandler+0xa64>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_DMA_IRQHandler+0x988>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_DMA_IRQHandler+0x98a>
 8004094:	2300      	movs	r3, #0
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 823f 	beq.w	800451a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2204      	movs	r2, #4
 80040ae:	409a      	lsls	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80cd 	beq.w	8004254 <HAL_DMA_IRQHandler+0xb48>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80c7 	beq.w	8004254 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2204      	movs	r2, #4
 80040d0:	409a      	lsls	r2, r3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d049      	beq.n	8004174 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8210 	beq.w	8004514 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040fc:	e20a      	b.n	8004514 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 8206 	beq.w	8004514 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004110:	e200      	b.n	8004514 <HAL_DMA_IRQHandler+0xe08>
 8004112:	bf00      	nop
 8004114:	40020010 	.word	0x40020010
 8004118:	40020028 	.word	0x40020028
 800411c:	40020040 	.word	0x40020040
 8004120:	40020058 	.word	0x40020058
 8004124:	40020070 	.word	0x40020070
 8004128:	40020088 	.word	0x40020088
 800412c:	400200a0 	.word	0x400200a0
 8004130:	400200b8 	.word	0x400200b8
 8004134:	40020410 	.word	0x40020410
 8004138:	40020428 	.word	0x40020428
 800413c:	40020440 	.word	0x40020440
 8004140:	40020458 	.word	0x40020458
 8004144:	40020470 	.word	0x40020470
 8004148:	40020488 	.word	0x40020488
 800414c:	400204a0 	.word	0x400204a0
 8004150:	400204b8 	.word	0x400204b8
 8004154:	58025408 	.word	0x58025408
 8004158:	5802541c 	.word	0x5802541c
 800415c:	58025430 	.word	0x58025430
 8004160:	58025444 	.word	0x58025444
 8004164:	58025458 	.word	0x58025458
 8004168:	5802546c 	.word	0x5802546c
 800416c:	58025480 	.word	0x58025480
 8004170:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d160      	bne.n	8004240 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a8c      	ldr	r2, [pc, #560]	; (80043b4 <HAL_DMA_IRQHandler+0xca8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d04a      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a8a      	ldr	r2, [pc, #552]	; (80043b8 <HAL_DMA_IRQHandler+0xcac>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d045      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a89      	ldr	r2, [pc, #548]	; (80043bc <HAL_DMA_IRQHandler+0xcb0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d040      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a87      	ldr	r2, [pc, #540]	; (80043c0 <HAL_DMA_IRQHandler+0xcb4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d03b      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a86      	ldr	r2, [pc, #536]	; (80043c4 <HAL_DMA_IRQHandler+0xcb8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d036      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a84      	ldr	r2, [pc, #528]	; (80043c8 <HAL_DMA_IRQHandler+0xcbc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d031      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a83      	ldr	r2, [pc, #524]	; (80043cc <HAL_DMA_IRQHandler+0xcc0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d02c      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a81      	ldr	r2, [pc, #516]	; (80043d0 <HAL_DMA_IRQHandler+0xcc4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d027      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a80      	ldr	r2, [pc, #512]	; (80043d4 <HAL_DMA_IRQHandler+0xcc8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a7e      	ldr	r2, [pc, #504]	; (80043d8 <HAL_DMA_IRQHandler+0xccc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01d      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a7d      	ldr	r2, [pc, #500]	; (80043dc <HAL_DMA_IRQHandler+0xcd0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d018      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a7b      	ldr	r2, [pc, #492]	; (80043e0 <HAL_DMA_IRQHandler+0xcd4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7a      	ldr	r2, [pc, #488]	; (80043e4 <HAL_DMA_IRQHandler+0xcd8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a78      	ldr	r2, [pc, #480]	; (80043e8 <HAL_DMA_IRQHandler+0xcdc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a77      	ldr	r2, [pc, #476]	; (80043ec <HAL_DMA_IRQHandler+0xce0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_DMA_IRQHandler+0xb12>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a75      	ldr	r2, [pc, #468]	; (80043f0 <HAL_DMA_IRQHandler+0xce4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <HAL_DMA_IRQHandler+0xb24>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0208 	bic.w	r2, r2, #8
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e007      	b.n	8004240 <HAL_DMA_IRQHandler+0xb34>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0204 	bic.w	r2, r2, #4
 800423e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8165 	beq.w	8004514 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004252:	e15f      	b.n	8004514 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	2202      	movs	r2, #2
 800425e:	409a      	lsls	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80c5 	beq.w	80043f4 <HAL_DMA_IRQHandler+0xce8>
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80bf 	beq.w	80043f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2202      	movs	r2, #2
 8004280:	409a      	lsls	r2, r3
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d018      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 813a 	beq.w	8004518 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ac:	e134      	b.n	8004518 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8130 	beq.w	8004518 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042c0:	e12a      	b.n	8004518 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d168      	bne.n	800439e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <HAL_DMA_IRQHandler+0xca8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d04a      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a37      	ldr	r2, [pc, #220]	; (80043b8 <HAL_DMA_IRQHandler+0xcac>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d045      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a35      	ldr	r2, [pc, #212]	; (80043bc <HAL_DMA_IRQHandler+0xcb0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d040      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a34      	ldr	r2, [pc, #208]	; (80043c0 <HAL_DMA_IRQHandler+0xcb4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d03b      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a32      	ldr	r2, [pc, #200]	; (80043c4 <HAL_DMA_IRQHandler+0xcb8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d036      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a31      	ldr	r2, [pc, #196]	; (80043c8 <HAL_DMA_IRQHandler+0xcbc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d031      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <HAL_DMA_IRQHandler+0xcc0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d02c      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2e      	ldr	r2, [pc, #184]	; (80043d0 <HAL_DMA_IRQHandler+0xcc4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d027      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <HAL_DMA_IRQHandler+0xcc8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d022      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <HAL_DMA_IRQHandler+0xccc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d01d      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a29      	ldr	r2, [pc, #164]	; (80043dc <HAL_DMA_IRQHandler+0xcd0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d018      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a28      	ldr	r2, [pc, #160]	; (80043e0 <HAL_DMA_IRQHandler+0xcd4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <HAL_DMA_IRQHandler+0xcd8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a25      	ldr	r2, [pc, #148]	; (80043e8 <HAL_DMA_IRQHandler+0xcdc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a23      	ldr	r2, [pc, #140]	; (80043ec <HAL_DMA_IRQHandler+0xce0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <HAL_DMA_IRQHandler+0xc60>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <HAL_DMA_IRQHandler+0xce4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <HAL_DMA_IRQHandler+0xc72>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0214 	bic.w	r2, r2, #20
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e007      	b.n	800438e <HAL_DMA_IRQHandler+0xc82>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 020a 	bic.w	r2, r2, #10
 800438c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80b8 	beq.w	8004518 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043b0:	e0b2      	b.n	8004518 <HAL_DMA_IRQHandler+0xe0c>
 80043b2:	bf00      	nop
 80043b4:	40020010 	.word	0x40020010
 80043b8:	40020028 	.word	0x40020028
 80043bc:	40020040 	.word	0x40020040
 80043c0:	40020058 	.word	0x40020058
 80043c4:	40020070 	.word	0x40020070
 80043c8:	40020088 	.word	0x40020088
 80043cc:	400200a0 	.word	0x400200a0
 80043d0:	400200b8 	.word	0x400200b8
 80043d4:	40020410 	.word	0x40020410
 80043d8:	40020428 	.word	0x40020428
 80043dc:	40020440 	.word	0x40020440
 80043e0:	40020458 	.word	0x40020458
 80043e4:	40020470 	.word	0x40020470
 80043e8:	40020488 	.word	0x40020488
 80043ec:	400204a0 	.word	0x400204a0
 80043f0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2208      	movs	r2, #8
 80043fe:	409a      	lsls	r2, r3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8088 	beq.w	800451a <HAL_DMA_IRQHandler+0xe0e>
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8082 	beq.w	800451a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a41      	ldr	r2, [pc, #260]	; (8004520 <HAL_DMA_IRQHandler+0xe14>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d04a      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a3f      	ldr	r2, [pc, #252]	; (8004524 <HAL_DMA_IRQHandler+0xe18>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d045      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a3e      	ldr	r2, [pc, #248]	; (8004528 <HAL_DMA_IRQHandler+0xe1c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d040      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a3c      	ldr	r2, [pc, #240]	; (800452c <HAL_DMA_IRQHandler+0xe20>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d03b      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a3b      	ldr	r2, [pc, #236]	; (8004530 <HAL_DMA_IRQHandler+0xe24>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d036      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a39      	ldr	r2, [pc, #228]	; (8004534 <HAL_DMA_IRQHandler+0xe28>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d031      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a38      	ldr	r2, [pc, #224]	; (8004538 <HAL_DMA_IRQHandler+0xe2c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d02c      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a36      	ldr	r2, [pc, #216]	; (800453c <HAL_DMA_IRQHandler+0xe30>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d027      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a35      	ldr	r2, [pc, #212]	; (8004540 <HAL_DMA_IRQHandler+0xe34>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d022      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a33      	ldr	r2, [pc, #204]	; (8004544 <HAL_DMA_IRQHandler+0xe38>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01d      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a32      	ldr	r2, [pc, #200]	; (8004548 <HAL_DMA_IRQHandler+0xe3c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d018      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a30      	ldr	r2, [pc, #192]	; (800454c <HAL_DMA_IRQHandler+0xe40>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2f      	ldr	r2, [pc, #188]	; (8004550 <HAL_DMA_IRQHandler+0xe44>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00e      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <HAL_DMA_IRQHandler+0xe48>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <HAL_DMA_IRQHandler+0xe4c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xdaa>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2a      	ldr	r2, [pc, #168]	; (800455c <HAL_DMA_IRQHandler+0xe50>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d108      	bne.n	80044c8 <HAL_DMA_IRQHandler+0xdbc>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 021c 	bic.w	r2, r2, #28
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e007      	b.n	80044d8 <HAL_DMA_IRQHandler+0xdcc>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 020e 	bic.w	r2, r2, #14
 80044d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	2201      	movs	r2, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	4798      	blx	r3
 800450e:	e004      	b.n	800451a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004510:	bf00      	nop
 8004512:	e002      	b.n	800451a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004514:	bf00      	nop
 8004516:	e000      	b.n	800451a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004518:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800451a:	3728      	adds	r7, #40	; 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40020010 	.word	0x40020010
 8004524:	40020028 	.word	0x40020028
 8004528:	40020040 	.word	0x40020040
 800452c:	40020058 	.word	0x40020058
 8004530:	40020070 	.word	0x40020070
 8004534:	40020088 	.word	0x40020088
 8004538:	400200a0 	.word	0x400200a0
 800453c:	400200b8 	.word	0x400200b8
 8004540:	40020410 	.word	0x40020410
 8004544:	40020428 	.word	0x40020428
 8004548:	40020440 	.word	0x40020440
 800454c:	40020458 	.word	0x40020458
 8004550:	40020470 	.word	0x40020470
 8004554:	40020488 	.word	0x40020488
 8004558:	400204a0 	.word	0x400204a0
 800455c:	400204b8 	.word	0x400204b8

08004560 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a84      	ldr	r2, [pc, #528]	; (8004790 <DMA_SetConfig+0x230>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d072      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a82      	ldr	r2, [pc, #520]	; (8004794 <DMA_SetConfig+0x234>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d06d      	beq.n	800466a <DMA_SetConfig+0x10a>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a81      	ldr	r2, [pc, #516]	; (8004798 <DMA_SetConfig+0x238>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d068      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a7f      	ldr	r2, [pc, #508]	; (800479c <DMA_SetConfig+0x23c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d063      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a7e      	ldr	r2, [pc, #504]	; (80047a0 <DMA_SetConfig+0x240>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d05e      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a7c      	ldr	r2, [pc, #496]	; (80047a4 <DMA_SetConfig+0x244>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d059      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a7b      	ldr	r2, [pc, #492]	; (80047a8 <DMA_SetConfig+0x248>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d054      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a79      	ldr	r2, [pc, #484]	; (80047ac <DMA_SetConfig+0x24c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d04f      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a78      	ldr	r2, [pc, #480]	; (80047b0 <DMA_SetConfig+0x250>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d04a      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a76      	ldr	r2, [pc, #472]	; (80047b4 <DMA_SetConfig+0x254>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d045      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a75      	ldr	r2, [pc, #468]	; (80047b8 <DMA_SetConfig+0x258>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d040      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a73      	ldr	r2, [pc, #460]	; (80047bc <DMA_SetConfig+0x25c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d03b      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a72      	ldr	r2, [pc, #456]	; (80047c0 <DMA_SetConfig+0x260>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d036      	beq.n	800466a <DMA_SetConfig+0x10a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a70      	ldr	r2, [pc, #448]	; (80047c4 <DMA_SetConfig+0x264>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d031      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a6f      	ldr	r2, [pc, #444]	; (80047c8 <DMA_SetConfig+0x268>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d02c      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a6d      	ldr	r2, [pc, #436]	; (80047cc <DMA_SetConfig+0x26c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d027      	beq.n	800466a <DMA_SetConfig+0x10a>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a6c      	ldr	r2, [pc, #432]	; (80047d0 <DMA_SetConfig+0x270>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d022      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a6a      	ldr	r2, [pc, #424]	; (80047d4 <DMA_SetConfig+0x274>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01d      	beq.n	800466a <DMA_SetConfig+0x10a>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a69      	ldr	r2, [pc, #420]	; (80047d8 <DMA_SetConfig+0x278>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d018      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a67      	ldr	r2, [pc, #412]	; (80047dc <DMA_SetConfig+0x27c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a66      	ldr	r2, [pc, #408]	; (80047e0 <DMA_SetConfig+0x280>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <DMA_SetConfig+0x10a>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a64      	ldr	r2, [pc, #400]	; (80047e4 <DMA_SetConfig+0x284>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a63      	ldr	r2, [pc, #396]	; (80047e8 <DMA_SetConfig+0x288>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <DMA_SetConfig+0x10a>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a61      	ldr	r2, [pc, #388]	; (80047ec <DMA_SetConfig+0x28c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <DMA_SetConfig+0x10e>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <DMA_SetConfig+0x110>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800467c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800468e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3e      	ldr	r2, [pc, #248]	; (8004790 <DMA_SetConfig+0x230>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d04a      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a3d      	ldr	r2, [pc, #244]	; (8004794 <DMA_SetConfig+0x234>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d045      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3b      	ldr	r2, [pc, #236]	; (8004798 <DMA_SetConfig+0x238>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d040      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a3a      	ldr	r2, [pc, #232]	; (800479c <DMA_SetConfig+0x23c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d03b      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a38      	ldr	r2, [pc, #224]	; (80047a0 <DMA_SetConfig+0x240>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d036      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a37      	ldr	r2, [pc, #220]	; (80047a4 <DMA_SetConfig+0x244>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d031      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a35      	ldr	r2, [pc, #212]	; (80047a8 <DMA_SetConfig+0x248>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d02c      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a34      	ldr	r2, [pc, #208]	; (80047ac <DMA_SetConfig+0x24c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d027      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a32      	ldr	r2, [pc, #200]	; (80047b0 <DMA_SetConfig+0x250>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a31      	ldr	r2, [pc, #196]	; (80047b4 <DMA_SetConfig+0x254>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d01d      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2f      	ldr	r2, [pc, #188]	; (80047b8 <DMA_SetConfig+0x258>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2e      	ldr	r2, [pc, #184]	; (80047bc <DMA_SetConfig+0x25c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <DMA_SetConfig+0x260>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <DMA_SetConfig+0x264>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <DMA_SetConfig+0x268>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <DMA_SetConfig+0x1d0>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a28      	ldr	r2, [pc, #160]	; (80047cc <DMA_SetConfig+0x26c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <DMA_SetConfig+0x1d4>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <DMA_SetConfig+0x1d6>
 8004734:	2300      	movs	r3, #0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d05a      	beq.n	80047f0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	223f      	movs	r2, #63	; 0x3f
 8004744:	409a      	lsls	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004758:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b40      	cmp	r3, #64	; 0x40
 8004768:	d108      	bne.n	800477c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800477a:	e087      	b.n	800488c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]
}
 800478c:	e07e      	b.n	800488c <DMA_SetConfig+0x32c>
 800478e:	bf00      	nop
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	40020040 	.word	0x40020040
 800479c:	40020058 	.word	0x40020058
 80047a0:	40020070 	.word	0x40020070
 80047a4:	40020088 	.word	0x40020088
 80047a8:	400200a0 	.word	0x400200a0
 80047ac:	400200b8 	.word	0x400200b8
 80047b0:	40020410 	.word	0x40020410
 80047b4:	40020428 	.word	0x40020428
 80047b8:	40020440 	.word	0x40020440
 80047bc:	40020458 	.word	0x40020458
 80047c0:	40020470 	.word	0x40020470
 80047c4:	40020488 	.word	0x40020488
 80047c8:	400204a0 	.word	0x400204a0
 80047cc:	400204b8 	.word	0x400204b8
 80047d0:	58025408 	.word	0x58025408
 80047d4:	5802541c 	.word	0x5802541c
 80047d8:	58025430 	.word	0x58025430
 80047dc:	58025444 	.word	0x58025444
 80047e0:	58025458 	.word	0x58025458
 80047e4:	5802546c 	.word	0x5802546c
 80047e8:	58025480 	.word	0x58025480
 80047ec:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a28      	ldr	r2, [pc, #160]	; (8004898 <DMA_SetConfig+0x338>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d022      	beq.n	8004840 <DMA_SetConfig+0x2e0>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a27      	ldr	r2, [pc, #156]	; (800489c <DMA_SetConfig+0x33c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d01d      	beq.n	8004840 <DMA_SetConfig+0x2e0>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a25      	ldr	r2, [pc, #148]	; (80048a0 <DMA_SetConfig+0x340>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d018      	beq.n	8004840 <DMA_SetConfig+0x2e0>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <DMA_SetConfig+0x344>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <DMA_SetConfig+0x2e0>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a22      	ldr	r2, [pc, #136]	; (80048a8 <DMA_SetConfig+0x348>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00e      	beq.n	8004840 <DMA_SetConfig+0x2e0>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a21      	ldr	r2, [pc, #132]	; (80048ac <DMA_SetConfig+0x34c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d009      	beq.n	8004840 <DMA_SetConfig+0x2e0>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <DMA_SetConfig+0x350>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <DMA_SetConfig+0x2e0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <DMA_SetConfig+0x354>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <DMA_SetConfig+0x2e4>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <DMA_SetConfig+0x2e6>
 8004844:	2300      	movs	r3, #0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d020      	beq.n	800488c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	2201      	movs	r2, #1
 8004854:	409a      	lsls	r2, r3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d108      	bne.n	800487c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	60da      	str	r2, [r3, #12]
}
 800487a:	e007      	b.n	800488c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	58025408 	.word	0x58025408
 800489c:	5802541c 	.word	0x5802541c
 80048a0:	58025430 	.word	0x58025430
 80048a4:	58025444 	.word	0x58025444
 80048a8:	58025458 	.word	0x58025458
 80048ac:	5802546c 	.word	0x5802546c
 80048b0:	58025480 	.word	0x58025480
 80048b4:	58025494 	.word	0x58025494

080048b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a42      	ldr	r2, [pc, #264]	; (80049d0 <DMA_CalcBaseAndBitshift+0x118>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d04a      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a41      	ldr	r2, [pc, #260]	; (80049d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d045      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a3f      	ldr	r2, [pc, #252]	; (80049d8 <DMA_CalcBaseAndBitshift+0x120>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d040      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3e      	ldr	r2, [pc, #248]	; (80049dc <DMA_CalcBaseAndBitshift+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d03b      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3c      	ldr	r2, [pc, #240]	; (80049e0 <DMA_CalcBaseAndBitshift+0x128>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d036      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a3b      	ldr	r2, [pc, #236]	; (80049e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d031      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a39      	ldr	r2, [pc, #228]	; (80049e8 <DMA_CalcBaseAndBitshift+0x130>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02c      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a38      	ldr	r2, [pc, #224]	; (80049ec <DMA_CalcBaseAndBitshift+0x134>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d027      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a36      	ldr	r2, [pc, #216]	; (80049f0 <DMA_CalcBaseAndBitshift+0x138>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a35      	ldr	r2, [pc, #212]	; (80049f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d01d      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a33      	ldr	r2, [pc, #204]	; (80049f8 <DMA_CalcBaseAndBitshift+0x140>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a32      	ldr	r2, [pc, #200]	; (80049fc <DMA_CalcBaseAndBitshift+0x144>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a30      	ldr	r2, [pc, #192]	; (8004a00 <DMA_CalcBaseAndBitshift+0x148>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2f      	ldr	r2, [pc, #188]	; (8004a04 <DMA_CalcBaseAndBitshift+0x14c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <DMA_CalcBaseAndBitshift+0x150>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <DMA_CalcBaseAndBitshift+0x154>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d101      	bne.n	8004964 <DMA_CalcBaseAndBitshift+0xac>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <DMA_CalcBaseAndBitshift+0xae>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d024      	beq.n	80049b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	3b10      	subs	r3, #16
 8004972:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <DMA_CalcBaseAndBitshift+0x158>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	4a24      	ldr	r2, [pc, #144]	; (8004a14 <DMA_CalcBaseAndBitshift+0x15c>)
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d908      	bls.n	80049a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <DMA_CalcBaseAndBitshift+0x160>)
 800499a:	4013      	ands	r3, r2
 800499c:	1d1a      	adds	r2, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	659a      	str	r2, [r3, #88]	; 0x58
 80049a2:	e00d      	b.n	80049c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <DMA_CalcBaseAndBitshift+0x160>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6593      	str	r3, [r2, #88]	; 0x58
 80049b2:	e005      	b.n	80049c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40020010 	.word	0x40020010
 80049d4:	40020028 	.word	0x40020028
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020058 	.word	0x40020058
 80049e0:	40020070 	.word	0x40020070
 80049e4:	40020088 	.word	0x40020088
 80049e8:	400200a0 	.word	0x400200a0
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	40020440 	.word	0x40020440
 80049fc:	40020458 	.word	0x40020458
 8004a00:	40020470 	.word	0x40020470
 8004a04:	40020488 	.word	0x40020488
 8004a08:	400204a0 	.word	0x400204a0
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	aaaaaaab 	.word	0xaaaaaaab
 8004a14:	0800994c 	.word	0x0800994c
 8004a18:	fffffc00 	.word	0xfffffc00

08004a1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d120      	bne.n	8004a72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d858      	bhi.n	8004aea <DMA_CheckFifoParam+0xce>
 8004a38:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <DMA_CheckFifoParam+0x24>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a51 	.word	0x08004a51
 8004a44:	08004a63 	.word	0x08004a63
 8004a48:	08004a51 	.word	0x08004a51
 8004a4c:	08004aeb 	.word	0x08004aeb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d048      	beq.n	8004aee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a60:	e045      	b.n	8004aee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a6a:	d142      	bne.n	8004af2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a70:	e03f      	b.n	8004af2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7a:	d123      	bne.n	8004ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d838      	bhi.n	8004af6 <DMA_CheckFifoParam+0xda>
 8004a84:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <DMA_CheckFifoParam+0x70>)
 8004a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8a:	bf00      	nop
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aa3 	.word	0x08004aa3
 8004a94:	08004a9d 	.word	0x08004a9d
 8004a98:	08004ab5 	.word	0x08004ab5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa0:	e030      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d025      	beq.n	8004afa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ab2:	e022      	b.n	8004afa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004abc:	d11f      	bne.n	8004afe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ac2:	e01c      	b.n	8004afe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <DMA_CheckFifoParam+0xb6>
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d003      	beq.n	8004ad8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ad0:	e018      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ad6:	e015      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00e      	beq.n	8004b02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8004ae8:	e00b      	b.n	8004b02 <DMA_CheckFifoParam+0xe6>
        break;
 8004aea:	bf00      	nop
 8004aec:	e00a      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004aee:	bf00      	nop
 8004af0:	e008      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004af2:	bf00      	nop
 8004af4:	e006      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004af6:	bf00      	nop
 8004af8:	e004      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
    break;
 8004b02:	bf00      	nop
    }
  }

  return status;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop

08004b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d022      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01d      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a35      	ldr	r2, [pc, #212]	; (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d018      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00e      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d009      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d004      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2d      	ldr	r2, [pc, #180]	; (8004c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01a      	beq.n	8004bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	3b08      	subs	r3, #8
 8004b84:	4a28      	ldr	r2, [pc, #160]	; (8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	461a      	mov	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ba0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2201      	movs	r2, #1
 8004baa:	409a      	lsls	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004bb0:	e024      	b.n	8004bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	3b10      	subs	r3, #16
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d806      	bhi.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d902      	bls.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	461a      	mov	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004bec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	58025408 	.word	0x58025408
 8004c0c:	5802541c 	.word	0x5802541c
 8004c10:	58025430 	.word	0x58025430
 8004c14:	58025444 	.word	0x58025444
 8004c18:	58025458 	.word	0x58025458
 8004c1c:	5802546c 	.word	0x5802546c
 8004c20:	58025480 	.word	0x58025480
 8004c24:	58025494 	.word	0x58025494
 8004c28:	cccccccd 	.word	0xcccccccd
 8004c2c:	16009600 	.word	0x16009600
 8004c30:	58025880 	.word	0x58025880
 8004c34:	aaaaaaab 	.word	0xaaaaaaab
 8004c38:	400204b8 	.word	0x400204b8
 8004c3c:	4002040f 	.word	0x4002040f
 8004c40:	10008200 	.word	0x10008200
 8004c44:	40020880 	.word	0x40020880

08004c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d04a      	beq.n	8004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d847      	bhi.n	8004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a25      	ldr	r2, [pc, #148]	; (8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01d      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a22      	ldr	r2, [pc, #136]	; (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a21      	ldr	r2, [pc, #132]	; (8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004cd0:	671a      	str	r2, [r3, #112]	; 0x70
 8004cd2:	e009      	b.n	8004ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ce6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	2201      	movs	r2, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	58025408 	.word	0x58025408
 8004d04:	5802541c 	.word	0x5802541c
 8004d08:	58025430 	.word	0x58025430
 8004d0c:	58025444 	.word	0x58025444
 8004d10:	58025458 	.word	0x58025458
 8004d14:	5802546c 	.word	0x5802546c
 8004d18:	58025480 	.word	0x58025480
 8004d1c:	58025494 	.word	0x58025494
 8004d20:	1600963f 	.word	0x1600963f
 8004d24:	58025940 	.word	0x58025940
 8004d28:	1000823f 	.word	0x1000823f
 8004d2c:	40020940 	.word	0x40020940

08004d30 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e00a      	b.n	8004d62 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004d4c:	7afb      	ldrb	r3, [r7, #11]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	605a      	str	r2, [r3, #4]
      break;
 8004d58:	e002      	b.n	8004d60 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5e:	bf00      	nop
  }

  return status;
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e003      	b.n	8004d8a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004d88:	2300      	movs	r3, #0
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b089      	sub	sp, #36	; 0x24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004da6:	4b89      	ldr	r3, [pc, #548]	; (8004fcc <HAL_GPIO_Init+0x234>)
 8004da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004daa:	e194      	b.n	80050d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	2101      	movs	r1, #1
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8186 	beq.w	80050d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d00b      	beq.n	8004de4 <HAL_GPIO_Init+0x4c>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d007      	beq.n	8004de4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dd8:	2b11      	cmp	r3, #17
 8004dda:	d003      	beq.n	8004de4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b12      	cmp	r3, #18
 8004de2:	d130      	bne.n	8004e46 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	2203      	movs	r2, #3
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	091b      	lsrs	r3, r3, #4
 8004e30:	f003 0201 	and.w	r2, r3, #1
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	2203      	movs	r2, #3
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0xee>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b12      	cmp	r3, #18
 8004e84:	d123      	bne.n	8004ece <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	08da      	lsrs	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3208      	adds	r2, #8
 8004e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	08da      	lsrs	r2, r3, #3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3208      	adds	r2, #8
 8004ec8:	69b9      	ldr	r1, [r7, #24]
 8004eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	2203      	movs	r2, #3
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 0203 	and.w	r2, r3, #3
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80e0 	beq.w	80050d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f10:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <HAL_GPIO_Init+0x238>)
 8004f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f16:	4a2e      	ldr	r2, [pc, #184]	; (8004fd0 <HAL_GPIO_Init+0x238>)
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f20:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <HAL_GPIO_Init+0x238>)
 8004f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f2e:	4a29      	ldr	r2, [pc, #164]	; (8004fd4 <HAL_GPIO_Init+0x23c>)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3302      	adds	r3, #2
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <HAL_GPIO_Init+0x240>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d052      	beq.n	8005000 <HAL_GPIO_Init+0x268>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <HAL_GPIO_Init+0x244>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d031      	beq.n	8004fc6 <HAL_GPIO_Init+0x22e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1e      	ldr	r2, [pc, #120]	; (8004fe0 <HAL_GPIO_Init+0x248>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d02b      	beq.n	8004fc2 <HAL_GPIO_Init+0x22a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <HAL_GPIO_Init+0x24c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d025      	beq.n	8004fbe <HAL_GPIO_Init+0x226>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <HAL_GPIO_Init+0x250>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01f      	beq.n	8004fba <HAL_GPIO_Init+0x222>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <HAL_GPIO_Init+0x254>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d019      	beq.n	8004fb6 <HAL_GPIO_Init+0x21e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1a      	ldr	r2, [pc, #104]	; (8004ff0 <HAL_GPIO_Init+0x258>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <HAL_GPIO_Init+0x21a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <HAL_GPIO_Init+0x25c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00d      	beq.n	8004fae <HAL_GPIO_Init+0x216>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_GPIO_Init+0x260>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d007      	beq.n	8004faa <HAL_GPIO_Init+0x212>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <HAL_GPIO_Init+0x264>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d101      	bne.n	8004fa6 <HAL_GPIO_Init+0x20e>
 8004fa2:	2309      	movs	r3, #9
 8004fa4:	e02d      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fa6:	230a      	movs	r3, #10
 8004fa8:	e02b      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004faa:	2308      	movs	r3, #8
 8004fac:	e029      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fae:	2307      	movs	r3, #7
 8004fb0:	e027      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fb2:	2306      	movs	r3, #6
 8004fb4:	e025      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fb6:	2305      	movs	r3, #5
 8004fb8:	e023      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fba:	2304      	movs	r3, #4
 8004fbc:	e021      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e01f      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e01d      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e01b      	b.n	8005002 <HAL_GPIO_Init+0x26a>
 8004fca:	bf00      	nop
 8004fcc:	58000080 	.word	0x58000080
 8004fd0:	58024400 	.word	0x58024400
 8004fd4:	58000400 	.word	0x58000400
 8004fd8:	58020000 	.word	0x58020000
 8004fdc:	58020400 	.word	0x58020400
 8004fe0:	58020800 	.word	0x58020800
 8004fe4:	58020c00 	.word	0x58020c00
 8004fe8:	58021000 	.word	0x58021000
 8004fec:	58021400 	.word	0x58021400
 8004ff0:	58021800 	.word	0x58021800
 8004ff4:	58021c00 	.word	0x58021c00
 8004ff8:	58022000 	.word	0x58022000
 8004ffc:	58022400 	.word	0x58022400
 8005000:	2300      	movs	r3, #0
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	f002 0203 	and.w	r2, r2, #3
 8005008:	0092      	lsls	r2, r2, #2
 800500a:	4093      	lsls	r3, r2
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4313      	orrs	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005012:	4938      	ldr	r1, [pc, #224]	; (80050f4 <HAL_GPIO_Init+0x35c>)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	3302      	adds	r3, #2
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800509a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f47f ae63 	bne.w	8004dac <HAL_GPIO_Init+0x14>
  }
}
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	3724      	adds	r7, #36	; 0x24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	58000400 	.word	0x58000400

080050f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	807b      	strh	r3, [r7, #2]
 8005104:	4613      	mov	r3, r2
 8005106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005108:	787b      	ldrb	r3, [r7, #1]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800510e:	887a      	ldrh	r2, [r7, #2]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005114:	e003      	b.n	800511e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005116:	887b      	ldrh	r3, [r7, #2]
 8005118:	041a      	lsls	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	619a      	str	r2, [r3, #24]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800513c:	887a      	ldrh	r2, [r7, #2]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4013      	ands	r3, r2
 8005142:	041a      	lsls	r2, r3, #16
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	43d9      	mvns	r1, r3
 8005148:	887b      	ldrh	r3, [r7, #2]
 800514a:	400b      	ands	r3, r1
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	619a      	str	r2, [r3, #24]
}
 8005152:	bf00      	nop
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	4603      	mov	r3, r0
 8005166:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb febb 	bl	8000f00 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_PWREx_ConfigSupply+0x70>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d00a      	beq.n	80051be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80051a8:	4b16      	ldr	r3, [pc, #88]	; (8005204 <HAL_PWREx_ConfigSupply+0x70>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d001      	beq.n	80051ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e01f      	b.n	80051fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e01d      	b.n	80051fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <HAL_PWREx_ConfigSupply+0x70>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f023 0207 	bic.w	r2, r3, #7
 80051c6:	490f      	ldr	r1, [pc, #60]	; (8005204 <HAL_PWREx_ConfigSupply+0x70>)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051ce:	f7fc fcf9 	bl	8001bc4 <HAL_GetTick>
 80051d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051d4:	e009      	b.n	80051ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051d6:	f7fc fcf5 	bl	8001bc4 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e4:	d901      	bls.n	80051ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e007      	b.n	80051fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_PWREx_ConfigSupply+0x70>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f6:	d1ee      	bne.n	80051d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	58024800 	.word	0x58024800

08005208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08c      	sub	sp, #48	; 0x30
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e3ff      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8087 	beq.w	8005336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005228:	4b99      	ldr	r3, [pc, #612]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005232:	4b97      	ldr	r3, [pc, #604]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	2b10      	cmp	r3, #16
 800523c:	d007      	beq.n	800524e <HAL_RCC_OscConfig+0x46>
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	2b18      	cmp	r3, #24
 8005242:	d110      	bne.n	8005266 <HAL_RCC_OscConfig+0x5e>
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d10b      	bne.n	8005266 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524e:	4b90      	ldr	r3, [pc, #576]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d06c      	beq.n	8005334 <HAL_RCC_OscConfig+0x12c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d168      	bne.n	8005334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e3d9      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x76>
 8005270:	4b87      	ldr	r3, [pc, #540]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a86      	ldr	r2, [pc, #536]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e02e      	b.n	80052dc <HAL_RCC_OscConfig+0xd4>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x98>
 8005286:	4b82      	ldr	r3, [pc, #520]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a81      	ldr	r2, [pc, #516]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 800528c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	4b7f      	ldr	r3, [pc, #508]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a7e      	ldr	r2, [pc, #504]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e01d      	b.n	80052dc <HAL_RCC_OscConfig+0xd4>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCC_OscConfig+0xbc>
 80052aa:	4b79      	ldr	r3, [pc, #484]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a78      	ldr	r2, [pc, #480]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80052b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	4b76      	ldr	r3, [pc, #472]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a75      	ldr	r2, [pc, #468]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e00b      	b.n	80052dc <HAL_RCC_OscConfig+0xd4>
 80052c4:	4b72      	ldr	r3, [pc, #456]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a71      	ldr	r2, [pc, #452]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80052ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	4b6f      	ldr	r3, [pc, #444]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a6e      	ldr	r2, [pc, #440]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80052d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d013      	beq.n	800530c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fc fc6e 	bl	8001bc4 <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fc fc6a 	bl	8001bc4 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e38d      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052fe:	4b64      	ldr	r3, [pc, #400]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0xe4>
 800530a:	e014      	b.n	8005336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fc fc5a 	bl	8001bc4 <HAL_GetTick>
 8005310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005314:	f7fc fc56 	bl	8001bc4 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	; 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e379      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005326:	4b5a      	ldr	r3, [pc, #360]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x10c>
 8005332:	e000      	b.n	8005336 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80ae 	beq.w	80054a0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005344:	4b52      	ldr	r3, [pc, #328]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800534c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800534e:	4b50      	ldr	r3, [pc, #320]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_RCC_OscConfig+0x162>
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	2b18      	cmp	r3, #24
 800535e:	d13a      	bne.n	80053d6 <HAL_RCC_OscConfig+0x1ce>
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d135      	bne.n	80053d6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800536a:	4b49      	ldr	r3, [pc, #292]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_RCC_OscConfig+0x17a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e34b      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005382:	f7fc fc4f 	bl	8001c24 <HAL_GetREVID>
 8005386:	4603      	mov	r3, r0
 8005388:	f241 0203 	movw	r2, #4099	; 0x1003
 800538c:	4293      	cmp	r3, r2
 800538e:	d817      	bhi.n	80053c0 <HAL_RCC_OscConfig+0x1b8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d108      	bne.n	80053aa <HAL_RCC_OscConfig+0x1a2>
 8005398:	4b3d      	ldr	r3, [pc, #244]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053a0:	4a3b      	ldr	r2, [pc, #236]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80053a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053a8:	e07a      	b.n	80054a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053aa:	4b39      	ldr	r3, [pc, #228]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	031b      	lsls	r3, r3, #12
 80053b8:	4935      	ldr	r1, [pc, #212]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053be:	e06f      	b.n	80054a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c0:	4b33      	ldr	r3, [pc, #204]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	4930      	ldr	r1, [pc, #192]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d4:	e064      	b.n	80054a0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d045      	beq.n	800546a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053de:	4b2c      	ldr	r3, [pc, #176]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 0219 	bic.w	r2, r3, #25
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	4929      	ldr	r1, [pc, #164]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fc fbe8 	bl	8001bc4 <HAL_GetTick>
 80053f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f8:	f7fc fbe4 	bl	8001bc4 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e307      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800540a:	4b21      	ldr	r3, [pc, #132]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005416:	f7fc fc05 	bl	8001c24 <HAL_GetREVID>
 800541a:	4603      	mov	r3, r0
 800541c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005420:	4293      	cmp	r3, r2
 8005422:	d817      	bhi.n	8005454 <HAL_RCC_OscConfig+0x24c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d108      	bne.n	800543e <HAL_RCC_OscConfig+0x236>
 800542c:	4b18      	ldr	r3, [pc, #96]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005434:	4a16      	ldr	r2, [pc, #88]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800543a:	6053      	str	r3, [r2, #4]
 800543c:	e030      	b.n	80054a0 <HAL_RCC_OscConfig+0x298>
 800543e:	4b14      	ldr	r3, [pc, #80]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	031b      	lsls	r3, r3, #12
 800544c:	4910      	ldr	r1, [pc, #64]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 800544e:	4313      	orrs	r3, r2
 8005450:	604b      	str	r3, [r1, #4]
 8005452:	e025      	b.n	80054a0 <HAL_RCC_OscConfig+0x298>
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	490b      	ldr	r1, [pc, #44]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
 8005468:	e01a      	b.n	80054a0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a08      	ldr	r2, [pc, #32]	; (8005490 <HAL_RCC_OscConfig+0x288>)
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005476:	f7fc fba5 	bl	8001bc4 <HAL_GetTick>
 800547a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800547c:	e00a      	b.n	8005494 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800547e:	f7fc fba1 	bl	8001bc4 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d903      	bls.n	8005494 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e2c4      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
 8005490:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005494:	4ba4      	ldr	r3, [pc, #656]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ee      	bne.n	800547e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80a9 	beq.w	8005600 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ae:	4b9e      	ldr	r3, [pc, #632]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054b8:	4b9b      	ldr	r3, [pc, #620]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d007      	beq.n	80054d4 <HAL_RCC_OscConfig+0x2cc>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b18      	cmp	r3, #24
 80054c8:	d13a      	bne.n	8005540 <HAL_RCC_OscConfig+0x338>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d135      	bne.n	8005540 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054d4:	4b94      	ldr	r3, [pc, #592]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_OscConfig+0x2e4>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	2b80      	cmp	r3, #128	; 0x80
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e296      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054ec:	f7fc fb9a 	bl	8001c24 <HAL_GetREVID>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d817      	bhi.n	800552a <HAL_RCC_OscConfig+0x322>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d108      	bne.n	8005514 <HAL_RCC_OscConfig+0x30c>
 8005502:	4b89      	ldr	r3, [pc, #548]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800550a:	4a87      	ldr	r2, [pc, #540]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800550c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005510:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005512:	e075      	b.n	8005600 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005514:	4b84      	ldr	r3, [pc, #528]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	069b      	lsls	r3, r3, #26
 8005522:	4981      	ldr	r1, [pc, #516]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005528:	e06a      	b.n	8005600 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800552a:	4b7f      	ldr	r3, [pc, #508]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	497b      	ldr	r1, [pc, #492]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800553a:	4313      	orrs	r3, r2
 800553c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800553e:	e05f      	b.n	8005600 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d042      	beq.n	80055ce <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005548:	4b77      	ldr	r3, [pc, #476]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a76      	ldr	r2, [pc, #472]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800554e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fc fb36 	bl	8001bc4 <HAL_GetTick>
 8005558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800555c:	f7fc fb32 	bl	8001bc4 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e255      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800556e:	4b6e      	ldr	r3, [pc, #440]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f0      	beq.n	800555c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800557a:	f7fc fb53 	bl	8001c24 <HAL_GetREVID>
 800557e:	4603      	mov	r3, r0
 8005580:	f241 0203 	movw	r2, #4099	; 0x1003
 8005584:	4293      	cmp	r3, r2
 8005586:	d817      	bhi.n	80055b8 <HAL_RCC_OscConfig+0x3b0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	2b20      	cmp	r3, #32
 800558e:	d108      	bne.n	80055a2 <HAL_RCC_OscConfig+0x39a>
 8005590:	4b65      	ldr	r3, [pc, #404]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005598:	4a63      	ldr	r2, [pc, #396]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800559a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800559e:	6053      	str	r3, [r2, #4]
 80055a0:	e02e      	b.n	8005600 <HAL_RCC_OscConfig+0x3f8>
 80055a2:	4b61      	ldr	r3, [pc, #388]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	069b      	lsls	r3, r3, #26
 80055b0:	495d      	ldr	r1, [pc, #372]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
 80055b6:	e023      	b.n	8005600 <HAL_RCC_OscConfig+0x3f8>
 80055b8:	4b5b      	ldr	r3, [pc, #364]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	061b      	lsls	r3, r3, #24
 80055c6:	4958      	ldr	r1, [pc, #352]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60cb      	str	r3, [r1, #12]
 80055cc:	e018      	b.n	8005600 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055ce:	4b56      	ldr	r3, [pc, #344]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a55      	ldr	r2, [pc, #340]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80055d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fc faf3 	bl	8001bc4 <HAL_GetTick>
 80055de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055e2:	f7fc faef 	bl	8001bc4 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e212      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055f4:	4b4c      	ldr	r3, [pc, #304]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f0      	bne.n	80055e2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d036      	beq.n	800567a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d019      	beq.n	8005648 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005614:	4b44      	ldr	r3, [pc, #272]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005618:	4a43      	ldr	r2, [pc, #268]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005620:	f7fc fad0 	bl	8001bc4 <HAL_GetTick>
 8005624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005628:	f7fc facc 	bl	8001bc4 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e1ef      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800563c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f0      	beq.n	8005628 <HAL_RCC_OscConfig+0x420>
 8005646:	e018      	b.n	800567a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005648:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800564a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564c:	4a36      	ldr	r2, [pc, #216]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 800564e:	f023 0301 	bic.w	r3, r3, #1
 8005652:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fc fab6 	bl	8001bc4 <HAL_GetTick>
 8005658:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800565c:	f7fc fab2 	bl	8001bc4 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e1d5      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800566e:	4b2e      	ldr	r3, [pc, #184]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d036      	beq.n	80056f4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d019      	beq.n	80056c2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800568e:	4b26      	ldr	r3, [pc, #152]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a25      	ldr	r2, [pc, #148]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 8005694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005698:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800569a:	f7fc fa93 	bl	8001bc4 <HAL_GetTick>
 800569e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056a2:	f7fc fa8f 	bl	8001bc4 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e1b2      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056b4:	4b1c      	ldr	r3, [pc, #112]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <HAL_RCC_OscConfig+0x49a>
 80056c0:	e018      	b.n	80056f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056c2:	4b19      	ldr	r3, [pc, #100]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a18      	ldr	r2, [pc, #96]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80056c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056ce:	f7fc fa79 	bl	8001bc4 <HAL_GetTick>
 80056d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056d6:	f7fc fa75 	bl	8001bc4 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e198      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <HAL_RCC_OscConfig+0x520>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8085 	beq.w	800580c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005702:	4b0a      	ldr	r3, [pc, #40]	; (800572c <HAL_RCC_OscConfig+0x524>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a09      	ldr	r2, [pc, #36]	; (800572c <HAL_RCC_OscConfig+0x524>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800570e:	f7fc fa59 	bl	8001bc4 <HAL_GetTick>
 8005712:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005714:	e00c      	b.n	8005730 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005716:	f7fc fa55 	bl	8001bc4 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b64      	cmp	r3, #100	; 0x64
 8005722:	d905      	bls.n	8005730 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e178      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
 8005728:	58024400 	.word	0x58024400
 800572c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005730:	4b96      	ldr	r3, [pc, #600]	; (800598c <HAL_RCC_OscConfig+0x784>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0ec      	beq.n	8005716 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d106      	bne.n	8005752 <HAL_RCC_OscConfig+0x54a>
 8005744:	4b92      	ldr	r3, [pc, #584]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005748:	4a91      	ldr	r2, [pc, #580]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	6713      	str	r3, [r2, #112]	; 0x70
 8005750:	e02d      	b.n	80057ae <HAL_RCC_OscConfig+0x5a6>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10c      	bne.n	8005774 <HAL_RCC_OscConfig+0x56c>
 800575a:	4b8d      	ldr	r3, [pc, #564]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a8c      	ldr	r2, [pc, #560]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
 8005766:	4b8a      	ldr	r3, [pc, #552]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a89      	ldr	r2, [pc, #548]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800576c:	f023 0304 	bic.w	r3, r3, #4
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
 8005772:	e01c      	b.n	80057ae <HAL_RCC_OscConfig+0x5a6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b05      	cmp	r3, #5
 800577a:	d10c      	bne.n	8005796 <HAL_RCC_OscConfig+0x58e>
 800577c:	4b84      	ldr	r3, [pc, #528]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005780:	4a83      	ldr	r2, [pc, #524]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005782:	f043 0304 	orr.w	r3, r3, #4
 8005786:	6713      	str	r3, [r2, #112]	; 0x70
 8005788:	4b81      	ldr	r3, [pc, #516]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578c:	4a80      	ldr	r2, [pc, #512]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	6713      	str	r3, [r2, #112]	; 0x70
 8005794:	e00b      	b.n	80057ae <HAL_RCC_OscConfig+0x5a6>
 8005796:	4b7e      	ldr	r3, [pc, #504]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	4a7d      	ldr	r2, [pc, #500]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	6713      	str	r3, [r2, #112]	; 0x70
 80057a2:	4b7b      	ldr	r3, [pc, #492]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	4a7a      	ldr	r2, [pc, #488]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80057a8:	f023 0304 	bic.w	r3, r3, #4
 80057ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d015      	beq.n	80057e2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b6:	f7fc fa05 	bl	8001bc4 <HAL_GetTick>
 80057ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057bc:	e00a      	b.n	80057d4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057be:	f7fc fa01 	bl	8001bc4 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e122      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057d4:	4b6e      	ldr	r3, [pc, #440]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ee      	beq.n	80057be <HAL_RCC_OscConfig+0x5b6>
 80057e0:	e014      	b.n	800580c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e2:	f7fc f9ef 	bl	8001bc4 <HAL_GetTick>
 80057e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057e8:	e00a      	b.n	8005800 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fc f9eb 	bl	8001bc4 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e10c      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005800:	4b63      	ldr	r3, [pc, #396]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ee      	bne.n	80057ea <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8101 	beq.w	8005a18 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005816:	4b5e      	ldr	r3, [pc, #376]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800581e:	2b18      	cmp	r3, #24
 8005820:	f000 80bc 	beq.w	800599c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2b02      	cmp	r3, #2
 800582a:	f040 8095 	bne.w	8005958 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582e:	4b58      	ldr	r3, [pc, #352]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a57      	ldr	r2, [pc, #348]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583a:	f7fc f9c3 	bl	8001bc4 <HAL_GetTick>
 800583e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005842:	f7fc f9bf 	bl	8001bc4 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e0e2      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005854:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f0      	bne.n	8005842 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005860:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005862:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005864:	4b4b      	ldr	r3, [pc, #300]	; (8005994 <HAL_RCC_OscConfig+0x78c>)
 8005866:	4013      	ands	r3, r2
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005870:	0112      	lsls	r2, r2, #4
 8005872:	430a      	orrs	r2, r1
 8005874:	4946      	ldr	r1, [pc, #280]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005876:	4313      	orrs	r3, r2
 8005878:	628b      	str	r3, [r1, #40]	; 0x28
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	3b01      	subs	r3, #1
 8005880:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005888:	3b01      	subs	r3, #1
 800588a:	025b      	lsls	r3, r3, #9
 800588c:	b29b      	uxth	r3, r3
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	3b01      	subs	r3, #1
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	3b01      	subs	r3, #1
 80058a4:	061b      	lsls	r3, r3, #24
 80058a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058aa:	4939      	ldr	r1, [pc, #228]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80058b0:	4b37      	ldr	r3, [pc, #220]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	4a36      	ldr	r2, [pc, #216]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058b6:	f023 0301 	bic.w	r3, r3, #1
 80058ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058bc:	4b34      	ldr	r3, [pc, #208]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <HAL_RCC_OscConfig+0x790>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058c8:	00d2      	lsls	r2, r2, #3
 80058ca:	4931      	ldr	r1, [pc, #196]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058d0:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	f023 020c 	bic.w	r2, r3, #12
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	492c      	ldr	r1, [pc, #176]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058e2:	4b2b      	ldr	r3, [pc, #172]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	f023 0202 	bic.w	r2, r3, #2
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	4928      	ldr	r1, [pc, #160]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058f4:	4b26      	ldr	r3, [pc, #152]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	4a25      	ldr	r2, [pc, #148]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 80058fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005900:	4b23      	ldr	r3, [pc, #140]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	4a22      	ldr	r2, [pc, #136]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800590c:	4b20      	ldr	r3, [pc, #128]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005916:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005918:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4a1c      	ldr	r2, [pc, #112]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005924:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a19      	ldr	r2, [pc, #100]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800592a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800592e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fc f948 	bl	8001bc4 <HAL_GetTick>
 8005934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005938:	f7fc f944 	bl	8001bc4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e067      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800594a:	4b11      	ldr	r3, [pc, #68]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0x730>
 8005956:	e05f      	b.n	8005a18 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005958:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a0c      	ldr	r2, [pc, #48]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 800595e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fc f92e 	bl	8001bc4 <HAL_GetTick>
 8005968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800596c:	f7fc f92a 	bl	8001bc4 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e04d      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <HAL_RCC_OscConfig+0x788>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f0      	bne.n	800596c <HAL_RCC_OscConfig+0x764>
 800598a:	e045      	b.n	8005a18 <HAL_RCC_OscConfig+0x810>
 800598c:	58024800 	.word	0x58024800
 8005990:	58024400 	.word	0x58024400
 8005994:	fffffc0c 	.word	0xfffffc0c
 8005998:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800599c:	4b21      	ldr	r3, [pc, #132]	; (8005a24 <HAL_RCC_OscConfig+0x81c>)
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059a2:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <HAL_RCC_OscConfig+0x81c>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d031      	beq.n	8005a14 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f003 0203 	and.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d12a      	bne.n	8005a14 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	091b      	lsrs	r3, r3, #4
 80059c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d122      	bne.n	8005a14 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d11a      	bne.n	8005a14 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	0a5b      	lsrs	r3, r3, #9
 80059e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d111      	bne.n	8005a14 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d108      	bne.n	8005a14 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	0e1b      	lsrs	r3, r3, #24
 8005a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d001      	beq.n	8005a18 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3730      	adds	r7, #48	; 0x30
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	58024400 	.word	0x58024400

08005a28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e19c      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b8a      	ldr	r3, [pc, #552]	; (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d910      	bls.n	8005a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b87      	ldr	r3, [pc, #540]	; (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 020f 	bic.w	r2, r3, #15
 8005a52:	4985      	ldr	r1, [pc, #532]	; (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5a:	4b83      	ldr	r3, [pc, #524]	; (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e184      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	4b7b      	ldr	r3, [pc, #492]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d908      	bls.n	8005a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a88:	4b78      	ldr	r3, [pc, #480]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	4975      	ldr	r1, [pc, #468]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d010      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	4b70      	ldr	r3, [pc, #448]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d908      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ab6:	4b6d      	ldr	r3, [pc, #436]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	496a      	ldr	r1, [pc, #424]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d010      	beq.n	8005af6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	4b64      	ldr	r3, [pc, #400]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d908      	bls.n	8005af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ae4:	4b61      	ldr	r3, [pc, #388]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	495e      	ldr	r1, [pc, #376]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d010      	beq.n	8005b24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	4b59      	ldr	r3, [pc, #356]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d908      	bls.n	8005b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b12:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	4953      	ldr	r1, [pc, #332]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d010      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	4b4d      	ldr	r3, [pc, #308]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d908      	bls.n	8005b52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b40:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f023 020f 	bic.w	r2, r3, #15
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4947      	ldr	r1, [pc, #284]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d055      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b5e:	4b43      	ldr	r3, [pc, #268]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	4940      	ldr	r1, [pc, #256]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d107      	bne.n	8005b88 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b78:	4b3c      	ldr	r3, [pc, #240]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d121      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0f6      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b90:	4b36      	ldr	r3, [pc, #216]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d115      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0ea      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d107      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ba8:	4b30      	ldr	r3, [pc, #192]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0de      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bb8:	4b2c      	ldr	r3, [pc, #176]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0d6      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bc8:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f023 0207 	bic.w	r2, r3, #7
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4925      	ldr	r1, [pc, #148]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bda:	f7fb fff3 	bl	8001bc4 <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be0:	e00a      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be2:	f7fb ffef 	bl	8001bc4 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e0be      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d1eb      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d208      	bcs.n	8005c38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c26:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f023 020f 	bic.w	r2, r3, #15
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	490e      	ldr	r1, [pc, #56]	; (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c38:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d214      	bcs.n	8005c70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c46:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 020f 	bic.w	r2, r3, #15
 8005c4e:	4906      	ldr	r1, [pc, #24]	; (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d005      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e086      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
 8005c68:	52002000 	.word	0x52002000
 8005c6c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d010      	beq.n	8005c9e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d208      	bcs.n	8005c9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c8c:	4b3c      	ldr	r3, [pc, #240]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	4939      	ldr	r1, [pc, #228]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d010      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	4b34      	ldr	r3, [pc, #208]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d208      	bcs.n	8005ccc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cba:	4b31      	ldr	r3, [pc, #196]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	492e      	ldr	r1, [pc, #184]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d010      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	4b28      	ldr	r3, [pc, #160]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d208      	bcs.n	8005cfa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	4922      	ldr	r1, [pc, #136]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d010      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69da      	ldr	r2, [r3, #28]
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d208      	bcs.n	8005d28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d16:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	4917      	ldr	r1, [pc, #92]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d28:	f000 f834 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	4912      	ldr	r1, [pc, #72]	; (8005d84 <HAL_RCC_ClockConfig+0x35c>)
 8005d3a:	5ccb      	ldrb	r3, [r1, r3]
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
 8005d44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d46:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <HAL_RCC_ClockConfig+0x35c>)
 8005d50:	5cd3      	ldrb	r3, [r2, r3]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5c:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <HAL_RCC_ClockConfig+0x360>)
 8005d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d60:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <HAL_RCC_ClockConfig+0x364>)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <HAL_RCC_ClockConfig+0x368>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fb fee0 	bl	8001b30 <HAL_InitTick>
 8005d70:	4603      	mov	r3, r0
 8005d72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	58024400 	.word	0x58024400
 8005d84:	0800993c 	.word	0x0800993c
 8005d88:	2400001c 	.word	0x2400001c
 8005d8c:	24000018 	.word	0x24000018
 8005d90:	24000020 	.word	0x24000020

08005d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d9a:	4bb3      	ldr	r3, [pc, #716]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005da2:	2b18      	cmp	r3, #24
 8005da4:	f200 8155 	bhi.w	8006052 <HAL_RCC_GetSysClockFreq+0x2be>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005e15 	.word	0x08005e15
 8005db4:	08006053 	.word	0x08006053
 8005db8:	08006053 	.word	0x08006053
 8005dbc:	08006053 	.word	0x08006053
 8005dc0:	08006053 	.word	0x08006053
 8005dc4:	08006053 	.word	0x08006053
 8005dc8:	08006053 	.word	0x08006053
 8005dcc:	08006053 	.word	0x08006053
 8005dd0:	08005e3b 	.word	0x08005e3b
 8005dd4:	08006053 	.word	0x08006053
 8005dd8:	08006053 	.word	0x08006053
 8005ddc:	08006053 	.word	0x08006053
 8005de0:	08006053 	.word	0x08006053
 8005de4:	08006053 	.word	0x08006053
 8005de8:	08006053 	.word	0x08006053
 8005dec:	08006053 	.word	0x08006053
 8005df0:	08005e41 	.word	0x08005e41
 8005df4:	08006053 	.word	0x08006053
 8005df8:	08006053 	.word	0x08006053
 8005dfc:	08006053 	.word	0x08006053
 8005e00:	08006053 	.word	0x08006053
 8005e04:	08006053 	.word	0x08006053
 8005e08:	08006053 	.word	0x08006053
 8005e0c:	08006053 	.word	0x08006053
 8005e10:	08005e47 	.word	0x08005e47
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e14:	4b94      	ldr	r3, [pc, #592]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e20:	4b91      	ldr	r3, [pc, #580]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	08db      	lsrs	r3, r3, #3
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	4a90      	ldr	r2, [pc, #576]	; (800606c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e32:	e111      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e34:	4b8d      	ldr	r3, [pc, #564]	; (800606c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e36:	61bb      	str	r3, [r7, #24]
    break;
 8005e38:	e10e      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e3a:	4b8d      	ldr	r3, [pc, #564]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e3c:	61bb      	str	r3, [r7, #24]
    break;
 8005e3e:	e10b      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e40:	4b8c      	ldr	r3, [pc, #560]	; (8006074 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e42:	61bb      	str	r3, [r7, #24]
    break;
 8005e44:	e108      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e46:	4b88      	ldr	r3, [pc, #544]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e50:	4b85      	ldr	r3, [pc, #532]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e5c:	4b82      	ldr	r3, [pc, #520]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e66:	4b80      	ldr	r3, [pc, #512]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	08db      	lsrs	r3, r3, #3
 8005e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80e1 	beq.w	800604c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	f000 8083 	beq.w	8005f98 <HAL_RCC_GetSysClockFreq+0x204>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f200 80a1 	bhi.w	8005fdc <HAL_RCC_GetSysClockFreq+0x248>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x114>
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d056      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ea6:	e099      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea8:	4b6f      	ldr	r3, [pc, #444]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d02d      	beq.n	8005f10 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eb4:	4b6c      	ldr	r3, [pc, #432]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	08db      	lsrs	r3, r3, #3
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	4a6b      	ldr	r2, [pc, #428]	; (800606c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ede:	4b62      	ldr	r3, [pc, #392]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ef2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f0e:	e087      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800607c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f22:	4b51      	ldr	r3, [pc, #324]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f52:	e065      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f66:	4b40      	ldr	r3, [pc, #256]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f96:	e043      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006084 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005faa:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fbe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fda:	e021      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fee:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006002:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800601e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006020:	4b11      	ldr	r3, [pc, #68]	; (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	0a5b      	lsrs	r3, r3, #9
 8006026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602a:	3301      	adds	r3, #1
 800602c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006038:	edd7 6a07 	vldr	s13, [r7, #28]
 800603c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006044:	ee17 3a90 	vmov	r3, s15
 8006048:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800604a:	e005      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
    break;
 8006050:	e002      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006054:	61bb      	str	r3, [r7, #24]
    break;
 8006056:	bf00      	nop
  }

  return sysclockfreq;
 8006058:	69bb      	ldr	r3, [r7, #24]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3724      	adds	r7, #36	; 0x24
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	58024400 	.word	0x58024400
 800606c:	03d09000 	.word	0x03d09000
 8006070:	003d0900 	.word	0x003d0900
 8006074:	007f2815 	.word	0x007f2815
 8006078:	46000000 	.word	0x46000000
 800607c:	4c742400 	.word	0x4c742400
 8006080:	4a742400 	.word	0x4a742400
 8006084:	4afe502a 	.word	0x4afe502a

08006088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800608e:	f7ff fe81 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8006092:	4602      	mov	r2, r0
 8006094:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	490f      	ldr	r1, [pc, #60]	; (80060dc <HAL_RCC_GetHCLKFreq+0x54>)
 80060a0:	5ccb      	ldrb	r3, [r1, r3]
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	fa22 f303 	lsr.w	r3, r2, r3
 80060aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	4a09      	ldr	r2, [pc, #36]	; (80060dc <HAL_RCC_GetHCLKFreq+0x54>)
 80060b6:	5cd3      	ldrb	r3, [r2, r3]
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	fa22 f303 	lsr.w	r3, r2, r3
 80060c2:	4a07      	ldr	r2, [pc, #28]	; (80060e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80060c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060c6:	4a07      	ldr	r2, [pc, #28]	; (80060e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060cc:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	58024400 	.word	0x58024400
 80060dc:	0800993c 	.word	0x0800993c
 80060e0:	2400001c 	.word	0x2400001c
 80060e4:	24000018 	.word	0x24000018

080060e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060ec:	f7ff ffcc 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4b06      	ldr	r3, [pc, #24]	; (800610c <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	4904      	ldr	r1, [pc, #16]	; (8006110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060fe:	5ccb      	ldrb	r3, [r1, r3]
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006108:	4618      	mov	r0, r3
 800610a:	bd80      	pop	{r7, pc}
 800610c:	58024400 	.word	0x58024400
 8006110:	0800993c 	.word	0x0800993c

08006114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006118:	f7ff ffb6 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 800611c:	4602      	mov	r2, r0
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	0a1b      	lsrs	r3, r3, #8
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	4904      	ldr	r1, [pc, #16]	; (800613c <HAL_RCC_GetPCLK2Freq+0x28>)
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}
 8006138:	58024400 	.word	0x58024400
 800613c:	0800993c 	.word	0x0800993c

08006140 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006148:	2300      	movs	r3, #0
 800614a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800614c:	2300      	movs	r3, #0
 800614e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d03f      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006160:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006164:	d02a      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800616a:	d824      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800616c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006170:	d018      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006176:	d81e      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800617c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006180:	d007      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006182:	e018      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006184:	4bab      	ldr	r3, [pc, #684]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	4aaa      	ldr	r2, [pc, #680]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800618a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006190:	e015      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3304      	adds	r3, #4
 8006196:	2102      	movs	r1, #2
 8006198:	4618      	mov	r0, r3
 800619a:	f001 f9cf 	bl	800753c <RCCEx_PLL2_Config>
 800619e:	4603      	mov	r3, r0
 80061a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061a2:	e00c      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3324      	adds	r3, #36	; 0x24
 80061a8:	2102      	movs	r1, #2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fa78 	bl	80076a0 <RCCEx_PLL3_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061b4:	e003      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	75fb      	strb	r3, [r7, #23]
      break;
 80061ba:	e000      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061c4:	4b9b      	ldr	r3, [pc, #620]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d0:	4998      	ldr	r1, [pc, #608]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	650b      	str	r3, [r1, #80]	; 0x50
 80061d6:	e001      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d03d      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d826      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	0800620d 	.word	0x0800620d
 80061fc:	0800621b 	.word	0x0800621b
 8006200:	0800622d 	.word	0x0800622d
 8006204:	08006245 	.word	0x08006245
 8006208:	08006245 	.word	0x08006245
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800620c:	4b89      	ldr	r3, [pc, #548]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	4a88      	ldr	r2, [pc, #544]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006218:	e015      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f001 f98b 	bl	800753c <RCCEx_PLL2_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800622a:	e00c      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3324      	adds	r3, #36	; 0x24
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f001 fa34 	bl	80076a0 <RCCEx_PLL3_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800623c:	e003      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	75fb      	strb	r3, [r7, #23]
      break;
 8006242:	e000      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d109      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800624c:	4b79      	ldr	r3, [pc, #484]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800624e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006250:	f023 0207 	bic.w	r2, r3, #7
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006258:	4976      	ldr	r1, [pc, #472]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800625a:	4313      	orrs	r3, r2
 800625c:	650b      	str	r3, [r1, #80]	; 0x50
 800625e:	e001      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800626c:	2b00      	cmp	r3, #0
 800626e:	d042      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006278:	d02b      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800627a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800627e:	d825      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006280:	2bc0      	cmp	r3, #192	; 0xc0
 8006282:	d028      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006284:	2bc0      	cmp	r3, #192	; 0xc0
 8006286:	d821      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006288:	2b80      	cmp	r3, #128	; 0x80
 800628a:	d016      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800628c:	2b80      	cmp	r3, #128	; 0x80
 800628e:	d81d      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d007      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006298:	e018      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629a:	4b66      	ldr	r3, [pc, #408]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	4a65      	ldr	r2, [pc, #404]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062a6:	e017      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 f944 	bl	800753c <RCCEx_PLL2_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062b8:	e00e      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3324      	adds	r3, #36	; 0x24
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 f9ed 	bl	80076a0 <RCCEx_PLL3_Config>
 80062c6:	4603      	mov	r3, r0
 80062c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062ca:	e005      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	75fb      	strb	r3, [r7, #23]
      break;
 80062d0:	e002      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80062d2:	bf00      	nop
 80062d4:	e000      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80062d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80062de:	4b55      	ldr	r3, [pc, #340]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ea:	4952      	ldr	r1, [pc, #328]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	650b      	str	r3, [r1, #80]	; 0x50
 80062f0:	e001      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d049      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800630c:	d030      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800630e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006312:	d82a      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006314:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006318:	d02c      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800631a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800631e:	d824      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006324:	d018      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800632a:	d81e      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006334:	d007      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006336:	e018      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006338:	4b3e      	ldr	r3, [pc, #248]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a3d      	ldr	r2, [pc, #244]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800633e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006342:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006344:	e017      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3304      	adds	r3, #4
 800634a:	2100      	movs	r1, #0
 800634c:	4618      	mov	r0, r3
 800634e:	f001 f8f5 	bl	800753c <RCCEx_PLL2_Config>
 8006352:	4603      	mov	r3, r0
 8006354:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006356:	e00e      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3324      	adds	r3, #36	; 0x24
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f99e 	bl	80076a0 <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006368:	e005      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
      break;
 800636e:	e002      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006370:	bf00      	nop
 8006372:	e000      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10a      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800637c:	4b2d      	ldr	r3, [pc, #180]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800638a:	492a      	ldr	r1, [pc, #168]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800638c:	4313      	orrs	r3, r2
 800638e:	658b      	str	r3, [r1, #88]	; 0x58
 8006390:	e001      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d04c      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ac:	d030      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80063ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063b2:	d82a      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063b8:	d02c      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80063ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063be:	d824      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063c4:	d018      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80063c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ca:	d81e      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80063d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063d4:	d007      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80063d6:	e018      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d8:	4b16      	ldr	r3, [pc, #88]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	4a15      	ldr	r2, [pc, #84]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063e4:	e017      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3304      	adds	r3, #4
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 f8a5 	bl	800753c <RCCEx_PLL2_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063f6:	e00e      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3324      	adds	r3, #36	; 0x24
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 f94e 	bl	80076a0 <RCCEx_PLL3_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006408:	e005      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	75fb      	strb	r3, [r7, #23]
      break;
 800640e:	e002      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006416:	7dfb      	ldrb	r3, [r7, #23]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10d      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800641e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006420:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800642a:	4902      	ldr	r1, [pc, #8]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800642c:	4313      	orrs	r3, r2
 800642e:	658b      	str	r3, [r1, #88]	; 0x58
 8006430:	e004      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006432:	bf00      	nop
 8006434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d032      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	d01c      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006450:	2b30      	cmp	r3, #48	; 0x30
 8006452:	d817      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d00c      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006458:	2b20      	cmp	r3, #32
 800645a:	d813      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d016      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006460:	2b10      	cmp	r3, #16
 8006462:	d10f      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006464:	4baf      	ldr	r3, [pc, #700]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	4aae      	ldr	r2, [pc, #696]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006470:	e00e      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3304      	adds	r3, #4
 8006476:	2102      	movs	r1, #2
 8006478:	4618      	mov	r0, r3
 800647a:	f001 f85f 	bl	800753c <RCCEx_PLL2_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006482:	e005      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
      break;
 8006488:	e002      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800648e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006496:	4ba3      	ldr	r3, [pc, #652]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a2:	49a0      	ldr	r1, [pc, #640]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064a8:	e001      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d047      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064c2:	d030      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80064c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064c8:	d82a      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80064ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064ce:	d02c      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80064d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064d4:	d824      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80064d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064da:	d018      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80064dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e0:	d81e      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80064e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ea:	d007      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80064ec:	e018      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ee:	4b8d      	ldr	r3, [pc, #564]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	4a8c      	ldr	r2, [pc, #560]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064fa:	e017      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f001 f81a 	bl	800753c <RCCEx_PLL2_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800650c:	e00e      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3324      	adds	r3, #36	; 0x24
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f001 f8c3 	bl	80076a0 <RCCEx_PLL3_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800651e:	e005      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
      break;
 8006524:	e002      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006526:	bf00      	nop
 8006528:	e000      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800652a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006532:	4b7c      	ldr	r3, [pc, #496]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006536:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653e:	4979      	ldr	r1, [pc, #484]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006540:	4313      	orrs	r3, r2
 8006542:	650b      	str	r3, [r1, #80]	; 0x50
 8006544:	e001      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d049      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800655e:	d02e      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006564:	d828      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800656a:	d02a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800656c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006570:	d822      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006572:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006576:	d026      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006578:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800657c:	d81c      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800657e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006582:	d010      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006588:	d816      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d01d      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800658e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006592:	d111      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3304      	adds	r3, #4
 8006598:	2101      	movs	r1, #1
 800659a:	4618      	mov	r0, r3
 800659c:	f000 ffce 	bl	800753c <RCCEx_PLL2_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065a4:	e012      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3324      	adds	r3, #36	; 0x24
 80065aa:	2101      	movs	r1, #1
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 f877 	bl	80076a0 <RCCEx_PLL3_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065b6:	e009      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	75fb      	strb	r3, [r7, #23]
      break;
 80065bc:	e006      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065be:	bf00      	nop
 80065c0:	e004      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80065d2:	4b54      	ldr	r3, [pc, #336]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065de:	4951      	ldr	r1, [pc, #324]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	650b      	str	r3, [r1, #80]	; 0x50
 80065e4:	e001      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d04b      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006600:	d02e      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006606:	d828      	bhi.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d02a      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006612:	d822      	bhi.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006614:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006618:	d026      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800661a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800661e:	d81c      	bhi.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006624:	d010      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800662a:	d816      	bhi.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01d      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006634:	d111      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3304      	adds	r3, #4
 800663a:	2101      	movs	r1, #1
 800663c:	4618      	mov	r0, r3
 800663e:	f000 ff7d 	bl	800753c <RCCEx_PLL2_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006646:	e012      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3324      	adds	r3, #36	; 0x24
 800664c:	2101      	movs	r1, #1
 800664e:	4618      	mov	r0, r3
 8006650:	f001 f826 	bl	80076a0 <RCCEx_PLL3_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006658:	e009      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
      break;
 800665e:	e006      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006660:	bf00      	nop
 8006662:	e004      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006664:	bf00      	nop
 8006666:	e002      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006668:	bf00      	nop
 800666a:	e000      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800666c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800666e:	7dfb      	ldrb	r3, [r7, #23]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006674:	4b2b      	ldr	r3, [pc, #172]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006678:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006682:	4928      	ldr	r1, [pc, #160]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006684:	4313      	orrs	r3, r2
 8006686:	658b      	str	r3, [r1, #88]	; 0x58
 8006688:	e001      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d02f      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a2:	d00e      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a8:	d814      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d015      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80066ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b2:	d10f      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b4:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066c0:	e00c      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3304      	adds	r3, #4
 80066c6:	2101      	movs	r1, #1
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 ff37 	bl	800753c <RCCEx_PLL2_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066d2:	e003      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	75fb      	strb	r3, [r7, #23]
      break;
 80066d8:	e000      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80066da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066e2:	4b10      	ldr	r3, [pc, #64]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ee:	490d      	ldr	r1, [pc, #52]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	650b      	str	r3, [r1, #80]	; 0x50
 80066f4:	e001      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d033      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670a:	2b03      	cmp	r3, #3
 800670c:	d81c      	bhi.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	0800674f 	.word	0x0800674f
 8006718:	08006729 	.word	0x08006729
 800671c:	08006737 	.word	0x08006737
 8006720:	0800674f 	.word	0x0800674f
 8006724:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006728:	4bb8      	ldr	r3, [pc, #736]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	4ab7      	ldr	r2, [pc, #732]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800672e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006732:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006734:	e00c      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3304      	adds	r3, #4
 800673a:	2102      	movs	r1, #2
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fefd 	bl	800753c <RCCEx_PLL2_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006746:	e003      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	75fb      	strb	r3, [r7, #23]
      break;
 800674c:	e000      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800674e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006756:	4bad      	ldr	r3, [pc, #692]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	f023 0203 	bic.w	r2, r3, #3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	49aa      	ldr	r1, [pc, #680]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006764:	4313      	orrs	r3, r2
 8006766:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006768:	e001      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8086 	beq.w	8006888 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800677c:	4ba4      	ldr	r3, [pc, #656]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4aa3      	ldr	r2, [pc, #652]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006788:	f7fb fa1c 	bl	8001bc4 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800678e:	e009      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006790:	f7fb fa18 	bl	8001bc4 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b64      	cmp	r3, #100	; 0x64
 800679c:	d902      	bls.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	75fb      	strb	r3, [r7, #23]
        break;
 80067a2:	e005      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067a4:	4b9a      	ldr	r3, [pc, #616]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0ef      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d166      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067b6:	4b95      	ldr	r3, [pc, #596]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067c0:	4053      	eors	r3, r2
 80067c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d013      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067ca:	4b90      	ldr	r3, [pc, #576]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067d4:	4b8d      	ldr	r3, [pc, #564]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d8:	4a8c      	ldr	r2, [pc, #560]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067e0:	4b8a      	ldr	r3, [pc, #552]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a89      	ldr	r2, [pc, #548]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80067ec:	4a87      	ldr	r2, [pc, #540]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fc:	d115      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fe:	f7fb f9e1 	bl	8001bc4 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006804:	e00b      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006806:	f7fb f9dd 	bl	8001bc4 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f241 3288 	movw	r2, #5000	; 0x1388
 8006814:	4293      	cmp	r3, r2
 8006816:	d902      	bls.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	75fb      	strb	r3, [r7, #23]
            break;
 800681c:	e005      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800681e:	4b7b      	ldr	r3, [pc, #492]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0ed      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d126      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800683e:	d10d      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006840:	4b72      	ldr	r3, [pc, #456]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800684e:	0919      	lsrs	r1, r3, #4
 8006850:	4b70      	ldr	r3, [pc, #448]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006852:	400b      	ands	r3, r1
 8006854:	496d      	ldr	r1, [pc, #436]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006856:	4313      	orrs	r3, r2
 8006858:	610b      	str	r3, [r1, #16]
 800685a:	e005      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800685c:	4b6b      	ldr	r3, [pc, #428]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	4a6a      	ldr	r2, [pc, #424]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006862:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006866:	6113      	str	r3, [r2, #16]
 8006868:	4b68      	ldr	r3, [pc, #416]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800686a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006876:	4965      	ldr	r1, [pc, #404]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006878:	4313      	orrs	r3, r2
 800687a:	670b      	str	r3, [r1, #112]	; 0x70
 800687c:	e004      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	75bb      	strb	r3, [r7, #22]
 8006882:	e001      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d07e      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006898:	2b28      	cmp	r3, #40	; 0x28
 800689a:	d867      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	08006973 	.word	0x08006973
 80068a8:	0800696d 	.word	0x0800696d
 80068ac:	0800696d 	.word	0x0800696d
 80068b0:	0800696d 	.word	0x0800696d
 80068b4:	0800696d 	.word	0x0800696d
 80068b8:	0800696d 	.word	0x0800696d
 80068bc:	0800696d 	.word	0x0800696d
 80068c0:	0800696d 	.word	0x0800696d
 80068c4:	08006949 	.word	0x08006949
 80068c8:	0800696d 	.word	0x0800696d
 80068cc:	0800696d 	.word	0x0800696d
 80068d0:	0800696d 	.word	0x0800696d
 80068d4:	0800696d 	.word	0x0800696d
 80068d8:	0800696d 	.word	0x0800696d
 80068dc:	0800696d 	.word	0x0800696d
 80068e0:	0800696d 	.word	0x0800696d
 80068e4:	0800695b 	.word	0x0800695b
 80068e8:	0800696d 	.word	0x0800696d
 80068ec:	0800696d 	.word	0x0800696d
 80068f0:	0800696d 	.word	0x0800696d
 80068f4:	0800696d 	.word	0x0800696d
 80068f8:	0800696d 	.word	0x0800696d
 80068fc:	0800696d 	.word	0x0800696d
 8006900:	0800696d 	.word	0x0800696d
 8006904:	08006973 	.word	0x08006973
 8006908:	0800696d 	.word	0x0800696d
 800690c:	0800696d 	.word	0x0800696d
 8006910:	0800696d 	.word	0x0800696d
 8006914:	0800696d 	.word	0x0800696d
 8006918:	0800696d 	.word	0x0800696d
 800691c:	0800696d 	.word	0x0800696d
 8006920:	0800696d 	.word	0x0800696d
 8006924:	08006973 	.word	0x08006973
 8006928:	0800696d 	.word	0x0800696d
 800692c:	0800696d 	.word	0x0800696d
 8006930:	0800696d 	.word	0x0800696d
 8006934:	0800696d 	.word	0x0800696d
 8006938:	0800696d 	.word	0x0800696d
 800693c:	0800696d 	.word	0x0800696d
 8006940:	0800696d 	.word	0x0800696d
 8006944:	08006973 	.word	0x08006973
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	2101      	movs	r1, #1
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fdf4 	bl	800753c <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006958:	e00c      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3324      	adds	r3, #36	; 0x24
 800695e:	2101      	movs	r1, #1
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fe9d 	bl	80076a0 <RCCEx_PLL3_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800696a:	e003      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
      break;
 8006970:	e000      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800697a:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006986:	4921      	ldr	r1, [pc, #132]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006988:	4313      	orrs	r3, r2
 800698a:	654b      	str	r3, [r1, #84]	; 0x54
 800698c:	e001      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d03e      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a2:	2b05      	cmp	r3, #5
 80069a4:	d820      	bhi.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80069a6:	a201      	add	r2, pc, #4	; (adr r2, 80069ac <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069ef 	.word	0x080069ef
 80069b0:	080069c5 	.word	0x080069c5
 80069b4:	080069d7 	.word	0x080069d7
 80069b8:	080069ef 	.word	0x080069ef
 80069bc:	080069ef 	.word	0x080069ef
 80069c0:	080069ef 	.word	0x080069ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3304      	adds	r3, #4
 80069c8:	2101      	movs	r1, #1
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fdb6 	bl	800753c <RCCEx_PLL2_Config>
 80069d0:	4603      	mov	r3, r0
 80069d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80069d4:	e00c      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3324      	adds	r3, #36	; 0x24
 80069da:	2101      	movs	r1, #1
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fe5f 	bl	80076a0 <RCCEx_PLL3_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80069e6:	e003      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	75fb      	strb	r3, [r7, #23]
      break;
 80069ec:	e000      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80069ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d110      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	f023 0207 	bic.w	r2, r3, #7
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a02:	4902      	ldr	r1, [pc, #8]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	654b      	str	r3, [r1, #84]	; 0x54
 8006a08:	e008      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006a0a:	bf00      	nop
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	58024800 	.word	0x58024800
 8006a14:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d039      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	2b05      	cmp	r3, #5
 8006a30:	d820      	bhi.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a7b 	.word	0x08006a7b
 8006a3c:	08006a51 	.word	0x08006a51
 8006a40:	08006a63 	.word	0x08006a63
 8006a44:	08006a7b 	.word	0x08006a7b
 8006a48:	08006a7b 	.word	0x08006a7b
 8006a4c:	08006a7b 	.word	0x08006a7b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3304      	adds	r3, #4
 8006a54:	2101      	movs	r1, #1
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fd70 	bl	800753c <RCCEx_PLL2_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a60:	e00c      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3324      	adds	r3, #36	; 0x24
 8006a66:	2101      	movs	r1, #1
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fe19 	bl	80076a0 <RCCEx_PLL3_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a72:	e003      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	75fb      	strb	r3, [r7, #23]
      break;
 8006a78:	e000      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a82:	4bb7      	ldr	r3, [pc, #732]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a86:	f023 0207 	bic.w	r2, r3, #7
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a90:	49b3      	ldr	r1, [pc, #716]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	658b      	str	r3, [r1, #88]	; 0x58
 8006a96:	e001      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d04b      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ab2:	d02e      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ab8:	d828      	bhi.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abe:	d02a      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac4:	d822      	bhi.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ac6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006aca:	d026      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006acc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ad0:	d81c      	bhi.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad6:	d010      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006adc:	d816      	bhi.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01d      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ae6:	d111      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fd24 	bl	800753c <RCCEx_PLL2_Config>
 8006af4:	4603      	mov	r3, r0
 8006af6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006af8:	e012      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3324      	adds	r3, #36	; 0x24
 8006afe:	2102      	movs	r1, #2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fdcd 	bl	80076a0 <RCCEx_PLL3_Config>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b0a:	e009      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b10:	e006      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b12:	bf00      	nop
 8006b14:	e004      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b16:	bf00      	nop
 8006b18:	e002      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e000      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b26:	4b8e      	ldr	r3, [pc, #568]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b34:	498a      	ldr	r1, [pc, #552]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	654b      	str	r3, [r1, #84]	; 0x54
 8006b3a:	e001      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d04b      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b56:	d02e      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006b58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b5c:	d828      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b62:	d02a      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b68:	d822      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b6e:	d026      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b74:	d81c      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7a:	d010      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b80:	d816      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01d      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8a:	d111      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fcd2 	bl	800753c <RCCEx_PLL2_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b9c:	e012      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3324      	adds	r3, #36	; 0x24
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fd7b 	bl	80076a0 <RCCEx_PLL3_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bae:	e009      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb4:	e006      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006bb6:	bf00      	nop
 8006bb8:	e004      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006bba:	bf00      	nop
 8006bbc:	e002      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006bbe:	bf00      	nop
 8006bc0:	e000      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bca:	4b65      	ldr	r3, [pc, #404]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bd8:	4961      	ldr	r1, [pc, #388]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8006bde:	e001      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d04b      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bf6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bfa:	d02e      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006bfc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c00:	d828      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c06:	d02a      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c0c:	d822      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c12:	d026      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006c14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c18:	d81c      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c1e:	d010      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c24:	d816      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d01d      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c2e:	d111      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3304      	adds	r3, #4
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fc80 	bl	800753c <RCCEx_PLL2_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c40:	e012      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3324      	adds	r3, #36	; 0x24
 8006c46:	2102      	movs	r1, #2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fd29 	bl	80076a0 <RCCEx_PLL3_Config>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c52:	e009      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	75fb      	strb	r3, [r7, #23]
      break;
 8006c58:	e006      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c5a:	bf00      	nop
 8006c5c:	e004      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c5e:	bf00      	nop
 8006c60:	e002      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c62:	bf00      	nop
 8006c64:	e000      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c6e:	4b3c      	ldr	r3, [pc, #240]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c7c:	4938      	ldr	r1, [pc, #224]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	658b      	str	r3, [r1, #88]	; 0x58
 8006c82:	e001      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01a      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9e:	d10a      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3324      	adds	r3, #36	; 0x24
 8006ca4:	2102      	movs	r1, #2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fcfa 	bl	80076a0 <RCCEx_PLL3_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006cb6:	4b2a      	ldr	r3, [pc, #168]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc4:	4926      	ldr	r1, [pc, #152]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01a      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce0:	d10a      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3324      	adds	r3, #36	; 0x24
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fcd9 	bl	80076a0 <RCCEx_PLL3_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cf8:	4b19      	ldr	r3, [pc, #100]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d06:	4916      	ldr	r1, [pc, #88]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d036      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d22:	d01f      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d28:	d817      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d32:	d009      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006d34:	e011      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fbfd 	bl	800753c <RCCEx_PLL2_Config>
 8006d42:	4603      	mov	r3, r0
 8006d44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d46:	e00e      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fca6 	bl	80076a0 <RCCEx_PLL3_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d58:	e005      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5e:	e002      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006d60:	58024400 	.word	0x58024400
      break;
 8006d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d6c:	4b93      	ldr	r3, [pc, #588]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d7a:	4990      	ldr	r1, [pc, #576]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	658b      	str	r3, [r1, #88]	; 0x58
 8006d80:	e001      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d82:	7dfb      	ldrb	r3, [r7, #23]
 8006d84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d033      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d9c:	d01c      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006d9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006da2:	d816      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da8:	d003      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dae:	d007      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006db0:	e00f      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db2:	4b82      	ldr	r3, [pc, #520]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	4a81      	ldr	r2, [pc, #516]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006dbe:	e00c      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3324      	adds	r3, #36	; 0x24
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fc6a 	bl	80076a0 <RCCEx_PLL3_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006dd0:	e003      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd6:	e000      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006de0:	4b76      	ldr	r3, [pc, #472]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dee:	4973      	ldr	r1, [pc, #460]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	654b      	str	r3, [r1, #84]	; 0x54
 8006df4:	e001      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d029      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e12:	d007      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006e14:	e00f      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e16:	4b69      	ldr	r3, [pc, #420]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	4a68      	ldr	r2, [pc, #416]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e22:	e00b      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	2102      	movs	r1, #2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fb86 	bl	800753c <RCCEx_PLL2_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e34:	e002      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e42:	4b5e      	ldr	r3, [pc, #376]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4e:	495b      	ldr	r1, [pc, #364]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e54:	e001      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3324      	adds	r3, #36	; 0x24
 8006e6a:	2102      	movs	r1, #2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fc17 	bl	80076a0 <RCCEx_PLL3_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d030      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e90:	d017      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e96:	d811      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e9c:	d013      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea2:	d80b      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d010      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eac:	d106      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eae:	4b43      	ldr	r3, [pc, #268]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	4a42      	ldr	r2, [pc, #264]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006eba:	e007      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec0:	e004      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006ec2:	bf00      	nop
 8006ec4:	e002      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006ec6:	bf00      	nop
 8006ec8:	e000      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ed2:	4b3a      	ldr	r3, [pc, #232]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ede:	4937      	ldr	r1, [pc, #220]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	654b      	str	r3, [r1, #84]	; 0x54
 8006ee4:	e001      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d008      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ef6:	4b31      	ldr	r3, [pc, #196]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f02:	492e      	ldr	r1, [pc, #184]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f14:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f22:	4926      	ldr	r1, [pc, #152]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f34:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f40:	491e      	ldr	r1, [pc, #120]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00d      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f52:	4b1a      	ldr	r3, [pc, #104]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f5c:	6113      	str	r3, [r2, #16]
 8006f5e:	4b17      	ldr	r3, [pc, #92]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f60:	691a      	ldr	r2, [r3, #16]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f68:	4914      	ldr	r1, [pc, #80]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da08      	bge.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f76:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f82:	490e      	ldr	r1, [pc, #56]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d009      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f94:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa2:	4906      	ldr	r1, [pc, #24]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006fa8:	7dbb      	ldrb	r3, [r7, #22]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	58024400 	.word	0x58024400

08006fc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fc4:	f7ff f860 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	091b      	lsrs	r3, r3, #4
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	4904      	ldr	r1, [pc, #16]	; (8006fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fd6:	5ccb      	ldrb	r3, [r1, r3]
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	58024400 	.word	0x58024400
 8006fe8:	0800993c 	.word	0x0800993c

08006fec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b089      	sub	sp, #36	; 0x24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ff4:	4ba1      	ldr	r3, [pc, #644]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ffe:	4b9f      	ldr	r3, [pc, #636]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	0b1b      	lsrs	r3, r3, #12
 8007004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007008:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800700a:	4b9c      	ldr	r3, [pc, #624]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	091b      	lsrs	r3, r3, #4
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007016:	4b99      	ldr	r3, [pc, #612]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	08db      	lsrs	r3, r3, #3
 800701c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	fb02 f303 	mul.w	r3, r2, r3
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8111 	beq.w	800725c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b02      	cmp	r3, #2
 800703e:	f000 8083 	beq.w	8007148 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b02      	cmp	r3, #2
 8007046:	f200 80a1 	bhi.w	800718c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d056      	beq.n	8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007056:	e099      	b.n	800718c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007058:	4b88      	ldr	r3, [pc, #544]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d02d      	beq.n	80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007064:	4b85      	ldr	r3, [pc, #532]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	08db      	lsrs	r3, r3, #3
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	4a84      	ldr	r2, [pc, #528]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007070:	fa22 f303 	lsr.w	r3, r2, r3
 8007074:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b7b      	ldr	r3, [pc, #492]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709e:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070be:	e087      	b.n	80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d2:	4b6a      	ldr	r3, [pc, #424]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007102:	e065      	b.n	80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b59      	ldr	r3, [pc, #356]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a03 	vldr	s12, [r7, #12]
 800712a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007146:	e043      	b.n	80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b48      	ldr	r3, [pc, #288]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a03 	vldr	s12, [r7, #12]
 800716e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800718a:	e021      	b.n	80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b37      	ldr	r3, [pc, #220]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80071d0:	4b2a      	ldr	r3, [pc, #168]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	0a5b      	lsrs	r3, r3, #9
 80071d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f6:	ee17 2a90 	vmov	r2, s15
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80071fe:	4b1f      	ldr	r3, [pc, #124]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	0c1b      	lsrs	r3, r3, #16
 8007204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007218:	edd7 6a07 	vldr	s13, [r7, #28]
 800721c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007224:	ee17 2a90 	vmov	r2, s15
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800722c:	4b13      	ldr	r3, [pc, #76]	; (800727c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007230:	0e1b      	lsrs	r3, r3, #24
 8007232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007246:	edd7 6a07 	vldr	s13, [r7, #28]
 800724a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007252:	ee17 2a90 	vmov	r2, s15
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800725a:	e008      	b.n	800726e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	609a      	str	r2, [r3, #8]
}
 800726e:	bf00      	nop
 8007270:	3724      	adds	r7, #36	; 0x24
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	58024400 	.word	0x58024400
 8007280:	03d09000 	.word	0x03d09000
 8007284:	46000000 	.word	0x46000000
 8007288:	4c742400 	.word	0x4c742400
 800728c:	4a742400 	.word	0x4a742400
 8007290:	4afe502a 	.word	0x4afe502a

08007294 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	; 0x24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800729c:	4ba1      	ldr	r3, [pc, #644]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	f003 0303 	and.w	r3, r3, #3
 80072a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80072a6:	4b9f      	ldr	r3, [pc, #636]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	0d1b      	lsrs	r3, r3, #20
 80072ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072b2:	4b9c      	ldr	r3, [pc, #624]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	0a1b      	lsrs	r3, r3, #8
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80072be:	4b99      	ldr	r3, [pc, #612]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	08db      	lsrs	r3, r3, #3
 80072c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 8111 	beq.w	8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	f000 8083 	beq.w	80073f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	f200 80a1 	bhi.w	8007434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d056      	beq.n	80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072fe:	e099      	b.n	8007434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007300:	4b88      	ldr	r3, [pc, #544]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d02d      	beq.n	8007368 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800730c:	4b85      	ldr	r3, [pc, #532]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	08db      	lsrs	r3, r3, #3
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	4a84      	ldr	r2, [pc, #528]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
 800731c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	ee07 3a90 	vmov	s15, r3
 8007324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007336:	4b7b      	ldr	r3, [pc, #492]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007346:	ed97 6a03 	vldr	s12, [r7, #12]
 800734a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800752c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800734e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800735a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007362:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007366:	e087      	b.n	8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737a:	4b6a      	ldr	r3, [pc, #424]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738a:	ed97 6a03 	vldr	s12, [r7, #12]
 800738e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800752c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800739e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073aa:	e065      	b.n	8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073be:	4b59      	ldr	r3, [pc, #356]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800752c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ee:	e043      	b.n	8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007402:	4b48      	ldr	r3, [pc, #288]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007412:	ed97 6a03 	vldr	s12, [r7, #12]
 8007416:	eddf 5a45 	vldr	s11, [pc, #276]	; 800752c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800741a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007432:	e021      	b.n	8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007446:	4b37      	ldr	r3, [pc, #220]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007456:	ed97 6a03 	vldr	s12, [r7, #12]
 800745a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800752c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800745e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007476:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007478:	4b2a      	ldr	r3, [pc, #168]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	0a5b      	lsrs	r3, r3, #9
 800747e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800748e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007492:	edd7 6a07 	vldr	s13, [r7, #28]
 8007496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800749a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800749e:	ee17 2a90 	vmov	r2, s15
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80074a6:	4b1f      	ldr	r3, [pc, #124]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	0c1b      	lsrs	r3, r3, #16
 80074ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074cc:	ee17 2a90 	vmov	r2, s15
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80074d4:	4b13      	ldr	r3, [pc, #76]	; (8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	0e1b      	lsrs	r3, r3, #24
 80074da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074fa:	ee17 2a90 	vmov	r2, s15
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007502:	e008      	b.n	8007516 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	609a      	str	r2, [r3, #8]
}
 8007516:	bf00      	nop
 8007518:	3724      	adds	r7, #36	; 0x24
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	58024400 	.word	0x58024400
 8007528:	03d09000 	.word	0x03d09000
 800752c:	46000000 	.word	0x46000000
 8007530:	4c742400 	.word	0x4c742400
 8007534:	4a742400 	.word	0x4a742400
 8007538:	4afe502a 	.word	0x4afe502a

0800753c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800754a:	4b53      	ldr	r3, [pc, #332]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	2b03      	cmp	r3, #3
 8007554:	d101      	bne.n	800755a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e099      	b.n	800768e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800755a:	4b4f      	ldr	r3, [pc, #316]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a4e      	ldr	r2, [pc, #312]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007566:	f7fa fb2d 	bl	8001bc4 <HAL_GetTick>
 800756a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800756c:	e008      	b.n	8007580 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800756e:	f7fa fb29 	bl	8001bc4 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d901      	bls.n	8007580 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e086      	b.n	800768e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007580:	4b45      	ldr	r3, [pc, #276]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1f0      	bne.n	800756e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800758c:	4b42      	ldr	r3, [pc, #264]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	031b      	lsls	r3, r3, #12
 800759a:	493f      	ldr	r1, [pc, #252]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 800759c:	4313      	orrs	r3, r2
 800759e:	628b      	str	r3, [r1, #40]	; 0x28
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	025b      	lsls	r3, r3, #9
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	041b      	lsls	r3, r3, #16
 80075be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075d0:	4931      	ldr	r1, [pc, #196]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075d6:	4b30      	ldr	r3, [pc, #192]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	492d      	ldr	r1, [pc, #180]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075e8:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	f023 0220 	bic.w	r2, r3, #32
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	4928      	ldr	r1, [pc, #160]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80075fa:	4b27      	ldr	r3, [pc, #156]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	4a26      	ldr	r2, [pc, #152]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007600:	f023 0310 	bic.w	r3, r3, #16
 8007604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007606:	4b24      	ldr	r3, [pc, #144]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800760a:	4b24      	ldr	r3, [pc, #144]	; (800769c <RCCEx_PLL2_Config+0x160>)
 800760c:	4013      	ands	r3, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	69d2      	ldr	r2, [r2, #28]
 8007612:	00d2      	lsls	r2, r2, #3
 8007614:	4920      	ldr	r1, [pc, #128]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800761a:	4b1f      	ldr	r3, [pc, #124]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007620:	f043 0310 	orr.w	r3, r3, #16
 8007624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800762c:	4b1a      	ldr	r3, [pc, #104]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	4a19      	ldr	r2, [pc, #100]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007638:	e00f      	b.n	800765a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d106      	bne.n	800764e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007640:	4b15      	ldr	r3, [pc, #84]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	4a14      	ldr	r2, [pc, #80]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800764a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800764c:	e005      	b.n	800765a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007652:	4a11      	ldr	r2, [pc, #68]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007658:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800765a:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a0e      	ldr	r2, [pc, #56]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007666:	f7fa faad 	bl	8001bc4 <HAL_GetTick>
 800766a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800766c:	e008      	b.n	8007680 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800766e:	f7fa faa9 	bl	8001bc4 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e006      	b.n	800768e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <RCCEx_PLL2_Config+0x15c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0f0      	beq.n	800766e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	58024400 	.word	0x58024400
 800769c:	ffff0007 	.word	0xffff0007

080076a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ae:	4b53      	ldr	r3, [pc, #332]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80076b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d101      	bne.n	80076be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e099      	b.n	80077f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076be:	4b4f      	ldr	r3, [pc, #316]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a4e      	ldr	r2, [pc, #312]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80076c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ca:	f7fa fa7b 	bl	8001bc4 <HAL_GetTick>
 80076ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076d0:	e008      	b.n	80076e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076d2:	f7fa fa77 	bl	8001bc4 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e086      	b.n	80077f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076e4:	4b45      	ldr	r3, [pc, #276]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f0      	bne.n	80076d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076f0:	4b42      	ldr	r3, [pc, #264]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	051b      	lsls	r3, r3, #20
 80076fe:	493f      	ldr	r1, [pc, #252]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 8007700:	4313      	orrs	r3, r2
 8007702:	628b      	str	r3, [r1, #40]	; 0x28
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	3b01      	subs	r3, #1
 800770a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	3b01      	subs	r3, #1
 8007714:	025b      	lsls	r3, r3, #9
 8007716:	b29b      	uxth	r3, r3
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	3b01      	subs	r3, #1
 8007720:	041b      	lsls	r3, r3, #16
 8007722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	3b01      	subs	r3, #1
 800772e:	061b      	lsls	r3, r3, #24
 8007730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007734:	4931      	ldr	r1, [pc, #196]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 8007736:	4313      	orrs	r3, r2
 8007738:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800773a:	4b30      	ldr	r3, [pc, #192]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	492d      	ldr	r1, [pc, #180]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 8007748:	4313      	orrs	r3, r2
 800774a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800774c:	4b2b      	ldr	r3, [pc, #172]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	4928      	ldr	r1, [pc, #160]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800775e:	4b27      	ldr	r3, [pc, #156]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	4a26      	ldr	r2, [pc, #152]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 8007764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800776a:	4b24      	ldr	r3, [pc, #144]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 800776c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800776e:	4b24      	ldr	r3, [pc, #144]	; (8007800 <RCCEx_PLL3_Config+0x160>)
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	69d2      	ldr	r2, [r2, #28]
 8007776:	00d2      	lsls	r2, r2, #3
 8007778:	4920      	ldr	r1, [pc, #128]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800777e:	4b1f      	ldr	r3, [pc, #124]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 8007784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007790:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	4a19      	ldr	r2, [pc, #100]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 8007796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800779a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800779c:	e00f      	b.n	80077be <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d106      	bne.n	80077b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077a4:	4b15      	ldr	r3, [pc, #84]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	4a14      	ldr	r2, [pc, #80]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80077aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077b0:	e005      	b.n	80077be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077b2:	4b12      	ldr	r3, [pc, #72]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	4a11      	ldr	r2, [pc, #68]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80077b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a0e      	ldr	r2, [pc, #56]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80077c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ca:	f7fa f9fb 	bl	8001bc4 <HAL_GetTick>
 80077ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077d0:	e008      	b.n	80077e4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077d2:	f7fa f9f7 	bl	8001bc4 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e006      	b.n	80077f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077e4:	4b05      	ldr	r3, [pc, #20]	; (80077fc <RCCEx_PLL3_Config+0x15c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	58024400 	.word	0x58024400
 8007800:	ffff0007 	.word	0xffff0007

08007804 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e0eb      	b.n	80079f2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a75      	ldr	r2, [pc, #468]	; (80079fc <HAL_SPI_Init+0x1f8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00f      	beq.n	800784a <HAL_SPI_Init+0x46>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a74      	ldr	r2, [pc, #464]	; (8007a00 <HAL_SPI_Init+0x1fc>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00a      	beq.n	800784a <HAL_SPI_Init+0x46>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a72      	ldr	r2, [pc, #456]	; (8007a04 <HAL_SPI_Init+0x200>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d005      	beq.n	800784a <HAL_SPI_Init+0x46>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	2b0f      	cmp	r3, #15
 8007844:	d901      	bls.n	800784a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e0d3      	b.n	80079f2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fb94 	bl	8007f78 <SPI_GetPacketSize>
 8007850:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a69      	ldr	r2, [pc, #420]	; (80079fc <HAL_SPI_Init+0x1f8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00c      	beq.n	8007876 <HAL_SPI_Init+0x72>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a67      	ldr	r2, [pc, #412]	; (8007a00 <HAL_SPI_Init+0x1fc>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d007      	beq.n	8007876 <HAL_SPI_Init+0x72>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a66      	ldr	r2, [pc, #408]	; (8007a04 <HAL_SPI_Init+0x200>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d002      	beq.n	8007876 <HAL_SPI_Init+0x72>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b08      	cmp	r3, #8
 8007874:	d811      	bhi.n	800789a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800787a:	4a60      	ldr	r2, [pc, #384]	; (80079fc <HAL_SPI_Init+0x1f8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d009      	beq.n	8007894 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a5e      	ldr	r2, [pc, #376]	; (8007a00 <HAL_SPI_Init+0x1fc>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <HAL_SPI_Init+0x90>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a5d      	ldr	r2, [pc, #372]	; (8007a04 <HAL_SPI_Init+0x200>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d104      	bne.n	800789e <HAL_SPI_Init+0x9a>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b10      	cmp	r3, #16
 8007898:	d901      	bls.n	800789e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e0a9      	b.n	80079f2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d106      	bne.n	80078b8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7f9 fbae 	bl	8001014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0201 	bic.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078d8:	d119      	bne.n	800790e <HAL_SPI_Init+0x10a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078e2:	d103      	bne.n	80078ec <HAL_SPI_Init+0xe8>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d008      	beq.n	80078fe <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10c      	bne.n	800790e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078fc:	d107      	bne.n	800790e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800790c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69da      	ldr	r2, [r3, #28]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	431a      	orrs	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007920:	ea42 0103 	orr.w	r1, r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	431a      	orrs	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	431a      	orrs	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796e:	ea42 0103 	orr.w	r1, r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d113      	bne.n	80079ae <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007998:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0201 	bic.w	r2, r2, #1
 80079bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	40013000 	.word	0x40013000
 8007a00:	40003800 	.word	0x40003800
 8007a04:	40003c00 	.word	0x40003c00

08007a08 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	; 0x28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007a20:	6a3a      	ldr	r2, [r7, #32]
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4013      	ands	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a3a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3330      	adds	r3, #48	; 0x30
 8007a42:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d113      	bne.n	8007a76 <HAL_SPI_IRQHandler+0x6e>
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10e      	bne.n	8007a76 <HAL_SPI_IRQHandler+0x6e>
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d009      	beq.n	8007a76 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
    handled = 1UL;
 8007a72:	2301      	movs	r3, #1
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10f      	bne.n	8007aa0 <HAL_SPI_IRQHandler+0x98>
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_SPI_IRQHandler+0x98>
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
    handled = 1UL;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10f      	bne.n	8007aca <HAL_SPI_IRQHandler+0xc2>
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <HAL_SPI_IRQHandler+0xc2>
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d105      	bne.n	8007aca <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
    handled = 1UL;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f040 816f 	bne.w	8007db0 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	f003 0308 	and.w	r3, r3, #8
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80a0 	beq.w	8007c1e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	699a      	ldr	r2, [r3, #24]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0208 	orr.w	r2, r2, #8
 8007aec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699a      	ldr	r2, [r3, #24]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0210 	orr.w	r2, r2, #16
 8007afc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b0c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	691a      	ldr	r2, [r3, #16]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0208 	bic.w	r2, r2, #8
 8007b1c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00f      	beq.n	8007b48 <HAL_SPI_IRQHandler+0x140>
 8007b28:	7cfb      	ldrb	r3, [r7, #19]
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d004      	beq.n	8007b38 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <HAL_SPI_IRQHandler+0x140>
 8007b38:	7cfb      	ldrb	r3, [r7, #19]
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d059      	beq.n	8007bf2 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b42:	69db      	ldr	r3, [r3, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d154      	bne.n	8007bf2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d13d      	bne.n	8007bd2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007b56:	e036      	b.n	8007bc6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2b0f      	cmp	r3, #15
 8007b5e:	d90b      	bls.n	8007b78 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b6a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b70:	1d1a      	adds	r2, r3, #4
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	665a      	str	r2, [r3, #100]	; 0x64
 8007b76:	e01d      	b.n	8007bb4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b07      	cmp	r3, #7
 8007b7e:	d90b      	bls.n	8007b98 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	8812      	ldrh	r2, [r2, #0]
 8007b88:	b292      	uxth	r2, r2
 8007b8a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b90:	1c9a      	adds	r2, r3, #2
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	665a      	str	r2, [r3, #100]	; 0x64
 8007b96:	e00d      	b.n	8007bb4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba4:	7812      	ldrb	r2, [r2, #0]
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1c2      	bne.n	8007b58 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f930 	bl	8007e38 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7f9 f9c0 	bl	8000f70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007bf0:	e0e3      	b.n	8007dba <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007bf2:	7cfb      	ldrb	r3, [r7, #19]
 8007bf4:	2b05      	cmp	r3, #5
 8007bf6:	d103      	bne.n	8007c00 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f8f9 	bl	8007df0 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007bfe:	e0d9      	b.n	8007db4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007c00:	7cfb      	ldrb	r3, [r7, #19]
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d103      	bne.n	8007c0e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8e8 	bl	8007ddc <HAL_SPI_RxCpltCallback>
    return;
 8007c0c:	e0d2      	b.n	8007db4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007c0e:	7cfb      	ldrb	r3, [r7, #19]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	f040 80cf 	bne.w	8007db4 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8d6 	bl	8007dc8 <HAL_SPI_TxCpltCallback>
    return;
 8007c1c:	e0ca      	b.n	8007db4 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00d      	beq.n	8007c44 <HAL_SPI_IRQHandler+0x23c>
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d008      	beq.n	8007c44 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699a      	ldr	r2, [r3, #24]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c40:	619a      	str	r2, [r3, #24]

    return;
 8007c42:	e0ba      	b.n	8007dba <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 80b5 	beq.w	8007dba <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00f      	beq.n	8007c7a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c60:	f043 0204 	orr.w	r2, r3, #4
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	699a      	ldr	r2, [r3, #24]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c78:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00f      	beq.n	8007ca4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8a:	f043 0201 	orr.w	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ca2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00f      	beq.n	8007cce <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cb4:	f043 0208 	orr.w	r2, r3, #8
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699a      	ldr	r2, [r3, #24]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ccc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00f      	beq.n	8007cf8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cde:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0220 	orr.w	r2, r2, #32
 8007cf6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d05a      	beq.n	8007db8 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0201 	bic.w	r2, r2, #1
 8007d10:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6919      	ldr	r1, [r3, #16]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	4b28      	ldr	r3, [pc, #160]	; (8007dc0 <HAL_SPI_IRQHandler+0x3b8>)
 8007d1e:	400b      	ands	r3, r1
 8007d20:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d2c:	d138      	bne.n	8007da0 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d3c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d013      	beq.n	8007d6e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4a:	4a1e      	ldr	r2, [pc, #120]	; (8007dc4 <HAL_SPI_IRQHandler+0x3bc>)
 8007d4c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fb fa96 	bl	8003284 <HAL_DMA_Abort_IT>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d020      	beq.n	8007db8 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d7a:	4a12      	ldr	r2, [pc, #72]	; (8007dc4 <HAL_SPI_IRQHandler+0x3bc>)
 8007d7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fb fa7e 	bl	8003284 <HAL_DMA_Abort_IT>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d014      	beq.n	8007db8 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007d9e:	e00b      	b.n	8007db8 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7f9 f8e1 	bl	8000f70 <HAL_SPI_ErrorCallback>
    return;
 8007dae:	e003      	b.n	8007db8 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007db0:	bf00      	nop
 8007db2:	e002      	b.n	8007dba <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007db4:	bf00      	nop
 8007db6:	e000      	b.n	8007dba <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007db8:	bf00      	nop
  }
}
 8007dba:	3728      	adds	r7, #40	; 0x28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	fffffc94 	.word	0xfffffc94
 8007dc4:	08007e05 	.word	0x08007e05

08007dc8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7f9 f8a0 	bl	8000f70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0208 	orr.w	r2, r2, #8
 8007e56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0210 	orr.w	r2, r2, #16
 8007e66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0201 	bic.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6919      	ldr	r1, [r3, #16]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4b3c      	ldr	r3, [pc, #240]	; (8007f74 <SPI_CloseTransfer+0x13c>)
 8007e84:	400b      	ands	r3, r1
 8007e86:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007e96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d014      	beq.n	8007ece <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00f      	beq.n	8007ece <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	699a      	ldr	r2, [r3, #24]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0220 	orr.w	r2, r2, #32
 8007ecc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d014      	beq.n	8007f04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00f      	beq.n	8007f04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eea:	f043 0204 	orr.w	r2, r3, #4
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f02:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00f      	beq.n	8007f2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f14:	f043 0201 	orr.w	r2, r3, #1
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	699a      	ldr	r2, [r3, #24]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f2c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00f      	beq.n	8007f58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3e:	f043 0208 	orr.w	r2, r3, #8
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007f68:	bf00      	nop
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	fffffc90 	.word	0xfffffc90

08007f78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f84:	095b      	lsrs	r3, r3, #5
 8007f86:	3301      	adds	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	3307      	adds	r3, #7
 8007f96:	08db      	lsrs	r3, r3, #3
 8007f98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e042      	b.n	8008046 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d106      	bne.n	8007fd8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7f9 f986 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2224      	movs	r2, #36	; 0x24
 8007fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0201 	bic.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fb7d 	bl	80086f0 <UART_SetConfig>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d101      	bne.n	8008000 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e022      	b.n	8008046 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 f8d1 	bl	80091b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800801c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800802c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0201 	orr.w	r2, r2, #1
 800803c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 f958 	bl	80092f4 <UART_CheckIdleState>
 8008044:	4603      	mov	r3, r0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008064:	2b20      	cmp	r3, #32
 8008066:	d168      	bne.n	800813a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <HAL_UART_Transmit_DMA+0x24>
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e061      	b.n	800813c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_UART_Transmit_DMA+0x36>
 8008082:	2302      	movs	r3, #2
 8008084:	e05a      	b.n	800813c <HAL_UART_Transmit_DMA+0xec>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	88fa      	ldrh	r2, [r7, #6]
 8008098:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	88fa      	ldrh	r2, [r7, #6]
 80080a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2221      	movs	r2, #33	; 0x21
 80080b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d02c      	beq.n	8008116 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080c0:	4a20      	ldr	r2, [pc, #128]	; (8008144 <HAL_UART_Transmit_DMA+0xf4>)
 80080c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080c8:	4a1f      	ldr	r2, [pc, #124]	; (8008148 <HAL_UART_Transmit_DMA+0xf8>)
 80080ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080d0:	4a1e      	ldr	r2, [pc, #120]	; (800814c <HAL_UART_Transmit_DMA+0xfc>)
 80080d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080d8:	2200      	movs	r2, #0
 80080da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e4:	4619      	mov	r1, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3328      	adds	r3, #40	; 0x28
 80080ec:	461a      	mov	r2, r3
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	f7fa fb40 	bl	8002774 <HAL_DMA_Start_IT>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00d      	beq.n	8008116 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2210      	movs	r2, #16
 80080fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2220      	movs	r2, #32
 800810e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e012      	b.n	800813c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2240      	movs	r2, #64	; 0x40
 800811c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008134:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	e000      	b.n	800813c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800813a:	2302      	movs	r3, #2
  }
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	0800952d 	.word	0x0800952d
 8008148:	0800957d 	.word	0x0800957d
 800814c:	08009599 	.word	0x08009599

08008150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b088      	sub	sp, #32
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	f640 030f 	movw	r3, #2063	; 0x80f
 8008176:	4013      	ands	r3, r2
 8008178:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d118      	bne.n	80081b2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d013      	beq.n	80081b2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d009      	beq.n	80081b2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 8282 	beq.w	80086ac <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	4798      	blx	r3
      }
      return;
 80081b0:	e27c      	b.n	80086ac <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 80ef 	beq.w	8008398 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4b73      	ldr	r3, [pc, #460]	; (800838c <HAL_UART_IRQHandler+0x23c>)
 80081be:	4013      	ands	r3, r2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	4b72      	ldr	r3, [pc, #456]	; (8008390 <HAL_UART_IRQHandler+0x240>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80e4 	beq.w	8008398 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d010      	beq.n	80081fc <HAL_UART_IRQHandler+0xac>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2201      	movs	r2, #1
 80081ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f2:	f043 0201 	orr.w	r2, r3, #1
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d010      	beq.n	8008228 <HAL_UART_IRQHandler+0xd8>
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2202      	movs	r2, #2
 8008216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800821e:	f043 0204 	orr.w	r2, r3, #4
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b00      	cmp	r3, #0
 8008230:	d010      	beq.n	8008254 <HAL_UART_IRQHandler+0x104>
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2204      	movs	r2, #4
 8008242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800824a:	f043 0202 	orr.w	r2, r3, #2
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d015      	beq.n	800828a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	f003 0320 	and.w	r3, r3, #32
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	4b48      	ldr	r3, [pc, #288]	; (800838c <HAL_UART_IRQHandler+0x23c>)
 800826c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00b      	beq.n	800828a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2208      	movs	r2, #8
 8008278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008280:	f043 0208 	orr.w	r2, r3, #8
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008290:	2b00      	cmp	r3, #0
 8008292:	d011      	beq.n	80082b8 <HAL_UART_IRQHandler+0x168>
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00c      	beq.n	80082b8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ae:	f043 0220 	orr.w	r2, r3, #32
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 81f6 	beq.w	80086b0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d011      	beq.n	80082f2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d104      	bne.n	80082e2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d007      	beq.n	80082f2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	d004      	beq.n	8008312 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800830e:	2b00      	cmp	r3, #0
 8008310:	d031      	beq.n	8008376 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 f8d8 	bl	80094c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008322:	2b40      	cmp	r3, #64	; 0x40
 8008324:	d123      	bne.n	800836e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008334:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d013      	beq.n	8008366 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008342:	4a14      	ldr	r2, [pc, #80]	; (8008394 <HAL_UART_IRQHandler+0x244>)
 8008344:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800834a:	4618      	mov	r0, r3
 800834c:	f7fa ff9a 	bl	8003284 <HAL_DMA_Abort_IT>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d017      	beq.n	8008386 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	e00f      	b.n	8008386 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7f8 fe22 	bl	8000fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	e00b      	b.n	8008386 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7f8 fe1e 	bl	8000fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	e007      	b.n	8008386 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7f8 fe1a 	bl	8000fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008384:	e194      	b.n	80086b0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008386:	bf00      	nop
    return;
 8008388:	e192      	b.n	80086b0 <HAL_UART_IRQHandler+0x560>
 800838a:	bf00      	nop
 800838c:	10000001 	.word	0x10000001
 8008390:	04000120 	.word	0x04000120
 8008394:	08009619 	.word	0x08009619

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839c:	2b01      	cmp	r3, #1
 800839e:	f040 810f 	bne.w	80085c0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8109 	beq.w	80085c0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 8103 	beq.w	80085c0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2210      	movs	r2, #16
 80083c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	f040 80bb 	bne.w	8008548 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a96      	ldr	r2, [pc, #600]	; (8008634 <HAL_UART_IRQHandler+0x4e4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d059      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a94      	ldr	r2, [pc, #592]	; (8008638 <HAL_UART_IRQHandler+0x4e8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d053      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a92      	ldr	r2, [pc, #584]	; (800863c <HAL_UART_IRQHandler+0x4ec>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d04d      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a90      	ldr	r2, [pc, #576]	; (8008640 <HAL_UART_IRQHandler+0x4f0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d047      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a8e      	ldr	r2, [pc, #568]	; (8008644 <HAL_UART_IRQHandler+0x4f4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d041      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a8c      	ldr	r2, [pc, #560]	; (8008648 <HAL_UART_IRQHandler+0x4f8>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d03b      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a8a      	ldr	r2, [pc, #552]	; (800864c <HAL_UART_IRQHandler+0x4fc>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d035      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a88      	ldr	r2, [pc, #544]	; (8008650 <HAL_UART_IRQHandler+0x500>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d02f      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a86      	ldr	r2, [pc, #536]	; (8008654 <HAL_UART_IRQHandler+0x504>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d029      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a84      	ldr	r2, [pc, #528]	; (8008658 <HAL_UART_IRQHandler+0x508>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d023      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a82      	ldr	r2, [pc, #520]	; (800865c <HAL_UART_IRQHandler+0x50c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d01d      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a80      	ldr	r2, [pc, #512]	; (8008660 <HAL_UART_IRQHandler+0x510>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d017      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a7e      	ldr	r2, [pc, #504]	; (8008664 <HAL_UART_IRQHandler+0x514>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d011      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a7c      	ldr	r2, [pc, #496]	; (8008668 <HAL_UART_IRQHandler+0x518>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00b      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a7a      	ldr	r2, [pc, #488]	; (800866c <HAL_UART_IRQHandler+0x51c>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d005      	beq.n	8008492 <HAL_UART_IRQHandler+0x342>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a78      	ldr	r2, [pc, #480]	; (8008670 <HAL_UART_IRQHandler+0x520>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d105      	bne.n	800849e <HAL_UART_IRQHandler+0x34e>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	b29b      	uxth	r3, r3
 800849c:	e004      	b.n	80084a8 <HAL_UART_IRQHandler+0x358>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80084aa:	893b      	ldrh	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 8101 	beq.w	80086b4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084b8:	893a      	ldrh	r2, [r7, #8]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	f080 80fa 	bcs.w	80086b4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	893a      	ldrh	r2, [r7, #8]
 80084c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d2:	d02b      	beq.n	800852c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689a      	ldr	r2, [r3, #8]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0201 	bic.w	r2, r2, #1
 80084f2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008502:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0210 	bic.w	r2, r2, #16
 8008520:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008526:	4618      	mov	r0, r3
 8008528:	f7fa fb8e 	bl	8002c48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008538:	b29b      	uxth	r3, r3
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	b29b      	uxth	r3, r3
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f8c9 	bl	80086d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008546:	e0b5      	b.n	80086b4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008554:	b29b      	uxth	r3, r3
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008560:	b29b      	uxth	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 80a8 	beq.w	80086b8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008568:	897b      	ldrh	r3, [r7, #10]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80a4 	beq.w	80086b8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800857e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6899      	ldr	r1, [r3, #8]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4b3a      	ldr	r3, [pc, #232]	; (8008674 <HAL_UART_IRQHandler+0x524>)
 800858c:	400b      	ands	r3, r1
 800858e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2220      	movs	r2, #32
 8008594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0210 	bic.w	r2, r2, #16
 80085b2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085b4:	897b      	ldrh	r3, [r7, #10]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f88d 	bl	80086d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085be:	e07b      	b.n	80086b8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <HAL_UART_IRQHandler+0x496>
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d008      	beq.n	80085e6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 f84a 	bl	8009678 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085e4:	e06b      	b.n	80086be <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d012      	beq.n	8008616 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d104      	bne.n	8008604 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d008      	beq.n	8008616 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008608:	2b00      	cmp	r3, #0
 800860a:	d057      	beq.n	80086bc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
    }
    return;
 8008614:	e052      	b.n	80086bc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d02b      	beq.n	8008678 <HAL_UART_IRQHandler+0x528>
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008626:	2b00      	cmp	r3, #0
 8008628:	d026      	beq.n	8008678 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 f80a 	bl	8009644 <UART_EndTransmit_IT>
    return;
 8008630:	e045      	b.n	80086be <HAL_UART_IRQHandler+0x56e>
 8008632:	bf00      	nop
 8008634:	40020010 	.word	0x40020010
 8008638:	40020028 	.word	0x40020028
 800863c:	40020040 	.word	0x40020040
 8008640:	40020058 	.word	0x40020058
 8008644:	40020070 	.word	0x40020070
 8008648:	40020088 	.word	0x40020088
 800864c:	400200a0 	.word	0x400200a0
 8008650:	400200b8 	.word	0x400200b8
 8008654:	40020410 	.word	0x40020410
 8008658:	40020428 	.word	0x40020428
 800865c:	40020440 	.word	0x40020440
 8008660:	40020458 	.word	0x40020458
 8008664:	40020470 	.word	0x40020470
 8008668:	40020488 	.word	0x40020488
 800866c:	400204a0 	.word	0x400204a0
 8008670:	400204b8 	.word	0x400204b8
 8008674:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d008      	beq.n	8008694 <HAL_UART_IRQHandler+0x544>
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 f807 	bl	80096a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008692:	e014      	b.n	80086be <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00f      	beq.n	80086be <HAL_UART_IRQHandler+0x56e>
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	da0c      	bge.n	80086be <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fff1 	bl	800968c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086aa:	e008      	b.n	80086be <HAL_UART_IRQHandler+0x56e>
      return;
 80086ac:	bf00      	nop
 80086ae:	e006      	b.n	80086be <HAL_UART_IRQHandler+0x56e>
    return;
 80086b0:	bf00      	nop
 80086b2:	e004      	b.n	80086be <HAL_UART_IRQHandler+0x56e>
      return;
 80086b4:	bf00      	nop
 80086b6:	e002      	b.n	80086be <HAL_UART_IRQHandler+0x56e>
      return;
 80086b8:	bf00      	nop
 80086ba:	e000      	b.n	80086be <HAL_UART_IRQHandler+0x56e>
    return;
 80086bc:	bf00      	nop
  }
}
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086f0:	b5b0      	push	{r4, r5, r7, lr}
 80086f2:	b08e      	sub	sp, #56	; 0x38
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	431a      	orrs	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	4313      	orrs	r3, r2
 8008714:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	4bbf      	ldr	r3, [pc, #764]	; (8008a1c <UART_SetConfig+0x32c>)
 800871e:	4013      	ands	r3, r2
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008726:	430b      	orrs	r3, r1
 8008728:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4ab5      	ldr	r2, [pc, #724]	; (8008a20 <UART_SetConfig+0x330>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d004      	beq.n	800875a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008756:	4313      	orrs	r3, r2
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	4bb0      	ldr	r3, [pc, #704]	; (8008a24 <UART_SetConfig+0x334>)
 8008762:	4013      	ands	r3, r2
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6812      	ldr	r2, [r2, #0]
 8008768:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800876a:	430b      	orrs	r3, r1
 800876c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	f023 010f 	bic.w	r1, r3, #15
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4aa7      	ldr	r2, [pc, #668]	; (8008a28 <UART_SetConfig+0x338>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d176      	bne.n	800887c <UART_SetConfig+0x18c>
 800878e:	4ba7      	ldr	r3, [pc, #668]	; (8008a2c <UART_SetConfig+0x33c>)
 8008790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008796:	2b28      	cmp	r3, #40	; 0x28
 8008798:	d86c      	bhi.n	8008874 <UART_SetConfig+0x184>
 800879a:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <UART_SetConfig+0xb0>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	08008845 	.word	0x08008845
 80087a4:	08008875 	.word	0x08008875
 80087a8:	08008875 	.word	0x08008875
 80087ac:	08008875 	.word	0x08008875
 80087b0:	08008875 	.word	0x08008875
 80087b4:	08008875 	.word	0x08008875
 80087b8:	08008875 	.word	0x08008875
 80087bc:	08008875 	.word	0x08008875
 80087c0:	0800884d 	.word	0x0800884d
 80087c4:	08008875 	.word	0x08008875
 80087c8:	08008875 	.word	0x08008875
 80087cc:	08008875 	.word	0x08008875
 80087d0:	08008875 	.word	0x08008875
 80087d4:	08008875 	.word	0x08008875
 80087d8:	08008875 	.word	0x08008875
 80087dc:	08008875 	.word	0x08008875
 80087e0:	08008855 	.word	0x08008855
 80087e4:	08008875 	.word	0x08008875
 80087e8:	08008875 	.word	0x08008875
 80087ec:	08008875 	.word	0x08008875
 80087f0:	08008875 	.word	0x08008875
 80087f4:	08008875 	.word	0x08008875
 80087f8:	08008875 	.word	0x08008875
 80087fc:	08008875 	.word	0x08008875
 8008800:	0800885d 	.word	0x0800885d
 8008804:	08008875 	.word	0x08008875
 8008808:	08008875 	.word	0x08008875
 800880c:	08008875 	.word	0x08008875
 8008810:	08008875 	.word	0x08008875
 8008814:	08008875 	.word	0x08008875
 8008818:	08008875 	.word	0x08008875
 800881c:	08008875 	.word	0x08008875
 8008820:	08008865 	.word	0x08008865
 8008824:	08008875 	.word	0x08008875
 8008828:	08008875 	.word	0x08008875
 800882c:	08008875 	.word	0x08008875
 8008830:	08008875 	.word	0x08008875
 8008834:	08008875 	.word	0x08008875
 8008838:	08008875 	.word	0x08008875
 800883c:	08008875 	.word	0x08008875
 8008840:	0800886d 	.word	0x0800886d
 8008844:	2301      	movs	r3, #1
 8008846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800884a:	e222      	b.n	8008c92 <UART_SetConfig+0x5a2>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008852:	e21e      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885a:	e21a      	b.n	8008c92 <UART_SetConfig+0x5a2>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008862:	e216      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008864:	2320      	movs	r3, #32
 8008866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886a:	e212      	b.n	8008c92 <UART_SetConfig+0x5a2>
 800886c:	2340      	movs	r3, #64	; 0x40
 800886e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008872:	e20e      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008874:	2380      	movs	r3, #128	; 0x80
 8008876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887a:	e20a      	b.n	8008c92 <UART_SetConfig+0x5a2>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a6b      	ldr	r2, [pc, #428]	; (8008a30 <UART_SetConfig+0x340>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d130      	bne.n	80088e8 <UART_SetConfig+0x1f8>
 8008886:	4b69      	ldr	r3, [pc, #420]	; (8008a2c <UART_SetConfig+0x33c>)
 8008888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888a:	f003 0307 	and.w	r3, r3, #7
 800888e:	2b05      	cmp	r3, #5
 8008890:	d826      	bhi.n	80088e0 <UART_SetConfig+0x1f0>
 8008892:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <UART_SetConfig+0x1a8>)
 8008894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008898:	080088b1 	.word	0x080088b1
 800889c:	080088b9 	.word	0x080088b9
 80088a0:	080088c1 	.word	0x080088c1
 80088a4:	080088c9 	.word	0x080088c9
 80088a8:	080088d1 	.word	0x080088d1
 80088ac:	080088d9 	.word	0x080088d9
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088b6:	e1ec      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80088b8:	2304      	movs	r3, #4
 80088ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088be:	e1e8      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80088c0:	2308      	movs	r3, #8
 80088c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c6:	e1e4      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80088c8:	2310      	movs	r3, #16
 80088ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ce:	e1e0      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80088d0:	2320      	movs	r3, #32
 80088d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d6:	e1dc      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088de:	e1d8      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80088e0:	2380      	movs	r3, #128	; 0x80
 80088e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e6:	e1d4      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a51      	ldr	r2, [pc, #324]	; (8008a34 <UART_SetConfig+0x344>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d130      	bne.n	8008954 <UART_SetConfig+0x264>
 80088f2:	4b4e      	ldr	r3, [pc, #312]	; (8008a2c <UART_SetConfig+0x33c>)
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	2b05      	cmp	r3, #5
 80088fc:	d826      	bhi.n	800894c <UART_SetConfig+0x25c>
 80088fe:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <UART_SetConfig+0x214>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	0800891d 	.word	0x0800891d
 8008908:	08008925 	.word	0x08008925
 800890c:	0800892d 	.word	0x0800892d
 8008910:	08008935 	.word	0x08008935
 8008914:	0800893d 	.word	0x0800893d
 8008918:	08008945 	.word	0x08008945
 800891c:	2300      	movs	r3, #0
 800891e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008922:	e1b6      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008924:	2304      	movs	r3, #4
 8008926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892a:	e1b2      	b.n	8008c92 <UART_SetConfig+0x5a2>
 800892c:	2308      	movs	r3, #8
 800892e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008932:	e1ae      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008934:	2310      	movs	r3, #16
 8008936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893a:	e1aa      	b.n	8008c92 <UART_SetConfig+0x5a2>
 800893c:	2320      	movs	r3, #32
 800893e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008942:	e1a6      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008944:	2340      	movs	r3, #64	; 0x40
 8008946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894a:	e1a2      	b.n	8008c92 <UART_SetConfig+0x5a2>
 800894c:	2380      	movs	r3, #128	; 0x80
 800894e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008952:	e19e      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a37      	ldr	r2, [pc, #220]	; (8008a38 <UART_SetConfig+0x348>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d130      	bne.n	80089c0 <UART_SetConfig+0x2d0>
 800895e:	4b33      	ldr	r3, [pc, #204]	; (8008a2c <UART_SetConfig+0x33c>)
 8008960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008962:	f003 0307 	and.w	r3, r3, #7
 8008966:	2b05      	cmp	r3, #5
 8008968:	d826      	bhi.n	80089b8 <UART_SetConfig+0x2c8>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <UART_SetConfig+0x280>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	08008989 	.word	0x08008989
 8008974:	08008991 	.word	0x08008991
 8008978:	08008999 	.word	0x08008999
 800897c:	080089a1 	.word	0x080089a1
 8008980:	080089a9 	.word	0x080089a9
 8008984:	080089b1 	.word	0x080089b1
 8008988:	2300      	movs	r3, #0
 800898a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898e:	e180      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008990:	2304      	movs	r3, #4
 8008992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008996:	e17c      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008998:	2308      	movs	r3, #8
 800899a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800899e:	e178      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80089a0:	2310      	movs	r3, #16
 80089a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089a6:	e174      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80089a8:	2320      	movs	r3, #32
 80089aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ae:	e170      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80089b0:	2340      	movs	r3, #64	; 0x40
 80089b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b6:	e16c      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80089b8:	2380      	movs	r3, #128	; 0x80
 80089ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089be:	e168      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a1d      	ldr	r2, [pc, #116]	; (8008a3c <UART_SetConfig+0x34c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d142      	bne.n	8008a50 <UART_SetConfig+0x360>
 80089ca:	4b18      	ldr	r3, [pc, #96]	; (8008a2c <UART_SetConfig+0x33c>)
 80089cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d838      	bhi.n	8008a48 <UART_SetConfig+0x358>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0x2ec>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	080089f5 	.word	0x080089f5
 80089e0:	080089fd 	.word	0x080089fd
 80089e4:	08008a05 	.word	0x08008a05
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a15 	.word	0x08008a15
 80089f0:	08008a41 	.word	0x08008a41
 80089f4:	2300      	movs	r3, #0
 80089f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fa:	e14a      	b.n	8008c92 <UART_SetConfig+0x5a2>
 80089fc:	2304      	movs	r3, #4
 80089fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a02:	e146      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008a04:	2308      	movs	r3, #8
 8008a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0a:	e142      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a12:	e13e      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008a14:	2320      	movs	r3, #32
 8008a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1a:	e13a      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008a1c:	cfff69f3 	.word	0xcfff69f3
 8008a20:	58000c00 	.word	0x58000c00
 8008a24:	11fff4ff 	.word	0x11fff4ff
 8008a28:	40011000 	.word	0x40011000
 8008a2c:	58024400 	.word	0x58024400
 8008a30:	40004400 	.word	0x40004400
 8008a34:	40004800 	.word	0x40004800
 8008a38:	40004c00 	.word	0x40004c00
 8008a3c:	40005000 	.word	0x40005000
 8008a40:	2340      	movs	r3, #64	; 0x40
 8008a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a46:	e124      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008a48:	2380      	movs	r3, #128	; 0x80
 8008a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4e:	e120      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4acc      	ldr	r2, [pc, #816]	; (8008d88 <UART_SetConfig+0x698>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d176      	bne.n	8008b48 <UART_SetConfig+0x458>
 8008a5a:	4bcc      	ldr	r3, [pc, #816]	; (8008d8c <UART_SetConfig+0x69c>)
 8008a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a62:	2b28      	cmp	r3, #40	; 0x28
 8008a64:	d86c      	bhi.n	8008b40 <UART_SetConfig+0x450>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <UART_SetConfig+0x37c>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008b11 	.word	0x08008b11
 8008a70:	08008b41 	.word	0x08008b41
 8008a74:	08008b41 	.word	0x08008b41
 8008a78:	08008b41 	.word	0x08008b41
 8008a7c:	08008b41 	.word	0x08008b41
 8008a80:	08008b41 	.word	0x08008b41
 8008a84:	08008b41 	.word	0x08008b41
 8008a88:	08008b41 	.word	0x08008b41
 8008a8c:	08008b19 	.word	0x08008b19
 8008a90:	08008b41 	.word	0x08008b41
 8008a94:	08008b41 	.word	0x08008b41
 8008a98:	08008b41 	.word	0x08008b41
 8008a9c:	08008b41 	.word	0x08008b41
 8008aa0:	08008b41 	.word	0x08008b41
 8008aa4:	08008b41 	.word	0x08008b41
 8008aa8:	08008b41 	.word	0x08008b41
 8008aac:	08008b21 	.word	0x08008b21
 8008ab0:	08008b41 	.word	0x08008b41
 8008ab4:	08008b41 	.word	0x08008b41
 8008ab8:	08008b41 	.word	0x08008b41
 8008abc:	08008b41 	.word	0x08008b41
 8008ac0:	08008b41 	.word	0x08008b41
 8008ac4:	08008b41 	.word	0x08008b41
 8008ac8:	08008b41 	.word	0x08008b41
 8008acc:	08008b29 	.word	0x08008b29
 8008ad0:	08008b41 	.word	0x08008b41
 8008ad4:	08008b41 	.word	0x08008b41
 8008ad8:	08008b41 	.word	0x08008b41
 8008adc:	08008b41 	.word	0x08008b41
 8008ae0:	08008b41 	.word	0x08008b41
 8008ae4:	08008b41 	.word	0x08008b41
 8008ae8:	08008b41 	.word	0x08008b41
 8008aec:	08008b31 	.word	0x08008b31
 8008af0:	08008b41 	.word	0x08008b41
 8008af4:	08008b41 	.word	0x08008b41
 8008af8:	08008b41 	.word	0x08008b41
 8008afc:	08008b41 	.word	0x08008b41
 8008b00:	08008b41 	.word	0x08008b41
 8008b04:	08008b41 	.word	0x08008b41
 8008b08:	08008b41 	.word	0x08008b41
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	2301      	movs	r3, #1
 8008b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b16:	e0bc      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b18:	2304      	movs	r3, #4
 8008b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b1e:	e0b8      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b20:	2308      	movs	r3, #8
 8008b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b26:	e0b4      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b28:	2310      	movs	r3, #16
 8008b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2e:	e0b0      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b30:	2320      	movs	r3, #32
 8008b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b36:	e0ac      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b38:	2340      	movs	r3, #64	; 0x40
 8008b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b3e:	e0a8      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b40:	2380      	movs	r3, #128	; 0x80
 8008b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b46:	e0a4      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a90      	ldr	r2, [pc, #576]	; (8008d90 <UART_SetConfig+0x6a0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d130      	bne.n	8008bb4 <UART_SetConfig+0x4c4>
 8008b52:	4b8e      	ldr	r3, [pc, #568]	; (8008d8c <UART_SetConfig+0x69c>)
 8008b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	d826      	bhi.n	8008bac <UART_SetConfig+0x4bc>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <UART_SetConfig+0x474>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008b7d 	.word	0x08008b7d
 8008b68:	08008b85 	.word	0x08008b85
 8008b6c:	08008b8d 	.word	0x08008b8d
 8008b70:	08008b95 	.word	0x08008b95
 8008b74:	08008b9d 	.word	0x08008b9d
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b82:	e086      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b84:	2304      	movs	r3, #4
 8008b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8a:	e082      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b8c:	2308      	movs	r3, #8
 8008b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b92:	e07e      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b94:	2310      	movs	r3, #16
 8008b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9a:	e07a      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba2:	e076      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008ba4:	2340      	movs	r3, #64	; 0x40
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e072      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e06e      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a76      	ldr	r2, [pc, #472]	; (8008d94 <UART_SetConfig+0x6a4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d130      	bne.n	8008c20 <UART_SetConfig+0x530>
 8008bbe:	4b73      	ldr	r3, [pc, #460]	; (8008d8c <UART_SetConfig+0x69c>)
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d826      	bhi.n	8008c18 <UART_SetConfig+0x528>
 8008bca:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <UART_SetConfig+0x4e0>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008be9 	.word	0x08008be9
 8008bd4:	08008bf1 	.word	0x08008bf1
 8008bd8:	08008bf9 	.word	0x08008bf9
 8008bdc:	08008c01 	.word	0x08008c01
 8008be0:	08008c09 	.word	0x08008c09
 8008be4:	08008c11 	.word	0x08008c11
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bee:	e050      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008bf0:	2304      	movs	r3, #4
 8008bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf6:	e04c      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008bf8:	2308      	movs	r3, #8
 8008bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfe:	e048      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c00:	2310      	movs	r3, #16
 8008c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c06:	e044      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c08:	2320      	movs	r3, #32
 8008c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0e:	e040      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c10:	2340      	movs	r3, #64	; 0x40
 8008c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c16:	e03c      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c18:	2380      	movs	r3, #128	; 0x80
 8008c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1e:	e038      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a5c      	ldr	r2, [pc, #368]	; (8008d98 <UART_SetConfig+0x6a8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d130      	bne.n	8008c8c <UART_SetConfig+0x59c>
 8008c2a:	4b58      	ldr	r3, [pc, #352]	; (8008d8c <UART_SetConfig+0x69c>)
 8008c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d826      	bhi.n	8008c84 <UART_SetConfig+0x594>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <UART_SetConfig+0x54c>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c55 	.word	0x08008c55
 8008c40:	08008c5d 	.word	0x08008c5d
 8008c44:	08008c65 	.word	0x08008c65
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c75 	.word	0x08008c75
 8008c50:	08008c7d 	.word	0x08008c7d
 8008c54:	2302      	movs	r3, #2
 8008c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5a:	e01a      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c62:	e016      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6a:	e012      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c72:	e00e      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c74:	2320      	movs	r3, #32
 8008c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7a:	e00a      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c7c:	2340      	movs	r3, #64	; 0x40
 8008c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c82:	e006      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c84:	2380      	movs	r3, #128	; 0x80
 8008c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8a:	e002      	b.n	8008c92 <UART_SetConfig+0x5a2>
 8008c8c:	2380      	movs	r3, #128	; 0x80
 8008c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a40      	ldr	r2, [pc, #256]	; (8008d98 <UART_SetConfig+0x6a8>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	f040 80ef 	bne.w	8008e7c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	dc46      	bgt.n	8008d34 <UART_SetConfig+0x644>
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	f2c0 8081 	blt.w	8008dae <UART_SetConfig+0x6be>
 8008cac:	3b02      	subs	r3, #2
 8008cae:	2b1e      	cmp	r3, #30
 8008cb0:	d87d      	bhi.n	8008dae <UART_SetConfig+0x6be>
 8008cb2:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <UART_SetConfig+0x5c8>)
 8008cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb8:	08008d3b 	.word	0x08008d3b
 8008cbc:	08008daf 	.word	0x08008daf
 8008cc0:	08008d43 	.word	0x08008d43
 8008cc4:	08008daf 	.word	0x08008daf
 8008cc8:	08008daf 	.word	0x08008daf
 8008ccc:	08008daf 	.word	0x08008daf
 8008cd0:	08008d53 	.word	0x08008d53
 8008cd4:	08008daf 	.word	0x08008daf
 8008cd8:	08008daf 	.word	0x08008daf
 8008cdc:	08008daf 	.word	0x08008daf
 8008ce0:	08008daf 	.word	0x08008daf
 8008ce4:	08008daf 	.word	0x08008daf
 8008ce8:	08008daf 	.word	0x08008daf
 8008cec:	08008daf 	.word	0x08008daf
 8008cf0:	08008d63 	.word	0x08008d63
 8008cf4:	08008daf 	.word	0x08008daf
 8008cf8:	08008daf 	.word	0x08008daf
 8008cfc:	08008daf 	.word	0x08008daf
 8008d00:	08008daf 	.word	0x08008daf
 8008d04:	08008daf 	.word	0x08008daf
 8008d08:	08008daf 	.word	0x08008daf
 8008d0c:	08008daf 	.word	0x08008daf
 8008d10:	08008daf 	.word	0x08008daf
 8008d14:	08008daf 	.word	0x08008daf
 8008d18:	08008daf 	.word	0x08008daf
 8008d1c:	08008daf 	.word	0x08008daf
 8008d20:	08008daf 	.word	0x08008daf
 8008d24:	08008daf 	.word	0x08008daf
 8008d28:	08008daf 	.word	0x08008daf
 8008d2c:	08008daf 	.word	0x08008daf
 8008d30:	08008da1 	.word	0x08008da1
 8008d34:	2b40      	cmp	r3, #64	; 0x40
 8008d36:	d036      	beq.n	8008da6 <UART_SetConfig+0x6b6>
 8008d38:	e039      	b.n	8008dae <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d3a:	f7fe f941 	bl	8006fc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d40:	e03b      	b.n	8008dba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d42:	f107 0314 	add.w	r3, r7, #20
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fe f950 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d50:	e033      	b.n	8008dba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d52:	f107 0308 	add.w	r3, r7, #8
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fa9c 	bl	8007294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d60:	e02b      	b.n	8008dba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d62:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <UART_SetConfig+0x69c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0320 	and.w	r3, r3, #32
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d009      	beq.n	8008d82 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d6e:	4b07      	ldr	r3, [pc, #28]	; (8008d8c <UART_SetConfig+0x69c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	08db      	lsrs	r3, r3, #3
 8008d74:	f003 0303 	and.w	r3, r3, #3
 8008d78:	4a08      	ldr	r2, [pc, #32]	; (8008d9c <UART_SetConfig+0x6ac>)
 8008d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d80:	e01b      	b.n	8008dba <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008d82:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <UART_SetConfig+0x6ac>)
 8008d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d86:	e018      	b.n	8008dba <UART_SetConfig+0x6ca>
 8008d88:	40011400 	.word	0x40011400
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	40007800 	.word	0x40007800
 8008d94:	40007c00 	.word	0x40007c00
 8008d98:	58000c00 	.word	0x58000c00
 8008d9c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008da0:	4bc4      	ldr	r3, [pc, #784]	; (80090b4 <UART_SetConfig+0x9c4>)
 8008da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008da4:	e009      	b.n	8008dba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dac:	e005      	b.n	8008dba <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 81da 	beq.w	8009176 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc6:	4abc      	ldr	r2, [pc, #752]	; (80090b8 <UART_SetConfig+0x9c8>)
 8008dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dd4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	4413      	add	r3, r2
 8008de0:	6a3a      	ldr	r2, [r7, #32]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d305      	bcc.n	8008df2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d903      	bls.n	8008dfa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008df8:	e1bd      	b.n	8009176 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f04f 0100 	mov.w	r1, #0
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	4aac      	ldr	r2, [pc, #688]	; (80090b8 <UART_SetConfig+0x9c8>)
 8008e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	f04f 0300 	mov.w	r3, #0
 8008e12:	f7f7 fa61 	bl	80002d8 <__aeabi_uldivmod>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	f04f 0300 	mov.w	r3, #0
 8008e26:	020b      	lsls	r3, r1, #8
 8008e28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e2c:	0202      	lsls	r2, r0, #8
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	6849      	ldr	r1, [r1, #4]
 8008e32:	0849      	lsrs	r1, r1, #1
 8008e34:	4608      	mov	r0, r1
 8008e36:	f04f 0100 	mov.w	r1, #0
 8008e3a:	1814      	adds	r4, r2, r0
 8008e3c:	eb43 0501 	adc.w	r5, r3, r1
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	461a      	mov	r2, r3
 8008e46:	f04f 0300 	mov.w	r3, #0
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7f7 fa43 	bl	80002d8 <__aeabi_uldivmod>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4613      	mov	r3, r2
 8008e58:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e60:	d308      	bcc.n	8008e74 <UART_SetConfig+0x784>
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e68:	d204      	bcs.n	8008e74 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e180      	b.n	8009176 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e7a:	e17c      	b.n	8009176 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e84:	f040 80bf 	bne.w	8009006 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008e88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	dc49      	bgt.n	8008f24 <UART_SetConfig+0x834>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	db7c      	blt.n	8008f8e <UART_SetConfig+0x89e>
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	d87a      	bhi.n	8008f8e <UART_SetConfig+0x89e>
 8008e98:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <UART_SetConfig+0x7b0>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008f2b 	.word	0x08008f2b
 8008ea4:	08008f33 	.word	0x08008f33
 8008ea8:	08008f8f 	.word	0x08008f8f
 8008eac:	08008f8f 	.word	0x08008f8f
 8008eb0:	08008f3b 	.word	0x08008f3b
 8008eb4:	08008f8f 	.word	0x08008f8f
 8008eb8:	08008f8f 	.word	0x08008f8f
 8008ebc:	08008f8f 	.word	0x08008f8f
 8008ec0:	08008f4b 	.word	0x08008f4b
 8008ec4:	08008f8f 	.word	0x08008f8f
 8008ec8:	08008f8f 	.word	0x08008f8f
 8008ecc:	08008f8f 	.word	0x08008f8f
 8008ed0:	08008f8f 	.word	0x08008f8f
 8008ed4:	08008f8f 	.word	0x08008f8f
 8008ed8:	08008f8f 	.word	0x08008f8f
 8008edc:	08008f8f 	.word	0x08008f8f
 8008ee0:	08008f5b 	.word	0x08008f5b
 8008ee4:	08008f8f 	.word	0x08008f8f
 8008ee8:	08008f8f 	.word	0x08008f8f
 8008eec:	08008f8f 	.word	0x08008f8f
 8008ef0:	08008f8f 	.word	0x08008f8f
 8008ef4:	08008f8f 	.word	0x08008f8f
 8008ef8:	08008f8f 	.word	0x08008f8f
 8008efc:	08008f8f 	.word	0x08008f8f
 8008f00:	08008f8f 	.word	0x08008f8f
 8008f04:	08008f8f 	.word	0x08008f8f
 8008f08:	08008f8f 	.word	0x08008f8f
 8008f0c:	08008f8f 	.word	0x08008f8f
 8008f10:	08008f8f 	.word	0x08008f8f
 8008f14:	08008f8f 	.word	0x08008f8f
 8008f18:	08008f8f 	.word	0x08008f8f
 8008f1c:	08008f8f 	.word	0x08008f8f
 8008f20:	08008f81 	.word	0x08008f81
 8008f24:	2b40      	cmp	r3, #64	; 0x40
 8008f26:	d02e      	beq.n	8008f86 <UART_SetConfig+0x896>
 8008f28:	e031      	b.n	8008f8e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f2a:	f7fd f8dd 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 8008f2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f30:	e033      	b.n	8008f9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f32:	f7fd f8ef 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 8008f36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f38:	e02f      	b.n	8008f9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f3a:	f107 0314 	add.w	r3, r7, #20
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe f854 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f48:	e027      	b.n	8008f9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f4a:	f107 0308 	add.w	r3, r7, #8
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe f9a0 	bl	8007294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f58:	e01f      	b.n	8008f9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f5a:	4b58      	ldr	r3, [pc, #352]	; (80090bc <UART_SetConfig+0x9cc>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d009      	beq.n	8008f7a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f66:	4b55      	ldr	r3, [pc, #340]	; (80090bc <UART_SetConfig+0x9cc>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	08db      	lsrs	r3, r3, #3
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	4a53      	ldr	r2, [pc, #332]	; (80090c0 <UART_SetConfig+0x9d0>)
 8008f72:	fa22 f303 	lsr.w	r3, r2, r3
 8008f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f78:	e00f      	b.n	8008f9a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008f7a:	4b51      	ldr	r3, [pc, #324]	; (80090c0 <UART_SetConfig+0x9d0>)
 8008f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f7e:	e00c      	b.n	8008f9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f80:	4b4c      	ldr	r3, [pc, #304]	; (80090b4 <UART_SetConfig+0x9c4>)
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f84:	e009      	b.n	8008f9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f8c:	e005      	b.n	8008f9a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 80ea 	beq.w	8009176 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	4a44      	ldr	r2, [pc, #272]	; (80090b8 <UART_SetConfig+0x9c8>)
 8008fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fac:	461a      	mov	r2, r3
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fb4:	005a      	lsls	r2, r3, #1
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	085b      	lsrs	r3, r3, #1
 8008fbc:	441a      	add	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fcc:	2b0f      	cmp	r3, #15
 8008fce:	d916      	bls.n	8008ffe <UART_SetConfig+0x90e>
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd6:	d212      	bcs.n	8008ffe <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	f023 030f 	bic.w	r3, r3, #15
 8008fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe4:	085b      	lsrs	r3, r3, #1
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008ffa:	60da      	str	r2, [r3, #12]
 8008ffc:	e0bb      	b.n	8009176 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009004:	e0b7      	b.n	8009176 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800900a:	2b20      	cmp	r3, #32
 800900c:	dc4a      	bgt.n	80090a4 <UART_SetConfig+0x9b4>
 800900e:	2b00      	cmp	r3, #0
 8009010:	f2c0 8086 	blt.w	8009120 <UART_SetConfig+0xa30>
 8009014:	2b20      	cmp	r3, #32
 8009016:	f200 8083 	bhi.w	8009120 <UART_SetConfig+0xa30>
 800901a:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <UART_SetConfig+0x930>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	080090ab 	.word	0x080090ab
 8009024:	080090c5 	.word	0x080090c5
 8009028:	08009121 	.word	0x08009121
 800902c:	08009121 	.word	0x08009121
 8009030:	080090cd 	.word	0x080090cd
 8009034:	08009121 	.word	0x08009121
 8009038:	08009121 	.word	0x08009121
 800903c:	08009121 	.word	0x08009121
 8009040:	080090dd 	.word	0x080090dd
 8009044:	08009121 	.word	0x08009121
 8009048:	08009121 	.word	0x08009121
 800904c:	08009121 	.word	0x08009121
 8009050:	08009121 	.word	0x08009121
 8009054:	08009121 	.word	0x08009121
 8009058:	08009121 	.word	0x08009121
 800905c:	08009121 	.word	0x08009121
 8009060:	080090ed 	.word	0x080090ed
 8009064:	08009121 	.word	0x08009121
 8009068:	08009121 	.word	0x08009121
 800906c:	08009121 	.word	0x08009121
 8009070:	08009121 	.word	0x08009121
 8009074:	08009121 	.word	0x08009121
 8009078:	08009121 	.word	0x08009121
 800907c:	08009121 	.word	0x08009121
 8009080:	08009121 	.word	0x08009121
 8009084:	08009121 	.word	0x08009121
 8009088:	08009121 	.word	0x08009121
 800908c:	08009121 	.word	0x08009121
 8009090:	08009121 	.word	0x08009121
 8009094:	08009121 	.word	0x08009121
 8009098:	08009121 	.word	0x08009121
 800909c:	08009121 	.word	0x08009121
 80090a0:	08009113 	.word	0x08009113
 80090a4:	2b40      	cmp	r3, #64	; 0x40
 80090a6:	d037      	beq.n	8009118 <UART_SetConfig+0xa28>
 80090a8:	e03a      	b.n	8009120 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090aa:	f7fd f81d 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 80090ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090b0:	e03c      	b.n	800912c <UART_SetConfig+0xa3c>
 80090b2:	bf00      	nop
 80090b4:	003d0900 	.word	0x003d0900
 80090b8:	08009954 	.word	0x08009954
 80090bc:	58024400 	.word	0x58024400
 80090c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090c4:	f7fd f826 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 80090c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090ca:	e02f      	b.n	800912c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090cc:	f107 0314 	add.w	r3, r7, #20
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fd ff8b 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090da:	e027      	b.n	800912c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090dc:	f107 0308 	add.w	r3, r7, #8
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe f8d7 	bl	8007294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090ea:	e01f      	b.n	800912c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090ec:	4b2c      	ldr	r3, [pc, #176]	; (80091a0 <UART_SetConfig+0xab0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0320 	and.w	r3, r3, #32
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d009      	beq.n	800910c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090f8:	4b29      	ldr	r3, [pc, #164]	; (80091a0 <UART_SetConfig+0xab0>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	08db      	lsrs	r3, r3, #3
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	4a28      	ldr	r2, [pc, #160]	; (80091a4 <UART_SetConfig+0xab4>)
 8009104:	fa22 f303 	lsr.w	r3, r2, r3
 8009108:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800910a:	e00f      	b.n	800912c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800910c:	4b25      	ldr	r3, [pc, #148]	; (80091a4 <UART_SetConfig+0xab4>)
 800910e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009110:	e00c      	b.n	800912c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009112:	4b25      	ldr	r3, [pc, #148]	; (80091a8 <UART_SetConfig+0xab8>)
 8009114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009116:	e009      	b.n	800912c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800911c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800911e:	e005      	b.n	800912c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800912a:	bf00      	nop
    }

    if (pclk != 0U)
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d021      	beq.n	8009176 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	4a1d      	ldr	r2, [pc, #116]	; (80091ac <UART_SetConfig+0xabc>)
 8009138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800913c:	461a      	mov	r2, r3
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	fbb3 f2f2 	udiv	r2, r3, r2
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	085b      	lsrs	r3, r3, #1
 800914a:	441a      	add	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	fbb2 f3f3 	udiv	r3, r2, r3
 8009154:	b29b      	uxth	r3, r3
 8009156:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	2b0f      	cmp	r3, #15
 800915c:	d908      	bls.n	8009170 <UART_SetConfig+0xa80>
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009164:	d204      	bcs.n	8009170 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800916c:	60da      	str	r2, [r3, #12]
 800916e:	e002      	b.n	8009176 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009192:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009196:	4618      	mov	r0, r3
 8009198:	3738      	adds	r7, #56	; 0x38
 800919a:	46bd      	mov	sp, r7
 800919c:	bdb0      	pop	{r4, r5, r7, pc}
 800919e:	bf00      	nop
 80091a0:	58024400 	.word	0x58024400
 80091a4:	03d09000 	.word	0x03d09000
 80091a8:	003d0900 	.word	0x003d0900
 80091ac:	08009954 	.word	0x08009954

080091b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00a      	beq.n	80091da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00a      	beq.n	800921e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	430a      	orrs	r2, r1
 800921c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	f003 0310 	and.w	r3, r3, #16
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01a      	beq.n	80092c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ae:	d10a      	bne.n	80092c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009304:	f7f8 fc5e 	bl	8001bc4 <HAL_GetTick>
 8009308:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b08      	cmp	r3, #8
 8009316:	d10e      	bne.n	8009336 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f82f 	bl	800938a <UART_WaitOnFlagUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e025      	b.n	8009382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b04      	cmp	r3, #4
 8009342:	d10e      	bne.n	8009362 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f819 	bl	800938a <UART_WaitOnFlagUntilTimeout>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e00f      	b.n	8009382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2220      	movs	r2, #32
 800936e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	603b      	str	r3, [r7, #0]
 8009396:	4613      	mov	r3, r2
 8009398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800939a:	e062      	b.n	8009462 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a2:	d05e      	beq.n	8009462 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093a4:	f7f8 fc0e 	bl	8001bc4 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	69ba      	ldr	r2, [r7, #24]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d302      	bcc.n	80093ba <UART_WaitOnFlagUntilTimeout+0x30>
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d11d      	bne.n	80093f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0201 	bic.w	r2, r2, #1
 80093d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2220      	movs	r2, #32
 80093de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e045      	b.n	8009482 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b00      	cmp	r3, #0
 8009402:	d02e      	beq.n	8009462 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800940e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009412:	d126      	bne.n	8009462 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800941c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800942c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f022 0201 	bic.w	r2, r2, #1
 800943c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2220      	movs	r2, #32
 8009442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2220      	movs	r2, #32
 800944a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e00f      	b.n	8009482 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69da      	ldr	r2, [r3, #28]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	4013      	ands	r3, r2
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	429a      	cmp	r2, r3
 8009470:	bf0c      	ite	eq
 8009472:	2301      	moveq	r3, #1
 8009474:	2300      	movne	r3, #0
 8009476:	b2db      	uxtb	r3, r3
 8009478:	461a      	mov	r2, r3
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	429a      	cmp	r2, r3
 800947e:	d08d      	beq.n	800939c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80094a0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80094b0:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
	...

080094c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094de:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6899      	ldr	r1, [r3, #8]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	4b0f      	ldr	r3, [pc, #60]	; (8009528 <UART_EndRxTransfer+0x60>)
 80094ec:	400b      	ands	r3, r1
 80094ee:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d107      	bne.n	8009508 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0210 	bic.w	r2, r2, #16
 8009506:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	effffffe 	.word	0xeffffffe

0800952c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009538:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009542:	d014      	beq.n	800956e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800955a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800956a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800956c:	e002      	b.n	8009574 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7f7 fd0e 	bl	8000f90 <HAL_UART_TxCpltCallback>
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009588:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f7ff f89a 	bl	80086c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c0:	2b80      	cmp	r3, #128	; 0x80
 80095c2:	d109      	bne.n	80095d8 <UART_DMAError+0x40>
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	2b21      	cmp	r3, #33	; 0x21
 80095c8:	d106      	bne.n	80095d8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80095d2:	6978      	ldr	r0, [r7, #20]
 80095d4:	f7ff ff59 	bl	800948a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d109      	bne.n	80095fa <UART_DMAError+0x62>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b22      	cmp	r3, #34	; 0x22
 80095ea:	d106      	bne.n	80095fa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80095f4:	6978      	ldr	r0, [r7, #20]
 80095f6:	f7ff ff67 	bl	80094c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009600:	f043 0210 	orr.w	r2, r3, #16
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800960a:	6978      	ldr	r0, [r7, #20]
 800960c:	f7f7 fcd0 	bl	8000fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009610:	bf00      	nop
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7f7 fcba 	bl	8000fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800965a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2220      	movs	r2, #32
 8009660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7f7 fc90 	bl	8000f90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_UARTEx_EnableFifoMode+0x16>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e02b      	b.n	8009722 <HAL_UARTEx_EnableFifoMode+0x6e>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2224      	movs	r2, #36	; 0x24
 80096d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f022 0201 	bic.w	r2, r2, #1
 80096f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009700:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f88a 	bl	8009824 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2220      	movs	r2, #32
 8009714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800973a:	2b01      	cmp	r3, #1
 800973c:	d101      	bne.n	8009742 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800973e:	2302      	movs	r3, #2
 8009740:	e02d      	b.n	800979e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2224      	movs	r2, #36	; 0x24
 800974e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 0201 	bic.w	r2, r2, #1
 8009768:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f850 	bl	8009824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2220      	movs	r2, #32
 8009790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d101      	bne.n	80097be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097ba:	2302      	movs	r3, #2
 80097bc:	e02d      	b.n	800981a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2224      	movs	r2, #36	; 0x24
 80097ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0201 	bic.w	r2, r2, #1
 80097e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f812 	bl	8009824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009830:	2b00      	cmp	r3, #0
 8009832:	d108      	bne.n	8009846 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009844:	e031      	b.n	80098aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009846:	2310      	movs	r3, #16
 8009848:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800984a:	2310      	movs	r3, #16
 800984c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	0e5b      	lsrs	r3, r3, #25
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	0f5b      	lsrs	r3, r3, #29
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	7b3a      	ldrb	r2, [r7, #12]
 8009872:	4911      	ldr	r1, [pc, #68]	; (80098b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009874:	5c8a      	ldrb	r2, [r1, r2]
 8009876:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800987a:	7b3a      	ldrb	r2, [r7, #12]
 800987c:	490f      	ldr	r1, [pc, #60]	; (80098bc <UARTEx_SetNbDataToProcess+0x98>)
 800987e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009880:	fb93 f3f2 	sdiv	r3, r3, r2
 8009884:	b29a      	uxth	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	7b7a      	ldrb	r2, [r7, #13]
 8009890:	4909      	ldr	r1, [pc, #36]	; (80098b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009892:	5c8a      	ldrb	r2, [r1, r2]
 8009894:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009898:	7b7a      	ldrb	r2, [r7, #13]
 800989a:	4908      	ldr	r1, [pc, #32]	; (80098bc <UARTEx_SetNbDataToProcess+0x98>)
 800989c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800989e:	fb93 f3f2 	sdiv	r3, r3, r2
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80098aa:	bf00      	nop
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	0800996c 	.word	0x0800996c
 80098bc:	08009974 	.word	0x08009974

080098c0 <__libc_init_array>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	4d0d      	ldr	r5, [pc, #52]	; (80098f8 <__libc_init_array+0x38>)
 80098c4:	4c0d      	ldr	r4, [pc, #52]	; (80098fc <__libc_init_array+0x3c>)
 80098c6:	1b64      	subs	r4, r4, r5
 80098c8:	10a4      	asrs	r4, r4, #2
 80098ca:	2600      	movs	r6, #0
 80098cc:	42a6      	cmp	r6, r4
 80098ce:	d109      	bne.n	80098e4 <__libc_init_array+0x24>
 80098d0:	4d0b      	ldr	r5, [pc, #44]	; (8009900 <__libc_init_array+0x40>)
 80098d2:	4c0c      	ldr	r4, [pc, #48]	; (8009904 <__libc_init_array+0x44>)
 80098d4:	f000 f820 	bl	8009918 <_init>
 80098d8:	1b64      	subs	r4, r4, r5
 80098da:	10a4      	asrs	r4, r4, #2
 80098dc:	2600      	movs	r6, #0
 80098de:	42a6      	cmp	r6, r4
 80098e0:	d105      	bne.n	80098ee <__libc_init_array+0x2e>
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098e8:	4798      	blx	r3
 80098ea:	3601      	adds	r6, #1
 80098ec:	e7ee      	b.n	80098cc <__libc_init_array+0xc>
 80098ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f2:	4798      	blx	r3
 80098f4:	3601      	adds	r6, #1
 80098f6:	e7f2      	b.n	80098de <__libc_init_array+0x1e>
 80098f8:	08009984 	.word	0x08009984
 80098fc:	08009984 	.word	0x08009984
 8009900:	08009984 	.word	0x08009984
 8009904:	08009988 	.word	0x08009988

08009908 <memset>:
 8009908:	4402      	add	r2, r0
 800990a:	4603      	mov	r3, r0
 800990c:	4293      	cmp	r3, r2
 800990e:	d100      	bne.n	8009912 <memset+0xa>
 8009910:	4770      	bx	lr
 8009912:	f803 1b01 	strb.w	r1, [r3], #1
 8009916:	e7f9      	b.n	800990c <memset+0x4>

08009918 <_init>:
 8009918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991a:	bf00      	nop
 800991c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800991e:	bc08      	pop	{r3}
 8009920:	469e      	mov	lr, r3
 8009922:	4770      	bx	lr

08009924 <_fini>:
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009926:	bf00      	nop
 8009928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800992a:	bc08      	pop	{r3}
 800992c:	469e      	mov	lr, r3
 800992e:	4770      	bx	lr
