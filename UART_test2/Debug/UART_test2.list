
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  080099b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002080  24000040  080099e0  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240020c0  080099e0  000220c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001db60  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fe6  00000000  00000000  0003dbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc8  00000000  00000000  00040ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf0  00000000  00000000  00041968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037505  00000000  00000000  00042658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013006  00000000  00000000  00079b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f7b8  00000000  00000000  0008cb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec31b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038e4  00000000  00000000  001ec370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009944 	.word	0x08009944

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009944 	.word	0x08009944

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af02      	add	r7, sp, #8
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005da:	81fb      	strh	r3, [r7, #14]
	unsigned short rxOffset = rxCount / 2;
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	81bb      	strh	r3, [r7, #12]
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	817b      	strh	r3, [r7, #10]
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < txCount; ++i ){
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
 80005ec:	e00f      	b.n	800060e <main+0x3e>
	  aTxBuffer[i] = i % 16384;
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4a9b      	ldr	r2, [pc, #620]	; (8000870 <main+0x2a0>)
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060a:	3301      	adds	r3, #1
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
 800060e:	897b      	ldrh	r3, [r7, #10]
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4b97      	ldr	r3, [pc, #604]	; (8000874 <main+0x2a4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b91      	ldr	r3, [pc, #580]	; (8000874 <main+0x2a4>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b8c      	ldr	r3, [pc, #560]	; (8000874 <main+0x2a4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a8b      	ldr	r2, [pc, #556]	; (8000874 <main+0x2a4>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 fa00 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f9e4 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fb5a 	bl	8000d1c <MX_GPIO_Init>
  HAL_EnableCompensationCell();
 8000668:	f001 facc 	bl	8001c04 <HAL_EnableCompensationCell>
  MX_DMA_Init();
 800066c:	f000 fb16 	bl	8000c9c <MX_DMA_Init>
  //  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8000670:	f000 faba 	bl	8000be8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000674:	f000 fa60 	bl	8000b38 <MX_SPI1_Init>
//  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */

  while(UserButtonStatus == 0)
 8000678:	e005      	b.n	8000686 <main+0xb6>
  {
    BSP_LED_Toggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f001 f88c 	bl	8001798 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f001 fa7f 	bl	8001b84 <HAL_Delay>
  while(UserButtonStatus == 0)
 8000686:	4b7c      	ldr	r3, [pc, #496]	; (8000878 <main+0x2a8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <main+0xaa>
  }
  UserButtonStatus = 0;
 800068e:	4b7a      	ldr	r3, [pc, #488]	; (8000878 <main+0x2a8>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f001 fa6a 	bl	8001b6c <HAL_GetTick>
 8000698:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
 800069e:	e032      	b.n	8000706 <main+0x136>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	4873      	ldr	r0, [pc, #460]	; (800087c <main+0x2ac>)
 80006ae:	f008 fe82 	bl	80093b6 <UART_WaitOnFlagUntilTimeout>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xec>
      {
        return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e1a5      	b.n	8000a08 <main+0x438>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006bc:	4a6c      	ldr	r2, [pc, #432]	; (8000870 <main+0x2a0>)
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b6c      	ldr	r3, [pc, #432]	; (800087c <main+0x2ac>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4867      	ldr	r0, [pc, #412]	; (800087c <main+0x2ac>)
 80006de:	f008 fe6a 	bl	80093b6 <UART_WaitOnFlagUntilTimeout>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <main+0x11c>
      {
        return HAL_TIMEOUT;
 80006e8:	2303      	movs	r3, #3
 80006ea:	e18d      	b.n	8000a08 <main+0x438>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006ec:	4a60      	ldr	r2, [pc, #384]	; (8000870 <main+0x2a0>)
 80006ee:	6a3b      	ldr	r3, [r7, #32]
 80006f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	0a1a      	lsrs	r2, r3, #8
 80006f8:	4b60      	ldr	r3, [pc, #384]	; (800087c <main+0x2ac>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 8000700:	6a3b      	ldr	r3, [r7, #32]
 8000702:	3301      	adds	r3, #1
 8000704:	623b      	str	r3, [r7, #32]
 8000706:	6a3b      	ldr	r3, [r7, #32]
 8000708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800070c:	d3c8      	bcc.n	80006a0 <main+0xd0>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 800070e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4858      	ldr	r0, [pc, #352]	; (800087c <main+0x2ac>)
 800071c:	f008 fe4b 	bl	80093b6 <UART_WaitOnFlagUntilTimeout>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <main+0x15a>
  {
    return HAL_TIMEOUT;
 8000726:	2303      	movs	r3, #3
 8000728:	e16e      	b.n	8000a08 <main+0x438>
  }
  BSP_LED_Off(LED1);
 800072a:	2000      	movs	r0, #0
 800072c:	f001 f80a 	bl	8001744 <BSP_LED_Off>
  while(UserButtonStatus == 0)
 8000730:	e005      	b.n	800073e <main+0x16e>
  {
    BSP_LED_Toggle(LED2);
 8000732:	2001      	movs	r0, #1
 8000734:	f001 f830 	bl	8001798 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f001 fa23 	bl	8001b84 <HAL_Delay>
  while(UserButtonStatus == 0)
 800073e:	4b4e      	ldr	r3, [pc, #312]	; (8000878 <main+0x2a8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f5      	beq.n	8000732 <main+0x162>
  }
  UserButtonStatus = 0;
 8000746:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <main+0x2a8>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
  UartReady = RESET;
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <main+0x2b0>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED1);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 fff6 	bl	8001744 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fff3 	bl	8001744 <BSP_LED_Off>
    /* Process Locked */
    __HAL_LOCK(&hspi1);
 800075e:	4b49      	ldr	r3, [pc, #292]	; (8000884 <main+0x2b4>)
 8000760:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000764:	2b01      	cmp	r3, #1
 8000766:	d101      	bne.n	800076c <main+0x19c>
 8000768:	2302      	movs	r3, #2
 800076a:	e14d      	b.n	8000a08 <main+0x438>
 800076c:	4b45      	ldr	r3, [pc, #276]	; (8000884 <main+0x2b4>)
 800076e:	2201      	movs	r2, #1
 8000770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Configure communication direction : 1Line */
    if (hspi1.Init.Direction == SPI_DIRECTION_1LINE)
 8000774:	4b43      	ldr	r3, [pc, #268]	; (8000884 <main+0x2b4>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800077c:	d107      	bne.n	800078e <main+0x1be>
    {
      SPI_1LINE_RX(&hspi1);
 800077e:	4b41      	ldr	r3, [pc, #260]	; (8000884 <main+0x2b4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <main+0x2b4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800078c:	601a      	str	r2, [r3, #0]
    }

    /* Clear RXDMAEN bit */
    CLEAR_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <main+0x2b4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <main+0x2b4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800079c:	609a      	str	r2, [r3, #8]

    /* Set the SPI Rx DMA transfer complete callback */
    hspi1.hdmarx->XferCpltCallback = tx_complete;
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <main+0x2b4>)
 80007a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007a2:	4a39      	ldr	r2, [pc, #228]	; (8000888 <main+0x2b8>)
 80007a4:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <main+0x2b4>)
 80007a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007aa:	4a38      	ldr	r2, [pc, #224]	; (800088c <main+0x2bc>)
 80007ac:	641a      	str	r2, [r3, #64]	; 0x40

    MODIFY_REG(((DMA_Stream_TypeDef   *)hdma_spi1_rx.Instance)->CR, (DMA_IT_TC | DMA_IT_HT), (DMA_IT_TC | DMA_IT_HT));
 80007ae:	4b38      	ldr	r3, [pc, #224]	; (8000890 <main+0x2c0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <main+0x2c0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f042 0218 	orr.w	r2, r2, #24
 80007bc:	601a      	str	r2, [r3, #0]
    /* Enable the Rx DMA Stream/Channel  */
    if (HAL_OK != HAL_DMA_Start(hspi1.hdmarx, (uint32_t)&hspi1.Instance->RXDR, (uint32_t)aRxBuffer, rxCount))
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <main+0x2b4>)
 80007c0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <main+0x2b4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3330      	adds	r3, #48	; 0x30
 80007c8:	4619      	mov	r1, r3
 80007ca:	4a32      	ldr	r2, [pc, #200]	; (8000894 <main+0x2c4>)
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	f001 fec7 	bl	8002560 <HAL_DMA_Start>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00d      	beq.n	80007f4 <main+0x224>
    {
      /* Update SPI error code */
      SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <main+0x2b4>)
 80007da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	4a28      	ldr	r2, [pc, #160]	; (8000884 <main+0x2b4>)
 80007e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      hspi1.State = HAL_SPI_STATE_READY;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <main+0x2b4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      Error_Handler();
 80007f0:	f000 fbbb 	bl	8000f6a <Error_Handler>
    }

      MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <main+0x2b4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6859      	ldr	r1, [r3, #4]
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <main+0x2b4>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <main+0x2c8>)
 8000800:	400b      	ands	r3, r1
 8000802:	6053      	str	r3, [r2, #4]

    /* Enable Rx DMA Request */
    SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <main+0x2b4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <main+0x2b4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000812:	609a      	str	r2, [r3, #8]

    /* Enable the SPI Error Interrupt Bit */
    __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <main+0x2b4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	691a      	ldr	r2, [r3, #16]
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <main+0x2b4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8000822:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi1);
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0x2b4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <main+0x2b4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f042 0201 	orr.w	r2, r2, #1
 8000832:	601a      	str	r2, [r3, #0]

      SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <main+0x2b4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <main+0x2b4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000842:	601a      	str	r2, [r3, #0]

  while (wTransferState != TRANSFER_H_COMPLETE)
 8000844:	e002      	b.n	800084c <main+0x27c>
  {
	    BSP_LED_Toggle(LED3);
 8000846:	2002      	movs	r0, #2
 8000848:	f000 ffa6 	bl	8001798 <BSP_LED_Toggle>
  while (wTransferState != TRANSFER_H_COMPLETE)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <main+0x2cc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d1f8      	bne.n	8000846 <main+0x276>
  }
  wTransferState = TRANSFER_WAIT;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <main+0x2cc>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
  int j = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  aTxBuffer[0] = aRxBuffer[0];
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <main+0x2c4>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b29a      	uxth	r2, r3
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <main+0x2a0>)
 8000866:	801a      	strh	r2, [r3, #0]
  for( int i = 1; i < txCount; ++i, j+= OVERSAMPLING){
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	e02a      	b.n	80008c4 <main+0x2f4>
 800086e:	bf00      	nop
 8000870:	24000080 	.word	0x24000080
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	24000060 	.word	0x24000060
 800087c:	2400190c 	.word	0x2400190c
 8000880:	2400005c 	.word	0x2400005c
 8000884:	24001f24 	.word	0x24001f24
 8000888:	08000ed1 	.word	0x08000ed1
 800088c:	08000ef1 	.word	0x08000ef1
 8000890:	24001fac 	.word	0x24001fac
 8000894:	24000880 	.word	0x24000880
 8000898:	ffff0000 	.word	0xffff0000
 800089c:	24001880 	.word	0x24001880
	  j+= OVERSAMPLING;
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	3301      	adds	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
	  aTxBuffer[i] = aRxBuffer[j];
 80008a6:	4a5a      	ldr	r2, [pc, #360]	; (8000a10 <main+0x440>)
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ae:	b299      	uxth	r1, r3
 80008b0:	4a58      	ldr	r2, [pc, #352]	; (8000a14 <main+0x444>)
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 1; i < txCount; ++i, j+= OVERSAMPLING){
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	3301      	adds	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3301      	adds	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	897b      	ldrh	r3, [r7, #10]
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbe9      	blt.n	80008a0 <main+0x2d0>
  }
  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 80008cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008d0:	4950      	ldr	r1, [pc, #320]	; (8000a14 <main+0x444>)
 80008d2:	4851      	ldr	r0, [pc, #324]	; (8000a18 <main+0x448>)
 80008d4:	f007 fbd2 	bl	800807c <HAL_UART_Transmit_DMA>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <main+0x312>
  {
    Error_Handler();
 80008de:	f000 fb44 	bl	8000f6a <Error_Handler>
  }
  HAL_SuspendTick();
 80008e2:	f001 f973 	bl	8001bcc <HAL_SuspendTick>
  HAL_NVIC_DisableIRQ(USART3_IRQn);
 80008e6:	2027      	movs	r0, #39	; 0x27
 80008e8:	f001 fac3 	bl	8001e72 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 80008ec:	200c      	movs	r0, #12
 80008ee:	f001 fac0 	bl	8001e72 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(SPI1_DMA_IRQN);
 80008f2:	2038      	movs	r0, #56	; 0x38
 80008f4:	f001 fabd 	bl	8001e72 <HAL_NVIC_DisableIRQ>
  BSP_LED_Off(LED3);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f000 ff23 	bl	8001744 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4 ) {}
 80008fe:	bf00      	nop
 8000900:	4b46      	ldr	r3, [pc, #280]	; (8000a1c <main+0x44c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 0320 	and.w	r3, r3, #32
 8000908:	2b20      	cmp	r3, #32
 800090a:	d1f9      	bne.n	8000900 <main+0x330>
	  DMA2->LIFCR = DMA_FLAG_TCIF0_4;
 800090c:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <main+0x44c>)
 800090e:	2220      	movs	r2, #32
 8000910:	609a      	str	r2, [r3, #8]
	  j = rxOffset;
 8000912:	89bb      	ldrh	r3, [r7, #12]
 8000914:	61fb      	str	r3, [r7, #28]
	  aTxBuffer[0] = aRxBuffer[j];
 8000916:	4a3e      	ldr	r2, [pc, #248]	; (8000a10 <main+0x440>)
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <main+0x444>)
 8000922:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i ){
 8000924:	2301      	movs	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e00e      	b.n	8000948 <main+0x378>
//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
//			  yi[j] = aRxBuffer[j] * 1.0;
//		  }
		  j+= OVERSAMPLING;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3301      	adds	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
		  aTxBuffer[i] = aRxBuffer[j];
 8000930:	4a37      	ldr	r2, [pc, #220]	; (8000a10 <main+0x440>)
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000938:	b299      	uxth	r1, r3
 800093a:	4a36      	ldr	r2, [pc, #216]	; (8000a14 <main+0x444>)
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i ){
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	897b      	ldrh	r3, [r7, #10]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbec      	blt.n	800092a <main+0x35a>
	  }

	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 8000950:	bf00      	nop
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <main+0x450>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095a:	2b40      	cmp	r3, #64	; 0x40
 800095c:	d1f9      	bne.n	8000952 <main+0x382>
	  USART3->ICR = UART_CLEAR_TCF;
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <main+0x450>)
 8000960:	2240      	movs	r2, #64	; 0x40
 8000962:	621a      	str	r2, [r3, #32]
	  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <main+0x454>)
 8000966:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800096a:	609a      	str	r2, [r3, #8]
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <main+0x458>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <main+0x458>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <main+0x450>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4a28      	ldr	r2, [pc, #160]	; (8000a20 <main+0x450>)
 800097e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000982:	6093      	str	r3, [r2, #8]

	  while ((DMA2->LISR & DMA_FLAG_HTIF0_4) != DMA_FLAG_HTIF0_4 ) {}
 8000984:	bf00      	nop
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <main+0x44c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	2b10      	cmp	r3, #16
 8000990:	d1f9      	bne.n	8000986 <main+0x3b6>
	  DMA2->LIFCR = DMA_FLAG_HTIF0_4;
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <main+0x44c>)
 8000994:	2210      	movs	r2, #16
 8000996:	609a      	str	r2, [r3, #8]
	  j = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
	  aTxBuffer[0] = aRxBuffer[0];
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <main+0x440>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <main+0x444>)
 80009a4:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i){
 80009a6:	2301      	movs	r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	e00e      	b.n	80009ca <main+0x3fa>
//		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
//			  yi[j] = aRxBuffer[j] * 1.0;
//		  }
		  j+= OVERSAMPLING;
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	3301      	adds	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
		  aTxBuffer[i] = aRxBuffer[j];
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <main+0x440>)
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ba:	b299      	uxth	r1, r3
 80009bc:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <main+0x444>)
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i){
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	3301      	adds	r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	897b      	ldrh	r3, [r7, #10]
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbec      	blt.n	80009ac <main+0x3dc>
	  }

	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 80009d2:	bf00      	nop
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <main+0x450>)
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009dc:	2b40      	cmp	r3, #64	; 0x40
 80009de:	d1f9      	bne.n	80009d4 <main+0x404>
	  USART3->ICR = UART_CLEAR_TCF;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <main+0x450>)
 80009e2:	2240      	movs	r2, #64	; 0x40
 80009e4:	621a      	str	r2, [r3, #32]
	  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <main+0x454>)
 80009e8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009ec:	609a      	str	r2, [r3, #8]
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <main+0x458>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <main+0x458>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <main+0x450>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <main+0x450>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6093      	str	r3, [r2, #8]
	  while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4 ) {}
 8000a06:	e77a      	b.n	80008fe <main+0x32e>
  }
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000880 	.word	0x24000880
 8000a14:	24000080 	.word	0x24000080
 8000a18:	2400190c 	.word	0x2400190c
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40004800 	.word	0x40004800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020028 	.word	0x40020028

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09c      	sub	sp, #112	; 0x70
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	224c      	movs	r2, #76	; 0x4c
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 ff7a 	bl	8009934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2220      	movs	r2, #32
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f008 ff74 	bl	8009934 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f004 fbb7 	bl	80051c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <SystemClock_Config+0x100>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a34      	ldr	r2, [pc, #208]	; (8000b2c <SystemClock_Config+0x100>)
 8000a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <SystemClock_Config+0x100>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <SystemClock_Config+0x104>)
 8000a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a70:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <SystemClock_Config+0x104>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <SystemClock_Config+0x104>)
 8000a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a84:	bf00      	nop
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <SystemClock_Config+0x100>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a92:	d1f8      	bne.n	8000a86 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <SystemClock_Config+0x108>)
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	f023 0303 	bic.w	r3, r3, #3
 8000a9c:	4a25      	ldr	r2, [pc, #148]	; (8000b34 <SystemClock_Config+0x108>)
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2321      	movs	r3, #33	; 0x21
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 115;
 8000abe:	2373      	movs	r3, #115	; 0x73
 8000ac0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 32;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f004 fba8 	bl	8005234 <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aea:	f000 fa3e 	bl	8000f6a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	233f      	movs	r3, #63	; 0x3f
 8000af0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af2:	2303      	movs	r3, #3
 8000af4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000afa:	2308      	movs	r3, #8
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b02:	2340      	movs	r3, #64	; 0x40
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b0c:	2340      	movs	r3, #64	; 0x40
 8000b0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2104      	movs	r1, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 ff9d 	bl	8005a54 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000b20:	f000 fa23 	bl	8000f6a <Error_Handler>
  }


}
 8000b24:	bf00      	nop
 8000b26:	3770      	adds	r7, #112	; 0x70
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	58024800 	.word	0x58024800
 8000b30:	58000400 	.word	0x58000400
 8000b34:	58024400 	.word	0x58024400

08000b38 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b3c:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b3e:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <MX_SPI1_Init+0xac>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b4a:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b50:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b54:	220d      	movs	r2, #13
 8000b56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000bb4:	2220      	movs	r2, #32
 8000bb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_SPI1_Init+0xa8>)
 8000bcc:	f006 fe30 	bl	8007830 <HAL_SPI_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000bd6:	f000 f9c8 	bl	8000f6a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24001f24 	.word	0x24001f24
 8000be4:	40013000 	.word	0x40013000

08000be8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000bee:	4a29      	ldr	r2, [pc, #164]	; (8000c94 <MX_USART3_UART_Init+0xac>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11978688;
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000bf4:	4a28      	ldr	r2, [pc, #160]	; (8000c98 <MX_USART3_UART_Init+0xb0>)
 8000bf6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c0c:	220c      	movs	r2, #12
 8000c0e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c36:	4816      	ldr	r0, [pc, #88]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c38:	f007 f9cf 	bl	8007fda <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000c42:	f000 f992 	bl	8000f6a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4811      	ldr	r0, [pc, #68]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c4a:	f008 fd84 	bl	8009756 <HAL_UARTEx_SetTxFifoThreshold>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000c54:	f000 f989 	bl	8000f6a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c5c:	f008 fdb9 	bl	80097d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000c66:	f000 f980 	bl	8000f6a <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000c6a:	4809      	ldr	r0, [pc, #36]	; (8000c90 <MX_USART3_UART_Init+0xa8>)
 8000c6c:	f008 fd38 	bl	80096e0 <HAL_UARTEx_EnableFifoMode>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000c76:	f000 f978 	bl	8000f6a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2027      	movs	r0, #39	; 0x27
 8000c80:	f001 f8cf 	bl	8001e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c84:	2027      	movs	r0, #39	; 0x27
 8000c86:	f001 f8e6 	bl	8001e56 <HAL_NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2400190c 	.word	0x2400190c
 8000c94:	40004800 	.word	0x40004800
 8000c98:	00b6c7c0 	.word	0x00b6c7c0

08000c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_DMA_Init+0x7c>)
 8000ca4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <MX_DMA_Init+0x7c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_DMA_Init+0x7c>)
 8000cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_DMA_Init+0x7c>)
 8000cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc6:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <MX_DMA_Init+0x7c>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_DMA_Init+0x7c>)
 8000cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	200b      	movs	r0, #11
 8000ce4:	f001 f89d 	bl	8001e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ce8:	200b      	movs	r0, #11
 8000cea:	f001 f8b4 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	200c      	movs	r0, #12
 8000cf4:	f001 f895 	bl	8001e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cf8:	200c      	movs	r0, #12
 8000cfa:	f001 f8ac 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2100      	movs	r1, #0
 8000d02:	2038      	movs	r0, #56	; 0x38
 8000d04:	f001 f88d 	bl	8001e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d08:	2038      	movs	r0, #56	; 0x38
 8000d0a:	f001 f8a4 	bl	8001e56 <HAL_NVIC_EnableIRQ>

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	58024400 	.word	0x58024400

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b57      	ldr	r3, [pc, #348]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	4a55      	ldr	r2, [pc, #340]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d42:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d50:	4b4f      	ldr	r3, [pc, #316]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d56:	4a4e      	ldr	r2, [pc, #312]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d60:	4b4b      	ldr	r3, [pc, #300]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b48      	ldr	r3, [pc, #288]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	4a46      	ldr	r2, [pc, #280]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7e:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a3f      	ldr	r2, [pc, #252]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4a37      	ldr	r2, [pc, #220]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc8:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_GPIO_Init+0x174>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	f003 0310 	and.w	r3, r3, #16
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e0a:	4822      	ldr	r0, [pc, #136]	; (8000e94 <MX_GPIO_Init+0x178>)
 8000e0c:	f004 f98a 	bl	8005124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2102      	movs	r1, #2
 8000e14:	4820      	ldr	r0, [pc, #128]	; (8000e98 <MX_GPIO_Init+0x17c>)
 8000e16:	f004 f985 	bl	8005124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481b      	ldr	r0, [pc, #108]	; (8000e9c <MX_GPIO_Init+0x180>)
 8000e30:	f003 ffc8 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e34:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4811      	ldr	r0, [pc, #68]	; (8000e94 <MX_GPIO_Init+0x178>)
 8000e4e:	f003 ffb9 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <MX_GPIO_Init+0x17c>)
 8000e6a:	f003 ffab 	bl	8004dc4 <HAL_GPIO_Init>

  BSP_LED_Init(LED1);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 fbc8 	bl	8001604 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f000 fbc5 	bl	8001604 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f000 fbc2 	bl	8001604 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e80:	2101      	movs	r1, #1
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 fcb2 	bl	80017ec <BSP_PB_Init>
}
 8000e88:	bf00      	nop
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024400 	.word	0x58024400
 8000e94:	58020400 	.word	0x58020400
 8000e98:	58021000 	.word	0x58021000
 8000e9c:	58020800 	.word	0x58020800

08000ea0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb0:	d105      	bne.n	8000ebe <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f083 0301 	eor.w	r3, r3, #1
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ebc:	6013      	str	r3, [r2, #0]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	24000060 	.word	0x24000060

08000ed0 <tx_complete>:
//  BSP_LED_On(LED1);
//  wTransferState = TRANSFER_COMPLETE;
//}

void tx_complete(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_COMPLETE;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <tx_complete+0x1c>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	24001880 	.word	0x24001880

08000ef0 <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_H_COMPLETE;
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <tx_h_complete+0x1c>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	24001880 	.word	0x24001880

08000f10 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_SPI_ErrorCallback+0x1c>)
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	24001880 	.word	0x24001880

08000f30 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_UART_TxCpltCallback+0x1c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2400005c 	.word	0x2400005c

08000f50 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f000 fbc9 	bl	80016f0 <BSP_LED_On>
  Error_Handler();
 8000f5e:	f000 f804 	bl	8000f6a <Error_Handler>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6e:	b672      	cpsid	i
}
 8000f70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8000f72:	2002      	movs	r0, #2
 8000f74:	f000 fc10 	bl	8001798 <BSP_LED_Toggle>
	    HAL_Delay(100);
 8000f78:	2064      	movs	r0, #100	; 0x64
 8000f7a:	f000 fe03 	bl	8001b84 <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8000f7e:	e7f8      	b.n	8000f72 <Error_Handler+0x8>

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_MspInit+0x30>)
 8000f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x30>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x30>)
 8000f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	58024400 	.word	0x58024400

08000fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0bc      	sub	sp, #240	; 0xf0
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	22bc      	movs	r2, #188	; 0xbc
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f008 fcad 	bl	8009934 <memset>
  if(hspi->Instance==SPI1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4aa0      	ldr	r2, [pc, #640]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	f040 8096 	bne.w	8001112 <HAL_SPI_MspInit+0x15e>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	623b      	str	r3, [r7, #32]
      PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
      PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
      PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8000ff6:	f240 1317 	movw	r3, #279	; 0x117
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
      PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001000:	2302      	movs	r3, #2
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
      PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001004:	2302      	movs	r3, #2
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
      PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
      PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800100c:	2300      	movs	r3, #0
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
      PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f005 f8a7 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_SPI_MspInit+0x74>
      {
        Error_Handler();
 8001024:	f7ff ffa1 	bl	8000f6a <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 8001028:	4b8e      	ldr	r3, [pc, #568]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 800102a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800102e:	4a8d      	ldr	r2, [pc, #564]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 8001030:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001034:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001038:	4b8a      	ldr	r3, [pc, #552]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 800103a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800103e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b87      	ldr	r3, [pc, #540]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	4a85      	ldr	r2, [pc, #532]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001056:	4b83      	ldr	r3, [pc, #524]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
      /**SPI1 GPIO Configuration
      PA5     ------> SPI1_SCK
      PA6     ------> SPI1_MISO
      PA15 (JTDI)     ------> SPI1_NSS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8001064:	f248 0360 	movw	r3, #32864	; 0x8060
 8001068:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800107e:	2305      	movs	r3, #5
 8001080:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001088:	4619      	mov	r1, r3
 800108a:	4877      	ldr	r0, [pc, #476]	; (8001268 <HAL_SPI_MspInit+0x2b4>)
 800108c:	f003 fe9a 	bl	8004dc4 <HAL_GPIO_Init>

      /* SPI1 DMA Init */
      /* SPI1_RX Init */
      hdma_spi1_rx.Instance = DMA2_Stream0;
 8001090:	4b76      	ldr	r3, [pc, #472]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 8001092:	4a77      	ldr	r2, [pc, #476]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 8001094:	601a      	str	r2, [r3, #0]
      hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001096:	4b75      	ldr	r3, [pc, #468]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 8001098:	2225      	movs	r2, #37	; 0x25
 800109a:	605a      	str	r2, [r3, #4]
      hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109c:	4b73      	ldr	r3, [pc, #460]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
      hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a2:	4b72      	ldr	r3, [pc, #456]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
      hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a8:	4b70      	ldr	r3, [pc, #448]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ae:	611a      	str	r2, [r3, #16]
      hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b0:	4b6e      	ldr	r3, [pc, #440]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b6:	615a      	str	r2, [r3, #20]
      hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b8:	4b6c      	ldr	r3, [pc, #432]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010be:	619a      	str	r2, [r3, #24]
      hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80010c0:	4b6a      	ldr	r3, [pc, #424]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c6:	61da      	str	r2, [r3, #28]
      hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
      hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ce:	4b67      	ldr	r3, [pc, #412]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80010d4:	4b65      	ldr	r3, [pc, #404]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010da:	4b64      	ldr	r3, [pc, #400]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010e0:	4b62      	ldr	r3, [pc, #392]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80010e6:	4861      	ldr	r0, [pc, #388]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010e8:	f000 fede 	bl	8001ea8 <HAL_DMA_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_SPI_MspInit+0x142>
      {
        Error_Handler();
 80010f2:	f7ff ff3a 	bl	8000f6a <Error_Handler>
      }

      __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a5c      	ldr	r2, [pc, #368]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010fa:	67da      	str	r2, [r3, #124]	; 0x7c
 80010fc:	4a5b      	ldr	r2, [pc, #364]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6393      	str	r3, [r2, #56]	; 0x38

      /* SPI1 interrupt Init */
      HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2023      	movs	r0, #35	; 0x23
 8001108:	f000 fe8b 	bl	8001e22 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800110c:	2023      	movs	r0, #35	; 0x23
 800110e:	f000 fea2 	bl	8001e56 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
    }
  if(hspi->Instance==SPI2)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_SPI_MspInit+0x2c0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	f040 809d 	bne.w	8001258 <HAL_SPI_MspInit+0x2a4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 800112a:	2304      	movs	r3, #4
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800112e:	f240 1317 	movw	r3, #279	; 0x117
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001134:	2320      	movs	r3, #32
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001138:	2302      	movs	r3, #2
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 800113c:	2302      	movs	r3, #2
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001140:	2340      	movs	r3, #64	; 0x40
 8001142:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001144:	2300      	movs	r3, #0
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f005 f80b 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 800115c:	f7ff ff05 	bl	8000f6a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 8001162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001166:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001170:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 8001172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	4a37      	ldr	r2, [pc, #220]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	4a30      	ldr	r2, [pc, #192]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011d8:	230c      	movs	r3, #12
 80011da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011f0:	2305      	movs	r3, #5
 80011f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011fa:	4619      	mov	r1, r3
 80011fc:	481e      	ldr	r0, [pc, #120]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 80011fe:	f003 fde1 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121c:	2305      	movs	r3, #5
 800121e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001226:	4619      	mov	r1, r3
 8001228:	4814      	ldr	r0, [pc, #80]	; (800127c <HAL_SPI_MspInit+0x2c8>)
 800122a:	f003 fdcb 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800122e:	2308      	movs	r3, #8
 8001230:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001246:	2305      	movs	r3, #5
 8001248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001250:	4619      	mov	r1, r3
 8001252:	480b      	ldr	r0, [pc, #44]	; (8001280 <HAL_SPI_MspInit+0x2cc>)
 8001254:	f003 fdb6 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	37f0      	adds	r7, #240	; 0xf0
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40013000 	.word	0x40013000
 8001264:	58024400 	.word	0x58024400
 8001268:	58020000 	.word	0x58020000
 800126c:	24001fac 	.word	0x24001fac
 8001270:	40020410 	.word	0x40020410
 8001274:	40003800 	.word	0x40003800
 8001278:	58020800 	.word	0x58020800
 800127c:	58020400 	.word	0x58020400
 8001280:	58020c00 	.word	0x58020c00

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ba      	sub	sp, #232	; 0xe8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129c:	f107 0318 	add.w	r3, r7, #24
 80012a0:	22bc      	movs	r2, #188	; 0xbc
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f008 fb45 	bl	8009934 <memset>
  if(huart->Instance==USART1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a94      	ldr	r2, [pc, #592]	; (8001500 <HAL_UART_MspInit+0x27c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	f040 8098 	bne.w	80013e6 <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80012ba:	2304      	movs	r3, #4
 80012bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80012be:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80012c2:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80012c4:	2309      	movs	r3, #9
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80012c8:	2308      	movs	r3, #8
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 80012cc:	2302      	movs	r3, #2
 80012ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 80012de:	2310      	movs	r3, #16
 80012e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e4:	f107 0318 	add.w	r3, r7, #24
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 ff3f 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 80012f4:	f7ff fe39 	bl	8000f6a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f8:	4b82      	ldr	r3, [pc, #520]	; (8001504 <HAL_UART_MspInit+0x280>)
 80012fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012fe:	4a81      	ldr	r2, [pc, #516]	; (8001504 <HAL_UART_MspInit+0x280>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001308:	4b7e      	ldr	r3, [pc, #504]	; (8001504 <HAL_UART_MspInit+0x280>)
 800130a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b7b      	ldr	r3, [pc, #492]	; (8001504 <HAL_UART_MspInit+0x280>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	4a79      	ldr	r2, [pc, #484]	; (8001504 <HAL_UART_MspInit+0x280>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001326:	4b77      	ldr	r3, [pc, #476]	; (8001504 <HAL_UART_MspInit+0x280>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001338:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800134e:	2304      	movs	r3, #4
 8001350:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001358:	4619      	mov	r1, r3
 800135a:	486b      	ldr	r0, [pc, #428]	; (8001508 <HAL_UART_MspInit+0x284>)
 800135c:	f003 fd32 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001360:	2340      	movs	r3, #64	; 0x40
 8001362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001378:	2307      	movs	r3, #7
 800137a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001382:	4619      	mov	r1, r3
 8001384:	4860      	ldr	r0, [pc, #384]	; (8001508 <HAL_UART_MspInit+0x284>)
 8001386:	f003 fd1d 	bl	8004dc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 800138a:	4b60      	ldr	r3, [pc, #384]	; (800150c <HAL_UART_MspInit+0x288>)
 800138c:	4a60      	ldr	r2, [pc, #384]	; (8001510 <HAL_UART_MspInit+0x28c>)
 800138e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <HAL_UART_MspInit+0x288>)
 8001392:	222a      	movs	r2, #42	; 0x2a
 8001394:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001396:	4b5d      	ldr	r3, [pc, #372]	; (800150c <HAL_UART_MspInit+0x288>)
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800139c:	4b5b      	ldr	r3, [pc, #364]	; (800150c <HAL_UART_MspInit+0x288>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a2:	4b5a      	ldr	r3, [pc, #360]	; (800150c <HAL_UART_MspInit+0x288>)
 80013a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013aa:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_UART_MspInit+0x288>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b0:	4b56      	ldr	r3, [pc, #344]	; (800150c <HAL_UART_MspInit+0x288>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80013b6:	4b55      	ldr	r3, [pc, #340]	; (800150c <HAL_UART_MspInit+0x288>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013bc:	4b53      	ldr	r3, [pc, #332]	; (800150c <HAL_UART_MspInit+0x288>)
 80013be:	2200      	movs	r2, #0
 80013c0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c2:	4b52      	ldr	r3, [pc, #328]	; (800150c <HAL_UART_MspInit+0x288>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80013c8:	4850      	ldr	r0, [pc, #320]	; (800150c <HAL_UART_MspInit+0x288>)
 80013ca:	f000 fd6d 	bl	8001ea8 <HAL_DMA_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 80013d4:	f7ff fdc9 	bl	8000f6a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a4c      	ldr	r2, [pc, #304]	; (800150c <HAL_UART_MspInit+0x288>)
 80013dc:	679a      	str	r2, [r3, #120]	; 0x78
 80013de:	4a4b      	ldr	r2, [pc, #300]	; (800150c <HAL_UART_MspInit+0x288>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e4:	e088      	b.n	80014f8 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a4a      	ldr	r2, [pc, #296]	; (8001514 <HAL_UART_MspInit+0x290>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	f040 8083 	bne.w	80014f8 <HAL_UART_MspInit+0x274>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80013f6:	2304      	movs	r3, #4
 80013f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80013fa:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001400:	2309      	movs	r3, #9
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001404:	2308      	movs	r3, #8
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001408:	2302      	movs	r3, #2
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001412:	2300      	movs	r3, #0
 8001414:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	65bb      	str	r3, [r7, #88]	; 0x58
	  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fea1 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x1b0>
	    Error_Handler();
 8001430:	f7ff fd9b 	bl	8000f6a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_UART_MspInit+0x280>)
 8001436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143a:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_UART_MspInit+0x280>)
 800143c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001444:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <HAL_UART_MspInit+0x280>)
 8001446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800144a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <HAL_UART_MspInit+0x280>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	4a2a      	ldr	r2, [pc, #168]	; (8001504 <HAL_UART_MspInit+0x280>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_UART_MspInit+0x280>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001470:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800148a:	2307      	movs	r3, #7
 800148c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001490:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001494:	4619      	mov	r1, r3
 8001496:	4820      	ldr	r0, [pc, #128]	; (8001518 <HAL_UART_MspInit+0x294>)
 8001498:	f003 fc94 	bl	8004dc4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <HAL_UART_MspInit+0x298>)
 800149e:	4a20      	ldr	r2, [pc, #128]	; (8001520 <HAL_UART_MspInit+0x29c>)
 80014a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_UART_MspInit+0x298>)
 80014a4:	222e      	movs	r2, #46	; 0x2e
 80014a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_UART_MspInit+0x298>)
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_UART_MspInit+0x298>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_UART_MspInit+0x298>)
 80014b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_UART_MspInit+0x298>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_UART_MspInit+0x298>)
 80014c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_UART_MspInit+0x298>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_UART_MspInit+0x298>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_UART_MspInit+0x298>)
 80014d8:	2200      	movs	r2, #0
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80014dc:	480f      	ldr	r0, [pc, #60]	; (800151c <HAL_UART_MspInit+0x298>)
 80014de:	f000 fce3 	bl	8001ea8 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_MspInit+0x268>
      Error_Handler();
 80014e8:	f7ff fd3f 	bl	8000f6a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <HAL_UART_MspInit+0x298>)
 80014f0:	679a      	str	r2, [r3, #120]	; 0x78
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_UART_MspInit+0x298>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80014f8:	bf00      	nop
 80014fa:	37e8      	adds	r7, #232	; 0xe8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40011000 	.word	0x40011000
 8001504:	58024400 	.word	0x58024400
 8001508:	58020400 	.word	0x58020400
 800150c:	24001e1c 	.word	0x24001e1c
 8001510:	40020010 	.word	0x40020010
 8001514:	40004800 	.word	0x40004800
 8001518:	58020c00 	.word	0x58020c00
 800151c:	24001da4 	.word	0x24001da4
 8001520:	40020028 	.word	0x40020028

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 fae8 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	BSP_LED_On(LED3);
 800157c:	2002      	movs	r0, #2
 800157e:	f000 f8b7 	bl	80016f0 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001582:	4802      	ldr	r0, [pc, #8]	; (800158c <DMA1_Stream0_IRQHandler+0x14>)
 8001584:	f002 f8d8 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	24001e1c 	.word	0x24001e1c

08001590 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 8001594:	2002      	movs	r0, #2
 8001596:	f000 f8ab 	bl	80016f0 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_usart3_tx);
	DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <DMA1_Stream1_IRQHandler+0x18>)
 800159c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80015a0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40020000 	.word	0x40020000

080015ac <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	  BSP_LED_On(LED3);
 80015b0:	2002      	movs	r0, #2
 80015b2:	f000 f89d 	bl	80016f0 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <DMA2_Stream0_IRQHandler+0x14>)
 80015b8:	f002 f8be 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	24001fac 	.word	0x24001fac

080015c4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 80015c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015cc:	f003 fddd 	bl	800518a <HAL_GPIO_EXTI_IRQHandler>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80015d8:	2002      	movs	r0, #2
 80015da:	f000 f889 	bl	80016f0 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 80015de:	4802      	ldr	r0, [pc, #8]	; (80015e8 <USART3_IRQHandler+0x14>)
 80015e0:	f006 fdcc 	bl	800817c <HAL_UART_IRQHandler>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2400190c 	.word	0x2400190c

080015ec <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	  BSP_LED_On(LED3);
 80015f0:	2002      	movs	r0, #2
 80015f2:	f000 f87d 	bl	80016f0 <BSP_LED_On>
  HAL_SPI_IRQHandler(&hspi1);
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <SPI1_IRQHandler+0x14>)
 80015f8:	f006 fa1c 	bl	8007a34 <HAL_SPI_IRQHandler>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	24001f24 	.word	0x24001f24

08001604 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <BSP_LED_Init+0x28>
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d006      	beq.n	800162c <BSP_LED_Init+0x28>
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d003      	beq.n	800162c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001624:	f06f 0301 	mvn.w	r3, #1
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162a:	e055      	b.n	80016d8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10f      	bne.n	8001652 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <BSP_LED_Init+0xe0>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001638:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <BSP_LED_Init+0xe0>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <BSP_LED_Init+0xe0>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	e021      	b.n	8001696 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d10f      	bne.n	8001678 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <BSP_LED_Init+0xe0>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <BSP_LED_Init+0xe0>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <BSP_LED_Init+0xe0>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	e00e      	b.n	8001696 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <BSP_LED_Init+0xe0>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167e:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <BSP_LED_Init+0xe0>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <BSP_LED_Init+0xe0>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <BSP_LED_Init+0xe4>)
 800169a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800169e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <BSP_LED_Init+0xe8>)
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	f107 0218 	add.w	r2, r7, #24
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fb82 	bl	8004dc4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <BSP_LED_Init+0xe8>)
 80016c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <BSP_LED_Init+0xe4>)
 80016cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d0:	2200      	movs	r2, #0
 80016d2:	4619      	mov	r1, r3
 80016d4:	f003 fd26 	bl	8005124 <HAL_GPIO_WritePin>
  }

  return ret;
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3730      	adds	r7, #48	; 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	58024400 	.word	0x58024400
 80016e8:	0800995c 	.word	0x0800995c
 80016ec:	24000000 	.word	0x24000000

080016f0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d009      	beq.n	8001718 <BSP_LED_On+0x28>
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d006      	beq.n	8001718 <BSP_LED_On+0x28>
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d003      	beq.n	8001718 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001710:	f06f 0301 	mvn.w	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e00b      	b.n	8001730 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <BSP_LED_On+0x4c>)
 800171c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <BSP_LED_On+0x50>)
 8001724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001728:	2201      	movs	r2, #1
 800172a:	4619      	mov	r1, r3
 800172c:	f003 fcfa 	bl	8005124 <HAL_GPIO_WritePin>
  }

  return ret;
 8001730:	68fb      	ldr	r3, [r7, #12]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	24000000 	.word	0x24000000
 8001740:	0800995c 	.word	0x0800995c

08001744 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <BSP_LED_Off+0x28>
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d006      	beq.n	800176c <BSP_LED_Off+0x28>
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d003      	beq.n	800176c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001764:	f06f 0301 	mvn.w	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e00b      	b.n	8001784 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <BSP_LED_Off+0x4c>)
 8001770:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	4a07      	ldr	r2, [pc, #28]	; (8001794 <BSP_LED_Off+0x50>)
 8001778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	f003 fcd0 	bl	8005124 <HAL_GPIO_WritePin>
  }

  return ret;
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	24000000 	.word	0x24000000
 8001794:	0800995c 	.word	0x0800995c

08001798 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <BSP_LED_Toggle+0x28>
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d006      	beq.n	80017c0 <BSP_LED_Toggle+0x28>
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d003      	beq.n	80017c0 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017b8:	f06f 0301 	mvn.w	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e00b      	b.n	80017d8 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <BSP_LED_Toggle+0x4c>)
 80017c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4907      	ldr	r1, [pc, #28]	; (80017e8 <BSP_LED_Toggle+0x50>)
 80017cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f003 fcbf 	bl	8005156 <HAL_GPIO_TogglePin>
  }

  return ret;
 80017d8:	68fb      	ldr	r3, [r7, #12]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000000 	.word	0x24000000
 80017e8:	0800995c 	.word	0x0800995c

080017ec <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	460a      	mov	r2, r1
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <BSP_PB_Init+0xc8>)
 80017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001802:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <BSP_PB_Init+0xc8>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800180c:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <BSP_PB_Init+0xc8>)
 800180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800181a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001820:	2302      	movs	r3, #2
 8001822:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001824:	2302      	movs	r3, #2
 8001826:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4a20      	ldr	r2, [pc, #128]	; (80018b8 <BSP_PB_Init+0xcc>)
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	f107 020c 	add.w	r2, r7, #12
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fabf 	bl	8004dc4 <HAL_GPIO_Init>
 8001846:	e030      	b.n	80018aa <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <BSP_PB_Init+0xd0>)
 800184a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <BSP_PB_Init+0xcc>)
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	f107 020c 	add.w	r2, r7, #12
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fab2 	bl	8004dc4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <BSP_PB_Init+0xd4>)
 8001866:	441a      	add	r2, r3
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4916      	ldr	r1, [pc, #88]	; (80018c4 <BSP_PB_Init+0xd8>)
 800186c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f003 fa91 	bl	8004d9a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <BSP_PB_Init+0xd4>)
 800187e:	1898      	adds	r0, r3, r2
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <BSP_PB_Init+0xdc>)
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	461a      	mov	r2, r3
 800188a:	2100      	movs	r1, #0
 800188c:	f003 fa66 	bl	8004d5c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001890:	2028      	movs	r0, #40	; 0x28
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <BSP_PB_Init+0xe0>)
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	f000 fac0 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80018a2:	2328      	movs	r3, #40	; 0x28
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fad6 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400
 80018b8:	2400000c 	.word	0x2400000c
 80018bc:	11110000 	.word	0x11110000
 80018c0:	24002024 	.word	0x24002024
 80018c4:	08009964 	.word	0x08009964
 80018c8:	24000010 	.word	0x24000010
 80018cc:	24000014 	.word	0x24000014

080018d0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fff0 	bl	80018d0 <BSP_PB_Callback>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018f8:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <SystemInit+0xec>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <SystemInit+0xec>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <SystemInit+0xf0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	2b06      	cmp	r3, #6
 8001912:	d807      	bhi.n	8001924 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <SystemInit+0xf0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 030f 	bic.w	r3, r3, #15
 800191c:	4a31      	ldr	r2, [pc, #196]	; (80019e4 <SystemInit+0xf0>)
 800191e:	f043 0307 	orr.w	r3, r3, #7
 8001922:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <SystemInit+0xf4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <SystemInit+0xf4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <SystemInit+0xf4>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <SystemInit+0xf4>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	492b      	ldr	r1, [pc, #172]	; (80019e8 <SystemInit+0xf4>)
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <SystemInit+0xf8>)
 800193e:	4013      	ands	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <SystemInit+0xf0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <SystemInit+0xf0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 030f 	bic.w	r3, r3, #15
 8001956:	4a23      	ldr	r2, [pc, #140]	; (80019e4 <SystemInit+0xf0>)
 8001958:	f043 0307 	orr.w	r3, r3, #7
 800195c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <SystemInit+0xf4>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <SystemInit+0xf4>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <SystemInit+0xf4>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <SystemInit+0xf4>)
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <SystemInit+0xfc>)
 8001974:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <SystemInit+0xf4>)
 8001978:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <SystemInit+0x100>)
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <SystemInit+0xf4>)
 800197e:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <SystemInit+0x104>)
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <SystemInit+0xf4>)
 8001984:	2200      	movs	r2, #0
 8001986:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <SystemInit+0xf4>)
 800198a:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <SystemInit+0x104>)
 800198c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <SystemInit+0xf4>)
 8001990:	2200      	movs	r2, #0
 8001992:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <SystemInit+0xf4>)
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <SystemInit+0x104>)
 8001998:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <SystemInit+0xf4>)
 800199c:	2200      	movs	r2, #0
 800199e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <SystemInit+0xf4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <SystemInit+0xf4>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <SystemInit+0xf4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <SystemInit+0x108>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <SystemInit+0x10c>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019be:	d202      	bcs.n	80019c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <SystemInit+0x110>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <SystemInit+0x114>)
 80019c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SystemInit+0xec>)
 80019d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00
 80019e4:	52002000 	.word	0x52002000
 80019e8:	58024400 	.word	0x58024400
 80019ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80019f0:	02020200 	.word	0x02020200
 80019f4:	01ff0000 	.word	0x01ff0000
 80019f8:	01010280 	.word	0x01010280
 80019fc:	5c001000 	.word	0x5c001000
 8001a00:	ffff0000 	.word	0xffff0000
 8001a04:	51008108 	.word	0x51008108
 8001a08:	52004000 	.word	0x52004000

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a10:	f7ff ff70 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f007 ff57 	bl	80098ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7fe fdc7 	bl	80005d0 <main>
  bx  lr
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a44:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a4c:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001a50:	080099b8 	.word	0x080099b8
  ldr r2, =_sbss
 8001a54:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001a58:	240020c0 	.word	0x240020c0

08001a5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC3_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a66:	2003      	movs	r0, #3
 8001a68:	f000 f9d0 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a6c:	f004 f9a8 	bl	8005dc0 <HAL_RCC_GetSysClockFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_Init+0x68>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	4913      	ldr	r1, [pc, #76]	; (8001acc <HAL_Init+0x6c>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_Init+0x68>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_Init+0x6c>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_Init+0x70>)
 8001aa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_Init+0x74>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f814 	bl	8001ad8 <HAL_InitTick>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e002      	b.n	8001ac0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001aba:	f7ff fa61 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	08009968 	.word	0x08009968
 8001ad0:	2400001c 	.word	0x2400001c
 8001ad4:	24000018 	.word	0x24000018

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_InitTick+0x60>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e021      	b.n	8001b30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_InitTick+0x64>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_InitTick+0x60>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f9c3 	bl	8001e8e <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f97f 	bl	8001e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x68>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	24000024 	.word	0x24000024
 8001b3c:	24000018 	.word	0x24000018
 8001b40:	24000020 	.word	0x24000020

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	24000024 	.word	0x24000024
 8001b68:	240020bc 	.word	0x240020bc

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	240020bc 	.word	0x240020bc

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	24000024 	.word	0x24000024

08001bcc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_SuspendTick+0x1c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_SuspendTick+0x1c>)
 8001bd6:	f023 0302 	bic.w	r3, r3, #2
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetREVID+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	5c001000 	.word	0x5c001000

08001c04 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_EnableCompensationCell+0x1c>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_EnableCompensationCell+0x1c>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	58000400 	.word	0x58000400

08001c24 <__NVIC_SetPriorityGrouping>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <__NVIC_SetPriorityGrouping+0x40>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x40>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00
 8001c68:	05fa0000 	.word	0x05fa0000

08001c6c <__NVIC_GetPriorityGrouping>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_DisableIRQ>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db12      	blt.n	8001cfc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	490a      	ldr	r1, [pc, #40]	; (8001d08 <__NVIC_DisableIRQ+0x44>)
 8001cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	3320      	adds	r3, #32
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf0:	f3bf 8f4f 	dsb	sy
}
 8001cf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf6:	f3bf 8f6f 	isb	sy
}
 8001cfa:	bf00      	nop
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ff8e 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff05 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff1c 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff90 	bl	8001d60 <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5f 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff0f 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff1f 	bl	8001cc4 <__NVIC_DisableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ff96 	bl	8001dc8 <SysTick_Config>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff fe5c 	bl	8001b6c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e316      	b.n	80024ee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a66      	ldr	r2, [pc, #408]	; (8002060 <HAL_DMA_Init+0x1b8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d04a      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a65      	ldr	r2, [pc, #404]	; (8002064 <HAL_DMA_Init+0x1bc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d045      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a63      	ldr	r2, [pc, #396]	; (8002068 <HAL_DMA_Init+0x1c0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d040      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a62      	ldr	r2, [pc, #392]	; (800206c <HAL_DMA_Init+0x1c4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d03b      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a60      	ldr	r2, [pc, #384]	; (8002070 <HAL_DMA_Init+0x1c8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d036      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a5f      	ldr	r2, [pc, #380]	; (8002074 <HAL_DMA_Init+0x1cc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d031      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5d      	ldr	r2, [pc, #372]	; (8002078 <HAL_DMA_Init+0x1d0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02c      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5c      	ldr	r2, [pc, #368]	; (800207c <HAL_DMA_Init+0x1d4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d027      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5a      	ldr	r2, [pc, #360]	; (8002080 <HAL_DMA_Init+0x1d8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d022      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a59      	ldr	r2, [pc, #356]	; (8002084 <HAL_DMA_Init+0x1dc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d01d      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a57      	ldr	r2, [pc, #348]	; (8002088 <HAL_DMA_Init+0x1e0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d018      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a56      	ldr	r2, [pc, #344]	; (800208c <HAL_DMA_Init+0x1e4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a54      	ldr	r2, [pc, #336]	; (8002090 <HAL_DMA_Init+0x1e8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00e      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a53      	ldr	r2, [pc, #332]	; (8002094 <HAL_DMA_Init+0x1ec>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a51      	ldr	r2, [pc, #324]	; (8002098 <HAL_DMA_Init+0x1f0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d004      	beq.n	8001f60 <HAL_DMA_Init+0xb8>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a50      	ldr	r2, [pc, #320]	; (800209c <HAL_DMA_Init+0x1f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_DMA_Init+0xbc>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_DMA_Init+0xbe>
 8001f64:	2300      	movs	r3, #0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 813b 	beq.w	80021e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a37      	ldr	r2, [pc, #220]	; (8002060 <HAL_DMA_Init+0x1b8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d04a      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a36      	ldr	r2, [pc, #216]	; (8002064 <HAL_DMA_Init+0x1bc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d045      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a34      	ldr	r2, [pc, #208]	; (8002068 <HAL_DMA_Init+0x1c0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d040      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a33      	ldr	r2, [pc, #204]	; (800206c <HAL_DMA_Init+0x1c4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d03b      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a31      	ldr	r2, [pc, #196]	; (8002070 <HAL_DMA_Init+0x1c8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d036      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a30      	ldr	r2, [pc, #192]	; (8002074 <HAL_DMA_Init+0x1cc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d031      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <HAL_DMA_Init+0x1d0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02c      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	; (800207c <HAL_DMA_Init+0x1d4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d027      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <HAL_DMA_Init+0x1d8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d022      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2a      	ldr	r2, [pc, #168]	; (8002084 <HAL_DMA_Init+0x1dc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d01d      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <HAL_DMA_Init+0x1e0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d018      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a27      	ldr	r2, [pc, #156]	; (800208c <HAL_DMA_Init+0x1e4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_DMA_Init+0x1e8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00e      	beq.n	800201c <HAL_DMA_Init+0x174>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a24      	ldr	r2, [pc, #144]	; (8002094 <HAL_DMA_Init+0x1ec>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d009      	beq.n	800201c <HAL_DMA_Init+0x174>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a22      	ldr	r2, [pc, #136]	; (8002098 <HAL_DMA_Init+0x1f0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d004      	beq.n	800201c <HAL_DMA_Init+0x174>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a21      	ldr	r2, [pc, #132]	; (800209c <HAL_DMA_Init+0x1f4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <HAL_DMA_Init+0x186>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e007      	b.n	800203e <HAL_DMA_Init+0x196>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800203e:	e02f      	b.n	80020a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002040:	f7ff fd94 	bl	8001b6c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b05      	cmp	r3, #5
 800204c:	d928      	bls.n	80020a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2203      	movs	r2, #3
 8002058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e246      	b.n	80024ee <HAL_DMA_Init+0x646>
 8002060:	40020010 	.word	0x40020010
 8002064:	40020028 	.word	0x40020028
 8002068:	40020040 	.word	0x40020040
 800206c:	40020058 	.word	0x40020058
 8002070:	40020070 	.word	0x40020070
 8002074:	40020088 	.word	0x40020088
 8002078:	400200a0 	.word	0x400200a0
 800207c:	400200b8 	.word	0x400200b8
 8002080:	40020410 	.word	0x40020410
 8002084:	40020428 	.word	0x40020428
 8002088:	40020440 	.word	0x40020440
 800208c:	40020458 	.word	0x40020458
 8002090:	40020470 	.word	0x40020470
 8002094:	40020488 	.word	0x40020488
 8002098:	400204a0 	.word	0x400204a0
 800209c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1c8      	bne.n	8002040 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <HAL_DMA_Init+0x420>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d107      	bne.n	8002104 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4313      	orrs	r3, r2
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002104:	4b71      	ldr	r3, [pc, #452]	; (80022cc <HAL_DMA_Init+0x424>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b71      	ldr	r3, [pc, #452]	; (80022d0 <HAL_DMA_Init+0x428>)
 800210a:	4013      	ands	r3, r2
 800210c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002110:	d328      	bcc.n	8002164 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b28      	cmp	r3, #40	; 0x28
 8002118:	d903      	bls.n	8002122 <HAL_DMA_Init+0x27a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b2e      	cmp	r3, #46	; 0x2e
 8002120:	d917      	bls.n	8002152 <HAL_DMA_Init+0x2aa>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b3e      	cmp	r3, #62	; 0x3e
 8002128:	d903      	bls.n	8002132 <HAL_DMA_Init+0x28a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b42      	cmp	r3, #66	; 0x42
 8002130:	d90f      	bls.n	8002152 <HAL_DMA_Init+0x2aa>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b46      	cmp	r3, #70	; 0x46
 8002138:	d903      	bls.n	8002142 <HAL_DMA_Init+0x29a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b48      	cmp	r3, #72	; 0x48
 8002140:	d907      	bls.n	8002152 <HAL_DMA_Init+0x2aa>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b4e      	cmp	r3, #78	; 0x4e
 8002148:	d905      	bls.n	8002156 <HAL_DMA_Init+0x2ae>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b52      	cmp	r3, #82	; 0x52
 8002150:	d801      	bhi.n	8002156 <HAL_DMA_Init+0x2ae>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_DMA_Init+0x2b0>
 8002156:	2300      	movs	r3, #0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002162:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f023 0307 	bic.w	r3, r3, #7
 800217a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2b04      	cmp	r3, #4
 800218c:	d117      	bne.n	80021be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00e      	beq.n	80021be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f002 fc51 	bl	8004a48 <DMA_CheckFifoParam>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e197      	b.n	80024ee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f002 fb8c 	bl	80048e4 <DMA_CalcBaseAndBitshift>
 80021cc:	4603      	mov	r3, r0
 80021ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	223f      	movs	r2, #63	; 0x3f
 80021da:	409a      	lsls	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e0cd      	b.n	800237e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <HAL_DMA_Init+0x42c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d022      	beq.n	8002232 <HAL_DMA_Init+0x38a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a39      	ldr	r2, [pc, #228]	; (80022d8 <HAL_DMA_Init+0x430>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01d      	beq.n	8002232 <HAL_DMA_Init+0x38a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a38      	ldr	r2, [pc, #224]	; (80022dc <HAL_DMA_Init+0x434>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d018      	beq.n	8002232 <HAL_DMA_Init+0x38a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a36      	ldr	r2, [pc, #216]	; (80022e0 <HAL_DMA_Init+0x438>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_DMA_Init+0x38a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a35      	ldr	r2, [pc, #212]	; (80022e4 <HAL_DMA_Init+0x43c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00e      	beq.n	8002232 <HAL_DMA_Init+0x38a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a33      	ldr	r2, [pc, #204]	; (80022e8 <HAL_DMA_Init+0x440>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_DMA_Init+0x38a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_DMA_Init+0x444>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d004      	beq.n	8002232 <HAL_DMA_Init+0x38a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a30      	ldr	r2, [pc, #192]	; (80022f0 <HAL_DMA_Init+0x448>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_DMA_Init+0x38e>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_DMA_Init+0x390>
 8002236:	2300      	movs	r3, #0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8097 	beq.w	800236c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <HAL_DMA_Init+0x42c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d021      	beq.n	800228c <HAL_DMA_Init+0x3e4>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_DMA_Init+0x430>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01c      	beq.n	800228c <HAL_DMA_Init+0x3e4>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a21      	ldr	r2, [pc, #132]	; (80022dc <HAL_DMA_Init+0x434>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d017      	beq.n	800228c <HAL_DMA_Init+0x3e4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <HAL_DMA_Init+0x438>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d012      	beq.n	800228c <HAL_DMA_Init+0x3e4>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_DMA_Init+0x43c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00d      	beq.n	800228c <HAL_DMA_Init+0x3e4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <HAL_DMA_Init+0x440>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d008      	beq.n	800228c <HAL_DMA_Init+0x3e4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_DMA_Init+0x444>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <HAL_DMA_Init+0x3e4>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_DMA_Init+0x448>)
 800228a:	4293      	cmp	r3, r2
 800228c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_DMA_Init+0x44c>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d020      	beq.n	80022f8 <HAL_DMA_Init+0x450>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d102      	bne.n	80022c4 <HAL_DMA_Init+0x41c>
 80022be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c2:	e01a      	b.n	80022fa <HAL_DMA_Init+0x452>
 80022c4:	2300      	movs	r3, #0
 80022c6:	e018      	b.n	80022fa <HAL_DMA_Init+0x452>
 80022c8:	fe10803f 	.word	0xfe10803f
 80022cc:	5c001000 	.word	0x5c001000
 80022d0:	ffff0000 	.word	0xffff0000
 80022d4:	58025408 	.word	0x58025408
 80022d8:	5802541c 	.word	0x5802541c
 80022dc:	58025430 	.word	0x58025430
 80022e0:	58025444 	.word	0x58025444
 80022e4:	58025458 	.word	0x58025458
 80022e8:	5802546c 	.word	0x5802546c
 80022ec:	58025480 	.word	0x58025480
 80022f0:	58025494 	.word	0x58025494
 80022f4:	fffe000f 	.word	0xfffe000f
 80022f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68d2      	ldr	r2, [r2, #12]
 80022fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002300:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002308:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002310:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002318:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002320:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002328:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b6e      	ldr	r3, [pc, #440]	; (80024f8 <HAL_DMA_Init+0x650>)
 8002340:	4413      	add	r3, r2
 8002342:	4a6e      	ldr	r2, [pc, #440]	; (80024fc <HAL_DMA_Init+0x654>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	009a      	lsls	r2, r3, #2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f002 fac7 	bl	80048e4 <DMA_CalcBaseAndBitshift>
 8002356:	4603      	mov	r3, r0
 8002358:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2201      	movs	r2, #1
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	e008      	b.n	800237e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2240      	movs	r2, #64	; 0x40
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2203      	movs	r2, #3
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0b7      	b.n	80024ee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a5f      	ldr	r2, [pc, #380]	; (8002500 <HAL_DMA_Init+0x658>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d072      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5d      	ldr	r2, [pc, #372]	; (8002504 <HAL_DMA_Init+0x65c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d06d      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_DMA_Init+0x660>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d068      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a5a      	ldr	r2, [pc, #360]	; (800250c <HAL_DMA_Init+0x664>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d063      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a59      	ldr	r2, [pc, #356]	; (8002510 <HAL_DMA_Init+0x668>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d05e      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a57      	ldr	r2, [pc, #348]	; (8002514 <HAL_DMA_Init+0x66c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d059      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a56      	ldr	r2, [pc, #344]	; (8002518 <HAL_DMA_Init+0x670>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d054      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a54      	ldr	r2, [pc, #336]	; (800251c <HAL_DMA_Init+0x674>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d04f      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a53      	ldr	r2, [pc, #332]	; (8002520 <HAL_DMA_Init+0x678>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d04a      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HAL_DMA_Init+0x67c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d045      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a50      	ldr	r2, [pc, #320]	; (8002528 <HAL_DMA_Init+0x680>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d040      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	; (800252c <HAL_DMA_Init+0x684>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d03b      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a4d      	ldr	r2, [pc, #308]	; (8002530 <HAL_DMA_Init+0x688>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d036      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <HAL_DMA_Init+0x68c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d031      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a4a      	ldr	r2, [pc, #296]	; (8002538 <HAL_DMA_Init+0x690>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d02c      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a48      	ldr	r2, [pc, #288]	; (800253c <HAL_DMA_Init+0x694>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d027      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_DMA_Init+0x698>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d022      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a45      	ldr	r2, [pc, #276]	; (8002544 <HAL_DMA_Init+0x69c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01d      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a44      	ldr	r2, [pc, #272]	; (8002548 <HAL_DMA_Init+0x6a0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d018      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_DMA_Init+0x6a4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a41      	ldr	r2, [pc, #260]	; (8002550 <HAL_DMA_Init+0x6a8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00e      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <HAL_DMA_Init+0x6ac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d009      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a3e      	ldr	r2, [pc, #248]	; (8002558 <HAL_DMA_Init+0x6b0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d004      	beq.n	800246e <HAL_DMA_Init+0x5c6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a3c      	ldr	r2, [pc, #240]	; (800255c <HAL_DMA_Init+0x6b4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_DMA_Init+0x5ca>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_DMA_Init+0x5cc>
 8002472:	2300      	movs	r3, #0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d032      	beq.n	80024de <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f002 fb61 	bl	8004b40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b80      	cmp	r3, #128	; 0x80
 8002484:	d102      	bne.n	800248c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d010      	beq.n	80024cc <HAL_DMA_Init+0x624>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d80c      	bhi.n	80024cc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f002 fbde 	bl	8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	e008      	b.n	80024de <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	a7fdabf8 	.word	0xa7fdabf8
 80024fc:	cccccccd 	.word	0xcccccccd
 8002500:	40020010 	.word	0x40020010
 8002504:	40020028 	.word	0x40020028
 8002508:	40020040 	.word	0x40020040
 800250c:	40020058 	.word	0x40020058
 8002510:	40020070 	.word	0x40020070
 8002514:	40020088 	.word	0x40020088
 8002518:	400200a0 	.word	0x400200a0
 800251c:	400200b8 	.word	0x400200b8
 8002520:	40020410 	.word	0x40020410
 8002524:	40020428 	.word	0x40020428
 8002528:	40020440 	.word	0x40020440
 800252c:	40020458 	.word	0x40020458
 8002530:	40020470 	.word	0x40020470
 8002534:	40020488 	.word	0x40020488
 8002538:	400204a0 	.word	0x400204a0
 800253c:	400204b8 	.word	0x400204b8
 8002540:	58025408 	.word	0x58025408
 8002544:	5802541c 	.word	0x5802541c
 8002548:	58025430 	.word	0x58025430
 800254c:	58025444 	.word	0x58025444
 8002550:	58025458 	.word	0x58025458
 8002554:	5802546c 	.word	0x5802546c
 8002558:	58025480 	.word	0x58025480
 800255c:	58025494 	.word	0x58025494

08002560 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0ec      	b.n	8002756 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_DMA_Start+0x2a>
 8002586:	2302      	movs	r3, #2
 8002588:	e0e5      	b.n	8002756 <HAL_DMA_Start+0x1f6>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	f040 80d0 	bne.w	8002740 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6b      	ldr	r2, [pc, #428]	; (8002760 <HAL_DMA_Start+0x200>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d04a      	beq.n	800264e <HAL_DMA_Start+0xee>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a69      	ldr	r2, [pc, #420]	; (8002764 <HAL_DMA_Start+0x204>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d045      	beq.n	800264e <HAL_DMA_Start+0xee>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a68      	ldr	r2, [pc, #416]	; (8002768 <HAL_DMA_Start+0x208>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d040      	beq.n	800264e <HAL_DMA_Start+0xee>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a66      	ldr	r2, [pc, #408]	; (800276c <HAL_DMA_Start+0x20c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d03b      	beq.n	800264e <HAL_DMA_Start+0xee>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a65      	ldr	r2, [pc, #404]	; (8002770 <HAL_DMA_Start+0x210>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d036      	beq.n	800264e <HAL_DMA_Start+0xee>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a63      	ldr	r2, [pc, #396]	; (8002774 <HAL_DMA_Start+0x214>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d031      	beq.n	800264e <HAL_DMA_Start+0xee>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a62      	ldr	r2, [pc, #392]	; (8002778 <HAL_DMA_Start+0x218>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d02c      	beq.n	800264e <HAL_DMA_Start+0xee>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a60      	ldr	r2, [pc, #384]	; (800277c <HAL_DMA_Start+0x21c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d027      	beq.n	800264e <HAL_DMA_Start+0xee>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a5f      	ldr	r2, [pc, #380]	; (8002780 <HAL_DMA_Start+0x220>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d022      	beq.n	800264e <HAL_DMA_Start+0xee>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a5d      	ldr	r2, [pc, #372]	; (8002784 <HAL_DMA_Start+0x224>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01d      	beq.n	800264e <HAL_DMA_Start+0xee>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a5c      	ldr	r2, [pc, #368]	; (8002788 <HAL_DMA_Start+0x228>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d018      	beq.n	800264e <HAL_DMA_Start+0xee>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5a      	ldr	r2, [pc, #360]	; (800278c <HAL_DMA_Start+0x22c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_DMA_Start+0xee>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a59      	ldr	r2, [pc, #356]	; (8002790 <HAL_DMA_Start+0x230>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00e      	beq.n	800264e <HAL_DMA_Start+0xee>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a57      	ldr	r2, [pc, #348]	; (8002794 <HAL_DMA_Start+0x234>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d009      	beq.n	800264e <HAL_DMA_Start+0xee>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a56      	ldr	r2, [pc, #344]	; (8002798 <HAL_DMA_Start+0x238>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d004      	beq.n	800264e <HAL_DMA_Start+0xee>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a54      	ldr	r2, [pc, #336]	; (800279c <HAL_DMA_Start+0x23c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d108      	bne.n	8002660 <HAL_DMA_Start+0x100>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e007      	b.n	8002670 <HAL_DMA_Start+0x110>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f001 ff88 	bl	800458c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a37      	ldr	r2, [pc, #220]	; (8002760 <HAL_DMA_Start+0x200>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d04a      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a36      	ldr	r2, [pc, #216]	; (8002764 <HAL_DMA_Start+0x204>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d045      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a34      	ldr	r2, [pc, #208]	; (8002768 <HAL_DMA_Start+0x208>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d040      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a33      	ldr	r2, [pc, #204]	; (800276c <HAL_DMA_Start+0x20c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d03b      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a31      	ldr	r2, [pc, #196]	; (8002770 <HAL_DMA_Start+0x210>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d036      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a30      	ldr	r2, [pc, #192]	; (8002774 <HAL_DMA_Start+0x214>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d031      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2e      	ldr	r2, [pc, #184]	; (8002778 <HAL_DMA_Start+0x218>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02c      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a2d      	ldr	r2, [pc, #180]	; (800277c <HAL_DMA_Start+0x21c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d027      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_DMA_Start+0x220>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d022      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_DMA_Start+0x224>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01d      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a28      	ldr	r2, [pc, #160]	; (8002788 <HAL_DMA_Start+0x228>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d018      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a27      	ldr	r2, [pc, #156]	; (800278c <HAL_DMA_Start+0x22c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a25      	ldr	r2, [pc, #148]	; (8002790 <HAL_DMA_Start+0x230>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00e      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a24      	ldr	r2, [pc, #144]	; (8002794 <HAL_DMA_Start+0x234>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a22      	ldr	r2, [pc, #136]	; (8002798 <HAL_DMA_Start+0x238>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_DMA_Start+0x1bc>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_DMA_Start+0x23c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <HAL_DMA_Start+0x1ce>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e012      	b.n	8002754 <HAL_DMA_Start+0x1f4>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0201 	orr.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e009      	b.n	8002754 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800274e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002754:	7dfb      	ldrb	r3, [r7, #23]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40020010 	.word	0x40020010
 8002764:	40020028 	.word	0x40020028
 8002768:	40020040 	.word	0x40020040
 800276c:	40020058 	.word	0x40020058
 8002770:	40020070 	.word	0x40020070
 8002774:	40020088 	.word	0x40020088
 8002778:	400200a0 	.word	0x400200a0
 800277c:	400200b8 	.word	0x400200b8
 8002780:	40020410 	.word	0x40020410
 8002784:	40020428 	.word	0x40020428
 8002788:	40020440 	.word	0x40020440
 800278c:	40020458 	.word	0x40020458
 8002790:	40020470 	.word	0x40020470
 8002794:	40020488 	.word	0x40020488
 8002798:	400204a0 	.word	0x400204a0
 800279c:	400204b8 	.word	0x400204b8

080027a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e226      	b.n	8002c0a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_DMA_Start_IT+0x2a>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e21f      	b.n	8002c0a <HAL_DMA_Start_IT+0x46a>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	f040 820a 	bne.w	8002bf4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a68      	ldr	r2, [pc, #416]	; (8002994 <HAL_DMA_Start_IT+0x1f4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d04a      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a66      	ldr	r2, [pc, #408]	; (8002998 <HAL_DMA_Start_IT+0x1f8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d045      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a65      	ldr	r2, [pc, #404]	; (800299c <HAL_DMA_Start_IT+0x1fc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d040      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a63      	ldr	r2, [pc, #396]	; (80029a0 <HAL_DMA_Start_IT+0x200>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d03b      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a62      	ldr	r2, [pc, #392]	; (80029a4 <HAL_DMA_Start_IT+0x204>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d036      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a60      	ldr	r2, [pc, #384]	; (80029a8 <HAL_DMA_Start_IT+0x208>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d031      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a5f      	ldr	r2, [pc, #380]	; (80029ac <HAL_DMA_Start_IT+0x20c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d02c      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_DMA_Start_IT+0x210>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d027      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5c      	ldr	r2, [pc, #368]	; (80029b4 <HAL_DMA_Start_IT+0x214>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d022      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a5a      	ldr	r2, [pc, #360]	; (80029b8 <HAL_DMA_Start_IT+0x218>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01d      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a59      	ldr	r2, [pc, #356]	; (80029bc <HAL_DMA_Start_IT+0x21c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d018      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a57      	ldr	r2, [pc, #348]	; (80029c0 <HAL_DMA_Start_IT+0x220>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a56      	ldr	r2, [pc, #344]	; (80029c4 <HAL_DMA_Start_IT+0x224>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00e      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a54      	ldr	r2, [pc, #336]	; (80029c8 <HAL_DMA_Start_IT+0x228>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a53      	ldr	r2, [pc, #332]	; (80029cc <HAL_DMA_Start_IT+0x22c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_DMA_Start_IT+0xee>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a51      	ldr	r2, [pc, #324]	; (80029d0 <HAL_DMA_Start_IT+0x230>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d108      	bne.n	80028a0 <HAL_DMA_Start_IT+0x100>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e007      	b.n	80028b0 <HAL_DMA_Start_IT+0x110>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f001 fe68 	bl	800458c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_DMA_Start_IT+0x1f4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d04a      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a33      	ldr	r2, [pc, #204]	; (8002998 <HAL_DMA_Start_IT+0x1f8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d045      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a31      	ldr	r2, [pc, #196]	; (800299c <HAL_DMA_Start_IT+0x1fc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d040      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a30      	ldr	r2, [pc, #192]	; (80029a0 <HAL_DMA_Start_IT+0x200>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d03b      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2e      	ldr	r2, [pc, #184]	; (80029a4 <HAL_DMA_Start_IT+0x204>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d036      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2d      	ldr	r2, [pc, #180]	; (80029a8 <HAL_DMA_Start_IT+0x208>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d031      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2b      	ldr	r2, [pc, #172]	; (80029ac <HAL_DMA_Start_IT+0x20c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02c      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2a      	ldr	r2, [pc, #168]	; (80029b0 <HAL_DMA_Start_IT+0x210>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d027      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a28      	ldr	r2, [pc, #160]	; (80029b4 <HAL_DMA_Start_IT+0x214>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d022      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <HAL_DMA_Start_IT+0x218>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d01d      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_DMA_Start_IT+0x21c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d018      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <HAL_DMA_Start_IT+0x220>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_DMA_Start_IT+0x224>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00e      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_DMA_Start_IT+0x228>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d009      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_DMA_Start_IT+0x22c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_DMA_Start_IT+0x1bc>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_DMA_Start_IT+0x230>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_DMA_Start_IT+0x1c0>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_DMA_Start_IT+0x1c2>
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d036      	beq.n	80029d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 021e 	bic.w	r2, r3, #30
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0216 	orr.w	r2, r2, #22
 8002978:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d03e      	beq.n	8002a00 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0208 	orr.w	r2, r2, #8
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e035      	b.n	8002a00 <HAL_DMA_Start_IT+0x260>
 8002994:	40020010 	.word	0x40020010
 8002998:	40020028 	.word	0x40020028
 800299c:	40020040 	.word	0x40020040
 80029a0:	40020058 	.word	0x40020058
 80029a4:	40020070 	.word	0x40020070
 80029a8:	40020088 	.word	0x40020088
 80029ac:	400200a0 	.word	0x400200a0
 80029b0:	400200b8 	.word	0x400200b8
 80029b4:	40020410 	.word	0x40020410
 80029b8:	40020428 	.word	0x40020428
 80029bc:	40020440 	.word	0x40020440
 80029c0:	40020458 	.word	0x40020458
 80029c4:	40020470 	.word	0x40020470
 80029c8:	40020488 	.word	0x40020488
 80029cc:	400204a0 	.word	0x400204a0
 80029d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 020e 	bic.w	r2, r3, #14
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 020a 	orr.w	r2, r2, #10
 80029e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0204 	orr.w	r2, r2, #4
 80029fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a83      	ldr	r2, [pc, #524]	; (8002c14 <HAL_DMA_Start_IT+0x474>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d072      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a82      	ldr	r2, [pc, #520]	; (8002c18 <HAL_DMA_Start_IT+0x478>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d06d      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a80      	ldr	r2, [pc, #512]	; (8002c1c <HAL_DMA_Start_IT+0x47c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d068      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7f      	ldr	r2, [pc, #508]	; (8002c20 <HAL_DMA_Start_IT+0x480>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d063      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a7d      	ldr	r2, [pc, #500]	; (8002c24 <HAL_DMA_Start_IT+0x484>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d05e      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7c      	ldr	r2, [pc, #496]	; (8002c28 <HAL_DMA_Start_IT+0x488>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d059      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a7a      	ldr	r2, [pc, #488]	; (8002c2c <HAL_DMA_Start_IT+0x48c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d054      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a79      	ldr	r2, [pc, #484]	; (8002c30 <HAL_DMA_Start_IT+0x490>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d04f      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a77      	ldr	r2, [pc, #476]	; (8002c34 <HAL_DMA_Start_IT+0x494>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d04a      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a76      	ldr	r2, [pc, #472]	; (8002c38 <HAL_DMA_Start_IT+0x498>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d045      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a74      	ldr	r2, [pc, #464]	; (8002c3c <HAL_DMA_Start_IT+0x49c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d040      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a73      	ldr	r2, [pc, #460]	; (8002c40 <HAL_DMA_Start_IT+0x4a0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d03b      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a71      	ldr	r2, [pc, #452]	; (8002c44 <HAL_DMA_Start_IT+0x4a4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d036      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a70      	ldr	r2, [pc, #448]	; (8002c48 <HAL_DMA_Start_IT+0x4a8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d031      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6e      	ldr	r2, [pc, #440]	; (8002c4c <HAL_DMA_Start_IT+0x4ac>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02c      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6d      	ldr	r2, [pc, #436]	; (8002c50 <HAL_DMA_Start_IT+0x4b0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d027      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6b      	ldr	r2, [pc, #428]	; (8002c54 <HAL_DMA_Start_IT+0x4b4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6a      	ldr	r2, [pc, #424]	; (8002c58 <HAL_DMA_Start_IT+0x4b8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01d      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a68      	ldr	r2, [pc, #416]	; (8002c5c <HAL_DMA_Start_IT+0x4bc>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a67      	ldr	r2, [pc, #412]	; (8002c60 <HAL_DMA_Start_IT+0x4c0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a65      	ldr	r2, [pc, #404]	; (8002c64 <HAL_DMA_Start_IT+0x4c4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a64      	ldr	r2, [pc, #400]	; (8002c68 <HAL_DMA_Start_IT+0x4c8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a62      	ldr	r2, [pc, #392]	; (8002c6c <HAL_DMA_Start_IT+0x4cc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_DMA_Start_IT+0x350>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a61      	ldr	r2, [pc, #388]	; (8002c70 <HAL_DMA_Start_IT+0x4d0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_DMA_Start_IT+0x354>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_DMA_Start_IT+0x356>
 8002af4:	2300      	movs	r3, #0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01a      	beq.n	8002b30 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b16:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a37      	ldr	r2, [pc, #220]	; (8002c14 <HAL_DMA_Start_IT+0x474>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d04a      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a36      	ldr	r2, [pc, #216]	; (8002c18 <HAL_DMA_Start_IT+0x478>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d045      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <HAL_DMA_Start_IT+0x47c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d040      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a33      	ldr	r2, [pc, #204]	; (8002c20 <HAL_DMA_Start_IT+0x480>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d03b      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a31      	ldr	r2, [pc, #196]	; (8002c24 <HAL_DMA_Start_IT+0x484>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d036      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <HAL_DMA_Start_IT+0x488>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d031      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <HAL_DMA_Start_IT+0x48c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d02c      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2d      	ldr	r2, [pc, #180]	; (8002c30 <HAL_DMA_Start_IT+0x490>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d027      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2b      	ldr	r2, [pc, #172]	; (8002c34 <HAL_DMA_Start_IT+0x494>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d022      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2a      	ldr	r2, [pc, #168]	; (8002c38 <HAL_DMA_Start_IT+0x498>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d01d      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a28      	ldr	r2, [pc, #160]	; (8002c3c <HAL_DMA_Start_IT+0x49c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d018      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_DMA_Start_IT+0x4a0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d013      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a25      	ldr	r2, [pc, #148]	; (8002c44 <HAL_DMA_Start_IT+0x4a4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00e      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a24      	ldr	r2, [pc, #144]	; (8002c48 <HAL_DMA_Start_IT+0x4a8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_DMA_Start_IT+0x4ac>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d004      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x430>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <HAL_DMA_Start_IT+0x4b0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d108      	bne.n	8002be2 <HAL_DMA_Start_IT+0x442>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e012      	b.n	8002c08 <HAL_DMA_Start_IT+0x468>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e009      	b.n	8002c08 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40020010 	.word	0x40020010
 8002c18:	40020028 	.word	0x40020028
 8002c1c:	40020040 	.word	0x40020040
 8002c20:	40020058 	.word	0x40020058
 8002c24:	40020070 	.word	0x40020070
 8002c28:	40020088 	.word	0x40020088
 8002c2c:	400200a0 	.word	0x400200a0
 8002c30:	400200b8 	.word	0x400200b8
 8002c34:	40020410 	.word	0x40020410
 8002c38:	40020428 	.word	0x40020428
 8002c3c:	40020440 	.word	0x40020440
 8002c40:	40020458 	.word	0x40020458
 8002c44:	40020470 	.word	0x40020470
 8002c48:	40020488 	.word	0x40020488
 8002c4c:	400204a0 	.word	0x400204a0
 8002c50:	400204b8 	.word	0x400204b8
 8002c54:	58025408 	.word	0x58025408
 8002c58:	5802541c 	.word	0x5802541c
 8002c5c:	58025430 	.word	0x58025430
 8002c60:	58025444 	.word	0x58025444
 8002c64:	58025458 	.word	0x58025458
 8002c68:	5802546c 	.word	0x5802546c
 8002c6c:	58025480 	.word	0x58025480
 8002c70:	58025494 	.word	0x58025494

08002c74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7fe ff76 	bl	8001b6c <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e2dc      	b.n	8003246 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d008      	beq.n	8002caa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e2cd      	b.n	8003246 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a76      	ldr	r2, [pc, #472]	; (8002e88 <HAL_DMA_Abort+0x214>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04a      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a74      	ldr	r2, [pc, #464]	; (8002e8c <HAL_DMA_Abort+0x218>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d045      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a73      	ldr	r2, [pc, #460]	; (8002e90 <HAL_DMA_Abort+0x21c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d040      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a71      	ldr	r2, [pc, #452]	; (8002e94 <HAL_DMA_Abort+0x220>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d03b      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a70      	ldr	r2, [pc, #448]	; (8002e98 <HAL_DMA_Abort+0x224>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d036      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6e      	ldr	r2, [pc, #440]	; (8002e9c <HAL_DMA_Abort+0x228>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d031      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6d      	ldr	r2, [pc, #436]	; (8002ea0 <HAL_DMA_Abort+0x22c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d02c      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a6b      	ldr	r2, [pc, #428]	; (8002ea4 <HAL_DMA_Abort+0x230>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d027      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a6a      	ldr	r2, [pc, #424]	; (8002ea8 <HAL_DMA_Abort+0x234>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a68      	ldr	r2, [pc, #416]	; (8002eac <HAL_DMA_Abort+0x238>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <HAL_DMA_Abort+0x23c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d018      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_DMA_Abort+0x240>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a64      	ldr	r2, [pc, #400]	; (8002eb8 <HAL_DMA_Abort+0x244>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a62      	ldr	r2, [pc, #392]	; (8002ebc <HAL_DMA_Abort+0x248>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a61      	ldr	r2, [pc, #388]	; (8002ec0 <HAL_DMA_Abort+0x24c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_DMA_Abort+0xd6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5f      	ldr	r2, [pc, #380]	; (8002ec4 <HAL_DMA_Abort+0x250>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_DMA_Abort+0xda>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_DMA_Abort+0xdc>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 021e 	bic.w	r2, r2, #30
 8002d62:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d72:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e00a      	b.n	8002d92 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020e 	bic.w	r2, r2, #14
 8002d8a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a3c      	ldr	r2, [pc, #240]	; (8002e88 <HAL_DMA_Abort+0x214>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d072      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a3a      	ldr	r2, [pc, #232]	; (8002e8c <HAL_DMA_Abort+0x218>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d06d      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a39      	ldr	r2, [pc, #228]	; (8002e90 <HAL_DMA_Abort+0x21c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d068      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a37      	ldr	r2, [pc, #220]	; (8002e94 <HAL_DMA_Abort+0x220>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d063      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a36      	ldr	r2, [pc, #216]	; (8002e98 <HAL_DMA_Abort+0x224>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d05e      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <HAL_DMA_Abort+0x228>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d059      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a33      	ldr	r2, [pc, #204]	; (8002ea0 <HAL_DMA_Abort+0x22c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d054      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a31      	ldr	r2, [pc, #196]	; (8002ea4 <HAL_DMA_Abort+0x230>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d04f      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a30      	ldr	r2, [pc, #192]	; (8002ea8 <HAL_DMA_Abort+0x234>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04a      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <HAL_DMA_Abort+0x238>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d045      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	; (8002eb0 <HAL_DMA_Abort+0x23c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d040      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <HAL_DMA_Abort+0x240>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d03b      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <HAL_DMA_Abort+0x244>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d036      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_DMA_Abort+0x248>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d031      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <HAL_DMA_Abort+0x24c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d02c      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <HAL_DMA_Abort+0x250>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d027      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <HAL_DMA_Abort+0x254>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_DMA_Abort+0x258>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <HAL_DMA_Abort+0x25c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d018      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <HAL_DMA_Abort+0x260>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_DMA_Abort+0x264>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_DMA_Abort+0x268>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_DMA_Abort+0x26c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_DMA_Abort+0x20e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_DMA_Abort+0x270>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d132      	bne.n	8002ee8 <HAL_DMA_Abort+0x274>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e031      	b.n	8002eea <HAL_DMA_Abort+0x276>
 8002e86:	bf00      	nop
 8002e88:	40020010 	.word	0x40020010
 8002e8c:	40020028 	.word	0x40020028
 8002e90:	40020040 	.word	0x40020040
 8002e94:	40020058 	.word	0x40020058
 8002e98:	40020070 	.word	0x40020070
 8002e9c:	40020088 	.word	0x40020088
 8002ea0:	400200a0 	.word	0x400200a0
 8002ea4:	400200b8 	.word	0x400200b8
 8002ea8:	40020410 	.word	0x40020410
 8002eac:	40020428 	.word	0x40020428
 8002eb0:	40020440 	.word	0x40020440
 8002eb4:	40020458 	.word	0x40020458
 8002eb8:	40020470 	.word	0x40020470
 8002ebc:	40020488 	.word	0x40020488
 8002ec0:	400204a0 	.word	0x400204a0
 8002ec4:	400204b8 	.word	0x400204b8
 8002ec8:	58025408 	.word	0x58025408
 8002ecc:	5802541c 	.word	0x5802541c
 8002ed0:	58025430 	.word	0x58025430
 8002ed4:	58025444 	.word	0x58025444
 8002ed8:	58025458 	.word	0x58025458
 8002edc:	5802546c 	.word	0x5802546c
 8002ee0:	58025480 	.word	0x58025480
 8002ee4:	58025494 	.word	0x58025494
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6d      	ldr	r2, [pc, #436]	; (80030b8 <HAL_DMA_Abort+0x444>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d04a      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6b      	ldr	r2, [pc, #428]	; (80030bc <HAL_DMA_Abort+0x448>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d045      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6a      	ldr	r2, [pc, #424]	; (80030c0 <HAL_DMA_Abort+0x44c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d040      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a68      	ldr	r2, [pc, #416]	; (80030c4 <HAL_DMA_Abort+0x450>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d03b      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a67      	ldr	r2, [pc, #412]	; (80030c8 <HAL_DMA_Abort+0x454>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d036      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a65      	ldr	r2, [pc, #404]	; (80030cc <HAL_DMA_Abort+0x458>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d031      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a64      	ldr	r2, [pc, #400]	; (80030d0 <HAL_DMA_Abort+0x45c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d02c      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a62      	ldr	r2, [pc, #392]	; (80030d4 <HAL_DMA_Abort+0x460>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d027      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a61      	ldr	r2, [pc, #388]	; (80030d8 <HAL_DMA_Abort+0x464>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d022      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5f      	ldr	r2, [pc, #380]	; (80030dc <HAL_DMA_Abort+0x468>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01d      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5e      	ldr	r2, [pc, #376]	; (80030e0 <HAL_DMA_Abort+0x46c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d018      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5c      	ldr	r2, [pc, #368]	; (80030e4 <HAL_DMA_Abort+0x470>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5b      	ldr	r2, [pc, #364]	; (80030e8 <HAL_DMA_Abort+0x474>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00e      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a59      	ldr	r2, [pc, #356]	; (80030ec <HAL_DMA_Abort+0x478>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_DMA_Abort+0x47c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_DMA_Abort+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a56      	ldr	r2, [pc, #344]	; (80030f4 <HAL_DMA_Abort+0x480>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <HAL_DMA_Abort+0x33c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e007      	b.n	8002fc0 <HAL_DMA_Abort+0x34c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fc0:	e013      	b.n	8002fea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc2:	f7fe fdd3 	bl	8001b6c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	d90c      	bls.n	8002fea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e12d      	b.n	8003246 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e5      	bne.n	8002fc2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <HAL_DMA_Abort+0x444>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04a      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2d      	ldr	r2, [pc, #180]	; (80030bc <HAL_DMA_Abort+0x448>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d045      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2c      	ldr	r2, [pc, #176]	; (80030c0 <HAL_DMA_Abort+0x44c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <HAL_DMA_Abort+0x450>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03b      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <HAL_DMA_Abort+0x454>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d036      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a27      	ldr	r2, [pc, #156]	; (80030cc <HAL_DMA_Abort+0x458>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d031      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a26      	ldr	r2, [pc, #152]	; (80030d0 <HAL_DMA_Abort+0x45c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d02c      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a24      	ldr	r2, [pc, #144]	; (80030d4 <HAL_DMA_Abort+0x460>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d027      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a23      	ldr	r2, [pc, #140]	; (80030d8 <HAL_DMA_Abort+0x464>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a21      	ldr	r2, [pc, #132]	; (80030dc <HAL_DMA_Abort+0x468>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_DMA_Abort+0x46c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_DMA_Abort+0x470>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <HAL_DMA_Abort+0x474>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_DMA_Abort+0x478>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <HAL_DMA_Abort+0x47c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_Abort+0x422>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <HAL_DMA_Abort+0x480>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_DMA_Abort+0x426>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_DMA_Abort+0x428>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02b      	beq.n	80030f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	223f      	movs	r2, #63	; 0x3f
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	e02a      	b.n	800310e <HAL_DMA_Abort+0x49a>
 80030b8:	40020010 	.word	0x40020010
 80030bc:	40020028 	.word	0x40020028
 80030c0:	40020040 	.word	0x40020040
 80030c4:	40020058 	.word	0x40020058
 80030c8:	40020070 	.word	0x40020070
 80030cc:	40020088 	.word	0x40020088
 80030d0:	400200a0 	.word	0x400200a0
 80030d4:	400200b8 	.word	0x400200b8
 80030d8:	40020410 	.word	0x40020410
 80030dc:	40020428 	.word	0x40020428
 80030e0:	40020440 	.word	0x40020440
 80030e4:	40020458 	.word	0x40020458
 80030e8:	40020470 	.word	0x40020470
 80030ec:	40020488 	.word	0x40020488
 80030f0:	400204a0 	.word	0x400204a0
 80030f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2201      	movs	r2, #1
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a4f      	ldr	r2, [pc, #316]	; (8003250 <HAL_DMA_Abort+0x5dc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d072      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a4d      	ldr	r2, [pc, #308]	; (8003254 <HAL_DMA_Abort+0x5e0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d06d      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <HAL_DMA_Abort+0x5e4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d068      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_DMA_Abort+0x5e8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d063      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a49      	ldr	r2, [pc, #292]	; (8003260 <HAL_DMA_Abort+0x5ec>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d05e      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a47      	ldr	r2, [pc, #284]	; (8003264 <HAL_DMA_Abort+0x5f0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d059      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a46      	ldr	r2, [pc, #280]	; (8003268 <HAL_DMA_Abort+0x5f4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d054      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a44      	ldr	r2, [pc, #272]	; (800326c <HAL_DMA_Abort+0x5f8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d04f      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a43      	ldr	r2, [pc, #268]	; (8003270 <HAL_DMA_Abort+0x5fc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d04a      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a41      	ldr	r2, [pc, #260]	; (8003274 <HAL_DMA_Abort+0x600>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d045      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a40      	ldr	r2, [pc, #256]	; (8003278 <HAL_DMA_Abort+0x604>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d040      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3e      	ldr	r2, [pc, #248]	; (800327c <HAL_DMA_Abort+0x608>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d03b      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a3d      	ldr	r2, [pc, #244]	; (8003280 <HAL_DMA_Abort+0x60c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d036      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a3b      	ldr	r2, [pc, #236]	; (8003284 <HAL_DMA_Abort+0x610>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a3a      	ldr	r2, [pc, #232]	; (8003288 <HAL_DMA_Abort+0x614>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d02c      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a38      	ldr	r2, [pc, #224]	; (800328c <HAL_DMA_Abort+0x618>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d027      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a37      	ldr	r2, [pc, #220]	; (8003290 <HAL_DMA_Abort+0x61c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d022      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a35      	ldr	r2, [pc, #212]	; (8003294 <HAL_DMA_Abort+0x620>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01d      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a34      	ldr	r2, [pc, #208]	; (8003298 <HAL_DMA_Abort+0x624>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d018      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a32      	ldr	r2, [pc, #200]	; (800329c <HAL_DMA_Abort+0x628>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a31      	ldr	r2, [pc, #196]	; (80032a0 <HAL_DMA_Abort+0x62c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2f      	ldr	r2, [pc, #188]	; (80032a4 <HAL_DMA_Abort+0x630>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2e      	ldr	r2, [pc, #184]	; (80032a8 <HAL_DMA_Abort+0x634>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_DMA_Abort+0x58a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <HAL_DMA_Abort+0x638>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_DMA_Abort+0x58e>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_DMA_Abort+0x590>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003210:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003228:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003232:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40020010 	.word	0x40020010
 8003254:	40020028 	.word	0x40020028
 8003258:	40020040 	.word	0x40020040
 800325c:	40020058 	.word	0x40020058
 8003260:	40020070 	.word	0x40020070
 8003264:	40020088 	.word	0x40020088
 8003268:	400200a0 	.word	0x400200a0
 800326c:	400200b8 	.word	0x400200b8
 8003270:	40020410 	.word	0x40020410
 8003274:	40020428 	.word	0x40020428
 8003278:	40020440 	.word	0x40020440
 800327c:	40020458 	.word	0x40020458
 8003280:	40020470 	.word	0x40020470
 8003284:	40020488 	.word	0x40020488
 8003288:	400204a0 	.word	0x400204a0
 800328c:	400204b8 	.word	0x400204b8
 8003290:	58025408 	.word	0x58025408
 8003294:	5802541c 	.word	0x5802541c
 8003298:	58025430 	.word	0x58025430
 800329c:	58025444 	.word	0x58025444
 80032a0:	58025458 	.word	0x58025458
 80032a4:	5802546c 	.word	0x5802546c
 80032a8:	58025480 	.word	0x58025480
 80032ac:	58025494 	.word	0x58025494

080032b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e205      	b.n	80036ce <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d004      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2280      	movs	r2, #128	; 0x80
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e1fa      	b.n	80036ce <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a8c      	ldr	r2, [pc, #560]	; (8003510 <HAL_DMA_Abort_IT+0x260>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d04a      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a8b      	ldr	r2, [pc, #556]	; (8003514 <HAL_DMA_Abort_IT+0x264>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d045      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a89      	ldr	r2, [pc, #548]	; (8003518 <HAL_DMA_Abort_IT+0x268>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d040      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a88      	ldr	r2, [pc, #544]	; (800351c <HAL_DMA_Abort_IT+0x26c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d03b      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a86      	ldr	r2, [pc, #536]	; (8003520 <HAL_DMA_Abort_IT+0x270>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d036      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a85      	ldr	r2, [pc, #532]	; (8003524 <HAL_DMA_Abort_IT+0x274>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d031      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a83      	ldr	r2, [pc, #524]	; (8003528 <HAL_DMA_Abort_IT+0x278>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02c      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a82      	ldr	r2, [pc, #520]	; (800352c <HAL_DMA_Abort_IT+0x27c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d027      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a80      	ldr	r2, [pc, #512]	; (8003530 <HAL_DMA_Abort_IT+0x280>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d022      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a7f      	ldr	r2, [pc, #508]	; (8003534 <HAL_DMA_Abort_IT+0x284>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d01d      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a7d      	ldr	r2, [pc, #500]	; (8003538 <HAL_DMA_Abort_IT+0x288>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d018      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7c      	ldr	r2, [pc, #496]	; (800353c <HAL_DMA_Abort_IT+0x28c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a7a      	ldr	r2, [pc, #488]	; (8003540 <HAL_DMA_Abort_IT+0x290>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00e      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a79      	ldr	r2, [pc, #484]	; (8003544 <HAL_DMA_Abort_IT+0x294>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d009      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a77      	ldr	r2, [pc, #476]	; (8003548 <HAL_DMA_Abort_IT+0x298>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_DMA_Abort_IT+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a76      	ldr	r2, [pc, #472]	; (800354c <HAL_DMA_Abort_IT+0x29c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_DMA_Abort_IT+0xcc>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_DMA_Abort_IT+0xce>
 800337c:	2300      	movs	r3, #0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d065      	beq.n	800344e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2204      	movs	r2, #4
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a60      	ldr	r2, [pc, #384]	; (8003510 <HAL_DMA_Abort_IT+0x260>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d04a      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5e      	ldr	r2, [pc, #376]	; (8003514 <HAL_DMA_Abort_IT+0x264>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d045      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a5d      	ldr	r2, [pc, #372]	; (8003518 <HAL_DMA_Abort_IT+0x268>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d040      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a5b      	ldr	r2, [pc, #364]	; (800351c <HAL_DMA_Abort_IT+0x26c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d03b      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5a      	ldr	r2, [pc, #360]	; (8003520 <HAL_DMA_Abort_IT+0x270>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d036      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a58      	ldr	r2, [pc, #352]	; (8003524 <HAL_DMA_Abort_IT+0x274>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d031      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a57      	ldr	r2, [pc, #348]	; (8003528 <HAL_DMA_Abort_IT+0x278>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d02c      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a55      	ldr	r2, [pc, #340]	; (800352c <HAL_DMA_Abort_IT+0x27c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d027      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a54      	ldr	r2, [pc, #336]	; (8003530 <HAL_DMA_Abort_IT+0x280>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d022      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a52      	ldr	r2, [pc, #328]	; (8003534 <HAL_DMA_Abort_IT+0x284>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01d      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a51      	ldr	r2, [pc, #324]	; (8003538 <HAL_DMA_Abort_IT+0x288>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d018      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a4f      	ldr	r2, [pc, #316]	; (800353c <HAL_DMA_Abort_IT+0x28c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a4e      	ldr	r2, [pc, #312]	; (8003540 <HAL_DMA_Abort_IT+0x290>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4c      	ldr	r2, [pc, #304]	; (8003544 <HAL_DMA_Abort_IT+0x294>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a4b      	ldr	r2, [pc, #300]	; (8003548 <HAL_DMA_Abort_IT+0x298>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_DMA_Abort_IT+0x17a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a49      	ldr	r2, [pc, #292]	; (800354c <HAL_DMA_Abort_IT+0x29c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <HAL_DMA_Abort_IT+0x18c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e147      	b.n	80036cc <HAL_DMA_Abort_IT+0x41c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e13e      	b.n	80036cc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 020e 	bic.w	r2, r2, #14
 800345c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a2b      	ldr	r2, [pc, #172]	; (8003510 <HAL_DMA_Abort_IT+0x260>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04a      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a29      	ldr	r2, [pc, #164]	; (8003514 <HAL_DMA_Abort_IT+0x264>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d045      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a28      	ldr	r2, [pc, #160]	; (8003518 <HAL_DMA_Abort_IT+0x268>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d040      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a26      	ldr	r2, [pc, #152]	; (800351c <HAL_DMA_Abort_IT+0x26c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d03b      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a25      	ldr	r2, [pc, #148]	; (8003520 <HAL_DMA_Abort_IT+0x270>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d036      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a23      	ldr	r2, [pc, #140]	; (8003524 <HAL_DMA_Abort_IT+0x274>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d031      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_DMA_Abort_IT+0x278>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d02c      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a20      	ldr	r2, [pc, #128]	; (800352c <HAL_DMA_Abort_IT+0x27c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d027      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_DMA_Abort_IT+0x280>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_DMA_Abort_IT+0x284>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <HAL_DMA_Abort_IT+0x288>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1a      	ldr	r2, [pc, #104]	; (800353c <HAL_DMA_Abort_IT+0x28c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_DMA_Abort_IT+0x290>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_DMA_Abort_IT+0x294>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a16      	ldr	r2, [pc, #88]	; (8003548 <HAL_DMA_Abort_IT+0x298>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <HAL_DMA_Abort_IT+0x29c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d128      	bne.n	8003550 <HAL_DMA_Abort_IT+0x2a0>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e027      	b.n	8003560 <HAL_DMA_Abort_IT+0x2b0>
 8003510:	40020010 	.word	0x40020010
 8003514:	40020028 	.word	0x40020028
 8003518:	40020040 	.word	0x40020040
 800351c:	40020058 	.word	0x40020058
 8003520:	40020070 	.word	0x40020070
 8003524:	40020088 	.word	0x40020088
 8003528:	400200a0 	.word	0x400200a0
 800352c:	400200b8 	.word	0x400200b8
 8003530:	40020410 	.word	0x40020410
 8003534:	40020428 	.word	0x40020428
 8003538:	40020440 	.word	0x40020440
 800353c:	40020458 	.word	0x40020458
 8003540:	40020470 	.word	0x40020470
 8003544:	40020488 	.word	0x40020488
 8003548:	400204a0 	.word	0x400204a0
 800354c:	400204b8 	.word	0x400204b8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a5c      	ldr	r2, [pc, #368]	; (80036d8 <HAL_DMA_Abort_IT+0x428>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d072      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a5b      	ldr	r2, [pc, #364]	; (80036dc <HAL_DMA_Abort_IT+0x42c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d06d      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a59      	ldr	r2, [pc, #356]	; (80036e0 <HAL_DMA_Abort_IT+0x430>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d068      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a58      	ldr	r2, [pc, #352]	; (80036e4 <HAL_DMA_Abort_IT+0x434>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d063      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a56      	ldr	r2, [pc, #344]	; (80036e8 <HAL_DMA_Abort_IT+0x438>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d05e      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a55      	ldr	r2, [pc, #340]	; (80036ec <HAL_DMA_Abort_IT+0x43c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d059      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a53      	ldr	r2, [pc, #332]	; (80036f0 <HAL_DMA_Abort_IT+0x440>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d054      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a52      	ldr	r2, [pc, #328]	; (80036f4 <HAL_DMA_Abort_IT+0x444>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d04f      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a50      	ldr	r2, [pc, #320]	; (80036f8 <HAL_DMA_Abort_IT+0x448>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d04a      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a4f      	ldr	r2, [pc, #316]	; (80036fc <HAL_DMA_Abort_IT+0x44c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d045      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a4d      	ldr	r2, [pc, #308]	; (8003700 <HAL_DMA_Abort_IT+0x450>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d040      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a4c      	ldr	r2, [pc, #304]	; (8003704 <HAL_DMA_Abort_IT+0x454>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d03b      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a4a      	ldr	r2, [pc, #296]	; (8003708 <HAL_DMA_Abort_IT+0x458>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d036      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a49      	ldr	r2, [pc, #292]	; (800370c <HAL_DMA_Abort_IT+0x45c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d031      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a47      	ldr	r2, [pc, #284]	; (8003710 <HAL_DMA_Abort_IT+0x460>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d02c      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a46      	ldr	r2, [pc, #280]	; (8003714 <HAL_DMA_Abort_IT+0x464>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d027      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a44      	ldr	r2, [pc, #272]	; (8003718 <HAL_DMA_Abort_IT+0x468>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d022      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a43      	ldr	r2, [pc, #268]	; (800371c <HAL_DMA_Abort_IT+0x46c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d01d      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a41      	ldr	r2, [pc, #260]	; (8003720 <HAL_DMA_Abort_IT+0x470>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d018      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a40      	ldr	r2, [pc, #256]	; (8003724 <HAL_DMA_Abort_IT+0x474>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d013      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3e      	ldr	r2, [pc, #248]	; (8003728 <HAL_DMA_Abort_IT+0x478>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00e      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a3d      	ldr	r2, [pc, #244]	; (800372c <HAL_DMA_Abort_IT+0x47c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d009      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a3b      	ldr	r2, [pc, #236]	; (8003730 <HAL_DMA_Abort_IT+0x480>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_DMA_Abort_IT+0x3a0>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3a      	ldr	r2, [pc, #232]	; (8003734 <HAL_DMA_Abort_IT+0x484>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_DMA_Abort_IT+0x3a4>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_DMA_Abort_IT+0x3a6>
 8003654:	2300      	movs	r3, #0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d028      	beq.n	80036ac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003668:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2201      	movs	r2, #1
 800367a:	409a      	lsls	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003688:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00c      	beq.n	80036ac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	58025408 	.word	0x58025408
 800371c:	5802541c 	.word	0x5802541c
 8003720:	58025430 	.word	0x58025430
 8003724:	58025444 	.word	0x58025444
 8003728:	58025458 	.word	0x58025458
 800372c:	5802546c 	.word	0x5802546c
 8003730:	58025480 	.word	0x58025480
 8003734:	58025494 	.word	0x58025494

08003738 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003744:	4b67      	ldr	r3, [pc, #412]	; (80038e4 <HAL_DMA_IRQHandler+0x1ac>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a67      	ldr	r2, [pc, #412]	; (80038e8 <HAL_DMA_IRQHandler+0x1b0>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0a9b      	lsrs	r3, r3, #10
 8003750:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a5f      	ldr	r2, [pc, #380]	; (80038ec <HAL_DMA_IRQHandler+0x1b4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d04a      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5d      	ldr	r2, [pc, #372]	; (80038f0 <HAL_DMA_IRQHandler+0x1b8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d045      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5c      	ldr	r2, [pc, #368]	; (80038f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d040      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5a      	ldr	r2, [pc, #360]	; (80038f8 <HAL_DMA_IRQHandler+0x1c0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d03b      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a59      	ldr	r2, [pc, #356]	; (80038fc <HAL_DMA_IRQHandler+0x1c4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d036      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a57      	ldr	r2, [pc, #348]	; (8003900 <HAL_DMA_IRQHandler+0x1c8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d031      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a56      	ldr	r2, [pc, #344]	; (8003904 <HAL_DMA_IRQHandler+0x1cc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d02c      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a54      	ldr	r2, [pc, #336]	; (8003908 <HAL_DMA_IRQHandler+0x1d0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d027      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a53      	ldr	r2, [pc, #332]	; (800390c <HAL_DMA_IRQHandler+0x1d4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a51      	ldr	r2, [pc, #324]	; (8003910 <HAL_DMA_IRQHandler+0x1d8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01d      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a50      	ldr	r2, [pc, #320]	; (8003914 <HAL_DMA_IRQHandler+0x1dc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a4e      	ldr	r2, [pc, #312]	; (8003918 <HAL_DMA_IRQHandler+0x1e0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a4d      	ldr	r2, [pc, #308]	; (800391c <HAL_DMA_IRQHandler+0x1e4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4b      	ldr	r2, [pc, #300]	; (8003920 <HAL_DMA_IRQHandler+0x1e8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a4a      	ldr	r2, [pc, #296]	; (8003924 <HAL_DMA_IRQHandler+0x1ec>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_DMA_IRQHandler+0xd2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a48      	ldr	r2, [pc, #288]	; (8003928 <HAL_DMA_IRQHandler+0x1f0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_DMA_IRQHandler+0xd6>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_DMA_IRQHandler+0xd8>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 842b 	beq.w	800406c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2208      	movs	r2, #8
 8003820:	409a      	lsls	r2, r3
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a2 	beq.w	8003970 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a2e      	ldr	r2, [pc, #184]	; (80038ec <HAL_DMA_IRQHandler+0x1b4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d04a      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_DMA_IRQHandler+0x1b8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d045      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2b      	ldr	r2, [pc, #172]	; (80038f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d040      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <HAL_DMA_IRQHandler+0x1c0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d03b      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a28      	ldr	r2, [pc, #160]	; (80038fc <HAL_DMA_IRQHandler+0x1c4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d036      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a27      	ldr	r2, [pc, #156]	; (8003900 <HAL_DMA_IRQHandler+0x1c8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d031      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a25      	ldr	r2, [pc, #148]	; (8003904 <HAL_DMA_IRQHandler+0x1cc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02c      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a24      	ldr	r2, [pc, #144]	; (8003908 <HAL_DMA_IRQHandler+0x1d0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d027      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a22      	ldr	r2, [pc, #136]	; (800390c <HAL_DMA_IRQHandler+0x1d4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d022      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a21      	ldr	r2, [pc, #132]	; (8003910 <HAL_DMA_IRQHandler+0x1d8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d01d      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <HAL_DMA_IRQHandler+0x1dc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d018      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <HAL_DMA_IRQHandler+0x1e0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <HAL_DMA_IRQHandler+0x1e4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00e      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <HAL_DMA_IRQHandler+0x1e8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_DMA_IRQHandler+0x1ec>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_DMA_IRQHandler+0x194>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_DMA_IRQHandler+0x1f0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d12f      	bne.n	800392c <HAL_DMA_IRQHandler+0x1f4>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf14      	ite	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	2300      	moveq	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	e02e      	b.n	8003940 <HAL_DMA_IRQHandler+0x208>
 80038e2:	bf00      	nop
 80038e4:	24000018 	.word	0x24000018
 80038e8:	1b4e81b5 	.word	0x1b4e81b5
 80038ec:	40020010 	.word	0x40020010
 80038f0:	40020028 	.word	0x40020028
 80038f4:	40020040 	.word	0x40020040
 80038f8:	40020058 	.word	0x40020058
 80038fc:	40020070 	.word	0x40020070
 8003900:	40020088 	.word	0x40020088
 8003904:	400200a0 	.word	0x400200a0
 8003908:	400200b8 	.word	0x400200b8
 800390c:	40020410 	.word	0x40020410
 8003910:	40020428 	.word	0x40020428
 8003914:	40020440 	.word	0x40020440
 8003918:	40020458 	.word	0x40020458
 800391c:	40020470 	.word	0x40020470
 8003920:	40020488 	.word	0x40020488
 8003924:	400204a0 	.word	0x400204a0
 8003928:	400204b8 	.word	0x400204b8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d015      	beq.n	8003970 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2208      	movs	r2, #8
 800395e:	409a      	lsls	r2, r3
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	fa22 f303 	lsr.w	r3, r2, r3
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d06e      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a69      	ldr	r2, [pc, #420]	; (8003b30 <HAL_DMA_IRQHandler+0x3f8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d04a      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a67      	ldr	r2, [pc, #412]	; (8003b34 <HAL_DMA_IRQHandler+0x3fc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d045      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a66      	ldr	r2, [pc, #408]	; (8003b38 <HAL_DMA_IRQHandler+0x400>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d040      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a64      	ldr	r2, [pc, #400]	; (8003b3c <HAL_DMA_IRQHandler+0x404>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d03b      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a63      	ldr	r2, [pc, #396]	; (8003b40 <HAL_DMA_IRQHandler+0x408>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d036      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a61      	ldr	r2, [pc, #388]	; (8003b44 <HAL_DMA_IRQHandler+0x40c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d031      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a60      	ldr	r2, [pc, #384]	; (8003b48 <HAL_DMA_IRQHandler+0x410>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d02c      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5e      	ldr	r2, [pc, #376]	; (8003b4c <HAL_DMA_IRQHandler+0x414>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d027      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a5d      	ldr	r2, [pc, #372]	; (8003b50 <HAL_DMA_IRQHandler+0x418>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d022      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a5b      	ldr	r2, [pc, #364]	; (8003b54 <HAL_DMA_IRQHandler+0x41c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01d      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a5a      	ldr	r2, [pc, #360]	; (8003b58 <HAL_DMA_IRQHandler+0x420>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d018      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a58      	ldr	r2, [pc, #352]	; (8003b5c <HAL_DMA_IRQHandler+0x424>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a57      	ldr	r2, [pc, #348]	; (8003b60 <HAL_DMA_IRQHandler+0x428>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a55      	ldr	r2, [pc, #340]	; (8003b64 <HAL_DMA_IRQHandler+0x42c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a54      	ldr	r2, [pc, #336]	; (8003b68 <HAL_DMA_IRQHandler+0x430>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2ee>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a52      	ldr	r2, [pc, #328]	; (8003b6c <HAL_DMA_IRQHandler+0x434>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10a      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x304>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e003      	b.n	8003a44 <HAL_DMA_IRQHandler+0x30c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2201      	movs	r2, #1
 8003a52:	409a      	lsls	r2, r3
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f043 0202 	orr.w	r2, r3, #2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 808f 	beq.w	8003b98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <HAL_DMA_IRQHandler+0x3f8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d04a      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <HAL_DMA_IRQHandler+0x3fc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d045      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a29      	ldr	r2, [pc, #164]	; (8003b38 <HAL_DMA_IRQHandler+0x400>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d040      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <HAL_DMA_IRQHandler+0x404>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d03b      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a26      	ldr	r2, [pc, #152]	; (8003b40 <HAL_DMA_IRQHandler+0x408>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d036      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a24      	ldr	r2, [pc, #144]	; (8003b44 <HAL_DMA_IRQHandler+0x40c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d031      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a23      	ldr	r2, [pc, #140]	; (8003b48 <HAL_DMA_IRQHandler+0x410>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d02c      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <HAL_DMA_IRQHandler+0x414>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d027      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a20      	ldr	r2, [pc, #128]	; (8003b50 <HAL_DMA_IRQHandler+0x418>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_DMA_IRQHandler+0x41c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01d      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_DMA_IRQHandler+0x420>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_DMA_IRQHandler+0x424>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <HAL_DMA_IRQHandler+0x428>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <HAL_DMA_IRQHandler+0x42c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <HAL_DMA_IRQHandler+0x430>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x3e2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <HAL_DMA_IRQHandler+0x434>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d12a      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x438>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e023      	b.n	8003b78 <HAL_DMA_IRQHandler+0x440>
 8003b30:	40020010 	.word	0x40020010
 8003b34:	40020028 	.word	0x40020028
 8003b38:	40020040 	.word	0x40020040
 8003b3c:	40020058 	.word	0x40020058
 8003b40:	40020070 	.word	0x40020070
 8003b44:	40020088 	.word	0x40020088
 8003b48:	400200a0 	.word	0x400200a0
 8003b4c:	400200b8 	.word	0x400200b8
 8003b50:	40020410 	.word	0x40020410
 8003b54:	40020428 	.word	0x40020428
 8003b58:	40020440 	.word	0x40020440
 8003b5c:	40020458 	.word	0x40020458
 8003b60:	40020470 	.word	0x40020470
 8003b64:	40020488 	.word	0x40020488
 8003b68:	400204a0 	.word	0x400204a0
 8003b6c:	400204b8 	.word	0x400204b8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2204      	movs	r2, #4
 8003b86:	409a      	lsls	r2, r3
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f043 0204 	orr.w	r2, r3, #4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a6 	beq.w	8003cfa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a85      	ldr	r2, [pc, #532]	; (8003dc8 <HAL_DMA_IRQHandler+0x690>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d04a      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a83      	ldr	r2, [pc, #524]	; (8003dcc <HAL_DMA_IRQHandler+0x694>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d045      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a82      	ldr	r2, [pc, #520]	; (8003dd0 <HAL_DMA_IRQHandler+0x698>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d040      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a80      	ldr	r2, [pc, #512]	; (8003dd4 <HAL_DMA_IRQHandler+0x69c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d03b      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a7f      	ldr	r2, [pc, #508]	; (8003dd8 <HAL_DMA_IRQHandler+0x6a0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d036      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a7d      	ldr	r2, [pc, #500]	; (8003ddc <HAL_DMA_IRQHandler+0x6a4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d031      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a7c      	ldr	r2, [pc, #496]	; (8003de0 <HAL_DMA_IRQHandler+0x6a8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d02c      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a7a      	ldr	r2, [pc, #488]	; (8003de4 <HAL_DMA_IRQHandler+0x6ac>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d027      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a79      	ldr	r2, [pc, #484]	; (8003de8 <HAL_DMA_IRQHandler+0x6b0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d022      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a77      	ldr	r2, [pc, #476]	; (8003dec <HAL_DMA_IRQHandler+0x6b4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01d      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a76      	ldr	r2, [pc, #472]	; (8003df0 <HAL_DMA_IRQHandler+0x6b8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d018      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a74      	ldr	r2, [pc, #464]	; (8003df4 <HAL_DMA_IRQHandler+0x6bc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a73      	ldr	r2, [pc, #460]	; (8003df8 <HAL_DMA_IRQHandler+0x6c0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a71      	ldr	r2, [pc, #452]	; (8003dfc <HAL_DMA_IRQHandler+0x6c4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a70      	ldr	r2, [pc, #448]	; (8003e00 <HAL_DMA_IRQHandler+0x6c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x516>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6e      	ldr	r2, [pc, #440]	; (8003e04 <HAL_DMA_IRQHandler+0x6cc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10a      	bne.n	8003c64 <HAL_DMA_IRQHandler+0x52c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e009      	b.n	8003c78 <HAL_DMA_IRQHandler+0x540>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d03e      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2210      	movs	r2, #16
 8003c86:	409a      	lsls	r2, r3
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d108      	bne.n	8003cba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d024      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
 8003cb8:	e01f      	b.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01b      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
 8003cca:	e016      	b.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0208 	bic.w	r2, r2, #8
 8003ce8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2220      	movs	r2, #32
 8003d04:	409a      	lsls	r2, r3
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8110 	beq.w	8003f30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <HAL_DMA_IRQHandler+0x690>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d04a      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <HAL_DMA_IRQHandler+0x694>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d045      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <HAL_DMA_IRQHandler+0x698>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d040      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a28      	ldr	r2, [pc, #160]	; (8003dd4 <HAL_DMA_IRQHandler+0x69c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d03b      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <HAL_DMA_IRQHandler+0x6a0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d036      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <HAL_DMA_IRQHandler+0x6a4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d031      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <HAL_DMA_IRQHandler+0x6a8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d02c      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <HAL_DMA_IRQHandler+0x6ac>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d027      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a20      	ldr	r2, [pc, #128]	; (8003de8 <HAL_DMA_IRQHandler+0x6b0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1f      	ldr	r2, [pc, #124]	; (8003dec <HAL_DMA_IRQHandler+0x6b4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d01d      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <HAL_DMA_IRQHandler+0x6b8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <HAL_DMA_IRQHandler+0x6bc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <HAL_DMA_IRQHandler+0x6c0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <HAL_DMA_IRQHandler+0x6c4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_DMA_IRQHandler+0x6c8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x678>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <HAL_DMA_IRQHandler+0x6cc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d12b      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x6d0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e02a      	b.n	8003e1c <HAL_DMA_IRQHandler+0x6e4>
 8003dc6:	bf00      	nop
 8003dc8:	40020010 	.word	0x40020010
 8003dcc:	40020028 	.word	0x40020028
 8003dd0:	40020040 	.word	0x40020040
 8003dd4:	40020058 	.word	0x40020058
 8003dd8:	40020070 	.word	0x40020070
 8003ddc:	40020088 	.word	0x40020088
 8003de0:	400200a0 	.word	0x400200a0
 8003de4:	400200b8 	.word	0x400200b8
 8003de8:	40020410 	.word	0x40020410
 8003dec:	40020428 	.word	0x40020428
 8003df0:	40020440 	.word	0x40020440
 8003df4:	40020458 	.word	0x40020458
 8003df8:	40020470 	.word	0x40020470
 8003dfc:	40020488 	.word	0x40020488
 8003e00:	400204a0 	.word	0x400204a0
 8003e04:	400204b8 	.word	0x400204b8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf14      	ite	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2300      	moveq	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8087 	beq.w	8003f30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d139      	bne.n	8003eb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0216 	bic.w	r2, r2, #22
 8003e4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <HAL_DMA_IRQHandler+0x736>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0208 	bic.w	r2, r2, #8
 8003e7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	223f      	movs	r2, #63	; 0x3f
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 834a 	beq.w	800453c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
          }
          return;
 8003eb0:	e344      	b.n	800453c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d108      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d02c      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e027      	b.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d023      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
 8003ef0:	e01e      	b.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10f      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0210 	bic.w	r2, r2, #16
 8003f0e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8306 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8088 	beq.w	8004058 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a7a      	ldr	r2, [pc, #488]	; (8004140 <HAL_DMA_IRQHandler+0xa08>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04a      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a79      	ldr	r2, [pc, #484]	; (8004144 <HAL_DMA_IRQHandler+0xa0c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d045      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a77      	ldr	r2, [pc, #476]	; (8004148 <HAL_DMA_IRQHandler+0xa10>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d040      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a76      	ldr	r2, [pc, #472]	; (800414c <HAL_DMA_IRQHandler+0xa14>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d03b      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a74      	ldr	r2, [pc, #464]	; (8004150 <HAL_DMA_IRQHandler+0xa18>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d036      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a73      	ldr	r2, [pc, #460]	; (8004154 <HAL_DMA_IRQHandler+0xa1c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d031      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a71      	ldr	r2, [pc, #452]	; (8004158 <HAL_DMA_IRQHandler+0xa20>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02c      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a70      	ldr	r2, [pc, #448]	; (800415c <HAL_DMA_IRQHandler+0xa24>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d027      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6e      	ldr	r2, [pc, #440]	; (8004160 <HAL_DMA_IRQHandler+0xa28>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6d      	ldr	r2, [pc, #436]	; (8004164 <HAL_DMA_IRQHandler+0xa2c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a6b      	ldr	r2, [pc, #428]	; (8004168 <HAL_DMA_IRQHandler+0xa30>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a6a      	ldr	r2, [pc, #424]	; (800416c <HAL_DMA_IRQHandler+0xa34>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a68      	ldr	r2, [pc, #416]	; (8004170 <HAL_DMA_IRQHandler+0xa38>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a67      	ldr	r2, [pc, #412]	; (8004174 <HAL_DMA_IRQHandler+0xa3c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a65      	ldr	r2, [pc, #404]	; (8004178 <HAL_DMA_IRQHandler+0xa40>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x8b8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a64      	ldr	r2, [pc, #400]	; (800417c <HAL_DMA_IRQHandler+0xa44>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d108      	bne.n	8004002 <HAL_DMA_IRQHandler+0x8ca>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e007      	b.n	8004012 <HAL_DMA_IRQHandler+0x8da>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3301      	adds	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401a:	429a      	cmp	r2, r3
 800401c:	d307      	bcc.n	800402e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f2      	bne.n	8004012 <HAL_DMA_IRQHandler+0x8da>
 800402c:	e000      	b.n	8004030 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800402e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2203      	movs	r2, #3
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800404e:	e003      	b.n	8004058 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8272 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
 800406a:	e26c      	b.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a43      	ldr	r2, [pc, #268]	; (8004180 <HAL_DMA_IRQHandler+0xa48>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d022      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a42      	ldr	r2, [pc, #264]	; (8004184 <HAL_DMA_IRQHandler+0xa4c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d01d      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a40      	ldr	r2, [pc, #256]	; (8004188 <HAL_DMA_IRQHandler+0xa50>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d018      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a3f      	ldr	r2, [pc, #252]	; (800418c <HAL_DMA_IRQHandler+0xa54>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d013      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a3d      	ldr	r2, [pc, #244]	; (8004190 <HAL_DMA_IRQHandler+0xa58>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00e      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <HAL_DMA_IRQHandler+0xa5c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d009      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3a      	ldr	r2, [pc, #232]	; (8004198 <HAL_DMA_IRQHandler+0xa60>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <HAL_DMA_IRQHandler+0x984>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a39      	ldr	r2, [pc, #228]	; (800419c <HAL_DMA_IRQHandler+0xa64>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x988>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_DMA_IRQHandler+0x98a>
 80040c0:	2300      	movs	r3, #0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 823f 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	2204      	movs	r2, #4
 80040da:	409a      	lsls	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80cd 	beq.w	8004280 <HAL_DMA_IRQHandler+0xb48>
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80c7 	beq.w	8004280 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2204      	movs	r2, #4
 80040fc:	409a      	lsls	r2, r3
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d049      	beq.n	80041a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8210 	beq.w	8004540 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004128:	e20a      	b.n	8004540 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8206 	beq.w	8004540 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413c:	e200      	b.n	8004540 <HAL_DMA_IRQHandler+0xe08>
 800413e:	bf00      	nop
 8004140:	40020010 	.word	0x40020010
 8004144:	40020028 	.word	0x40020028
 8004148:	40020040 	.word	0x40020040
 800414c:	40020058 	.word	0x40020058
 8004150:	40020070 	.word	0x40020070
 8004154:	40020088 	.word	0x40020088
 8004158:	400200a0 	.word	0x400200a0
 800415c:	400200b8 	.word	0x400200b8
 8004160:	40020410 	.word	0x40020410
 8004164:	40020428 	.word	0x40020428
 8004168:	40020440 	.word	0x40020440
 800416c:	40020458 	.word	0x40020458
 8004170:	40020470 	.word	0x40020470
 8004174:	40020488 	.word	0x40020488
 8004178:	400204a0 	.word	0x400204a0
 800417c:	400204b8 	.word	0x400204b8
 8004180:	58025408 	.word	0x58025408
 8004184:	5802541c 	.word	0x5802541c
 8004188:	58025430 	.word	0x58025430
 800418c:	58025444 	.word	0x58025444
 8004190:	58025458 	.word	0x58025458
 8004194:	5802546c 	.word	0x5802546c
 8004198:	58025480 	.word	0x58025480
 800419c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d160      	bne.n	800426c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a8c      	ldr	r2, [pc, #560]	; (80043e0 <HAL_DMA_IRQHandler+0xca8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04a      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a8a      	ldr	r2, [pc, #552]	; (80043e4 <HAL_DMA_IRQHandler+0xcac>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d045      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a89      	ldr	r2, [pc, #548]	; (80043e8 <HAL_DMA_IRQHandler+0xcb0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d040      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a87      	ldr	r2, [pc, #540]	; (80043ec <HAL_DMA_IRQHandler+0xcb4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a86      	ldr	r2, [pc, #536]	; (80043f0 <HAL_DMA_IRQHandler+0xcb8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d036      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a84      	ldr	r2, [pc, #528]	; (80043f4 <HAL_DMA_IRQHandler+0xcbc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a83      	ldr	r2, [pc, #524]	; (80043f8 <HAL_DMA_IRQHandler+0xcc0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d02c      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a81      	ldr	r2, [pc, #516]	; (80043fc <HAL_DMA_IRQHandler+0xcc4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d027      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a80      	ldr	r2, [pc, #512]	; (8004400 <HAL_DMA_IRQHandler+0xcc8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7e      	ldr	r2, [pc, #504]	; (8004404 <HAL_DMA_IRQHandler+0xccc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7d      	ldr	r2, [pc, #500]	; (8004408 <HAL_DMA_IRQHandler+0xcd0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a7b      	ldr	r2, [pc, #492]	; (800440c <HAL_DMA_IRQHandler+0xcd4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7a      	ldr	r2, [pc, #488]	; (8004410 <HAL_DMA_IRQHandler+0xcd8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a78      	ldr	r2, [pc, #480]	; (8004414 <HAL_DMA_IRQHandler+0xcdc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a77      	ldr	r2, [pc, #476]	; (8004418 <HAL_DMA_IRQHandler+0xce0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_IRQHandler+0xb12>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a75      	ldr	r2, [pc, #468]	; (800441c <HAL_DMA_IRQHandler+0xce4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d108      	bne.n	800425c <HAL_DMA_IRQHandler+0xb24>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0208 	bic.w	r2, r2, #8
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e007      	b.n	800426c <HAL_DMA_IRQHandler+0xb34>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0204 	bic.w	r2, r2, #4
 800426a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8165 	beq.w	8004540 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800427e:	e15f      	b.n	8004540 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2202      	movs	r2, #2
 800428a:	409a      	lsls	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80c5 	beq.w	8004420 <HAL_DMA_IRQHandler+0xce8>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80bf 	beq.w	8004420 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2202      	movs	r2, #2
 80042ac:	409a      	lsls	r2, r3
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 813a 	beq.w	8004544 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042d8:	e134      	b.n	8004544 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8130 	beq.w	8004544 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ec:	e12a      	b.n	8004544 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d168      	bne.n	80043ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a38      	ldr	r2, [pc, #224]	; (80043e0 <HAL_DMA_IRQHandler+0xca8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d04a      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a37      	ldr	r2, [pc, #220]	; (80043e4 <HAL_DMA_IRQHandler+0xcac>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d045      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a35      	ldr	r2, [pc, #212]	; (80043e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d040      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a34      	ldr	r2, [pc, #208]	; (80043ec <HAL_DMA_IRQHandler+0xcb4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d03b      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a32      	ldr	r2, [pc, #200]	; (80043f0 <HAL_DMA_IRQHandler+0xcb8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d036      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a31      	ldr	r2, [pc, #196]	; (80043f4 <HAL_DMA_IRQHandler+0xcbc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d031      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2f      	ldr	r2, [pc, #188]	; (80043f8 <HAL_DMA_IRQHandler+0xcc0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d02c      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2e      	ldr	r2, [pc, #184]	; (80043fc <HAL_DMA_IRQHandler+0xcc4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d027      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2c      	ldr	r2, [pc, #176]	; (8004400 <HAL_DMA_IRQHandler+0xcc8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d022      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <HAL_DMA_IRQHandler+0xccc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01d      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a29      	ldr	r2, [pc, #164]	; (8004408 <HAL_DMA_IRQHandler+0xcd0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d018      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a28      	ldr	r2, [pc, #160]	; (800440c <HAL_DMA_IRQHandler+0xcd4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a26      	ldr	r2, [pc, #152]	; (8004410 <HAL_DMA_IRQHandler+0xcd8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a25      	ldr	r2, [pc, #148]	; (8004414 <HAL_DMA_IRQHandler+0xcdc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a23      	ldr	r2, [pc, #140]	; (8004418 <HAL_DMA_IRQHandler+0xce0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_DMA_IRQHandler+0xc60>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a22      	ldr	r2, [pc, #136]	; (800441c <HAL_DMA_IRQHandler+0xce4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d108      	bne.n	80043aa <HAL_DMA_IRQHandler+0xc72>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0214 	bic.w	r2, r2, #20
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e007      	b.n	80043ba <HAL_DMA_IRQHandler+0xc82>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 020a 	bic.w	r2, r2, #10
 80043b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80b8 	beq.w	8004544 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043dc:	e0b2      	b.n	8004544 <HAL_DMA_IRQHandler+0xe0c>
 80043de:	bf00      	nop
 80043e0:	40020010 	.word	0x40020010
 80043e4:	40020028 	.word	0x40020028
 80043e8:	40020040 	.word	0x40020040
 80043ec:	40020058 	.word	0x40020058
 80043f0:	40020070 	.word	0x40020070
 80043f4:	40020088 	.word	0x40020088
 80043f8:	400200a0 	.word	0x400200a0
 80043fc:	400200b8 	.word	0x400200b8
 8004400:	40020410 	.word	0x40020410
 8004404:	40020428 	.word	0x40020428
 8004408:	40020440 	.word	0x40020440
 800440c:	40020458 	.word	0x40020458
 8004410:	40020470 	.word	0x40020470
 8004414:	40020488 	.word	0x40020488
 8004418:	400204a0 	.word	0x400204a0
 800441c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2208      	movs	r2, #8
 800442a:	409a      	lsls	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8088 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8082 	beq.w	8004546 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a41      	ldr	r2, [pc, #260]	; (800454c <HAL_DMA_IRQHandler+0xe14>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d04a      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a3f      	ldr	r2, [pc, #252]	; (8004550 <HAL_DMA_IRQHandler+0xe18>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d045      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <HAL_DMA_IRQHandler+0xe1c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d040      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <HAL_DMA_IRQHandler+0xe20>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d03b      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3b      	ldr	r2, [pc, #236]	; (800455c <HAL_DMA_IRQHandler+0xe24>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d036      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a39      	ldr	r2, [pc, #228]	; (8004560 <HAL_DMA_IRQHandler+0xe28>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d031      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a38      	ldr	r2, [pc, #224]	; (8004564 <HAL_DMA_IRQHandler+0xe2c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d02c      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a36      	ldr	r2, [pc, #216]	; (8004568 <HAL_DMA_IRQHandler+0xe30>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d027      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a35      	ldr	r2, [pc, #212]	; (800456c <HAL_DMA_IRQHandler+0xe34>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d022      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a33      	ldr	r2, [pc, #204]	; (8004570 <HAL_DMA_IRQHandler+0xe38>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01d      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a32      	ldr	r2, [pc, #200]	; (8004574 <HAL_DMA_IRQHandler+0xe3c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d018      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a30      	ldr	r2, [pc, #192]	; (8004578 <HAL_DMA_IRQHandler+0xe40>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2f      	ldr	r2, [pc, #188]	; (800457c <HAL_DMA_IRQHandler+0xe44>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <HAL_DMA_IRQHandler+0xe48>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <HAL_DMA_IRQHandler+0xe4c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xdaa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <HAL_DMA_IRQHandler+0xe50>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <HAL_DMA_IRQHandler+0xdbc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 021c 	bic.w	r2, r2, #28
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e007      	b.n	8004504 <HAL_DMA_IRQHandler+0xdcc>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 020e 	bic.w	r2, r2, #14
 8004502:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2201      	movs	r2, #1
 800450e:	409a      	lsls	r2, r3
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	4798      	blx	r3
 800453a:	e004      	b.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800453c:	bf00      	nop
 800453e:	e002      	b.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004544:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004546:	3728      	adds	r7, #40	; 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40020010 	.word	0x40020010
 8004550:	40020028 	.word	0x40020028
 8004554:	40020040 	.word	0x40020040
 8004558:	40020058 	.word	0x40020058
 800455c:	40020070 	.word	0x40020070
 8004560:	40020088 	.word	0x40020088
 8004564:	400200a0 	.word	0x400200a0
 8004568:	400200b8 	.word	0x400200b8
 800456c:	40020410 	.word	0x40020410
 8004570:	40020428 	.word	0x40020428
 8004574:	40020440 	.word	0x40020440
 8004578:	40020458 	.word	0x40020458
 800457c:	40020470 	.word	0x40020470
 8004580:	40020488 	.word	0x40020488
 8004584:	400204a0 	.word	0x400204a0
 8004588:	400204b8 	.word	0x400204b8

0800458c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a84      	ldr	r2, [pc, #528]	; (80047bc <DMA_SetConfig+0x230>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d072      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a82      	ldr	r2, [pc, #520]	; (80047c0 <DMA_SetConfig+0x234>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d06d      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a81      	ldr	r2, [pc, #516]	; (80047c4 <DMA_SetConfig+0x238>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d068      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a7f      	ldr	r2, [pc, #508]	; (80047c8 <DMA_SetConfig+0x23c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d063      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7e      	ldr	r2, [pc, #504]	; (80047cc <DMA_SetConfig+0x240>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d05e      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a7c      	ldr	r2, [pc, #496]	; (80047d0 <DMA_SetConfig+0x244>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d059      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7b      	ldr	r2, [pc, #492]	; (80047d4 <DMA_SetConfig+0x248>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d054      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a79      	ldr	r2, [pc, #484]	; (80047d8 <DMA_SetConfig+0x24c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d04f      	beq.n	8004696 <DMA_SetConfig+0x10a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a78      	ldr	r2, [pc, #480]	; (80047dc <DMA_SetConfig+0x250>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d04a      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a76      	ldr	r2, [pc, #472]	; (80047e0 <DMA_SetConfig+0x254>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d045      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a75      	ldr	r2, [pc, #468]	; (80047e4 <DMA_SetConfig+0x258>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d040      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a73      	ldr	r2, [pc, #460]	; (80047e8 <DMA_SetConfig+0x25c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d03b      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a72      	ldr	r2, [pc, #456]	; (80047ec <DMA_SetConfig+0x260>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d036      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a70      	ldr	r2, [pc, #448]	; (80047f0 <DMA_SetConfig+0x264>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d031      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a6f      	ldr	r2, [pc, #444]	; (80047f4 <DMA_SetConfig+0x268>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d02c      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6d      	ldr	r2, [pc, #436]	; (80047f8 <DMA_SetConfig+0x26c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d027      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a6c      	ldr	r2, [pc, #432]	; (80047fc <DMA_SetConfig+0x270>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d022      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a6a      	ldr	r2, [pc, #424]	; (8004800 <DMA_SetConfig+0x274>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01d      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a69      	ldr	r2, [pc, #420]	; (8004804 <DMA_SetConfig+0x278>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d018      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a67      	ldr	r2, [pc, #412]	; (8004808 <DMA_SetConfig+0x27c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d013      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a66      	ldr	r2, [pc, #408]	; (800480c <DMA_SetConfig+0x280>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00e      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a64      	ldr	r2, [pc, #400]	; (8004810 <DMA_SetConfig+0x284>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <DMA_SetConfig+0x10a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a63      	ldr	r2, [pc, #396]	; (8004814 <DMA_SetConfig+0x288>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <DMA_SetConfig+0x10a>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a61      	ldr	r2, [pc, #388]	; (8004818 <DMA_SetConfig+0x28c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <DMA_SetConfig+0x10e>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <DMA_SetConfig+0x110>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d004      	beq.n	80046bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a3e      	ldr	r2, [pc, #248]	; (80047bc <DMA_SetConfig+0x230>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d04a      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3d      	ldr	r2, [pc, #244]	; (80047c0 <DMA_SetConfig+0x234>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d045      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a3b      	ldr	r2, [pc, #236]	; (80047c4 <DMA_SetConfig+0x238>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d040      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3a      	ldr	r2, [pc, #232]	; (80047c8 <DMA_SetConfig+0x23c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d03b      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a38      	ldr	r2, [pc, #224]	; (80047cc <DMA_SetConfig+0x240>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d036      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <DMA_SetConfig+0x244>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d031      	beq.n	800475c <DMA_SetConfig+0x1d0>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a35      	ldr	r2, [pc, #212]	; (80047d4 <DMA_SetConfig+0x248>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02c      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a34      	ldr	r2, [pc, #208]	; (80047d8 <DMA_SetConfig+0x24c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d027      	beq.n	800475c <DMA_SetConfig+0x1d0>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a32      	ldr	r2, [pc, #200]	; (80047dc <DMA_SetConfig+0x250>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d022      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a31      	ldr	r2, [pc, #196]	; (80047e0 <DMA_SetConfig+0x254>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d01d      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a2f      	ldr	r2, [pc, #188]	; (80047e4 <DMA_SetConfig+0x258>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <DMA_SetConfig+0x1d0>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2e      	ldr	r2, [pc, #184]	; (80047e8 <DMA_SetConfig+0x25c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2c      	ldr	r2, [pc, #176]	; (80047ec <DMA_SetConfig+0x260>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <DMA_SetConfig+0x1d0>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2b      	ldr	r2, [pc, #172]	; (80047f0 <DMA_SetConfig+0x264>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <DMA_SetConfig+0x268>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <DMA_SetConfig+0x1d0>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a28      	ldr	r2, [pc, #160]	; (80047f8 <DMA_SetConfig+0x26c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <DMA_SetConfig+0x1d4>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <DMA_SetConfig+0x1d6>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d05a      	beq.n	800481c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	223f      	movs	r2, #63	; 0x3f
 8004770:	409a      	lsls	r2, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004784:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d108      	bne.n	80047a8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047a6:	e087      	b.n	80048b8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	60da      	str	r2, [r3, #12]
}
 80047b8:	e07e      	b.n	80048b8 <DMA_SetConfig+0x32c>
 80047ba:	bf00      	nop
 80047bc:	40020010 	.word	0x40020010
 80047c0:	40020028 	.word	0x40020028
 80047c4:	40020040 	.word	0x40020040
 80047c8:	40020058 	.word	0x40020058
 80047cc:	40020070 	.word	0x40020070
 80047d0:	40020088 	.word	0x40020088
 80047d4:	400200a0 	.word	0x400200a0
 80047d8:	400200b8 	.word	0x400200b8
 80047dc:	40020410 	.word	0x40020410
 80047e0:	40020428 	.word	0x40020428
 80047e4:	40020440 	.word	0x40020440
 80047e8:	40020458 	.word	0x40020458
 80047ec:	40020470 	.word	0x40020470
 80047f0:	40020488 	.word	0x40020488
 80047f4:	400204a0 	.word	0x400204a0
 80047f8:	400204b8 	.word	0x400204b8
 80047fc:	58025408 	.word	0x58025408
 8004800:	5802541c 	.word	0x5802541c
 8004804:	58025430 	.word	0x58025430
 8004808:	58025444 	.word	0x58025444
 800480c:	58025458 	.word	0x58025458
 8004810:	5802546c 	.word	0x5802546c
 8004814:	58025480 	.word	0x58025480
 8004818:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a28      	ldr	r2, [pc, #160]	; (80048c4 <DMA_SetConfig+0x338>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d022      	beq.n	800486c <DMA_SetConfig+0x2e0>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <DMA_SetConfig+0x33c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d01d      	beq.n	800486c <DMA_SetConfig+0x2e0>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a25      	ldr	r2, [pc, #148]	; (80048cc <DMA_SetConfig+0x340>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d018      	beq.n	800486c <DMA_SetConfig+0x2e0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a24      	ldr	r2, [pc, #144]	; (80048d0 <DMA_SetConfig+0x344>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <DMA_SetConfig+0x2e0>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <DMA_SetConfig+0x348>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00e      	beq.n	800486c <DMA_SetConfig+0x2e0>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a21      	ldr	r2, [pc, #132]	; (80048d8 <DMA_SetConfig+0x34c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d009      	beq.n	800486c <DMA_SetConfig+0x2e0>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <DMA_SetConfig+0x350>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <DMA_SetConfig+0x2e0>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <DMA_SetConfig+0x354>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d101      	bne.n	8004870 <DMA_SetConfig+0x2e4>
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <DMA_SetConfig+0x2e6>
 8004870:	2300      	movs	r3, #0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d020      	beq.n	80048b8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	2201      	movs	r2, #1
 8004880:	409a      	lsls	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d108      	bne.n	80048a8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	60da      	str	r2, [r3, #12]
}
 80048a6:	e007      	b.n	80048b8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	58025408 	.word	0x58025408
 80048c8:	5802541c 	.word	0x5802541c
 80048cc:	58025430 	.word	0x58025430
 80048d0:	58025444 	.word	0x58025444
 80048d4:	58025458 	.word	0x58025458
 80048d8:	5802546c 	.word	0x5802546c
 80048dc:	58025480 	.word	0x58025480
 80048e0:	58025494 	.word	0x58025494

080048e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a42      	ldr	r2, [pc, #264]	; (80049fc <DMA_CalcBaseAndBitshift+0x118>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d04a      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a41      	ldr	r2, [pc, #260]	; (8004a00 <DMA_CalcBaseAndBitshift+0x11c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d045      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a3f      	ldr	r2, [pc, #252]	; (8004a04 <DMA_CalcBaseAndBitshift+0x120>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d040      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3e      	ldr	r2, [pc, #248]	; (8004a08 <DMA_CalcBaseAndBitshift+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d03b      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a3c      	ldr	r2, [pc, #240]	; (8004a0c <DMA_CalcBaseAndBitshift+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d036      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <DMA_CalcBaseAndBitshift+0x12c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d031      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a39      	ldr	r2, [pc, #228]	; (8004a14 <DMA_CalcBaseAndBitshift+0x130>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d02c      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a38      	ldr	r2, [pc, #224]	; (8004a18 <DMA_CalcBaseAndBitshift+0x134>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d027      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a36      	ldr	r2, [pc, #216]	; (8004a1c <DMA_CalcBaseAndBitshift+0x138>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d022      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a35      	ldr	r2, [pc, #212]	; (8004a20 <DMA_CalcBaseAndBitshift+0x13c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d01d      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a33      	ldr	r2, [pc, #204]	; (8004a24 <DMA_CalcBaseAndBitshift+0x140>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d018      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a32      	ldr	r2, [pc, #200]	; (8004a28 <DMA_CalcBaseAndBitshift+0x144>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d013      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a30      	ldr	r2, [pc, #192]	; (8004a2c <DMA_CalcBaseAndBitshift+0x148>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00e      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2f      	ldr	r2, [pc, #188]	; (8004a30 <DMA_CalcBaseAndBitshift+0x14c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d009      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2d      	ldr	r2, [pc, #180]	; (8004a34 <DMA_CalcBaseAndBitshift+0x150>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <DMA_CalcBaseAndBitshift+0xa8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a2c      	ldr	r2, [pc, #176]	; (8004a38 <DMA_CalcBaseAndBitshift+0x154>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d101      	bne.n	8004990 <DMA_CalcBaseAndBitshift+0xac>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <DMA_CalcBaseAndBitshift+0xae>
 8004990:	2300      	movs	r3, #0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d024      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	3b10      	subs	r3, #16
 800499e:	4a27      	ldr	r2, [pc, #156]	; (8004a3c <DMA_CalcBaseAndBitshift+0x158>)
 80049a0:	fba2 2303 	umull	r2, r3, r2, r3
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <DMA_CalcBaseAndBitshift+0x15c>)
 80049b0:	5cd3      	ldrb	r3, [r2, r3]
 80049b2:	461a      	mov	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d908      	bls.n	80049d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <DMA_CalcBaseAndBitshift+0x160>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	1d1a      	adds	r2, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	659a      	str	r2, [r3, #88]	; 0x58
 80049ce:	e00d      	b.n	80049ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <DMA_CalcBaseAndBitshift+0x160>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6593      	str	r3, [r2, #88]	; 0x58
 80049de:	e005      	b.n	80049ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40020010 	.word	0x40020010
 8004a00:	40020028 	.word	0x40020028
 8004a04:	40020040 	.word	0x40020040
 8004a08:	40020058 	.word	0x40020058
 8004a0c:	40020070 	.word	0x40020070
 8004a10:	40020088 	.word	0x40020088
 8004a14:	400200a0 	.word	0x400200a0
 8004a18:	400200b8 	.word	0x400200b8
 8004a1c:	40020410 	.word	0x40020410
 8004a20:	40020428 	.word	0x40020428
 8004a24:	40020440 	.word	0x40020440
 8004a28:	40020458 	.word	0x40020458
 8004a2c:	40020470 	.word	0x40020470
 8004a30:	40020488 	.word	0x40020488
 8004a34:	400204a0 	.word	0x400204a0
 8004a38:	400204b8 	.word	0x400204b8
 8004a3c:	aaaaaaab 	.word	0xaaaaaaab
 8004a40:	08009978 	.word	0x08009978
 8004a44:	fffffc00 	.word	0xfffffc00

08004a48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d120      	bne.n	8004a9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d858      	bhi.n	8004b16 <DMA_CheckFifoParam+0xce>
 8004a64:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <DMA_CheckFifoParam+0x24>)
 8004a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6a:	bf00      	nop
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a8f 	.word	0x08004a8f
 8004a74:	08004a7d 	.word	0x08004a7d
 8004a78:	08004b17 	.word	0x08004b17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d048      	beq.n	8004b1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a8c:	e045      	b.n	8004b1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a96:	d142      	bne.n	8004b1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a9c:	e03f      	b.n	8004b1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	d123      	bne.n	8004af0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d838      	bhi.n	8004b22 <DMA_CheckFifoParam+0xda>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <DMA_CheckFifoParam+0x70>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	08004acf 	.word	0x08004acf
 8004ac0:	08004ac9 	.word	0x08004ac9
 8004ac4:	08004ae1 	.word	0x08004ae1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
        break;
 8004acc:	e030      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d025      	beq.n	8004b26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ade:	e022      	b.n	8004b26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ae8:	d11f      	bne.n	8004b2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004aee:	e01c      	b.n	8004b2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d902      	bls.n	8004afe <DMA_CheckFifoParam+0xb6>
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d003      	beq.n	8004b04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004afc:	e018      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
        break;
 8004b02:	e015      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
    break;
 8004b14:	e00b      	b.n	8004b2e <DMA_CheckFifoParam+0xe6>
        break;
 8004b16:	bf00      	nop
 8004b18:	e00a      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b1a:	bf00      	nop
 8004b1c:	e008      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b1e:	bf00      	nop
 8004b20:	e006      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b22:	bf00      	nop
 8004b24:	e004      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <DMA_CheckFifoParam+0xe8>
    break;
 8004b2e:	bf00      	nop
    }
  }

  return status;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop

08004b40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a38      	ldr	r2, [pc, #224]	; (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d022      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a36      	ldr	r2, [pc, #216]	; (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01d      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a35      	ldr	r2, [pc, #212]	; (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d018      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a33      	ldr	r2, [pc, #204]	; (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a32      	ldr	r2, [pc, #200]	; (8004c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00e      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a30      	ldr	r2, [pc, #192]	; (8004c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d009      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2f      	ldr	r2, [pc, #188]	; (8004c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2d      	ldr	r2, [pc, #180]	; (8004c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d101      	bne.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01a      	beq.n	8004bde <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3b08      	subs	r3, #8
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4b26      	ldr	r3, [pc, #152]	; (8004c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a24      	ldr	r2, [pc, #144]	; (8004c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004bcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004bdc:	e024      	b.n	8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3b10      	subs	r3, #16
 8004be6:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d806      	bhi.n	8004c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d902      	bls.n	8004c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3308      	adds	r3, #8
 8004c04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2201      	movs	r2, #1
 8004c22:	409a      	lsls	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	58025408 	.word	0x58025408
 8004c38:	5802541c 	.word	0x5802541c
 8004c3c:	58025430 	.word	0x58025430
 8004c40:	58025444 	.word	0x58025444
 8004c44:	58025458 	.word	0x58025458
 8004c48:	5802546c 	.word	0x5802546c
 8004c4c:	58025480 	.word	0x58025480
 8004c50:	58025494 	.word	0x58025494
 8004c54:	cccccccd 	.word	0xcccccccd
 8004c58:	16009600 	.word	0x16009600
 8004c5c:	58025880 	.word	0x58025880
 8004c60:	aaaaaaab 	.word	0xaaaaaaab
 8004c64:	400204b8 	.word	0x400204b8
 8004c68:	4002040f 	.word	0x4002040f
 8004c6c:	10008200 	.word	0x10008200
 8004c70:	40020880 	.word	0x40020880

08004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d04a      	beq.n	8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d847      	bhi.n	8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a25      	ldr	r2, [pc, #148]	; (8004d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d022      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a24      	ldr	r2, [pc, #144]	; (8004d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d01d      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d018      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1f      	ldr	r2, [pc, #124]	; (8004d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00e      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004cfc:	671a      	str	r2, [r3, #112]	; 0x70
 8004cfe:	e009      	b.n	8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	2201      	movs	r2, #1
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	58025408 	.word	0x58025408
 8004d30:	5802541c 	.word	0x5802541c
 8004d34:	58025430 	.word	0x58025430
 8004d38:	58025444 	.word	0x58025444
 8004d3c:	58025458 	.word	0x58025458
 8004d40:	5802546c 	.word	0x5802546c
 8004d44:	58025480 	.word	0x58025480
 8004d48:	58025494 	.word	0x58025494
 8004d4c:	1600963f 	.word	0x1600963f
 8004d50:	58025940 	.word	0x58025940
 8004d54:	1000823f 	.word	0x1000823f
 8004d58:	40020940 	.word	0x40020940

08004d5c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	460b      	mov	r3, r1
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e00a      	b.n	8004d8e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004d78:	7afb      	ldrb	r3, [r7, #11]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	605a      	str	r2, [r3, #4]
      break;
 8004d84:	e002      	b.n	8004d8c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8a:	bf00      	nop
  }

  return status;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e003      	b.n	8004db6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
  }
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	; 0x24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dd2:	4b89      	ldr	r3, [pc, #548]	; (8004ff8 <HAL_GPIO_Init+0x234>)
 8004dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dd6:	e194      	b.n	8005102 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2101      	movs	r1, #1
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	fa01 f303 	lsl.w	r3, r1, r3
 8004de4:	4013      	ands	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8186 	beq.w	80050fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d00b      	beq.n	8004e10 <HAL_GPIO_Init+0x4c>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d007      	beq.n	8004e10 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e04:	2b11      	cmp	r3, #17
 8004e06:	d003      	beq.n	8004e10 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b12      	cmp	r3, #18
 8004e0e:	d130      	bne.n	8004e72 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e46:	2201      	movs	r2, #1
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4013      	ands	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	f003 0201 	and.w	r2, r3, #1
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_Init+0xee>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b12      	cmp	r3, #18
 8004eb0:	d123      	bne.n	8004efa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	08da      	lsrs	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3208      	adds	r2, #8
 8004eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	220f      	movs	r2, #15
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	08da      	lsrs	r2, r3, #3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3208      	adds	r2, #8
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	2203      	movs	r2, #3
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 0203 	and.w	r2, r3, #3
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80e0 	beq.w	80050fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <HAL_GPIO_Init+0x238>)
 8004f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f42:	4a2e      	ldr	r2, [pc, #184]	; (8004ffc <HAL_GPIO_Init+0x238>)
 8004f44:	f043 0302 	orr.w	r3, r3, #2
 8004f48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f4c:	4b2b      	ldr	r3, [pc, #172]	; (8004ffc <HAL_GPIO_Init+0x238>)
 8004f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f5a:	4a29      	ldr	r2, [pc, #164]	; (8005000 <HAL_GPIO_Init+0x23c>)
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	3302      	adds	r3, #2
 8004f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	220f      	movs	r2, #15
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43db      	mvns	r3, r3
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a20      	ldr	r2, [pc, #128]	; (8005004 <HAL_GPIO_Init+0x240>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d052      	beq.n	800502c <HAL_GPIO_Init+0x268>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1f      	ldr	r2, [pc, #124]	; (8005008 <HAL_GPIO_Init+0x244>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d031      	beq.n	8004ff2 <HAL_GPIO_Init+0x22e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1e      	ldr	r2, [pc, #120]	; (800500c <HAL_GPIO_Init+0x248>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02b      	beq.n	8004fee <HAL_GPIO_Init+0x22a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1d      	ldr	r2, [pc, #116]	; (8005010 <HAL_GPIO_Init+0x24c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d025      	beq.n	8004fea <HAL_GPIO_Init+0x226>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <HAL_GPIO_Init+0x250>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01f      	beq.n	8004fe6 <HAL_GPIO_Init+0x222>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <HAL_GPIO_Init+0x254>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d019      	beq.n	8004fe2 <HAL_GPIO_Init+0x21e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1a      	ldr	r2, [pc, #104]	; (800501c <HAL_GPIO_Init+0x258>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_GPIO_Init+0x21a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <HAL_GPIO_Init+0x25c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00d      	beq.n	8004fda <HAL_GPIO_Init+0x216>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	; (8005024 <HAL_GPIO_Init+0x260>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <HAL_GPIO_Init+0x212>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a17      	ldr	r2, [pc, #92]	; (8005028 <HAL_GPIO_Init+0x264>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_GPIO_Init+0x20e>
 8004fce:	2309      	movs	r3, #9
 8004fd0:	e02d      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004fd2:	230a      	movs	r3, #10
 8004fd4:	e02b      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	e029      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004fda:	2307      	movs	r3, #7
 8004fdc:	e027      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004fde:	2306      	movs	r3, #6
 8004fe0:	e025      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004fe2:	2305      	movs	r3, #5
 8004fe4:	e023      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	e021      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004fea:	2303      	movs	r3, #3
 8004fec:	e01f      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e01d      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e01b      	b.n	800502e <HAL_GPIO_Init+0x26a>
 8004ff6:	bf00      	nop
 8004ff8:	58000080 	.word	0x58000080
 8004ffc:	58024400 	.word	0x58024400
 8005000:	58000400 	.word	0x58000400
 8005004:	58020000 	.word	0x58020000
 8005008:	58020400 	.word	0x58020400
 800500c:	58020800 	.word	0x58020800
 8005010:	58020c00 	.word	0x58020c00
 8005014:	58021000 	.word	0x58021000
 8005018:	58021400 	.word	0x58021400
 800501c:	58021800 	.word	0x58021800
 8005020:	58021c00 	.word	0x58021c00
 8005024:	58022000 	.word	0x58022000
 8005028:	58022400 	.word	0x58022400
 800502c:	2300      	movs	r3, #0
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	f002 0203 	and.w	r2, r2, #3
 8005034:	0092      	lsls	r2, r2, #2
 8005036:	4093      	lsls	r3, r2
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800503e:	4938      	ldr	r1, [pc, #224]	; (8005120 <HAL_GPIO_Init+0x35c>)
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	3302      	adds	r3, #2
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80050c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f ae63 	bne.w	8004dd8 <HAL_GPIO_Init+0x14>
  }
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	3724      	adds	r7, #36	; 0x24
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	58000400 	.word	0x58000400

08005124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	807b      	strh	r3, [r7, #2]
 8005130:	4613      	mov	r3, r2
 8005132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005134:	787b      	ldrb	r3, [r7, #1]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800513a:	887a      	ldrh	r2, [r7, #2]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005140:	e003      	b.n	800514a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	041a      	lsls	r2, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	619a      	str	r2, [r3, #24]
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005168:	887a      	ldrh	r2, [r7, #2]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4013      	ands	r3, r2
 800516e:	041a      	lsls	r2, r3, #16
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	43d9      	mvns	r1, r3
 8005174:	887b      	ldrh	r3, [r7, #2]
 8005176:	400b      	ands	r3, r1
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	619a      	str	r2, [r3, #24]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	4603      	mov	r3, r0
 8005192:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005198:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a8:	88fb      	ldrh	r3, [r7, #6]
 80051aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fb fe75 	bl	8000ea0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d00a      	beq.n	80051ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80051d4:	4b16      	ldr	r3, [pc, #88]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d001      	beq.n	80051e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e01f      	b.n	8005226 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e01d      	b.n	8005226 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f023 0207 	bic.w	r2, r3, #7
 80051f2:	490f      	ldr	r1, [pc, #60]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051fa:	f7fc fcb7 	bl	8001b6c <HAL_GetTick>
 80051fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005200:	e009      	b.n	8005216 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005202:	f7fc fcb3 	bl	8001b6c <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005210:	d901      	bls.n	8005216 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e007      	b.n	8005226 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	d1ee      	bne.n	8005202 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	58024800 	.word	0x58024800

08005234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08c      	sub	sp, #48	; 0x30
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e3ff      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8087 	beq.w	8005362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005254:	4b99      	ldr	r3, [pc, #612]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800525e:	4b97      	ldr	r3, [pc, #604]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	2b10      	cmp	r3, #16
 8005268:	d007      	beq.n	800527a <HAL_RCC_OscConfig+0x46>
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	2b18      	cmp	r3, #24
 800526e:	d110      	bne.n	8005292 <HAL_RCC_OscConfig+0x5e>
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d10b      	bne.n	8005292 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527a:	4b90      	ldr	r3, [pc, #576]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d06c      	beq.n	8005360 <HAL_RCC_OscConfig+0x12c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d168      	bne.n	8005360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e3d9      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x76>
 800529c:	4b87      	ldr	r3, [pc, #540]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a86      	ldr	r2, [pc, #536]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	e02e      	b.n	8005308 <HAL_RCC_OscConfig+0xd4>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x98>
 80052b2:	4b82      	ldr	r3, [pc, #520]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a81      	ldr	r2, [pc, #516]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	4b7f      	ldr	r3, [pc, #508]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a7e      	ldr	r2, [pc, #504]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e01d      	b.n	8005308 <HAL_RCC_OscConfig+0xd4>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCC_OscConfig+0xbc>
 80052d6:	4b79      	ldr	r3, [pc, #484]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a78      	ldr	r2, [pc, #480]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	4b76      	ldr	r3, [pc, #472]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a75      	ldr	r2, [pc, #468]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e00b      	b.n	8005308 <HAL_RCC_OscConfig+0xd4>
 80052f0:	4b72      	ldr	r3, [pc, #456]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a71      	ldr	r2, [pc, #452]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4b6f      	ldr	r3, [pc, #444]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a6e      	ldr	r2, [pc, #440]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d013      	beq.n	8005338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fc fc2c 	bl	8001b6c <HAL_GetTick>
 8005314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005318:	f7fc fc28 	bl	8001b6c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	; 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e38d      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800532a:	4b64      	ldr	r3, [pc, #400]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f0      	beq.n	8005318 <HAL_RCC_OscConfig+0xe4>
 8005336:	e014      	b.n	8005362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fc fc18 	bl	8001b6c <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005340:	f7fc fc14 	bl	8001b6c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b64      	cmp	r3, #100	; 0x64
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e379      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005352:	4b5a      	ldr	r3, [pc, #360]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x10c>
 800535e:	e000      	b.n	8005362 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80ae 	beq.w	80054cc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005370:	4b52      	ldr	r3, [pc, #328]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005378:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800537a:	4b50      	ldr	r3, [pc, #320]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <HAL_RCC_OscConfig+0x162>
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	2b18      	cmp	r3, #24
 800538a:	d13a      	bne.n	8005402 <HAL_RCC_OscConfig+0x1ce>
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d135      	bne.n	8005402 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005396:	4b49      	ldr	r3, [pc, #292]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_RCC_OscConfig+0x17a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e34b      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ae:	f7fc fc1d 	bl	8001bec <HAL_GetREVID>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d817      	bhi.n	80053ec <HAL_RCC_OscConfig+0x1b8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d108      	bne.n	80053d6 <HAL_RCC_OscConfig+0x1a2>
 80053c4:	4b3d      	ldr	r3, [pc, #244]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053cc:	4a3b      	ldr	r2, [pc, #236]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80053ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d4:	e07a      	b.n	80054cc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d6:	4b39      	ldr	r3, [pc, #228]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	031b      	lsls	r3, r3, #12
 80053e4:	4935      	ldr	r1, [pc, #212]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ea:	e06f      	b.n	80054cc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ec:	4b33      	ldr	r3, [pc, #204]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	061b      	lsls	r3, r3, #24
 80053fa:	4930      	ldr	r1, [pc, #192]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005400:	e064      	b.n	80054cc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d045      	beq.n	8005496 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800540a:	4b2c      	ldr	r3, [pc, #176]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f023 0219 	bic.w	r2, r3, #25
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4929      	ldr	r1, [pc, #164]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fc fba6 	bl	8001b6c <HAL_GetTick>
 8005420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005424:	f7fc fba2 	bl	8001b6c <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e307      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005436:	4b21      	ldr	r3, [pc, #132]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	f7fc fbd3 	bl	8001bec <HAL_GetREVID>
 8005446:	4603      	mov	r3, r0
 8005448:	f241 0203 	movw	r2, #4099	; 0x1003
 800544c:	4293      	cmp	r3, r2
 800544e:	d817      	bhi.n	8005480 <HAL_RCC_OscConfig+0x24c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d108      	bne.n	800546a <HAL_RCC_OscConfig+0x236>
 8005458:	4b18      	ldr	r3, [pc, #96]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005460:	4a16      	ldr	r2, [pc, #88]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005466:	6053      	str	r3, [r2, #4]
 8005468:	e030      	b.n	80054cc <HAL_RCC_OscConfig+0x298>
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	031b      	lsls	r3, r3, #12
 8005478:	4910      	ldr	r1, [pc, #64]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 800547a:	4313      	orrs	r3, r2
 800547c:	604b      	str	r3, [r1, #4]
 800547e:	e025      	b.n	80054cc <HAL_RCC_OscConfig+0x298>
 8005480:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	490b      	ldr	r1, [pc, #44]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
 8005494:	e01a      	b.n	80054cc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a08      	ldr	r2, [pc, #32]	; (80054bc <HAL_RCC_OscConfig+0x288>)
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a2:	f7fc fb63 	bl	8001b6c <HAL_GetTick>
 80054a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054a8:	e00a      	b.n	80054c0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054aa:	f7fc fb5f 	bl	8001b6c <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d903      	bls.n	80054c0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e2c4      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
 80054bc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054c0:	4ba4      	ldr	r3, [pc, #656]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1ee      	bne.n	80054aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80a9 	beq.w	800562c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054da:	4b9e      	ldr	r3, [pc, #632]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054e4:	4b9b      	ldr	r3, [pc, #620]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d007      	beq.n	8005500 <HAL_RCC_OscConfig+0x2cc>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b18      	cmp	r3, #24
 80054f4:	d13a      	bne.n	800556c <HAL_RCC_OscConfig+0x338>
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d135      	bne.n	800556c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005500:	4b94      	ldr	r3, [pc, #592]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_OscConfig+0x2e4>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	2b80      	cmp	r3, #128	; 0x80
 8005512:	d001      	beq.n	8005518 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e296      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005518:	f7fc fb68 	bl	8001bec <HAL_GetREVID>
 800551c:	4603      	mov	r3, r0
 800551e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005522:	4293      	cmp	r3, r2
 8005524:	d817      	bhi.n	8005556 <HAL_RCC_OscConfig+0x322>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	2b20      	cmp	r3, #32
 800552c:	d108      	bne.n	8005540 <HAL_RCC_OscConfig+0x30c>
 800552e:	4b89      	ldr	r3, [pc, #548]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005536:	4a87      	ldr	r2, [pc, #540]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800553c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800553e:	e075      	b.n	800562c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005540:	4b84      	ldr	r3, [pc, #528]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	069b      	lsls	r3, r3, #26
 800554e:	4981      	ldr	r1, [pc, #516]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005554:	e06a      	b.n	800562c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005556:	4b7f      	ldr	r3, [pc, #508]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	061b      	lsls	r3, r3, #24
 8005564:	497b      	ldr	r1, [pc, #492]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005566:	4313      	orrs	r3, r2
 8005568:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800556a:	e05f      	b.n	800562c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d042      	beq.n	80055fa <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005574:	4b77      	ldr	r3, [pc, #476]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a76      	ldr	r2, [pc, #472]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 800557a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fc faf4 	bl	8001b6c <HAL_GetTick>
 8005584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005588:	f7fc faf0 	bl	8001b6c <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e255      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800559a:	4b6e      	ldr	r3, [pc, #440]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055a6:	f7fc fb21 	bl	8001bec <HAL_GetREVID>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d817      	bhi.n	80055e4 <HAL_RCC_OscConfig+0x3b0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d108      	bne.n	80055ce <HAL_RCC_OscConfig+0x39a>
 80055bc:	4b65      	ldr	r3, [pc, #404]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055c4:	4a63      	ldr	r2, [pc, #396]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80055c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ca:	6053      	str	r3, [r2, #4]
 80055cc:	e02e      	b.n	800562c <HAL_RCC_OscConfig+0x3f8>
 80055ce:	4b61      	ldr	r3, [pc, #388]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	069b      	lsls	r3, r3, #26
 80055dc:	495d      	ldr	r1, [pc, #372]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	604b      	str	r3, [r1, #4]
 80055e2:	e023      	b.n	800562c <HAL_RCC_OscConfig+0x3f8>
 80055e4:	4b5b      	ldr	r3, [pc, #364]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	061b      	lsls	r3, r3, #24
 80055f2:	4958      	ldr	r1, [pc, #352]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60cb      	str	r3, [r1, #12]
 80055f8:	e018      	b.n	800562c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055fa:	4b56      	ldr	r3, [pc, #344]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a55      	ldr	r2, [pc, #340]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005606:	f7fc fab1 	bl	8001b6c <HAL_GetTick>
 800560a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800560e:	f7fc faad 	bl	8001b6c <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e212      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005620:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f0      	bne.n	800560e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d036      	beq.n	80056a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d019      	beq.n	8005674 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005640:	4b44      	ldr	r3, [pc, #272]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005644:	4a43      	ldr	r2, [pc, #268]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fc fa8e 	bl	8001b6c <HAL_GetTick>
 8005650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005654:	f7fc fa8a 	bl	8001b6c <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e1ef      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005666:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0x420>
 8005672:	e018      	b.n	80056a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005674:	4b37      	ldr	r3, [pc, #220]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005678:	4a36      	ldr	r2, [pc, #216]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 800567a:	f023 0301 	bic.w	r3, r3, #1
 800567e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005680:	f7fc fa74 	bl	8001b6c <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005688:	f7fc fa70 	bl	8001b6c <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e1d5      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800569a:	4b2e      	ldr	r3, [pc, #184]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 800569c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d036      	beq.n	8005720 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d019      	beq.n	80056ee <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056ba:	4b26      	ldr	r3, [pc, #152]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a25      	ldr	r2, [pc, #148]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80056c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056c6:	f7fc fa51 	bl	8001b6c <HAL_GetTick>
 80056ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056ce:	f7fc fa4d 	bl	8001b6c <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e1b2      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056e0:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0f0      	beq.n	80056ce <HAL_RCC_OscConfig+0x49a>
 80056ec:	e018      	b.n	8005720 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056ee:	4b19      	ldr	r3, [pc, #100]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a18      	ldr	r2, [pc, #96]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 80056f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056fa:	f7fc fa37 	bl	8001b6c <HAL_GetTick>
 80056fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005702:	f7fc fa33 	bl	8001b6c <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e198      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005714:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <HAL_RCC_OscConfig+0x520>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f0      	bne.n	8005702 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8085 	beq.w	8005838 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800572e:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <HAL_RCC_OscConfig+0x524>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a09      	ldr	r2, [pc, #36]	; (8005758 <HAL_RCC_OscConfig+0x524>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005738:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800573a:	f7fc fa17 	bl	8001b6c <HAL_GetTick>
 800573e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005740:	e00c      	b.n	800575c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fc fa13 	bl	8001b6c <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b64      	cmp	r3, #100	; 0x64
 800574e:	d905      	bls.n	800575c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e178      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
 8005754:	58024400 	.word	0x58024400
 8005758:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800575c:	4b96      	ldr	r3, [pc, #600]	; (80059b8 <HAL_RCC_OscConfig+0x784>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0ec      	beq.n	8005742 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d106      	bne.n	800577e <HAL_RCC_OscConfig+0x54a>
 8005770:	4b92      	ldr	r3, [pc, #584]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	4a91      	ldr	r2, [pc, #580]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6713      	str	r3, [r2, #112]	; 0x70
 800577c:	e02d      	b.n	80057da <HAL_RCC_OscConfig+0x5a6>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10c      	bne.n	80057a0 <HAL_RCC_OscConfig+0x56c>
 8005786:	4b8d      	ldr	r3, [pc, #564]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	4a8c      	ldr	r2, [pc, #560]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	6713      	str	r3, [r2, #112]	; 0x70
 8005792:	4b8a      	ldr	r3, [pc, #552]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	4a89      	ldr	r2, [pc, #548]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	6713      	str	r3, [r2, #112]	; 0x70
 800579e:	e01c      	b.n	80057da <HAL_RCC_OscConfig+0x5a6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCC_OscConfig+0x58e>
 80057a8:	4b84      	ldr	r3, [pc, #528]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ac:	4a83      	ldr	r2, [pc, #524]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80057ae:	f043 0304 	orr.w	r3, r3, #4
 80057b2:	6713      	str	r3, [r2, #112]	; 0x70
 80057b4:	4b81      	ldr	r3, [pc, #516]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b8:	4a80      	ldr	r2, [pc, #512]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	6713      	str	r3, [r2, #112]	; 0x70
 80057c0:	e00b      	b.n	80057da <HAL_RCC_OscConfig+0x5a6>
 80057c2:	4b7e      	ldr	r3, [pc, #504]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4a7d      	ldr	r2, [pc, #500]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	6713      	str	r3, [r2, #112]	; 0x70
 80057ce:	4b7b      	ldr	r3, [pc, #492]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	4a7a      	ldr	r2, [pc, #488]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80057d4:	f023 0304 	bic.w	r3, r3, #4
 80057d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d015      	beq.n	800580e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e2:	f7fc f9c3 	bl	8001b6c <HAL_GetTick>
 80057e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057e8:	e00a      	b.n	8005800 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fc f9bf 	bl	8001b6c <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e122      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005800:	4b6e      	ldr	r3, [pc, #440]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ee      	beq.n	80057ea <HAL_RCC_OscConfig+0x5b6>
 800580c:	e014      	b.n	8005838 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580e:	f7fc f9ad 	bl	8001b6c <HAL_GetTick>
 8005812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005814:	e00a      	b.n	800582c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005816:	f7fc f9a9 	bl	8001b6c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	; 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e10c      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800582c:	4b63      	ldr	r3, [pc, #396]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ee      	bne.n	8005816 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8101 	beq.w	8005a44 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005842:	4b5e      	ldr	r3, [pc, #376]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800584a:	2b18      	cmp	r3, #24
 800584c:	f000 80bc 	beq.w	80059c8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b02      	cmp	r3, #2
 8005856:	f040 8095 	bne.w	8005984 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585a:	4b58      	ldr	r3, [pc, #352]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a57      	ldr	r2, [pc, #348]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005866:	f7fc f981 	bl	8001b6c <HAL_GetTick>
 800586a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586e:	f7fc f97d 	bl	8001b6c <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e0e2      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005880:	4b4e      	ldr	r3, [pc, #312]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f0      	bne.n	800586e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800588c:	4b4b      	ldr	r3, [pc, #300]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800588e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005890:	4b4b      	ldr	r3, [pc, #300]	; (80059c0 <HAL_RCC_OscConfig+0x78c>)
 8005892:	4013      	ands	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800589c:	0112      	lsls	r2, r2, #4
 800589e:	430a      	orrs	r2, r1
 80058a0:	4946      	ldr	r1, [pc, #280]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	628b      	str	r3, [r1, #40]	; 0x28
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	3b01      	subs	r3, #1
 80058ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	3b01      	subs	r3, #1
 80058b6:	025b      	lsls	r3, r3, #9
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	3b01      	subs	r3, #1
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	3b01      	subs	r3, #1
 80058d0:	061b      	lsls	r3, r3, #24
 80058d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058d6:	4939      	ldr	r1, [pc, #228]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80058dc:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	4a36      	ldr	r2, [pc, #216]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058e8:	4b34      	ldr	r3, [pc, #208]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80058ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ec:	4b35      	ldr	r3, [pc, #212]	; (80059c4 <HAL_RCC_OscConfig+0x790>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058f4:	00d2      	lsls	r2, r2, #3
 80058f6:	4931      	ldr	r1, [pc, #196]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058fc:	4b2f      	ldr	r3, [pc, #188]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	f023 020c 	bic.w	r2, r3, #12
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	492c      	ldr	r1, [pc, #176]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800590a:	4313      	orrs	r3, r2
 800590c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800590e:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	f023 0202 	bic.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591a:	4928      	ldr	r1, [pc, #160]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800591c:	4313      	orrs	r3, r2
 800591e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005920:	4b26      	ldr	r3, [pc, #152]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a25      	ldr	r2, [pc, #148]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800592c:	4b23      	ldr	r3, [pc, #140]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4a22      	ldr	r2, [pc, #136]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005938:	4b20      	ldr	r3, [pc, #128]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	4a1f      	ldr	r2, [pc, #124]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800593e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005944:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005950:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a19      	ldr	r2, [pc, #100]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800595a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fc f906 	bl	8001b6c <HAL_GetTick>
 8005960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005964:	f7fc f902 	bl	8001b6c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e067      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x730>
 8005982:	e05f      	b.n	8005a44 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 800598a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fc f8ec 	bl	8001b6c <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005998:	f7fc f8e8 	bl	8001b6c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e04d      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059aa:	4b04      	ldr	r3, [pc, #16]	; (80059bc <HAL_RCC_OscConfig+0x788>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x764>
 80059b6:	e045      	b.n	8005a44 <HAL_RCC_OscConfig+0x810>
 80059b8:	58024800 	.word	0x58024800
 80059bc:	58024400 	.word	0x58024400
 80059c0:	fffffc0c 	.word	0xfffffc0c
 80059c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059c8:	4b21      	ldr	r3, [pc, #132]	; (8005a50 <HAL_RCC_OscConfig+0x81c>)
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059ce:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <HAL_RCC_OscConfig+0x81c>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d031      	beq.n	8005a40 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f003 0203 	and.w	r2, r3, #3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d12a      	bne.n	8005a40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d122      	bne.n	8005a40 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d11a      	bne.n	8005a40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	0a5b      	lsrs	r3, r3, #9
 8005a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d111      	bne.n	8005a40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	0c1b      	lsrs	r3, r3, #16
 8005a20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d108      	bne.n	8005a40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	0e1b      	lsrs	r3, r3, #24
 8005a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3730      	adds	r7, #48	; 0x30
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	58024400 	.word	0x58024400

08005a54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e19c      	b.n	8005da2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a68:	4b8a      	ldr	r3, [pc, #552]	; (8005c94 <HAL_RCC_ClockConfig+0x240>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d910      	bls.n	8005a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b87      	ldr	r3, [pc, #540]	; (8005c94 <HAL_RCC_ClockConfig+0x240>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f023 020f 	bic.w	r2, r3, #15
 8005a7e:	4985      	ldr	r1, [pc, #532]	; (8005c94 <HAL_RCC_ClockConfig+0x240>)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a86:	4b83      	ldr	r3, [pc, #524]	; (8005c94 <HAL_RCC_ClockConfig+0x240>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e184      	b.n	8005da2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d010      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	4b7b      	ldr	r3, [pc, #492]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d908      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ab4:	4b78      	ldr	r3, [pc, #480]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	4975      	ldr	r1, [pc, #468]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d010      	beq.n	8005af4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	4b70      	ldr	r3, [pc, #448]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d908      	bls.n	8005af4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ae2:	4b6d      	ldr	r3, [pc, #436]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	496a      	ldr	r1, [pc, #424]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d010      	beq.n	8005b22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699a      	ldr	r2, [r3, #24]
 8005b04:	4b64      	ldr	r3, [pc, #400]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d908      	bls.n	8005b22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b10:	4b61      	ldr	r3, [pc, #388]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	495e      	ldr	r1, [pc, #376]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d010      	beq.n	8005b50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	4b59      	ldr	r3, [pc, #356]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d908      	bls.n	8005b50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b3e:	4b56      	ldr	r3, [pc, #344]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	4953      	ldr	r1, [pc, #332]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d010      	beq.n	8005b7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	4b4d      	ldr	r3, [pc, #308]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d908      	bls.n	8005b7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b6c:	4b4a      	ldr	r3, [pc, #296]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	f023 020f 	bic.w	r2, r3, #15
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4947      	ldr	r1, [pc, #284]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d055      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b8a:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	4940      	ldr	r1, [pc, #256]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d107      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ba4:	4b3c      	ldr	r3, [pc, #240]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d121      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0f6      	b.n	8005da2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d107      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bbc:	4b36      	ldr	r3, [pc, #216]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d115      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0ea      	b.n	8005da2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d107      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bd4:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0de      	b.n	8005da2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be4:	4b2c      	ldr	r3, [pc, #176]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0d6      	b.n	8005da2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bf4:	4b28      	ldr	r3, [pc, #160]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f023 0207 	bic.w	r2, r3, #7
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4925      	ldr	r1, [pc, #148]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c06:	f7fb ffb1 	bl	8001b6c <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0c:	e00a      	b.n	8005c24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c0e:	f7fb ffad 	bl	8001b6c <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e0be      	b.n	8005da2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c24:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d1eb      	bne.n	8005c0e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d010      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d208      	bcs.n	8005c64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f023 020f 	bic.w	r2, r3, #15
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	490e      	ldr	r1, [pc, #56]	; (8005c98 <HAL_RCC_ClockConfig+0x244>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <HAL_RCC_ClockConfig+0x240>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d214      	bcs.n	8005c9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <HAL_RCC_ClockConfig+0x240>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f023 020f 	bic.w	r2, r3, #15
 8005c7a:	4906      	ldr	r1, [pc, #24]	; (8005c94 <HAL_RCC_ClockConfig+0x240>)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c82:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <HAL_RCC_ClockConfig+0x240>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e086      	b.n	8005da2 <HAL_RCC_ClockConfig+0x34e>
 8005c94:	52002000 	.word	0x52002000
 8005c98:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d010      	beq.n	8005cca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	4b3f      	ldr	r3, [pc, #252]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d208      	bcs.n	8005cca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cb8:	4b3c      	ldr	r3, [pc, #240]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	4939      	ldr	r1, [pc, #228]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d010      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	4b34      	ldr	r3, [pc, #208]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d208      	bcs.n	8005cf8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ce6:	4b31      	ldr	r3, [pc, #196]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	492e      	ldr	r1, [pc, #184]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	4b28      	ldr	r3, [pc, #160]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d208      	bcs.n	8005d26 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d14:	4b25      	ldr	r3, [pc, #148]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	4922      	ldr	r1, [pc, #136]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d010      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69da      	ldr	r2, [r3, #28]
 8005d36:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d208      	bcs.n	8005d54 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	4917      	ldr	r1, [pc, #92]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d54:	f000 f834 	bl	8005dc0 <HAL_RCC_GetSysClockFreq>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	4b14      	ldr	r3, [pc, #80]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	4912      	ldr	r1, [pc, #72]	; (8005db0 <HAL_RCC_ClockConfig+0x35c>)
 8005d66:	5ccb      	ldrb	r3, [r1, r3]
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d72:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <HAL_RCC_ClockConfig+0x358>)
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	4a0d      	ldr	r2, [pc, #52]	; (8005db0 <HAL_RCC_ClockConfig+0x35c>)
 8005d7c:	5cd3      	ldrb	r3, [r2, r3]
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
 8005d88:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <HAL_RCC_ClockConfig+0x360>)
 8005d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d8c:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <HAL_RCC_ClockConfig+0x364>)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d92:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <HAL_RCC_ClockConfig+0x368>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fb fe9e 	bl	8001ad8 <HAL_InitTick>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	58024400 	.word	0x58024400
 8005db0:	08009968 	.word	0x08009968
 8005db4:	2400001c 	.word	0x2400001c
 8005db8:	24000018 	.word	0x24000018
 8005dbc:	24000020 	.word	0x24000020

08005dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b089      	sub	sp, #36	; 0x24
 8005dc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc6:	4bb3      	ldr	r3, [pc, #716]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dce:	2b18      	cmp	r3, #24
 8005dd0:	f200 8155 	bhi.w	800607e <HAL_RCC_GetSysClockFreq+0x2be>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e41 	.word	0x08005e41
 8005de0:	0800607f 	.word	0x0800607f
 8005de4:	0800607f 	.word	0x0800607f
 8005de8:	0800607f 	.word	0x0800607f
 8005dec:	0800607f 	.word	0x0800607f
 8005df0:	0800607f 	.word	0x0800607f
 8005df4:	0800607f 	.word	0x0800607f
 8005df8:	0800607f 	.word	0x0800607f
 8005dfc:	08005e67 	.word	0x08005e67
 8005e00:	0800607f 	.word	0x0800607f
 8005e04:	0800607f 	.word	0x0800607f
 8005e08:	0800607f 	.word	0x0800607f
 8005e0c:	0800607f 	.word	0x0800607f
 8005e10:	0800607f 	.word	0x0800607f
 8005e14:	0800607f 	.word	0x0800607f
 8005e18:	0800607f 	.word	0x0800607f
 8005e1c:	08005e6d 	.word	0x08005e6d
 8005e20:	0800607f 	.word	0x0800607f
 8005e24:	0800607f 	.word	0x0800607f
 8005e28:	0800607f 	.word	0x0800607f
 8005e2c:	0800607f 	.word	0x0800607f
 8005e30:	0800607f 	.word	0x0800607f
 8005e34:	0800607f 	.word	0x0800607f
 8005e38:	0800607f 	.word	0x0800607f
 8005e3c:	08005e73 	.word	0x08005e73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e40:	4b94      	ldr	r3, [pc, #592]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d009      	beq.n	8005e60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e4c:	4b91      	ldr	r3, [pc, #580]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	08db      	lsrs	r3, r3, #3
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	4a90      	ldr	r2, [pc, #576]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e58:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e5e:	e111      	b.n	8006084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e60:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e62:	61bb      	str	r3, [r7, #24]
    break;
 8005e64:	e10e      	b.n	8006084 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e66:	4b8d      	ldr	r3, [pc, #564]	; (800609c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e68:	61bb      	str	r3, [r7, #24]
    break;
 8005e6a:	e10b      	b.n	8006084 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e6c:	4b8c      	ldr	r3, [pc, #560]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e6e:	61bb      	str	r3, [r7, #24]
    break;
 8005e70:	e108      	b.n	8006084 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e72:	4b88      	ldr	r3, [pc, #544]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e7c:	4b85      	ldr	r3, [pc, #532]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e88:	4b82      	ldr	r3, [pc, #520]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e92:	4b80      	ldr	r3, [pc, #512]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e96:	08db      	lsrs	r3, r3, #3
 8005e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 80e1 	beq.w	8006078 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	f000 8083 	beq.w	8005fc4 <HAL_RCC_GetSysClockFreq+0x204>
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	f200 80a1 	bhi.w	8006008 <HAL_RCC_GetSysClockFreq+0x248>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x114>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d056      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ed2:	e099      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed4:	4b6f      	ldr	r3, [pc, #444]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d02d      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ee0:	4b6c      	ldr	r3, [pc, #432]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	08db      	lsrs	r3, r3, #3
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	4a6b      	ldr	r2, [pc, #428]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0a:	4b62      	ldr	r3, [pc, #392]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f3a:	e087      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4e:	4b51      	ldr	r3, [pc, #324]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f62:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f7e:	e065      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b40      	ldr	r3, [pc, #256]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc2:	e043      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd6:	4b2f      	ldr	r3, [pc, #188]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006006:	e021      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601a:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a02 	vldr	s12, [r7, #8]
 800602e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800604a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800604c:	4b11      	ldr	r3, [pc, #68]	; (8006094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	0a5b      	lsrs	r3, r3, #9
 8006052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006056:	3301      	adds	r3, #1
 8006058:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006064:	edd7 6a07 	vldr	s13, [r7, #28]
 8006068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800606c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006070:	ee17 3a90 	vmov	r3, s15
 8006074:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006076:	e005      	b.n	8006084 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	61bb      	str	r3, [r7, #24]
    break;
 800607c:	e002      	b.n	8006084 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800607e:	4b07      	ldr	r3, [pc, #28]	; (800609c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006080:	61bb      	str	r3, [r7, #24]
    break;
 8006082:	bf00      	nop
  }

  return sysclockfreq;
 8006084:	69bb      	ldr	r3, [r7, #24]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3724      	adds	r7, #36	; 0x24
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	58024400 	.word	0x58024400
 8006098:	03d09000 	.word	0x03d09000
 800609c:	003d0900 	.word	0x003d0900
 80060a0:	007f2815 	.word	0x007f2815
 80060a4:	46000000 	.word	0x46000000
 80060a8:	4c742400 	.word	0x4c742400
 80060ac:	4a742400 	.word	0x4a742400
 80060b0:	4afe502a 	.word	0x4afe502a

080060b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060ba:	f7ff fe81 	bl	8005dc0 <HAL_RCC_GetSysClockFreq>
 80060be:	4602      	mov	r2, r0
 80060c0:	4b10      	ldr	r3, [pc, #64]	; (8006104 <HAL_RCC_GetHCLKFreq+0x50>)
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	0a1b      	lsrs	r3, r3, #8
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	490f      	ldr	r1, [pc, #60]	; (8006108 <HAL_RCC_GetHCLKFreq+0x54>)
 80060cc:	5ccb      	ldrb	r3, [r1, r3]
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	fa22 f303 	lsr.w	r3, r2, r3
 80060d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <HAL_RCC_GetHCLKFreq+0x50>)
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	4a09      	ldr	r2, [pc, #36]	; (8006108 <HAL_RCC_GetHCLKFreq+0x54>)
 80060e2:	5cd3      	ldrb	r3, [r2, r3]
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	fa22 f303 	lsr.w	r3, r2, r3
 80060ee:	4a07      	ldr	r2, [pc, #28]	; (800610c <HAL_RCC_GetHCLKFreq+0x58>)
 80060f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060f2:	4a07      	ldr	r2, [pc, #28]	; (8006110 <HAL_RCC_GetHCLKFreq+0x5c>)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060f8:	4b04      	ldr	r3, [pc, #16]	; (800610c <HAL_RCC_GetHCLKFreq+0x58>)
 80060fa:	681b      	ldr	r3, [r3, #0]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	58024400 	.word	0x58024400
 8006108:	08009968 	.word	0x08009968
 800610c:	2400001c 	.word	0x2400001c
 8006110:	24000018 	.word	0x24000018

08006114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006118:	f7ff ffcc 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 800611c:	4602      	mov	r2, r0
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	091b      	lsrs	r3, r3, #4
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	4904      	ldr	r1, [pc, #16]	; (800613c <HAL_RCC_GetPCLK1Freq+0x28>)
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}
 8006138:	58024400 	.word	0x58024400
 800613c:	08009968 	.word	0x08009968

08006140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006144:	f7ff ffb6 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 8006148:	4602      	mov	r2, r0
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	4904      	ldr	r1, [pc, #16]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006156:	5ccb      	ldrb	r3, [r1, r3]
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006160:	4618      	mov	r0, r3
 8006162:	bd80      	pop	{r7, pc}
 8006164:	58024400 	.word	0x58024400
 8006168:	08009968 	.word	0x08009968

0800616c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006174:	2300      	movs	r3, #0
 8006176:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006178:	2300      	movs	r3, #0
 800617a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d03f      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800618c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006190:	d02a      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006196:	d824      	bhi.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800619c:	d018      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800619e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a2:	d81e      	bhi.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ac:	d007      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061ae:	e018      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b0:	4bab      	ldr	r3, [pc, #684]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	4aaa      	ldr	r2, [pc, #680]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061bc:	e015      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3304      	adds	r3, #4
 80061c2:	2102      	movs	r1, #2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 f9cf 	bl	8007568 <RCCEx_PLL2_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061ce:	e00c      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3324      	adds	r3, #36	; 0x24
 80061d4:	2102      	movs	r1, #2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fa78 	bl	80076cc <RCCEx_PLL3_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061e0:	e003      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]
      break;
 80061e6:	e000      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d109      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061f0:	4b9b      	ldr	r3, [pc, #620]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fc:	4998      	ldr	r1, [pc, #608]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	650b      	str	r3, [r1, #80]	; 0x50
 8006202:	e001      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006204:	7dfb      	ldrb	r3, [r7, #23]
 8006206:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d03d      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006218:	2b04      	cmp	r3, #4
 800621a:	d826      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006239 	.word	0x08006239
 8006228:	08006247 	.word	0x08006247
 800622c:	08006259 	.word	0x08006259
 8006230:	08006271 	.word	0x08006271
 8006234:	08006271 	.word	0x08006271
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006238:	4b89      	ldr	r3, [pc, #548]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	4a88      	ldr	r2, [pc, #544]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800623e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006244:	e015      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3304      	adds	r3, #4
 800624a:	2100      	movs	r1, #0
 800624c:	4618      	mov	r0, r3
 800624e:	f001 f98b 	bl	8007568 <RCCEx_PLL2_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006256:	e00c      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3324      	adds	r3, #36	; 0x24
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fa34 	bl	80076cc <RCCEx_PLL3_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006268:	e003      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	75fb      	strb	r3, [r7, #23]
      break;
 800626e:	e000      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006278:	4b79      	ldr	r3, [pc, #484]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800627a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627c:	f023 0207 	bic.w	r2, r3, #7
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006284:	4976      	ldr	r1, [pc, #472]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006286:	4313      	orrs	r3, r2
 8006288:	650b      	str	r3, [r1, #80]	; 0x50
 800628a:	e001      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006298:	2b00      	cmp	r3, #0
 800629a:	d042      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a4:	d02b      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80062a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062aa:	d825      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062ac:	2bc0      	cmp	r3, #192	; 0xc0
 80062ae:	d028      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062b0:	2bc0      	cmp	r3, #192	; 0xc0
 80062b2:	d821      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062b4:	2b80      	cmp	r3, #128	; 0x80
 80062b6:	d016      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d81d      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d007      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80062c4:	e018      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c6:	4b66      	ldr	r3, [pc, #408]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	4a65      	ldr	r2, [pc, #404]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062d2:	e017      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3304      	adds	r3, #4
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 f944 	bl	8007568 <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062e4:	e00e      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3324      	adds	r3, #36	; 0x24
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f9ed 	bl	80076cc <RCCEx_PLL3_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062f6:	e005      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
      break;
 80062fc:	e002      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80062fe:	bf00      	nop
 8006300:	e000      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800630a:	4b55      	ldr	r3, [pc, #340]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800630c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	4952      	ldr	r1, [pc, #328]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006318:	4313      	orrs	r3, r2
 800631a:	650b      	str	r3, [r1, #80]	; 0x50
 800631c:	e001      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632a:	2b00      	cmp	r3, #0
 800632c:	d049      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006338:	d030      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800633a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800633e:	d82a      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006340:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006344:	d02c      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006346:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800634a:	d824      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800634c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006350:	d018      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006356:	d81e      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800635c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006360:	d007      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006362:	e018      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006364:	4b3e      	ldr	r3, [pc, #248]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	4a3d      	ldr	r2, [pc, #244]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800636a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800636e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006370:	e017      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3304      	adds	r3, #4
 8006376:	2100      	movs	r1, #0
 8006378:	4618      	mov	r0, r3
 800637a:	f001 f8f5 	bl	8007568 <RCCEx_PLL2_Config>
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006382:	e00e      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3324      	adds	r3, #36	; 0x24
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f001 f99e 	bl	80076cc <RCCEx_PLL3_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006394:	e005      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
      break;
 800639a:	e002      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800639c:	bf00      	nop
 800639e:	e000      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063a8:	4b2d      	ldr	r3, [pc, #180]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063b6:	492a      	ldr	r1, [pc, #168]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	658b      	str	r3, [r1, #88]	; 0x58
 80063bc:	e001      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04c      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063d8:	d030      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80063da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063de:	d82a      	bhi.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063e4:	d02c      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80063e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063ea:	d824      	bhi.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063f0:	d018      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80063f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063f6:	d81e      	bhi.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80063fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006400:	d007      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006402:	e018      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006404:	4b16      	ldr	r3, [pc, #88]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a15      	ldr	r2, [pc, #84]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800640a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006410:	e017      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3304      	adds	r3, #4
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f001 f8a5 	bl	8007568 <RCCEx_PLL2_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006422:	e00e      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3324      	adds	r3, #36	; 0x24
 8006428:	2100      	movs	r1, #0
 800642a:	4618      	mov	r0, r3
 800642c:	f001 f94e 	bl	80076cc <RCCEx_PLL3_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006434:	e005      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	75fb      	strb	r3, [r7, #23]
      break;
 800643a:	e002      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800643c:	bf00      	nop
 800643e:	e000      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10d      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800644a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006456:	4902      	ldr	r1, [pc, #8]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006458:	4313      	orrs	r3, r2
 800645a:	658b      	str	r3, [r1, #88]	; 0x58
 800645c:	e004      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800645e:	bf00      	nop
 8006460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d032      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006478:	2b30      	cmp	r3, #48	; 0x30
 800647a:	d01c      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d817      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006480:	2b20      	cmp	r3, #32
 8006482:	d00c      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006484:	2b20      	cmp	r3, #32
 8006486:	d813      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d016      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800648c:	2b10      	cmp	r3, #16
 800648e:	d10f      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006490:	4baf      	ldr	r3, [pc, #700]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	4aae      	ldr	r2, [pc, #696]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800649a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800649c:	e00e      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3304      	adds	r3, #4
 80064a2:	2102      	movs	r1, #2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 f85f 	bl	8007568 <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064ae:	e005      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	75fb      	strb	r3, [r7, #23]
      break;
 80064b4:	e002      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064b6:	bf00      	nop
 80064b8:	e000      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064c2:	4ba3      	ldr	r3, [pc, #652]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ce:	49a0      	ldr	r1, [pc, #640]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064d4:	e001      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d047      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064ee:	d030      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80064f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f4:	d82a      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80064f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064fa:	d02c      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80064fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006500:	d824      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006506:	d018      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650c:	d81e      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006516:	d007      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006518:	e018      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800651a:	4b8d      	ldr	r3, [pc, #564]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	4a8c      	ldr	r2, [pc, #560]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006526:	e017      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	2100      	movs	r1, #0
 800652e:	4618      	mov	r0, r3
 8006530:	f001 f81a 	bl	8007568 <RCCEx_PLL2_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006538:	e00e      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3324      	adds	r3, #36	; 0x24
 800653e:	2100      	movs	r1, #0
 8006540:	4618      	mov	r0, r3
 8006542:	f001 f8c3 	bl	80076cc <RCCEx_PLL3_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800654a:	e005      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
      break;
 8006550:	e002      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006552:	bf00      	nop
 8006554:	e000      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800655e:	4b7c      	ldr	r3, [pc, #496]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006562:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656a:	4979      	ldr	r1, [pc, #484]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800656c:	4313      	orrs	r3, r2
 800656e:	650b      	str	r3, [r1, #80]	; 0x50
 8006570:	e001      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d049      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800658a:	d02e      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800658c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006590:	d828      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006596:	d02a      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800659c:	d822      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800659e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065a2:	d026      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80065a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065a8:	d81c      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ae:	d010      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80065b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b4:	d816      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01d      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80065ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065be:	d111      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3304      	adds	r3, #4
 80065c4:	2101      	movs	r1, #1
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 ffce 	bl	8007568 <RCCEx_PLL2_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065d0:	e012      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3324      	adds	r3, #36	; 0x24
 80065d6:	2101      	movs	r1, #1
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 f877 	bl	80076cc <RCCEx_PLL3_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065e2:	e009      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	75fb      	strb	r3, [r7, #23]
      break;
 80065e8:	e006      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065ea:	bf00      	nop
 80065ec:	e004      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065ee:	bf00      	nop
 80065f0:	e002      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065f2:	bf00      	nop
 80065f4:	e000      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d109      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80065fe:	4b54      	ldr	r3, [pc, #336]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006602:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660a:	4951      	ldr	r1, [pc, #324]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800660c:	4313      	orrs	r3, r2
 800660e:	650b      	str	r3, [r1, #80]	; 0x50
 8006610:	e001      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006612:	7dfb      	ldrb	r3, [r7, #23]
 8006614:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04b      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800662c:	d02e      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800662e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006632:	d828      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006638:	d02a      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663e:	d822      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006640:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006644:	d026      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006646:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800664a:	d81c      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800664c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006650:	d010      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006656:	d816      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01d      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800665c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006660:	d111      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	2101      	movs	r1, #1
 8006668:	4618      	mov	r0, r3
 800666a:	f000 ff7d 	bl	8007568 <RCCEx_PLL2_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006672:	e012      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3324      	adds	r3, #36	; 0x24
 8006678:	2101      	movs	r1, #1
 800667a:	4618      	mov	r0, r3
 800667c:	f001 f826 	bl	80076cc <RCCEx_PLL3_Config>
 8006680:	4603      	mov	r3, r0
 8006682:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006684:	e009      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
      break;
 800668a:	e006      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800668c:	bf00      	nop
 800668e:	e004      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006690:	bf00      	nop
 8006692:	e002      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006694:	bf00      	nop
 8006696:	e000      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066a0:	4b2b      	ldr	r3, [pc, #172]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066ae:	4928      	ldr	r1, [pc, #160]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	658b      	str	r3, [r1, #88]	; 0x58
 80066b4:	e001      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d02f      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ce:	d00e      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 80066d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d4:	d814      	bhi.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d015      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80066da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066de:	d10f      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e0:	4b1b      	ldr	r3, [pc, #108]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4a1a      	ldr	r2, [pc, #104]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066ec:	e00c      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3304      	adds	r3, #4
 80066f2:	2101      	movs	r1, #1
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 ff37 	bl	8007568 <RCCEx_PLL2_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066fe:	e003      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	75fb      	strb	r3, [r7, #23]
      break;
 8006704:	e000      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d109      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800670e:	4b10      	ldr	r3, [pc, #64]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006712:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671a:	490d      	ldr	r1, [pc, #52]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800671c:	4313      	orrs	r3, r2
 800671e:	650b      	str	r3, [r1, #80]	; 0x50
 8006720:	e001      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006722:	7dfb      	ldrb	r3, [r7, #23]
 8006724:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d033      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	2b03      	cmp	r3, #3
 8006738:	d81c      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	0800677b 	.word	0x0800677b
 8006744:	08006755 	.word	0x08006755
 8006748:	08006763 	.word	0x08006763
 800674c:	0800677b 	.word	0x0800677b
 8006750:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006754:	4bb8      	ldr	r3, [pc, #736]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	4ab7      	ldr	r2, [pc, #732]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800675a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006760:	e00c      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3304      	adds	r3, #4
 8006766:	2102      	movs	r1, #2
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fefd 	bl	8007568 <RCCEx_PLL2_Config>
 800676e:	4603      	mov	r3, r0
 8006770:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006772:	e003      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	75fb      	strb	r3, [r7, #23]
      break;
 8006778:	e000      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800677a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800677c:	7dfb      	ldrb	r3, [r7, #23]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006782:	4bad      	ldr	r3, [pc, #692]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006786:	f023 0203 	bic.w	r2, r3, #3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678e:	49aa      	ldr	r1, [pc, #680]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006790:	4313      	orrs	r3, r2
 8006792:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006794:	e001      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8086 	beq.w	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067a8:	4ba4      	ldr	r3, [pc, #656]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4aa3      	ldr	r2, [pc, #652]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067b4:	f7fb f9da 	bl	8001b6c <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067ba:	e009      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067bc:	f7fb f9d6 	bl	8001b6c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b64      	cmp	r3, #100	; 0x64
 80067c8:	d902      	bls.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	75fb      	strb	r3, [r7, #23]
        break;
 80067ce:	e005      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d0:	4b9a      	ldr	r3, [pc, #616]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0ef      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d166      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067e2:	4b95      	ldr	r3, [pc, #596]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067ec:	4053      	eors	r3, r2
 80067ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d013      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067f6:	4b90      	ldr	r3, [pc, #576]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006800:	4b8d      	ldr	r3, [pc, #564]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006804:	4a8c      	ldr	r2, [pc, #560]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800680c:	4b8a      	ldr	r3, [pc, #552]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800680e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006810:	4a89      	ldr	r2, [pc, #548]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006816:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006818:	4a87      	ldr	r2, [pc, #540]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006828:	d115      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682a:	f7fb f99f 	bl	8001b6c <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006830:	e00b      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006832:	f7fb f99b 	bl	8001b6c <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006840:	4293      	cmp	r3, r2
 8006842:	d902      	bls.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	75fb      	strb	r3, [r7, #23]
            break;
 8006848:	e005      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684a:	4b7b      	ldr	r3, [pc, #492]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0ed      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d126      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686a:	d10d      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800686c:	4b72      	ldr	r3, [pc, #456]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800687a:	0919      	lsrs	r1, r3, #4
 800687c:	4b70      	ldr	r3, [pc, #448]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800687e:	400b      	ands	r3, r1
 8006880:	496d      	ldr	r1, [pc, #436]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006882:	4313      	orrs	r3, r2
 8006884:	610b      	str	r3, [r1, #16]
 8006886:	e005      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006888:	4b6b      	ldr	r3, [pc, #428]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	4a6a      	ldr	r2, [pc, #424]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800688e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006892:	6113      	str	r3, [r2, #16]
 8006894:	4b68      	ldr	r3, [pc, #416]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800689e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a2:	4965      	ldr	r1, [pc, #404]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	670b      	str	r3, [r1, #112]	; 0x70
 80068a8:	e004      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	75bb      	strb	r3, [r7, #22]
 80068ae:	e001      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d07e      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c4:	2b28      	cmp	r3, #40	; 0x28
 80068c6:	d867      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80068c8:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	0800699f 	.word	0x0800699f
 80068d4:	08006999 	.word	0x08006999
 80068d8:	08006999 	.word	0x08006999
 80068dc:	08006999 	.word	0x08006999
 80068e0:	08006999 	.word	0x08006999
 80068e4:	08006999 	.word	0x08006999
 80068e8:	08006999 	.word	0x08006999
 80068ec:	08006999 	.word	0x08006999
 80068f0:	08006975 	.word	0x08006975
 80068f4:	08006999 	.word	0x08006999
 80068f8:	08006999 	.word	0x08006999
 80068fc:	08006999 	.word	0x08006999
 8006900:	08006999 	.word	0x08006999
 8006904:	08006999 	.word	0x08006999
 8006908:	08006999 	.word	0x08006999
 800690c:	08006999 	.word	0x08006999
 8006910:	08006987 	.word	0x08006987
 8006914:	08006999 	.word	0x08006999
 8006918:	08006999 	.word	0x08006999
 800691c:	08006999 	.word	0x08006999
 8006920:	08006999 	.word	0x08006999
 8006924:	08006999 	.word	0x08006999
 8006928:	08006999 	.word	0x08006999
 800692c:	08006999 	.word	0x08006999
 8006930:	0800699f 	.word	0x0800699f
 8006934:	08006999 	.word	0x08006999
 8006938:	08006999 	.word	0x08006999
 800693c:	08006999 	.word	0x08006999
 8006940:	08006999 	.word	0x08006999
 8006944:	08006999 	.word	0x08006999
 8006948:	08006999 	.word	0x08006999
 800694c:	08006999 	.word	0x08006999
 8006950:	0800699f 	.word	0x0800699f
 8006954:	08006999 	.word	0x08006999
 8006958:	08006999 	.word	0x08006999
 800695c:	08006999 	.word	0x08006999
 8006960:	08006999 	.word	0x08006999
 8006964:	08006999 	.word	0x08006999
 8006968:	08006999 	.word	0x08006999
 800696c:	08006999 	.word	0x08006999
 8006970:	0800699f 	.word	0x0800699f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3304      	adds	r3, #4
 8006978:	2101      	movs	r1, #1
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fdf4 	bl	8007568 <RCCEx_PLL2_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006984:	e00c      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3324      	adds	r3, #36	; 0x24
 800698a:	2101      	movs	r1, #1
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fe9d 	bl	80076cc <RCCEx_PLL3_Config>
 8006992:	4603      	mov	r3, r0
 8006994:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006996:	e003      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]
      break;
 800699c:	e000      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800699e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069a6:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b2:	4921      	ldr	r1, [pc, #132]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	654b      	str	r3, [r1, #84]	; 0x54
 80069b8:	e001      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d03e      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ce:	2b05      	cmp	r3, #5
 80069d0:	d820      	bhi.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a1b 	.word	0x08006a1b
 80069dc:	080069f1 	.word	0x080069f1
 80069e0:	08006a03 	.word	0x08006a03
 80069e4:	08006a1b 	.word	0x08006a1b
 80069e8:	08006a1b 	.word	0x08006a1b
 80069ec:	08006a1b 	.word	0x08006a1b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3304      	adds	r3, #4
 80069f4:	2101      	movs	r1, #1
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fdb6 	bl	8007568 <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a00:	e00c      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3324      	adds	r3, #36	; 0x24
 8006a06:	2101      	movs	r1, #1
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fe5f 	bl	80076cc <RCCEx_PLL3_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a12:	e003      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
      break;
 8006a18:	e000      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d110      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a22:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	f023 0207 	bic.w	r2, r3, #7
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a2e:	4902      	ldr	r1, [pc, #8]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	654b      	str	r3, [r1, #84]	; 0x54
 8006a34:	e008      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006a36:	bf00      	nop
 8006a38:	58024400 	.word	0x58024400
 8006a3c:	58024800 	.word	0x58024800
 8006a40:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
 8006a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d039      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d820      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006aa7 	.word	0x08006aa7
 8006a68:	08006a7d 	.word	0x08006a7d
 8006a6c:	08006a8f 	.word	0x08006a8f
 8006a70:	08006aa7 	.word	0x08006aa7
 8006a74:	08006aa7 	.word	0x08006aa7
 8006a78:	08006aa7 	.word	0x08006aa7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	2101      	movs	r1, #1
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fd70 	bl	8007568 <RCCEx_PLL2_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a8c:	e00c      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3324      	adds	r3, #36	; 0x24
 8006a92:	2101      	movs	r1, #1
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fe19 	bl	80076cc <RCCEx_PLL3_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a9e:	e003      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa4:	e000      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006aae:	4bb7      	ldr	r3, [pc, #732]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab2:	f023 0207 	bic.w	r2, r3, #7
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abc:	49b3      	ldr	r1, [pc, #716]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ac2:	e001      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d04b      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ade:	d02e      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ae4:	d828      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aea:	d02a      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af0:	d822      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006af2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006af6:	d026      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006af8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006afc:	d81c      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b02:	d010      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b08:	d816      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01d      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b12:	d111      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3304      	adds	r3, #4
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fd24 	bl	8007568 <RCCEx_PLL2_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b24:	e012      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3324      	adds	r3, #36	; 0x24
 8006b2a:	2102      	movs	r1, #2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fdcd 	bl	80076cc <RCCEx_PLL3_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b36:	e009      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b3c:	e006      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b3e:	bf00      	nop
 8006b40:	e004      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b42:	bf00      	nop
 8006b44:	e002      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b46:	bf00      	nop
 8006b48:	e000      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10a      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b52:	4b8e      	ldr	r3, [pc, #568]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b56:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b60:	498a      	ldr	r1, [pc, #552]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	654b      	str	r3, [r1, #84]	; 0x54
 8006b66:	e001      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d04b      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b82:	d02e      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006b84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b88:	d828      	bhi.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8e:	d02a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b94:	d822      	bhi.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b9a:	d026      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006b9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba0:	d81c      	bhi.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba6:	d010      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bac:	d816      	bhi.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01d      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb6:	d111      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fcd2 	bl	8007568 <RCCEx_PLL2_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bc8:	e012      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3324      	adds	r3, #36	; 0x24
 8006bce:	2102      	movs	r1, #2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fd7b 	bl	80076cc <RCCEx_PLL3_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bda:	e009      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	75fb      	strb	r3, [r7, #23]
      break;
 8006be0:	e006      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006be2:	bf00      	nop
 8006be4:	e004      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006be6:	bf00      	nop
 8006be8:	e002      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006bea:	bf00      	nop
 8006bec:	e000      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bf6:	4b65      	ldr	r3, [pc, #404]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c04:	4961      	ldr	r1, [pc, #388]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	658b      	str	r3, [r1, #88]	; 0x58
 8006c0a:	e001      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
 8006c0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d04b      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c22:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c26:	d02e      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006c28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c2c:	d828      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c32:	d02a      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c38:	d822      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c3e:	d026      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006c40:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c44:	d81c      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4a:	d010      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c50:	d816      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01d      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5a:	d111      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fc80 	bl	8007568 <RCCEx_PLL2_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c6c:	e012      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3324      	adds	r3, #36	; 0x24
 8006c72:	2102      	movs	r1, #2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fd29 	bl	80076cc <RCCEx_PLL3_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c7e:	e009      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]
      break;
 8006c84:	e006      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c86:	bf00      	nop
 8006c88:	e004      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e002      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e000      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c9a:	4b3c      	ldr	r3, [pc, #240]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca8:	4938      	ldr	r1, [pc, #224]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	658b      	str	r3, [r1, #88]	; 0x58
 8006cae:	e001      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01a      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cca:	d10a      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3324      	adds	r3, #36	; 0x24
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fcfa 	bl	80076cc <RCCEx_PLL3_Config>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ce2:	4b2a      	ldr	r3, [pc, #168]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf0:	4926      	ldr	r1, [pc, #152]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d01a      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0c:	d10a      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3324      	adds	r3, #36	; 0x24
 8006d12:	2102      	movs	r1, #2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fcd9 	bl	80076cc <RCCEx_PLL3_Config>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d24:	4b19      	ldr	r3, [pc, #100]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d32:	4916      	ldr	r1, [pc, #88]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d036      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4e:	d01f      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d54:	d817      	bhi.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5e:	d009      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006d60:	e011      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3304      	adds	r3, #4
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fbfd 	bl	8007568 <RCCEx_PLL2_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d72:	e00e      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	2102      	movs	r1, #2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fca6 	bl	80076cc <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d84:	e005      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8a:	e002      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006d8c:	58024400 	.word	0x58024400
      break;
 8006d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d98:	4b93      	ldr	r3, [pc, #588]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006da6:	4990      	ldr	r1, [pc, #576]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	658b      	str	r3, [r1, #88]	; 0x58
 8006dac:	e001      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d033      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dc8:	d01c      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006dca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dce:	d816      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd4:	d003      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dda:	d007      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006ddc:	e00f      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dde:	4b82      	ldr	r3, [pc, #520]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	4a81      	ldr	r2, [pc, #516]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006dea:	e00c      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	2101      	movs	r1, #1
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fc6a 	bl	80076cc <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006dfc:	e003      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	75fb      	strb	r3, [r7, #23]
      break;
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e0c:	4b76      	ldr	r3, [pc, #472]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e1a:	4973      	ldr	r1, [pc, #460]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	654b      	str	r3, [r1, #84]	; 0x54
 8006e20:	e001      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d029      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3e:	d007      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006e40:	e00f      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e42:	4b69      	ldr	r3, [pc, #420]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	4a68      	ldr	r2, [pc, #416]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e4e:	e00b      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3304      	adds	r3, #4
 8006e54:	2102      	movs	r1, #2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fb86 	bl	8007568 <RCCEx_PLL2_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e60:	e002      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
      break;
 8006e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e6e:	4b5e      	ldr	r3, [pc, #376]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7a:	495b      	ldr	r1, [pc, #364]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e80:	e001      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3324      	adds	r3, #36	; 0x24
 8006e96:	2102      	movs	r1, #2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fc17 	bl	80076cc <RCCEx_PLL3_Config>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d030      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ebc:	d017      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec2:	d811      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec8:	d013      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ece:	d80b      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d010      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eda:	4b43      	ldr	r3, [pc, #268]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	4a42      	ldr	r2, [pc, #264]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006ee6:	e007      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
      break;
 8006eec:	e004      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e002      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006efe:	4b3a      	ldr	r3, [pc, #232]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f0a:	4937      	ldr	r1, [pc, #220]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f10:	e001      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d008      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f22:	4b31      	ldr	r3, [pc, #196]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	492e      	ldr	r1, [pc, #184]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f40:	4b29      	ldr	r3, [pc, #164]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f4e:	4926      	ldr	r1, [pc, #152]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f60:	4b21      	ldr	r3, [pc, #132]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f6c:	491e      	ldr	r1, [pc, #120]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00d      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f7e:	4b1a      	ldr	r3, [pc, #104]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f88:	6113      	str	r3, [r2, #16]
 8006f8a:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f94:	4914      	ldr	r1, [pc, #80]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da08      	bge.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fa2:	4b11      	ldr	r3, [pc, #68]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fae:	490e      	ldr	r1, [pc, #56]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fc0:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fce:	4906      	ldr	r1, [pc, #24]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006fd4:	7dbb      	ldrb	r3, [r7, #22]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e000      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	58024400 	.word	0x58024400

08006fec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ff0:	f7ff f860 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	4b06      	ldr	r3, [pc, #24]	; (8007010 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	091b      	lsrs	r3, r3, #4
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	4904      	ldr	r1, [pc, #16]	; (8007014 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007002:	5ccb      	ldrb	r3, [r1, r3]
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800700c:	4618      	mov	r0, r3
 800700e:	bd80      	pop	{r7, pc}
 8007010:	58024400 	.word	0x58024400
 8007014:	08009968 	.word	0x08009968

08007018 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007018:	b480      	push	{r7}
 800701a:	b089      	sub	sp, #36	; 0x24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007020:	4ba1      	ldr	r3, [pc, #644]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800702a:	4b9f      	ldr	r3, [pc, #636]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	0b1b      	lsrs	r3, r3, #12
 8007030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007034:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007036:	4b9c      	ldr	r3, [pc, #624]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	091b      	lsrs	r3, r3, #4
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007042:	4b99      	ldr	r3, [pc, #612]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007046:	08db      	lsrs	r3, r3, #3
 8007048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 8111 	beq.w	8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b02      	cmp	r3, #2
 800706a:	f000 8083 	beq.w	8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b02      	cmp	r3, #2
 8007072:	f200 80a1 	bhi.w	80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d056      	beq.n	8007130 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007082:	e099      	b.n	80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007084:	4b88      	ldr	r3, [pc, #544]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	2b00      	cmp	r3, #0
 800708e:	d02d      	beq.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007090:	4b85      	ldr	r3, [pc, #532]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	08db      	lsrs	r3, r3, #3
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	4a84      	ldr	r2, [pc, #528]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800709c:	fa22 f303 	lsr.w	r3, r2, r3
 80070a0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	ee07 3a90 	vmov	s15, r3
 80070a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ba:	4b7b      	ldr	r3, [pc, #492]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070ea:	e087      	b.n	80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fe:	4b6a      	ldr	r3, [pc, #424]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007112:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800712e:	e065      	b.n	80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800713e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007142:	4b59      	ldr	r3, [pc, #356]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007152:	ed97 6a03 	vldr	s12, [r7, #12]
 8007156:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800715a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007172:	e043      	b.n	80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007186:	4b48      	ldr	r3, [pc, #288]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007196:	ed97 6a03 	vldr	s12, [r7, #12]
 800719a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800719e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071b6:	e021      	b.n	80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ca:	4b37      	ldr	r3, [pc, #220]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071da:	ed97 6a03 	vldr	s12, [r7, #12]
 80071de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80071fc:	4b2a      	ldr	r3, [pc, #168]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	0a5b      	lsrs	r3, r3, #9
 8007202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007216:	edd7 6a07 	vldr	s13, [r7, #28]
 800721a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007222:	ee17 2a90 	vmov	r2, s15
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800722a:	4b1f      	ldr	r3, [pc, #124]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	0c1b      	lsrs	r3, r3, #16
 8007230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007244:	edd7 6a07 	vldr	s13, [r7, #28]
 8007248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007250:	ee17 2a90 	vmov	r2, s15
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007258:	4b13      	ldr	r3, [pc, #76]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	0e1b      	lsrs	r3, r3, #24
 800725e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800726e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007272:	edd7 6a07 	vldr	s13, [r7, #28]
 8007276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800727a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727e:	ee17 2a90 	vmov	r2, s15
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007286:	e008      	b.n	800729a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	609a      	str	r2, [r3, #8]
}
 800729a:	bf00      	nop
 800729c:	3724      	adds	r7, #36	; 0x24
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	58024400 	.word	0x58024400
 80072ac:	03d09000 	.word	0x03d09000
 80072b0:	46000000 	.word	0x46000000
 80072b4:	4c742400 	.word	0x4c742400
 80072b8:	4a742400 	.word	0x4a742400
 80072bc:	4afe502a 	.word	0x4afe502a

080072c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b089      	sub	sp, #36	; 0x24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072c8:	4ba1      	ldr	r3, [pc, #644]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80072d2:	4b9f      	ldr	r3, [pc, #636]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d6:	0d1b      	lsrs	r3, r3, #20
 80072d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072de:	4b9c      	ldr	r3, [pc, #624]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	0a1b      	lsrs	r3, r3, #8
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80072ea:	4b99      	ldr	r3, [pc, #612]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	08db      	lsrs	r3, r3, #3
 80072f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	fb02 f303 	mul.w	r3, r2, r3
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8111 	beq.w	8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b02      	cmp	r3, #2
 8007312:	f000 8083 	beq.w	800741c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b02      	cmp	r3, #2
 800731a:	f200 80a1 	bhi.w	8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d056      	beq.n	80073d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800732a:	e099      	b.n	8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800732c:	4b88      	ldr	r3, [pc, #544]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b00      	cmp	r3, #0
 8007336:	d02d      	beq.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007338:	4b85      	ldr	r3, [pc, #532]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	08db      	lsrs	r3, r3, #3
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	4a84      	ldr	r2, [pc, #528]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
 8007348:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	ee07 3a90 	vmov	s15, r3
 8007350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b7b      	ldr	r3, [pc, #492]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a03 	vldr	s12, [r7, #12]
 8007376:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007392:	e087      	b.n	80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800755c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a6:	4b6a      	ldr	r3, [pc, #424]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073d6:	e065      	b.n	80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ea:	4b59      	ldr	r3, [pc, #356]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800741a:	e043      	b.n	80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800742a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742e:	4b48      	ldr	r3, [pc, #288]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007442:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800745e:	e021      	b.n	80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800746e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007472:	4b37      	ldr	r3, [pc, #220]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007482:	ed97 6a03 	vldr	s12, [r7, #12]
 8007486:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800748a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80074a4:	4b2a      	ldr	r3, [pc, #168]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	0a5b      	lsrs	r3, r3, #9
 80074aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074be:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ca:	ee17 2a90 	vmov	r2, s15
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f8:	ee17 2a90 	vmov	r2, s15
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007500:	4b13      	ldr	r3, [pc, #76]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	0e1b      	lsrs	r3, r3, #24
 8007506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800751a:	edd7 6a07 	vldr	s13, [r7, #28]
 800751e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007526:	ee17 2a90 	vmov	r2, s15
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800752e:	e008      	b.n	8007542 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	609a      	str	r2, [r3, #8]
}
 8007542:	bf00      	nop
 8007544:	3724      	adds	r7, #36	; 0x24
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	58024400 	.word	0x58024400
 8007554:	03d09000 	.word	0x03d09000
 8007558:	46000000 	.word	0x46000000
 800755c:	4c742400 	.word	0x4c742400
 8007560:	4a742400 	.word	0x4a742400
 8007564:	4afe502a 	.word	0x4afe502a

08007568 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007576:	4b53      	ldr	r3, [pc, #332]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	2b03      	cmp	r3, #3
 8007580:	d101      	bne.n	8007586 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e099      	b.n	80076ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007586:	4b4f      	ldr	r3, [pc, #316]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a4e      	ldr	r2, [pc, #312]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 800758c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007592:	f7fa faeb 	bl	8001b6c <HAL_GetTick>
 8007596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007598:	e008      	b.n	80075ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800759a:	f7fa fae7 	bl	8001b6c <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e086      	b.n	80076ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075ac:	4b45      	ldr	r3, [pc, #276]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1f0      	bne.n	800759a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075b8:	4b42      	ldr	r3, [pc, #264]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	031b      	lsls	r3, r3, #12
 80075c6:	493f      	ldr	r1, [pc, #252]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	628b      	str	r3, [r1, #40]	; 0x28
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	3b01      	subs	r3, #1
 80075dc:	025b      	lsls	r3, r3, #9
 80075de:	b29b      	uxth	r3, r3
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	041b      	lsls	r3, r3, #16
 80075ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	061b      	lsls	r3, r3, #24
 80075f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075fc:	4931      	ldr	r1, [pc, #196]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007602:	4b30      	ldr	r3, [pc, #192]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007606:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	492d      	ldr	r1, [pc, #180]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007610:	4313      	orrs	r3, r2
 8007612:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007614:	4b2b      	ldr	r3, [pc, #172]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	f023 0220 	bic.w	r2, r3, #32
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	4928      	ldr	r1, [pc, #160]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007622:	4313      	orrs	r3, r2
 8007624:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007626:	4b27      	ldr	r3, [pc, #156]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	4a26      	ldr	r2, [pc, #152]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 800762c:	f023 0310 	bic.w	r3, r3, #16
 8007630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007632:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007636:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <RCCEx_PLL2_Config+0x160>)
 8007638:	4013      	ands	r3, r2
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	69d2      	ldr	r2, [r2, #28]
 800763e:	00d2      	lsls	r2, r2, #3
 8007640:	4920      	ldr	r1, [pc, #128]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007646:	4b1f      	ldr	r3, [pc, #124]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	4a1e      	ldr	r2, [pc, #120]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 800764c:	f043 0310 	orr.w	r3, r3, #16
 8007650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007658:	4b1a      	ldr	r3, [pc, #104]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 800765e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007662:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007664:	e00f      	b.n	8007686 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d106      	bne.n	800767a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800766c:	4b15      	ldr	r3, [pc, #84]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	4a14      	ldr	r2, [pc, #80]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007676:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007678:	e005      	b.n	8007686 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	4a11      	ldr	r2, [pc, #68]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007686:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a0e      	ldr	r2, [pc, #56]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 800768c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007692:	f7fa fa6b 	bl	8001b6c <HAL_GetTick>
 8007696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007698:	e008      	b.n	80076ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800769a:	f7fa fa67 	bl	8001b6c <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e006      	b.n	80076ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076ac:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <RCCEx_PLL2_Config+0x15c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f0      	beq.n	800769a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	58024400 	.word	0x58024400
 80076c8:	ffff0007 	.word	0xffff0007

080076cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076da:	4b53      	ldr	r3, [pc, #332]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d101      	bne.n	80076ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e099      	b.n	800781e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076ea:	4b4f      	ldr	r3, [pc, #316]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a4e      	ldr	r2, [pc, #312]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80076f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f6:	f7fa fa39 	bl	8001b6c <HAL_GetTick>
 80076fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076fc:	e008      	b.n	8007710 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076fe:	f7fa fa35 	bl	8001b6c <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e086      	b.n	800781e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007710:	4b45      	ldr	r3, [pc, #276]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f0      	bne.n	80076fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800771c:	4b42      	ldr	r3, [pc, #264]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	051b      	lsls	r3, r3, #20
 800772a:	493f      	ldr	r1, [pc, #252]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 800772c:	4313      	orrs	r3, r2
 800772e:	628b      	str	r3, [r1, #40]	; 0x28
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	3b01      	subs	r3, #1
 8007736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	3b01      	subs	r3, #1
 8007740:	025b      	lsls	r3, r3, #9
 8007742:	b29b      	uxth	r3, r3
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	3b01      	subs	r3, #1
 800774c:	041b      	lsls	r3, r3, #16
 800774e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	3b01      	subs	r3, #1
 800775a:	061b      	lsls	r3, r3, #24
 800775c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007760:	4931      	ldr	r1, [pc, #196]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 8007762:	4313      	orrs	r3, r2
 8007764:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007766:	4b30      	ldr	r3, [pc, #192]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	492d      	ldr	r1, [pc, #180]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 8007774:	4313      	orrs	r3, r2
 8007776:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007778:	4b2b      	ldr	r3, [pc, #172]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	4928      	ldr	r1, [pc, #160]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 8007786:	4313      	orrs	r3, r2
 8007788:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800778a:	4b27      	ldr	r3, [pc, #156]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	4a26      	ldr	r2, [pc, #152]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 8007790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007796:	4b24      	ldr	r3, [pc, #144]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 8007798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <RCCEx_PLL3_Config+0x160>)
 800779c:	4013      	ands	r3, r2
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	69d2      	ldr	r2, [r2, #28]
 80077a2:	00d2      	lsls	r2, r2, #3
 80077a4:	4920      	ldr	r1, [pc, #128]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077aa:	4b1f      	ldr	r3, [pc, #124]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077bc:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	4a19      	ldr	r2, [pc, #100]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077c8:	e00f      	b.n	80077ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d106      	bne.n	80077de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077d0:	4b15      	ldr	r3, [pc, #84]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	4a14      	ldr	r2, [pc, #80]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077dc:	e005      	b.n	80077ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077de:	4b12      	ldr	r3, [pc, #72]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	4a11      	ldr	r2, [pc, #68]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a0e      	ldr	r2, [pc, #56]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f6:	f7fa f9b9 	bl	8001b6c <HAL_GetTick>
 80077fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077fc:	e008      	b.n	8007810 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077fe:	f7fa f9b5 	bl	8001b6c <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e006      	b.n	800781e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <RCCEx_PLL3_Config+0x15c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0f0      	beq.n	80077fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	58024400 	.word	0x58024400
 800782c:	ffff0007 	.word	0xffff0007

08007830 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e0eb      	b.n	8007a1e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a75      	ldr	r2, [pc, #468]	; (8007a28 <HAL_SPI_Init+0x1f8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00f      	beq.n	8007876 <HAL_SPI_Init+0x46>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a74      	ldr	r2, [pc, #464]	; (8007a2c <HAL_SPI_Init+0x1fc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00a      	beq.n	8007876 <HAL_SPI_Init+0x46>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a72      	ldr	r2, [pc, #456]	; (8007a30 <HAL_SPI_Init+0x200>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d005      	beq.n	8007876 <HAL_SPI_Init+0x46>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	2b0f      	cmp	r3, #15
 8007870:	d901      	bls.n	8007876 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e0d3      	b.n	8007a1e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fb94 	bl	8007fa4 <SPI_GetPacketSize>
 800787c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a69      	ldr	r2, [pc, #420]	; (8007a28 <HAL_SPI_Init+0x1f8>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00c      	beq.n	80078a2 <HAL_SPI_Init+0x72>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a67      	ldr	r2, [pc, #412]	; (8007a2c <HAL_SPI_Init+0x1fc>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d007      	beq.n	80078a2 <HAL_SPI_Init+0x72>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a66      	ldr	r2, [pc, #408]	; (8007a30 <HAL_SPI_Init+0x200>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d002      	beq.n	80078a2 <HAL_SPI_Init+0x72>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b08      	cmp	r3, #8
 80078a0:	d811      	bhi.n	80078c6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078a6:	4a60      	ldr	r2, [pc, #384]	; (8007a28 <HAL_SPI_Init+0x1f8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d009      	beq.n	80078c0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a5e      	ldr	r2, [pc, #376]	; (8007a2c <HAL_SPI_Init+0x1fc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d004      	beq.n	80078c0 <HAL_SPI_Init+0x90>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a5d      	ldr	r2, [pc, #372]	; (8007a30 <HAL_SPI_Init+0x200>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d104      	bne.n	80078ca <HAL_SPI_Init+0x9a>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d901      	bls.n	80078ca <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e0a9      	b.n	8007a1e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7f9 fb68 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0201 	bic.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007904:	d119      	bne.n	800793a <HAL_SPI_Init+0x10a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790e:	d103      	bne.n	8007918 <HAL_SPI_Init+0xe8>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10c      	bne.n	800793a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007928:	d107      	bne.n	800793a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007938:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69da      	ldr	r2, [r3, #28]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	431a      	orrs	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	ea42 0103 	orr.w	r1, r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799a:	ea42 0103 	orr.w	r1, r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d113      	bne.n	80079da <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0201 	bic.w	r2, r2, #1
 80079e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	40013000 	.word	0x40013000
 8007a2c:	40003800 	.word	0x40003800
 8007a30:	40003c00 	.word	0x40003c00

08007a34 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007a4c:	6a3a      	ldr	r2, [r7, #32]
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	4013      	ands	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a66:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3330      	adds	r3, #48	; 0x30
 8007a6e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d113      	bne.n	8007aa2 <HAL_SPI_IRQHandler+0x6e>
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10e      	bne.n	8007aa2 <HAL_SPI_IRQHandler+0x6e>
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
    handled = 1UL;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10f      	bne.n	8007acc <HAL_SPI_IRQHandler+0x98>
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <HAL_SPI_IRQHandler+0x98>
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d105      	bne.n	8007acc <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	4798      	blx	r3
    handled = 1UL;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10f      	bne.n	8007af6 <HAL_SPI_IRQHandler+0xc2>
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_SPI_IRQHandler+0xc2>
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
    handled = 1UL;
 8007af2:	2301      	movs	r3, #1
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f040 816f 	bne.w	8007ddc <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 80a0 	beq.w	8007c4a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699a      	ldr	r2, [r3, #24]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0208 	orr.w	r2, r2, #8
 8007b18:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0210 	orr.w	r2, r2, #16
 8007b28:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	699a      	ldr	r2, [r3, #24]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b38:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0208 	bic.w	r2, r2, #8
 8007b48:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00f      	beq.n	8007b74 <HAL_SPI_IRQHandler+0x140>
 8007b54:	7cfb      	ldrb	r3, [r7, #19]
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d004      	beq.n	8007b64 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d007      	beq.n	8007b74 <HAL_SPI_IRQHandler+0x140>
 8007b64:	7cfb      	ldrb	r3, [r7, #19]
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d059      	beq.n	8007c1e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d154      	bne.n	8007c1e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d13d      	bne.n	8007bfe <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007b82:	e036      	b.n	8007bf2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b0f      	cmp	r3, #15
 8007b8a:	d90b      	bls.n	8007ba4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b96:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b9c:	1d1a      	adds	r2, r3, #4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	665a      	str	r2, [r3, #100]	; 0x64
 8007ba2:	e01d      	b.n	8007be0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	2b07      	cmp	r3, #7
 8007baa:	d90b      	bls.n	8007bc4 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	8812      	ldrh	r2, [r2, #0]
 8007bb4:	b292      	uxth	r2, r2
 8007bb6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bbc:	1c9a      	adds	r2, r3, #2
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	665a      	str	r2, [r3, #100]	; 0x64
 8007bc2:	e00d      	b.n	8007be0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd0:	7812      	ldrb	r2, [r2, #0]
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1c2      	bne.n	8007b84 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f930 	bl	8007e64 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7f9 f97a 	bl	8000f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007c1c:	e0e3      	b.n	8007de6 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007c1e:	7cfb      	ldrb	r3, [r7, #19]
 8007c20:	2b05      	cmp	r3, #5
 8007c22:	d103      	bne.n	8007c2c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f8f9 	bl	8007e1c <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007c2a:	e0d9      	b.n	8007de0 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007c2c:	7cfb      	ldrb	r3, [r7, #19]
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d103      	bne.n	8007c3a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f8e8 	bl	8007e08 <HAL_SPI_RxCpltCallback>
    return;
 8007c38:	e0d2      	b.n	8007de0 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007c3a:	7cfb      	ldrb	r3, [r7, #19]
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	f040 80cf 	bne.w	8007de0 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f8d6 	bl	8007df4 <HAL_SPI_TxCpltCallback>
    return;
 8007c48:	e0ca      	b.n	8007de0 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00d      	beq.n	8007c70 <HAL_SPI_IRQHandler+0x23c>
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d008      	beq.n	8007c70 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699a      	ldr	r2, [r3, #24]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c6c:	619a      	str	r2, [r3, #24]

    return;
 8007c6e:	e0ba      	b.n	8007de6 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 80b5 	beq.w	8007de6 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00f      	beq.n	8007ca6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8c:	f043 0204 	orr.w	r2, r3, #4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	699a      	ldr	r2, [r3, #24]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ca4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00f      	beq.n	8007cd0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cb6:	f043 0201 	orr.w	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cce:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00f      	beq.n	8007cfa <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce0:	f043 0208 	orr.w	r2, r3, #8
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	699a      	ldr	r2, [r3, #24]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00f      	beq.n	8007d24 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0220 	orr.w	r2, r2, #32
 8007d22:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d05a      	beq.n	8007de4 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6919      	ldr	r1, [r3, #16]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	4b28      	ldr	r3, [pc, #160]	; (8007dec <HAL_SPI_IRQHandler+0x3b8>)
 8007d4a:	400b      	ands	r3, r1
 8007d4c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d58:	d138      	bne.n	8007dcc <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d68:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d013      	beq.n	8007d9a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d76:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <HAL_SPI_IRQHandler+0x3bc>)
 8007d78:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fb fa96 	bl	80032b0 <HAL_DMA_Abort_IT>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d007      	beq.n	8007d9a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d020      	beq.n	8007de4 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007da6:	4a12      	ldr	r2, [pc, #72]	; (8007df0 <HAL_SPI_IRQHandler+0x3bc>)
 8007da8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fb fa7e 	bl	80032b0 <HAL_DMA_Abort_IT>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d014      	beq.n	8007de4 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007dca:	e00b      	b.n	8007de4 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7f9 f89b 	bl	8000f10 <HAL_SPI_ErrorCallback>
    return;
 8007dda:	e003      	b.n	8007de4 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007ddc:	bf00      	nop
 8007dde:	e002      	b.n	8007de6 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007de0:	bf00      	nop
 8007de2:	e000      	b.n	8007de6 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007de4:	bf00      	nop
  }
}
 8007de6:	3728      	adds	r7, #40	; 0x28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	fffffc94 	.word	0xfffffc94
 8007df0:	08007e31 	.word	0x08007e31

08007df4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f7f9 f85a 	bl	8000f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0208 	orr.w	r2, r2, #8
 8007e82:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0210 	orr.w	r2, r2, #16
 8007e92:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0201 	bic.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6919      	ldr	r1, [r3, #16]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b3c      	ldr	r3, [pc, #240]	; (8007fa0 <SPI_CloseTransfer+0x13c>)
 8007eb0:	400b      	ands	r3, r1
 8007eb2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007ec2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d014      	beq.n	8007efa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00f      	beq.n	8007efa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699a      	ldr	r2, [r3, #24]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0220 	orr.w	r2, r2, #32
 8007ef8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d014      	beq.n	8007f30 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00f      	beq.n	8007f30 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f16:	f043 0204 	orr.w	r2, r3, #4
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f2e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00f      	beq.n	8007f5a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f40:	f043 0201 	orr.w	r2, r3, #1
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699a      	ldr	r2, [r3, #24]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f58:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00f      	beq.n	8007f84 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f6a:	f043 0208 	orr.w	r2, r3, #8
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f82:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	fffffc90 	.word	0xfffffc90

08007fa4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb0:	095b      	lsrs	r3, r3, #5
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	08db      	lsrs	r3, r3, #3
 8007fc4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e042      	b.n	8008072 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d106      	bne.n	8008004 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7f9 f940 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2224      	movs	r2, #36	; 0x24
 8008008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0201 	bic.w	r2, r2, #1
 800801a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fb7d 	bl	800871c <UART_SetConfig>
 8008022:	4603      	mov	r3, r0
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e022      	b.n	8008072 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f8d1 	bl	80091dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008048:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008058:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0201 	orr.w	r2, r2, #1
 8008068:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 f958 	bl	8009320 <UART_CheckIdleState>
 8008070:	4603      	mov	r3, r0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008090:	2b20      	cmp	r3, #32
 8008092:	d168      	bne.n	8008166 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <HAL_UART_Transmit_DMA+0x24>
 800809a:	88fb      	ldrh	r3, [r7, #6]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e061      	b.n	8008168 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d101      	bne.n	80080b2 <HAL_UART_Transmit_DMA+0x36>
 80080ae:	2302      	movs	r3, #2
 80080b0:	e05a      	b.n	8008168 <HAL_UART_Transmit_DMA+0xec>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	88fa      	ldrh	r2, [r7, #6]
 80080c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	88fa      	ldrh	r2, [r7, #6]
 80080cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2221      	movs	r2, #33	; 0x21
 80080dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02c      	beq.n	8008142 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ec:	4a20      	ldr	r2, [pc, #128]	; (8008170 <HAL_UART_Transmit_DMA+0xf4>)
 80080ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080f4:	4a1f      	ldr	r2, [pc, #124]	; (8008174 <HAL_UART_Transmit_DMA+0xf8>)
 80080f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080fc:	4a1e      	ldr	r2, [pc, #120]	; (8008178 <HAL_UART_Transmit_DMA+0xfc>)
 80080fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008104:	2200      	movs	r2, #0
 8008106:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008110:	4619      	mov	r1, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3328      	adds	r3, #40	; 0x28
 8008118:	461a      	mov	r2, r3
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	f7fa fb40 	bl	80027a0 <HAL_DMA_Start_IT>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00d      	beq.n	8008142 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2210      	movs	r2, #16
 800812a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2220      	movs	r2, #32
 800813a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e012      	b.n	8008168 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2240      	movs	r2, #64	; 0x40
 8008148:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008160:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	e000      	b.n	8008168 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008166:	2302      	movs	r3, #2
  }
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	08009559 	.word	0x08009559
 8008174:	080095a9 	.word	0x080095a9
 8008178:	080095c5 	.word	0x080095c5

0800817c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b088      	sub	sp, #32
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	f640 030f 	movw	r3, #2063	; 0x80f
 80081a2:	4013      	ands	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d118      	bne.n	80081de <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d013      	beq.n	80081de <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 8282 	beq.w	80086d8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
      }
      return;
 80081dc:	e27c      	b.n	80086d8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80ef 	beq.w	80083c4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4b73      	ldr	r3, [pc, #460]	; (80083b8 <HAL_UART_IRQHandler+0x23c>)
 80081ea:	4013      	ands	r3, r2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d105      	bne.n	80081fc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	4b72      	ldr	r3, [pc, #456]	; (80083bc <HAL_UART_IRQHandler+0x240>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 80e4 	beq.w	80083c4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d010      	beq.n	8008228 <HAL_UART_IRQHandler+0xac>
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2201      	movs	r2, #1
 8008216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800821e:	f043 0201 	orr.w	r2, r3, #1
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d010      	beq.n	8008254 <HAL_UART_IRQHandler+0xd8>
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2202      	movs	r2, #2
 8008242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800824a:	f043 0204 	orr.w	r2, r3, #4
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f003 0304 	and.w	r3, r3, #4
 800825a:	2b00      	cmp	r3, #0
 800825c:	d010      	beq.n	8008280 <HAL_UART_IRQHandler+0x104>
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2204      	movs	r2, #4
 800826e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008276:	f043 0202 	orr.w	r2, r3, #2
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d015      	beq.n	80082b6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	f003 0320 	and.w	r3, r3, #32
 8008290:	2b00      	cmp	r3, #0
 8008292:	d104      	bne.n	800829e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4b48      	ldr	r3, [pc, #288]	; (80083b8 <HAL_UART_IRQHandler+0x23c>)
 8008298:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2208      	movs	r2, #8
 80082a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ac:	f043 0208 	orr.w	r2, r3, #8
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d011      	beq.n	80082e4 <HAL_UART_IRQHandler+0x168>
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00c      	beq.n	80082e4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082da:	f043 0220 	orr.w	r2, r3, #32
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 81f6 	beq.w	80086dc <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f003 0320 	and.w	r3, r3, #32
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d011      	beq.n	800831e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008324:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	d004      	beq.n	800833e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800833a:	2b00      	cmp	r3, #0
 800833c:	d031      	beq.n	80083a2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 f8d8 	bl	80094f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834e:	2b40      	cmp	r3, #64	; 0x40
 8008350:	d123      	bne.n	800839a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008360:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d013      	beq.n	8008392 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836e:	4a14      	ldr	r2, [pc, #80]	; (80083c0 <HAL_UART_IRQHandler+0x244>)
 8008370:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008376:	4618      	mov	r0, r3
 8008378:	f7fa ff9a 	bl	80032b0 <HAL_DMA_Abort_IT>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d017      	beq.n	80083b2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008390:	e00f      	b.n	80083b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7f8 fddc 	bl	8000f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008398:	e00b      	b.n	80083b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7f8 fdd8 	bl	8000f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a0:	e007      	b.n	80083b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7f8 fdd4 	bl	8000f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80083b0:	e194      	b.n	80086dc <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b2:	bf00      	nop
    return;
 80083b4:	e192      	b.n	80086dc <HAL_UART_IRQHandler+0x560>
 80083b6:	bf00      	nop
 80083b8:	10000001 	.word	0x10000001
 80083bc:	04000120 	.word	0x04000120
 80083c0:	08009645 	.word	0x08009645

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	f040 810f 	bne.w	80085ec <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	f003 0310 	and.w	r3, r3, #16
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 8109 	beq.w	80085ec <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	f003 0310 	and.w	r3, r3, #16
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 8103 	beq.w	80085ec <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2210      	movs	r2, #16
 80083ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	f040 80bb 	bne.w	8008574 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a96      	ldr	r2, [pc, #600]	; (8008660 <HAL_UART_IRQHandler+0x4e4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d059      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a94      	ldr	r2, [pc, #592]	; (8008664 <HAL_UART_IRQHandler+0x4e8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d053      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a92      	ldr	r2, [pc, #584]	; (8008668 <HAL_UART_IRQHandler+0x4ec>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d04d      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a90      	ldr	r2, [pc, #576]	; (800866c <HAL_UART_IRQHandler+0x4f0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d047      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a8e      	ldr	r2, [pc, #568]	; (8008670 <HAL_UART_IRQHandler+0x4f4>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d041      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a8c      	ldr	r2, [pc, #560]	; (8008674 <HAL_UART_IRQHandler+0x4f8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d03b      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a8a      	ldr	r2, [pc, #552]	; (8008678 <HAL_UART_IRQHandler+0x4fc>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d035      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a88      	ldr	r2, [pc, #544]	; (800867c <HAL_UART_IRQHandler+0x500>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d02f      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a86      	ldr	r2, [pc, #536]	; (8008680 <HAL_UART_IRQHandler+0x504>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d029      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a84      	ldr	r2, [pc, #528]	; (8008684 <HAL_UART_IRQHandler+0x508>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d023      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a82      	ldr	r2, [pc, #520]	; (8008688 <HAL_UART_IRQHandler+0x50c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d01d      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a80      	ldr	r2, [pc, #512]	; (800868c <HAL_UART_IRQHandler+0x510>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d017      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a7e      	ldr	r2, [pc, #504]	; (8008690 <HAL_UART_IRQHandler+0x514>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d011      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a7c      	ldr	r2, [pc, #496]	; (8008694 <HAL_UART_IRQHandler+0x518>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00b      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a7a      	ldr	r2, [pc, #488]	; (8008698 <HAL_UART_IRQHandler+0x51c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d005      	beq.n	80084be <HAL_UART_IRQHandler+0x342>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a78      	ldr	r2, [pc, #480]	; (800869c <HAL_UART_IRQHandler+0x520>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d105      	bne.n	80084ca <HAL_UART_IRQHandler+0x34e>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	e004      	b.n	80084d4 <HAL_UART_IRQHandler+0x358>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80084d6:	893b      	ldrh	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 8101 	beq.w	80086e0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084e4:	893a      	ldrh	r2, [r7, #8]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	f080 80fa 	bcs.w	80086e0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	893a      	ldrh	r2, [r7, #8]
 80084f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fe:	d02b      	beq.n	8008558 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800850e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0201 	bic.w	r2, r2, #1
 800851e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800852e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2220      	movs	r2, #32
 8008534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0210 	bic.w	r2, r2, #16
 800854c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008552:	4618      	mov	r0, r3
 8008554:	f7fa fb8e 	bl	8002c74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008564:	b29b      	uxth	r3, r3
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	b29b      	uxth	r3, r3
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f8c9 	bl	8008704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008572:	e0b5      	b.n	80086e0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008580:	b29b      	uxth	r3, r3
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 80a8 	beq.w	80086e4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008594:	897b      	ldrh	r3, [r7, #10]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 80a4 	beq.w	80086e4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085aa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6899      	ldr	r1, [r3, #8]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b3a      	ldr	r3, [pc, #232]	; (80086a0 <HAL_UART_IRQHandler+0x524>)
 80085b8:	400b      	ands	r3, r1
 80085ba:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0210 	bic.w	r2, r2, #16
 80085de:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085e0:	897b      	ldrh	r3, [r7, #10]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f88d 	bl	8008704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085ea:	e07b      	b.n	80086e4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00d      	beq.n	8008612 <HAL_UART_IRQHandler+0x496>
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d008      	beq.n	8008612 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 f84a 	bl	80096a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008610:	e06b      	b.n	80086ea <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008618:	2b00      	cmp	r3, #0
 800861a:	d012      	beq.n	8008642 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d008      	beq.n	8008642 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008634:	2b00      	cmp	r3, #0
 8008636:	d057      	beq.n	80086e8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	4798      	blx	r3
    }
    return;
 8008640:	e052      	b.n	80086e8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	d02b      	beq.n	80086a4 <HAL_UART_IRQHandler+0x528>
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008652:	2b00      	cmp	r3, #0
 8008654:	d026      	beq.n	80086a4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 f80a 	bl	8009670 <UART_EndTransmit_IT>
    return;
 800865c:	e045      	b.n	80086ea <HAL_UART_IRQHandler+0x56e>
 800865e:	bf00      	nop
 8008660:	40020010 	.word	0x40020010
 8008664:	40020028 	.word	0x40020028
 8008668:	40020040 	.word	0x40020040
 800866c:	40020058 	.word	0x40020058
 8008670:	40020070 	.word	0x40020070
 8008674:	40020088 	.word	0x40020088
 8008678:	400200a0 	.word	0x400200a0
 800867c:	400200b8 	.word	0x400200b8
 8008680:	40020410 	.word	0x40020410
 8008684:	40020428 	.word	0x40020428
 8008688:	40020440 	.word	0x40020440
 800868c:	40020458 	.word	0x40020458
 8008690:	40020470 	.word	0x40020470
 8008694:	40020488 	.word	0x40020488
 8008698:	400204a0 	.word	0x400204a0
 800869c:	400204b8 	.word	0x400204b8
 80086a0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d008      	beq.n	80086c0 <HAL_UART_IRQHandler+0x544>
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d003      	beq.n	80086c0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 f807 	bl	80096cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086be:	e014      	b.n	80086ea <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00f      	beq.n	80086ea <HAL_UART_IRQHandler+0x56e>
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da0c      	bge.n	80086ea <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fff1 	bl	80096b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086d6:	e008      	b.n	80086ea <HAL_UART_IRQHandler+0x56e>
      return;
 80086d8:	bf00      	nop
 80086da:	e006      	b.n	80086ea <HAL_UART_IRQHandler+0x56e>
    return;
 80086dc:	bf00      	nop
 80086de:	e004      	b.n	80086ea <HAL_UART_IRQHandler+0x56e>
      return;
 80086e0:	bf00      	nop
 80086e2:	e002      	b.n	80086ea <HAL_UART_IRQHandler+0x56e>
      return;
 80086e4:	bf00      	nop
 80086e6:	e000      	b.n	80086ea <HAL_UART_IRQHandler+0x56e>
    return;
 80086e8:	bf00      	nop
  }
}
 80086ea:	3720      	adds	r7, #32
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800871c:	b5b0      	push	{r4, r5, r7, lr}
 800871e:	b08e      	sub	sp, #56	; 0x38
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	431a      	orrs	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	4313      	orrs	r3, r2
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4bbf      	ldr	r3, [pc, #764]	; (8008a48 <UART_SetConfig+0x32c>)
 800874a:	4013      	ands	r3, r2
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008752:	430b      	orrs	r3, r1
 8008754:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4ab5      	ldr	r2, [pc, #724]	; (8008a4c <UART_SetConfig+0x330>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d004      	beq.n	8008786 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008782:	4313      	orrs	r3, r2
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	4bb0      	ldr	r3, [pc, #704]	; (8008a50 <UART_SetConfig+0x334>)
 800878e:	4013      	ands	r3, r2
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008796:	430b      	orrs	r3, r1
 8008798:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	f023 010f 	bic.w	r1, r3, #15
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4aa7      	ldr	r2, [pc, #668]	; (8008a54 <UART_SetConfig+0x338>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d176      	bne.n	80088a8 <UART_SetConfig+0x18c>
 80087ba:	4ba7      	ldr	r3, [pc, #668]	; (8008a58 <UART_SetConfig+0x33c>)
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087c2:	2b28      	cmp	r3, #40	; 0x28
 80087c4:	d86c      	bhi.n	80088a0 <UART_SetConfig+0x184>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0xb0>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	08008871 	.word	0x08008871
 80087d0:	080088a1 	.word	0x080088a1
 80087d4:	080088a1 	.word	0x080088a1
 80087d8:	080088a1 	.word	0x080088a1
 80087dc:	080088a1 	.word	0x080088a1
 80087e0:	080088a1 	.word	0x080088a1
 80087e4:	080088a1 	.word	0x080088a1
 80087e8:	080088a1 	.word	0x080088a1
 80087ec:	08008879 	.word	0x08008879
 80087f0:	080088a1 	.word	0x080088a1
 80087f4:	080088a1 	.word	0x080088a1
 80087f8:	080088a1 	.word	0x080088a1
 80087fc:	080088a1 	.word	0x080088a1
 8008800:	080088a1 	.word	0x080088a1
 8008804:	080088a1 	.word	0x080088a1
 8008808:	080088a1 	.word	0x080088a1
 800880c:	08008881 	.word	0x08008881
 8008810:	080088a1 	.word	0x080088a1
 8008814:	080088a1 	.word	0x080088a1
 8008818:	080088a1 	.word	0x080088a1
 800881c:	080088a1 	.word	0x080088a1
 8008820:	080088a1 	.word	0x080088a1
 8008824:	080088a1 	.word	0x080088a1
 8008828:	080088a1 	.word	0x080088a1
 800882c:	08008889 	.word	0x08008889
 8008830:	080088a1 	.word	0x080088a1
 8008834:	080088a1 	.word	0x080088a1
 8008838:	080088a1 	.word	0x080088a1
 800883c:	080088a1 	.word	0x080088a1
 8008840:	080088a1 	.word	0x080088a1
 8008844:	080088a1 	.word	0x080088a1
 8008848:	080088a1 	.word	0x080088a1
 800884c:	08008891 	.word	0x08008891
 8008850:	080088a1 	.word	0x080088a1
 8008854:	080088a1 	.word	0x080088a1
 8008858:	080088a1 	.word	0x080088a1
 800885c:	080088a1 	.word	0x080088a1
 8008860:	080088a1 	.word	0x080088a1
 8008864:	080088a1 	.word	0x080088a1
 8008868:	080088a1 	.word	0x080088a1
 800886c:	08008899 	.word	0x08008899
 8008870:	2301      	movs	r3, #1
 8008872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008876:	e222      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008878:	2304      	movs	r3, #4
 800887a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887e:	e21e      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008880:	2308      	movs	r3, #8
 8008882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008886:	e21a      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008888:	2310      	movs	r3, #16
 800888a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888e:	e216      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008890:	2320      	movs	r3, #32
 8008892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008896:	e212      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008898:	2340      	movs	r3, #64	; 0x40
 800889a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800889e:	e20e      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80088a0:	2380      	movs	r3, #128	; 0x80
 80088a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a6:	e20a      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a6b      	ldr	r2, [pc, #428]	; (8008a5c <UART_SetConfig+0x340>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d130      	bne.n	8008914 <UART_SetConfig+0x1f8>
 80088b2:	4b69      	ldr	r3, [pc, #420]	; (8008a58 <UART_SetConfig+0x33c>)
 80088b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	d826      	bhi.n	800890c <UART_SetConfig+0x1f0>
 80088be:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <UART_SetConfig+0x1a8>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	080088dd 	.word	0x080088dd
 80088c8:	080088e5 	.word	0x080088e5
 80088cc:	080088ed 	.word	0x080088ed
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	080088fd 	.word	0x080088fd
 80088d8:	08008905 	.word	0x08008905
 80088dc:	2300      	movs	r3, #0
 80088de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e2:	e1ec      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80088e4:	2304      	movs	r3, #4
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e1e8      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80088ec:	2308      	movs	r3, #8
 80088ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f2:	e1e4      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80088f4:	2310      	movs	r3, #16
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fa:	e1e0      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80088fc:	2320      	movs	r3, #32
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008902:	e1dc      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008904:	2340      	movs	r3, #64	; 0x40
 8008906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890a:	e1d8      	b.n	8008cbe <UART_SetConfig+0x5a2>
 800890c:	2380      	movs	r3, #128	; 0x80
 800890e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008912:	e1d4      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a51      	ldr	r2, [pc, #324]	; (8008a60 <UART_SetConfig+0x344>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d130      	bne.n	8008980 <UART_SetConfig+0x264>
 800891e:	4b4e      	ldr	r3, [pc, #312]	; (8008a58 <UART_SetConfig+0x33c>)
 8008920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	2b05      	cmp	r3, #5
 8008928:	d826      	bhi.n	8008978 <UART_SetConfig+0x25c>
 800892a:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <UART_SetConfig+0x214>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	08008949 	.word	0x08008949
 8008934:	08008951 	.word	0x08008951
 8008938:	08008959 	.word	0x08008959
 800893c:	08008961 	.word	0x08008961
 8008940:	08008969 	.word	0x08008969
 8008944:	08008971 	.word	0x08008971
 8008948:	2300      	movs	r3, #0
 800894a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894e:	e1b6      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008950:	2304      	movs	r3, #4
 8008952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008956:	e1b2      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008958:	2308      	movs	r3, #8
 800895a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895e:	e1ae      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008960:	2310      	movs	r3, #16
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008966:	e1aa      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008968:	2320      	movs	r3, #32
 800896a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896e:	e1a6      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008970:	2340      	movs	r3, #64	; 0x40
 8008972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008976:	e1a2      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008978:	2380      	movs	r3, #128	; 0x80
 800897a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897e:	e19e      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a37      	ldr	r2, [pc, #220]	; (8008a64 <UART_SetConfig+0x348>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d130      	bne.n	80089ec <UART_SetConfig+0x2d0>
 800898a:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <UART_SetConfig+0x33c>)
 800898c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	2b05      	cmp	r3, #5
 8008994:	d826      	bhi.n	80089e4 <UART_SetConfig+0x2c8>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <UART_SetConfig+0x280>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089b5 	.word	0x080089b5
 80089a0:	080089bd 	.word	0x080089bd
 80089a4:	080089c5 	.word	0x080089c5
 80089a8:	080089cd 	.word	0x080089cd
 80089ac:	080089d5 	.word	0x080089d5
 80089b0:	080089dd 	.word	0x080089dd
 80089b4:	2300      	movs	r3, #0
 80089b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ba:	e180      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80089bc:	2304      	movs	r3, #4
 80089be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c2:	e17c      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80089c4:	2308      	movs	r3, #8
 80089c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ca:	e178      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80089cc:	2310      	movs	r3, #16
 80089ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d2:	e174      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80089d4:	2320      	movs	r3, #32
 80089d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089da:	e170      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80089dc:	2340      	movs	r3, #64	; 0x40
 80089de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e2:	e16c      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80089e4:	2380      	movs	r3, #128	; 0x80
 80089e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ea:	e168      	b.n	8008cbe <UART_SetConfig+0x5a2>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1d      	ldr	r2, [pc, #116]	; (8008a68 <UART_SetConfig+0x34c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d142      	bne.n	8008a7c <UART_SetConfig+0x360>
 80089f6:	4b18      	ldr	r3, [pc, #96]	; (8008a58 <UART_SetConfig+0x33c>)
 80089f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fa:	f003 0307 	and.w	r3, r3, #7
 80089fe:	2b05      	cmp	r3, #5
 8008a00:	d838      	bhi.n	8008a74 <UART_SetConfig+0x358>
 8008a02:	a201      	add	r2, pc, #4	; (adr r2, 8008a08 <UART_SetConfig+0x2ec>)
 8008a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a08:	08008a21 	.word	0x08008a21
 8008a0c:	08008a29 	.word	0x08008a29
 8008a10:	08008a31 	.word	0x08008a31
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a6d 	.word	0x08008a6d
 8008a20:	2300      	movs	r3, #0
 8008a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a26:	e14a      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2e:	e146      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008a30:	2308      	movs	r3, #8
 8008a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a36:	e142      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008a38:	2310      	movs	r3, #16
 8008a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3e:	e13e      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008a40:	2320      	movs	r3, #32
 8008a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a46:	e13a      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008a48:	cfff69f3 	.word	0xcfff69f3
 8008a4c:	58000c00 	.word	0x58000c00
 8008a50:	11fff4ff 	.word	0x11fff4ff
 8008a54:	40011000 	.word	0x40011000
 8008a58:	58024400 	.word	0x58024400
 8008a5c:	40004400 	.word	0x40004400
 8008a60:	40004800 	.word	0x40004800
 8008a64:	40004c00 	.word	0x40004c00
 8008a68:	40005000 	.word	0x40005000
 8008a6c:	2340      	movs	r3, #64	; 0x40
 8008a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a72:	e124      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7a:	e120      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4acc      	ldr	r2, [pc, #816]	; (8008db4 <UART_SetConfig+0x698>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d176      	bne.n	8008b74 <UART_SetConfig+0x458>
 8008a86:	4bcc      	ldr	r3, [pc, #816]	; (8008db8 <UART_SetConfig+0x69c>)
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a8e:	2b28      	cmp	r3, #40	; 0x28
 8008a90:	d86c      	bhi.n	8008b6c <UART_SetConfig+0x450>
 8008a92:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <UART_SetConfig+0x37c>)
 8008a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a98:	08008b3d 	.word	0x08008b3d
 8008a9c:	08008b6d 	.word	0x08008b6d
 8008aa0:	08008b6d 	.word	0x08008b6d
 8008aa4:	08008b6d 	.word	0x08008b6d
 8008aa8:	08008b6d 	.word	0x08008b6d
 8008aac:	08008b6d 	.word	0x08008b6d
 8008ab0:	08008b6d 	.word	0x08008b6d
 8008ab4:	08008b6d 	.word	0x08008b6d
 8008ab8:	08008b45 	.word	0x08008b45
 8008abc:	08008b6d 	.word	0x08008b6d
 8008ac0:	08008b6d 	.word	0x08008b6d
 8008ac4:	08008b6d 	.word	0x08008b6d
 8008ac8:	08008b6d 	.word	0x08008b6d
 8008acc:	08008b6d 	.word	0x08008b6d
 8008ad0:	08008b6d 	.word	0x08008b6d
 8008ad4:	08008b6d 	.word	0x08008b6d
 8008ad8:	08008b4d 	.word	0x08008b4d
 8008adc:	08008b6d 	.word	0x08008b6d
 8008ae0:	08008b6d 	.word	0x08008b6d
 8008ae4:	08008b6d 	.word	0x08008b6d
 8008ae8:	08008b6d 	.word	0x08008b6d
 8008aec:	08008b6d 	.word	0x08008b6d
 8008af0:	08008b6d 	.word	0x08008b6d
 8008af4:	08008b6d 	.word	0x08008b6d
 8008af8:	08008b55 	.word	0x08008b55
 8008afc:	08008b6d 	.word	0x08008b6d
 8008b00:	08008b6d 	.word	0x08008b6d
 8008b04:	08008b6d 	.word	0x08008b6d
 8008b08:	08008b6d 	.word	0x08008b6d
 8008b0c:	08008b6d 	.word	0x08008b6d
 8008b10:	08008b6d 	.word	0x08008b6d
 8008b14:	08008b6d 	.word	0x08008b6d
 8008b18:	08008b5d 	.word	0x08008b5d
 8008b1c:	08008b6d 	.word	0x08008b6d
 8008b20:	08008b6d 	.word	0x08008b6d
 8008b24:	08008b6d 	.word	0x08008b6d
 8008b28:	08008b6d 	.word	0x08008b6d
 8008b2c:	08008b6d 	.word	0x08008b6d
 8008b30:	08008b6d 	.word	0x08008b6d
 8008b34:	08008b6d 	.word	0x08008b6d
 8008b38:	08008b65 	.word	0x08008b65
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b42:	e0bc      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008b44:	2304      	movs	r3, #4
 8008b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b4a:	e0b8      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008b4c:	2308      	movs	r3, #8
 8008b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b52:	e0b4      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008b54:	2310      	movs	r3, #16
 8008b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b5a:	e0b0      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008b5c:	2320      	movs	r3, #32
 8008b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b62:	e0ac      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008b64:	2340      	movs	r3, #64	; 0x40
 8008b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6a:	e0a8      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008b6c:	2380      	movs	r3, #128	; 0x80
 8008b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b72:	e0a4      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a90      	ldr	r2, [pc, #576]	; (8008dbc <UART_SetConfig+0x6a0>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d130      	bne.n	8008be0 <UART_SetConfig+0x4c4>
 8008b7e:	4b8e      	ldr	r3, [pc, #568]	; (8008db8 <UART_SetConfig+0x69c>)
 8008b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b82:	f003 0307 	and.w	r3, r3, #7
 8008b86:	2b05      	cmp	r3, #5
 8008b88:	d826      	bhi.n	8008bd8 <UART_SetConfig+0x4bc>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <UART_SetConfig+0x474>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008ba9 	.word	0x08008ba9
 8008b94:	08008bb1 	.word	0x08008bb1
 8008b98:	08008bb9 	.word	0x08008bb9
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bc9 	.word	0x08008bc9
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bae:	e086      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb6:	e082      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008bb8:	2308      	movs	r3, #8
 8008bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bbe:	e07e      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc6:	e07a      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bce:	e076      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008bd0:	2340      	movs	r3, #64	; 0x40
 8008bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd6:	e072      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008bd8:	2380      	movs	r3, #128	; 0x80
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bde:	e06e      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a76      	ldr	r2, [pc, #472]	; (8008dc0 <UART_SetConfig+0x6a4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d130      	bne.n	8008c4c <UART_SetConfig+0x530>
 8008bea:	4b73      	ldr	r3, [pc, #460]	; (8008db8 <UART_SetConfig+0x69c>)
 8008bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	d826      	bhi.n	8008c44 <UART_SetConfig+0x528>
 8008bf6:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <UART_SetConfig+0x4e0>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c1d 	.word	0x08008c1d
 8008c04:	08008c25 	.word	0x08008c25
 8008c08:	08008c2d 	.word	0x08008c2d
 8008c0c:	08008c35 	.word	0x08008c35
 8008c10:	08008c3d 	.word	0x08008c3d
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1a:	e050      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c22:	e04c      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c24:	2308      	movs	r3, #8
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2a:	e048      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c32:	e044      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c34:	2320      	movs	r3, #32
 8008c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3a:	e040      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c3c:	2340      	movs	r3, #64	; 0x40
 8008c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c42:	e03c      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c44:	2380      	movs	r3, #128	; 0x80
 8008c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4a:	e038      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a5c      	ldr	r2, [pc, #368]	; (8008dc4 <UART_SetConfig+0x6a8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d130      	bne.n	8008cb8 <UART_SetConfig+0x59c>
 8008c56:	4b58      	ldr	r3, [pc, #352]	; (8008db8 <UART_SetConfig+0x69c>)
 8008c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d826      	bhi.n	8008cb0 <UART_SetConfig+0x594>
 8008c62:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <UART_SetConfig+0x54c>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c81 	.word	0x08008c81
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008ca1 	.word	0x08008ca1
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	2302      	movs	r3, #2
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c86:	e01a      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e016      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c90:	2308      	movs	r3, #8
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c96:	e012      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9e:	e00e      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008ca0:	2320      	movs	r3, #32
 8008ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca6:	e00a      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008ca8:	2340      	movs	r3, #64	; 0x40
 8008caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cae:	e006      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb6:	e002      	b.n	8008cbe <UART_SetConfig+0x5a2>
 8008cb8:	2380      	movs	r3, #128	; 0x80
 8008cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a40      	ldr	r2, [pc, #256]	; (8008dc4 <UART_SetConfig+0x6a8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	f040 80ef 	bne.w	8008ea8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	dc46      	bgt.n	8008d60 <UART_SetConfig+0x644>
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	f2c0 8081 	blt.w	8008dda <UART_SetConfig+0x6be>
 8008cd8:	3b02      	subs	r3, #2
 8008cda:	2b1e      	cmp	r3, #30
 8008cdc:	d87d      	bhi.n	8008dda <UART_SetConfig+0x6be>
 8008cde:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <UART_SetConfig+0x5c8>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008d67 	.word	0x08008d67
 8008ce8:	08008ddb 	.word	0x08008ddb
 8008cec:	08008d6f 	.word	0x08008d6f
 8008cf0:	08008ddb 	.word	0x08008ddb
 8008cf4:	08008ddb 	.word	0x08008ddb
 8008cf8:	08008ddb 	.word	0x08008ddb
 8008cfc:	08008d7f 	.word	0x08008d7f
 8008d00:	08008ddb 	.word	0x08008ddb
 8008d04:	08008ddb 	.word	0x08008ddb
 8008d08:	08008ddb 	.word	0x08008ddb
 8008d0c:	08008ddb 	.word	0x08008ddb
 8008d10:	08008ddb 	.word	0x08008ddb
 8008d14:	08008ddb 	.word	0x08008ddb
 8008d18:	08008ddb 	.word	0x08008ddb
 8008d1c:	08008d8f 	.word	0x08008d8f
 8008d20:	08008ddb 	.word	0x08008ddb
 8008d24:	08008ddb 	.word	0x08008ddb
 8008d28:	08008ddb 	.word	0x08008ddb
 8008d2c:	08008ddb 	.word	0x08008ddb
 8008d30:	08008ddb 	.word	0x08008ddb
 8008d34:	08008ddb 	.word	0x08008ddb
 8008d38:	08008ddb 	.word	0x08008ddb
 8008d3c:	08008ddb 	.word	0x08008ddb
 8008d40:	08008ddb 	.word	0x08008ddb
 8008d44:	08008ddb 	.word	0x08008ddb
 8008d48:	08008ddb 	.word	0x08008ddb
 8008d4c:	08008ddb 	.word	0x08008ddb
 8008d50:	08008ddb 	.word	0x08008ddb
 8008d54:	08008ddb 	.word	0x08008ddb
 8008d58:	08008ddb 	.word	0x08008ddb
 8008d5c:	08008dcd 	.word	0x08008dcd
 8008d60:	2b40      	cmp	r3, #64	; 0x40
 8008d62:	d036      	beq.n	8008dd2 <UART_SetConfig+0x6b6>
 8008d64:	e039      	b.n	8008dda <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d66:	f7fe f941 	bl	8006fec <HAL_RCCEx_GetD3PCLK1Freq>
 8008d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d6c:	e03b      	b.n	8008de6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d6e:	f107 0314 	add.w	r3, r7, #20
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe f950 	bl	8007018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d7c:	e033      	b.n	8008de6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fa9c 	bl	80072c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d8c:	e02b      	b.n	8008de6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <UART_SetConfig+0x69c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d009      	beq.n	8008dae <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d9a:	4b07      	ldr	r3, [pc, #28]	; (8008db8 <UART_SetConfig+0x69c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	08db      	lsrs	r3, r3, #3
 8008da0:	f003 0303 	and.w	r3, r3, #3
 8008da4:	4a08      	ldr	r2, [pc, #32]	; (8008dc8 <UART_SetConfig+0x6ac>)
 8008da6:	fa22 f303 	lsr.w	r3, r2, r3
 8008daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dac:	e01b      	b.n	8008de6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008dae:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <UART_SetConfig+0x6ac>)
 8008db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008db2:	e018      	b.n	8008de6 <UART_SetConfig+0x6ca>
 8008db4:	40011400 	.word	0x40011400
 8008db8:	58024400 	.word	0x58024400
 8008dbc:	40007800 	.word	0x40007800
 8008dc0:	40007c00 	.word	0x40007c00
 8008dc4:	58000c00 	.word	0x58000c00
 8008dc8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dcc:	4bc4      	ldr	r3, [pc, #784]	; (80090e0 <UART_SetConfig+0x9c4>)
 8008dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dd0:	e009      	b.n	8008de6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dd8:	e005      	b.n	8008de6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008de4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 81da 	beq.w	80091a2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	4abc      	ldr	r2, [pc, #752]	; (80090e4 <UART_SetConfig+0x9c8>)
 8008df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e00:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	4613      	mov	r3, r2
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	6a3a      	ldr	r2, [r7, #32]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d305      	bcc.n	8008e1e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e18:	6a3a      	ldr	r2, [r7, #32]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d903      	bls.n	8008e26 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e24:	e1bd      	b.n	80091a2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f04f 0100 	mov.w	r1, #0
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	4aac      	ldr	r2, [pc, #688]	; (80090e4 <UART_SetConfig+0x9c8>)
 8008e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	f04f 0300 	mov.w	r3, #0
 8008e3e:	f7f7 fa4b 	bl	80002d8 <__aeabi_uldivmod>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4610      	mov	r0, r2
 8008e48:	4619      	mov	r1, r3
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	f04f 0300 	mov.w	r3, #0
 8008e52:	020b      	lsls	r3, r1, #8
 8008e54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e58:	0202      	lsls	r2, r0, #8
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	6849      	ldr	r1, [r1, #4]
 8008e5e:	0849      	lsrs	r1, r1, #1
 8008e60:	4608      	mov	r0, r1
 8008e62:	f04f 0100 	mov.w	r1, #0
 8008e66:	1814      	adds	r4, r2, r0
 8008e68:	eb43 0501 	adc.w	r5, r3, r1
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	461a      	mov	r2, r3
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fa2d 	bl	80002d8 <__aeabi_uldivmod>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4613      	mov	r3, r2
 8008e84:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e8c:	d308      	bcc.n	8008ea0 <UART_SetConfig+0x784>
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e94:	d204      	bcs.n	8008ea0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9c:	60da      	str	r2, [r3, #12]
 8008e9e:	e180      	b.n	80091a2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ea6:	e17c      	b.n	80091a2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eb0:	f040 80bf 	bne.w	8009032 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	dc49      	bgt.n	8008f50 <UART_SetConfig+0x834>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	db7c      	blt.n	8008fba <UART_SetConfig+0x89e>
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d87a      	bhi.n	8008fba <UART_SetConfig+0x89e>
 8008ec4:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <UART_SetConfig+0x7b0>)
 8008ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eca:	bf00      	nop
 8008ecc:	08008f57 	.word	0x08008f57
 8008ed0:	08008f5f 	.word	0x08008f5f
 8008ed4:	08008fbb 	.word	0x08008fbb
 8008ed8:	08008fbb 	.word	0x08008fbb
 8008edc:	08008f67 	.word	0x08008f67
 8008ee0:	08008fbb 	.word	0x08008fbb
 8008ee4:	08008fbb 	.word	0x08008fbb
 8008ee8:	08008fbb 	.word	0x08008fbb
 8008eec:	08008f77 	.word	0x08008f77
 8008ef0:	08008fbb 	.word	0x08008fbb
 8008ef4:	08008fbb 	.word	0x08008fbb
 8008ef8:	08008fbb 	.word	0x08008fbb
 8008efc:	08008fbb 	.word	0x08008fbb
 8008f00:	08008fbb 	.word	0x08008fbb
 8008f04:	08008fbb 	.word	0x08008fbb
 8008f08:	08008fbb 	.word	0x08008fbb
 8008f0c:	08008f87 	.word	0x08008f87
 8008f10:	08008fbb 	.word	0x08008fbb
 8008f14:	08008fbb 	.word	0x08008fbb
 8008f18:	08008fbb 	.word	0x08008fbb
 8008f1c:	08008fbb 	.word	0x08008fbb
 8008f20:	08008fbb 	.word	0x08008fbb
 8008f24:	08008fbb 	.word	0x08008fbb
 8008f28:	08008fbb 	.word	0x08008fbb
 8008f2c:	08008fbb 	.word	0x08008fbb
 8008f30:	08008fbb 	.word	0x08008fbb
 8008f34:	08008fbb 	.word	0x08008fbb
 8008f38:	08008fbb 	.word	0x08008fbb
 8008f3c:	08008fbb 	.word	0x08008fbb
 8008f40:	08008fbb 	.word	0x08008fbb
 8008f44:	08008fbb 	.word	0x08008fbb
 8008f48:	08008fbb 	.word	0x08008fbb
 8008f4c:	08008fad 	.word	0x08008fad
 8008f50:	2b40      	cmp	r3, #64	; 0x40
 8008f52:	d02e      	beq.n	8008fb2 <UART_SetConfig+0x896>
 8008f54:	e031      	b.n	8008fba <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f56:	f7fd f8dd 	bl	8006114 <HAL_RCC_GetPCLK1Freq>
 8008f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f5c:	e033      	b.n	8008fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f5e:	f7fd f8ef 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 8008f62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f64:	e02f      	b.n	8008fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f66:	f107 0314 	add.w	r3, r7, #20
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe f854 	bl	8007018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f74:	e027      	b.n	8008fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f76:	f107 0308 	add.w	r3, r7, #8
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe f9a0 	bl	80072c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f84:	e01f      	b.n	8008fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f86:	4b58      	ldr	r3, [pc, #352]	; (80090e8 <UART_SetConfig+0x9cc>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0320 	and.w	r3, r3, #32
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d009      	beq.n	8008fa6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f92:	4b55      	ldr	r3, [pc, #340]	; (80090e8 <UART_SetConfig+0x9cc>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	08db      	lsrs	r3, r3, #3
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	4a53      	ldr	r2, [pc, #332]	; (80090ec <UART_SetConfig+0x9d0>)
 8008f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fa4:	e00f      	b.n	8008fc6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008fa6:	4b51      	ldr	r3, [pc, #324]	; (80090ec <UART_SetConfig+0x9d0>)
 8008fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008faa:	e00c      	b.n	8008fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fac:	4b4c      	ldr	r3, [pc, #304]	; (80090e0 <UART_SetConfig+0x9c4>)
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fb0:	e009      	b.n	8008fc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fb8:	e005      	b.n	8008fc6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 80ea 	beq.w	80091a2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd2:	4a44      	ldr	r2, [pc, #272]	; (80090e4 <UART_SetConfig+0x9c8>)
 8008fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fe0:	005a      	lsls	r2, r3, #1
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	085b      	lsrs	r3, r3, #1
 8008fe8:	441a      	add	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	2b0f      	cmp	r3, #15
 8008ffa:	d916      	bls.n	800902a <UART_SetConfig+0x90e>
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009002:	d212      	bcs.n	800902a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	b29b      	uxth	r3, r3
 8009008:	f023 030f 	bic.w	r3, r3, #15
 800900c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	085b      	lsrs	r3, r3, #1
 8009012:	b29b      	uxth	r3, r3
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	b29a      	uxth	r2, r3
 800901a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800901c:	4313      	orrs	r3, r2
 800901e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009026:	60da      	str	r2, [r3, #12]
 8009028:	e0bb      	b.n	80091a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009030:	e0b7      	b.n	80091a2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009032:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009036:	2b20      	cmp	r3, #32
 8009038:	dc4a      	bgt.n	80090d0 <UART_SetConfig+0x9b4>
 800903a:	2b00      	cmp	r3, #0
 800903c:	f2c0 8086 	blt.w	800914c <UART_SetConfig+0xa30>
 8009040:	2b20      	cmp	r3, #32
 8009042:	f200 8083 	bhi.w	800914c <UART_SetConfig+0xa30>
 8009046:	a201      	add	r2, pc, #4	; (adr r2, 800904c <UART_SetConfig+0x930>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	080090d7 	.word	0x080090d7
 8009050:	080090f1 	.word	0x080090f1
 8009054:	0800914d 	.word	0x0800914d
 8009058:	0800914d 	.word	0x0800914d
 800905c:	080090f9 	.word	0x080090f9
 8009060:	0800914d 	.word	0x0800914d
 8009064:	0800914d 	.word	0x0800914d
 8009068:	0800914d 	.word	0x0800914d
 800906c:	08009109 	.word	0x08009109
 8009070:	0800914d 	.word	0x0800914d
 8009074:	0800914d 	.word	0x0800914d
 8009078:	0800914d 	.word	0x0800914d
 800907c:	0800914d 	.word	0x0800914d
 8009080:	0800914d 	.word	0x0800914d
 8009084:	0800914d 	.word	0x0800914d
 8009088:	0800914d 	.word	0x0800914d
 800908c:	08009119 	.word	0x08009119
 8009090:	0800914d 	.word	0x0800914d
 8009094:	0800914d 	.word	0x0800914d
 8009098:	0800914d 	.word	0x0800914d
 800909c:	0800914d 	.word	0x0800914d
 80090a0:	0800914d 	.word	0x0800914d
 80090a4:	0800914d 	.word	0x0800914d
 80090a8:	0800914d 	.word	0x0800914d
 80090ac:	0800914d 	.word	0x0800914d
 80090b0:	0800914d 	.word	0x0800914d
 80090b4:	0800914d 	.word	0x0800914d
 80090b8:	0800914d 	.word	0x0800914d
 80090bc:	0800914d 	.word	0x0800914d
 80090c0:	0800914d 	.word	0x0800914d
 80090c4:	0800914d 	.word	0x0800914d
 80090c8:	0800914d 	.word	0x0800914d
 80090cc:	0800913f 	.word	0x0800913f
 80090d0:	2b40      	cmp	r3, #64	; 0x40
 80090d2:	d037      	beq.n	8009144 <UART_SetConfig+0xa28>
 80090d4:	e03a      	b.n	800914c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090d6:	f7fd f81d 	bl	8006114 <HAL_RCC_GetPCLK1Freq>
 80090da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090dc:	e03c      	b.n	8009158 <UART_SetConfig+0xa3c>
 80090de:	bf00      	nop
 80090e0:	003d0900 	.word	0x003d0900
 80090e4:	08009980 	.word	0x08009980
 80090e8:	58024400 	.word	0x58024400
 80090ec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090f0:	f7fd f826 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 80090f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090f6:	e02f      	b.n	8009158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090f8:	f107 0314 	add.w	r3, r7, #20
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fd ff8b 	bl	8007018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009106:	e027      	b.n	8009158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009108:	f107 0308 	add.w	r3, r7, #8
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe f8d7 	bl	80072c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009116:	e01f      	b.n	8009158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009118:	4b2c      	ldr	r3, [pc, #176]	; (80091cc <UART_SetConfig+0xab0>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b00      	cmp	r3, #0
 8009122:	d009      	beq.n	8009138 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009124:	4b29      	ldr	r3, [pc, #164]	; (80091cc <UART_SetConfig+0xab0>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	08db      	lsrs	r3, r3, #3
 800912a:	f003 0303 	and.w	r3, r3, #3
 800912e:	4a28      	ldr	r2, [pc, #160]	; (80091d0 <UART_SetConfig+0xab4>)
 8009130:	fa22 f303 	lsr.w	r3, r2, r3
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009136:	e00f      	b.n	8009158 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009138:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <UART_SetConfig+0xab4>)
 800913a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800913c:	e00c      	b.n	8009158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800913e:	4b25      	ldr	r3, [pc, #148]	; (80091d4 <UART_SetConfig+0xab8>)
 8009140:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009142:	e009      	b.n	8009158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800914a:	e005      	b.n	8009158 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009156:	bf00      	nop
    }

    if (pclk != 0U)
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	2b00      	cmp	r3, #0
 800915c:	d021      	beq.n	80091a2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	4a1d      	ldr	r2, [pc, #116]	; (80091d8 <UART_SetConfig+0xabc>)
 8009164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009168:	461a      	mov	r2, r3
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	085b      	lsrs	r3, r3, #1
 8009176:	441a      	add	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009180:	b29b      	uxth	r3, r3
 8009182:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	2b0f      	cmp	r3, #15
 8009188:	d908      	bls.n	800919c <UART_SetConfig+0xa80>
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009190:	d204      	bcs.n	800919c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009198:	60da      	str	r2, [r3, #12]
 800919a:	e002      	b.n	80091a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80091be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3738      	adds	r7, #56	; 0x38
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bdb0      	pop	{r4, r5, r7, pc}
 80091ca:	bf00      	nop
 80091cc:	58024400 	.word	0x58024400
 80091d0:	03d09000 	.word	0x03d09000
 80091d4:	003d0900 	.word	0x003d0900
 80091d8:	08009980 	.word	0x08009980

080091dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924e:	f003 0308 	and.w	r3, r3, #8
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	f003 0310 	and.w	r3, r3, #16
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00a      	beq.n	800928e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	430a      	orrs	r2, r1
 80092ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01a      	beq.n	80092f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092da:	d10a      	bne.n	80092f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	605a      	str	r2, [r3, #4]
  }
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af02      	add	r7, sp, #8
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009330:	f7f8 fc1c 	bl	8001b6c <HAL_GetTick>
 8009334:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b08      	cmp	r3, #8
 8009342:	d10e      	bne.n	8009362 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f82f 	bl	80093b6 <UART_WaitOnFlagUntilTimeout>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e025      	b.n	80093ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b04      	cmp	r3, #4
 800936e:	d10e      	bne.n	800938e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f819 	bl	80093b6 <UART_WaitOnFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e00f      	b.n	80093ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2220      	movs	r2, #32
 8009392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	4613      	mov	r3, r2
 80093c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093c6:	e062      	b.n	800948e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ce:	d05e      	beq.n	800948e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093d0:	f7f8 fbcc 	bl	8001b6c <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d302      	bcc.n	80093e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d11d      	bne.n	8009422 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 0201 	bic.w	r2, r2, #1
 8009404:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2220      	movs	r2, #32
 8009412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e045      	b.n	80094ae <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d02e      	beq.n	800948e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800943a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800943e:	d126      	bne.n	800948e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009448:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009458:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689a      	ldr	r2, [r3, #8]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0201 	bic.w	r2, r2, #1
 8009468:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2220      	movs	r2, #32
 800946e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2220      	movs	r2, #32
 8009476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e00f      	b.n	80094ae <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69da      	ldr	r2, [r3, #28]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4013      	ands	r3, r2
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	429a      	cmp	r2, r3
 800949c:	bf0c      	ite	eq
 800949e:	2301      	moveq	r3, #1
 80094a0:	2300      	movne	r3, #0
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	461a      	mov	r2, r3
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d08d      	beq.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80094cc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80094dc:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
	...

080094f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800950a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6899      	ldr	r1, [r3, #8]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	4b0f      	ldr	r3, [pc, #60]	; (8009554 <UART_EndRxTransfer+0x60>)
 8009518:	400b      	ands	r3, r1
 800951a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009520:	2b01      	cmp	r3, #1
 8009522:	d107      	bne.n	8009534 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 0210 	bic.w	r2, r2, #16
 8009532:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2220      	movs	r2, #32
 8009538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	effffffe 	.word	0xeffffffe

08009558 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800956e:	d014      	beq.n	800959a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689a      	ldr	r2, [r3, #8]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009586:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009596:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009598:	e002      	b.n	80095a0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7f7 fcc8 	bl	8000f30 <HAL_UART_TxCpltCallback>
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f7ff f89a 	bl	80086f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095bc:	bf00      	nop
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ec:	2b80      	cmp	r3, #128	; 0x80
 80095ee:	d109      	bne.n	8009604 <UART_DMAError+0x40>
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	2b21      	cmp	r3, #33	; 0x21
 80095f4:	d106      	bne.n	8009604 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80095fe:	6978      	ldr	r0, [r7, #20]
 8009600:	f7ff ff59 	bl	80094b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960e:	2b40      	cmp	r3, #64	; 0x40
 8009610:	d109      	bne.n	8009626 <UART_DMAError+0x62>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b22      	cmp	r3, #34	; 0x22
 8009616:	d106      	bne.n	8009626 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2200      	movs	r2, #0
 800961c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009620:	6978      	ldr	r0, [r7, #20]
 8009622:	f7ff ff67 	bl	80094f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800962c:	f043 0210 	orr.w	r2, r3, #16
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009636:	6978      	ldr	r0, [r7, #20]
 8009638:	f7f7 fc8a 	bl	8000f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963c:	bf00      	nop
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7f7 fc74 	bl	8000f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009686:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2220      	movs	r2, #32
 800968c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7f7 fc4a 	bl	8000f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d101      	bne.n	80096f6 <HAL_UARTEx_EnableFifoMode+0x16>
 80096f2:	2302      	movs	r3, #2
 80096f4:	e02b      	b.n	800974e <HAL_UARTEx_EnableFifoMode+0x6e>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2224      	movs	r2, #36	; 0x24
 8009702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0201 	bic.w	r2, r2, #1
 800971c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009724:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800972c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f88a 	bl	8009850 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2220      	movs	r2, #32
 8009740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009766:	2b01      	cmp	r3, #1
 8009768:	d101      	bne.n	800976e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800976a:	2302      	movs	r3, #2
 800976c:	e02d      	b.n	80097ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2224      	movs	r2, #36	; 0x24
 800977a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0201 	bic.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f850 	bl	8009850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d101      	bne.n	80097ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097e6:	2302      	movs	r3, #2
 80097e8:	e02d      	b.n	8009846 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2224      	movs	r2, #36	; 0x24
 80097f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0201 	bic.w	r2, r2, #1
 8009810:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	430a      	orrs	r2, r1
 8009824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f812 	bl	8009850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800985c:	2b00      	cmp	r3, #0
 800985e:	d108      	bne.n	8009872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009870:	e031      	b.n	80098d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009872:	2310      	movs	r3, #16
 8009874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009876:	2310      	movs	r3, #16
 8009878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	0e5b      	lsrs	r3, r3, #25
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	0f5b      	lsrs	r3, r3, #29
 8009892:	b2db      	uxtb	r3, r3
 8009894:	f003 0307 	and.w	r3, r3, #7
 8009898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	7b3a      	ldrb	r2, [r7, #12]
 800989e:	4911      	ldr	r1, [pc, #68]	; (80098e4 <UARTEx_SetNbDataToProcess+0x94>)
 80098a0:	5c8a      	ldrb	r2, [r1, r2]
 80098a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098a6:	7b3a      	ldrb	r2, [r7, #12]
 80098a8:	490f      	ldr	r1, [pc, #60]	; (80098e8 <UARTEx_SetNbDataToProcess+0x98>)
 80098aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	7b7a      	ldrb	r2, [r7, #13]
 80098bc:	4909      	ldr	r1, [pc, #36]	; (80098e4 <UARTEx_SetNbDataToProcess+0x94>)
 80098be:	5c8a      	ldrb	r2, [r1, r2]
 80098c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098c4:	7b7a      	ldrb	r2, [r7, #13]
 80098c6:	4908      	ldr	r1, [pc, #32]	; (80098e8 <UARTEx_SetNbDataToProcess+0x98>)
 80098c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80098d6:	bf00      	nop
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	08009998 	.word	0x08009998
 80098e8:	080099a0 	.word	0x080099a0

080098ec <__libc_init_array>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	4d0d      	ldr	r5, [pc, #52]	; (8009924 <__libc_init_array+0x38>)
 80098f0:	4c0d      	ldr	r4, [pc, #52]	; (8009928 <__libc_init_array+0x3c>)
 80098f2:	1b64      	subs	r4, r4, r5
 80098f4:	10a4      	asrs	r4, r4, #2
 80098f6:	2600      	movs	r6, #0
 80098f8:	42a6      	cmp	r6, r4
 80098fa:	d109      	bne.n	8009910 <__libc_init_array+0x24>
 80098fc:	4d0b      	ldr	r5, [pc, #44]	; (800992c <__libc_init_array+0x40>)
 80098fe:	4c0c      	ldr	r4, [pc, #48]	; (8009930 <__libc_init_array+0x44>)
 8009900:	f000 f820 	bl	8009944 <_init>
 8009904:	1b64      	subs	r4, r4, r5
 8009906:	10a4      	asrs	r4, r4, #2
 8009908:	2600      	movs	r6, #0
 800990a:	42a6      	cmp	r6, r4
 800990c:	d105      	bne.n	800991a <__libc_init_array+0x2e>
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	f855 3b04 	ldr.w	r3, [r5], #4
 8009914:	4798      	blx	r3
 8009916:	3601      	adds	r6, #1
 8009918:	e7ee      	b.n	80098f8 <__libc_init_array+0xc>
 800991a:	f855 3b04 	ldr.w	r3, [r5], #4
 800991e:	4798      	blx	r3
 8009920:	3601      	adds	r6, #1
 8009922:	e7f2      	b.n	800990a <__libc_init_array+0x1e>
 8009924:	080099b0 	.word	0x080099b0
 8009928:	080099b0 	.word	0x080099b0
 800992c:	080099b0 	.word	0x080099b0
 8009930:	080099b4 	.word	0x080099b4

08009934 <memset>:
 8009934:	4402      	add	r2, r0
 8009936:	4603      	mov	r3, r0
 8009938:	4293      	cmp	r3, r2
 800993a:	d100      	bne.n	800993e <memset+0xa>
 800993c:	4770      	bx	lr
 800993e:	f803 1b01 	strb.w	r1, [r3], #1
 8009942:	e7f9      	b.n	8009938 <memset+0x4>

08009944 <_init>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	bf00      	nop
 8009948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994a:	bc08      	pop	{r3}
 800994c:	469e      	mov	lr, r3
 800994e:	4770      	bx	lr

08009950 <_fini>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	bf00      	nop
 8009954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009956:	bc08      	pop	{r3}
 8009958:	469e      	mov	lr, r3
 800995a:	4770      	bx	lr
