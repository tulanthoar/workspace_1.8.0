
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096b4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  080099a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010080  24000040  080099d0  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240100c0  080099d0  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001db24  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fcf  00000000  00000000  0003db7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00040b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  00041920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374ed  00000000  00000000  00042618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013162  00000000  00000000  00079b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f74f  00000000  00000000  0008cc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec3b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038fc  00000000  00000000  001ec40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009934 	.word	0x08009934

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009934 	.word	0x08009934

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af02      	add	r7, sp, #8
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80005da:	817b      	strh	r3, [r7, #10]
	unsigned short rxOffset = rxCount / 2;
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	813b      	strh	r3, [r7, #8]
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < txCount; ++i ){
 80005e8:	2300      	movs	r3, #0
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ec:	e00f      	b.n	800060e <main+0x3e>
	  aTxBuffer[i] = i % 16384;
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4a9b      	ldr	r2, [pc, #620]	; (8000870 <main+0x2a0>)
 8000602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	3301      	adds	r3, #1
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4b97      	ldr	r3, [pc, #604]	; (8000874 <main+0x2a4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b91      	ldr	r3, [pc, #580]	; (8000874 <main+0x2a4>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b8c      	ldr	r3, [pc, #560]	; (8000874 <main+0x2a4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a8b      	ldr	r2, [pc, #556]	; (8000874 <main+0x2a4>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 fa44 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 fa1c 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fb92 	bl	8000d8c <MX_GPIO_Init>
  HAL_EnableCompensationCell();
 8000668:	f001 fb00 	bl	8001c6c <HAL_EnableCompensationCell>
  MX_DMA_Init();
 800066c:	f000 fb4e 	bl	8000d0c <MX_DMA_Init>
  //  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8000670:	f000 faf2 	bl	8000c58 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000674:	f000 fa98 	bl	8000ba8 <MX_SPI1_Init>
//  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */

  while(UserButtonStatus == 0)
 8000678:	e005      	b.n	8000686 <main+0xb6>
  {
    BSP_LED_Toggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f001 f8d0 	bl	8001820 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f001 fac3 	bl	8001c0c <HAL_Delay>
  while(UserButtonStatus == 0)
 8000686:	4b7c      	ldr	r3, [pc, #496]	; (8000878 <main+0x2a8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <main+0xaa>
  }
  UserButtonStatus = 0;
 800068e:	4b7a      	ldr	r3, [pc, #488]	; (8000878 <main+0x2a8>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f001 faae 	bl	8001bf4 <HAL_GetTick>
 8000698:	6038      	str	r0, [r7, #0]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
 800069e:	e030      	b.n	8000702 <main+0x132>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	4873      	ldr	r0, [pc, #460]	; (800087c <main+0x2ac>)
 80006ae:	f008 fe7a 	bl	80093a6 <UART_WaitOnFlagUntilTimeout>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xec>
      {
        return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e1da      	b.n	8000a72 <main+0x4a2>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006bc:	4a6c      	ldr	r2, [pc, #432]	; (8000870 <main+0x2a0>)
 80006be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b6d      	ldr	r3, [pc, #436]	; (800087c <main+0x2ac>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4868      	ldr	r0, [pc, #416]	; (800087c <main+0x2ac>)
 80006dc:	f008 fe63 	bl	80093a6 <UART_WaitOnFlagUntilTimeout>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0x11a>
      {
        return HAL_TIMEOUT;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e1c3      	b.n	8000a72 <main+0x4a2>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006ea:	4a61      	ldr	r2, [pc, #388]	; (8000870 <main+0x2a0>)
 80006ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b61      	ldr	r3, [pc, #388]	; (800087c <main+0x2ac>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 80006fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fe:	3301      	adds	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
 8000702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000708:	d3ca      	bcc.n	80006a0 <main+0xd0>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 800070a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4859      	ldr	r0, [pc, #356]	; (800087c <main+0x2ac>)
 8000718:	f008 fe45 	bl	80093a6 <UART_WaitOnFlagUntilTimeout>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x156>
  {
    return HAL_TIMEOUT;
 8000722:	2303      	movs	r3, #3
 8000724:	e1a5      	b.n	8000a72 <main+0x4a2>
  }
  BSP_LED_Off(LED1);
 8000726:	2000      	movs	r0, #0
 8000728:	f001 f850 	bl	80017cc <BSP_LED_Off>
  while(UserButtonStatus == 0)
 800072c:	e005      	b.n	800073a <main+0x16a>
  {
    BSP_LED_Toggle(LED2);
 800072e:	2001      	movs	r0, #1
 8000730:	f001 f876 	bl	8001820 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 fa69 	bl	8001c0c <HAL_Delay>
  while(UserButtonStatus == 0)
 800073a:	4b4f      	ldr	r3, [pc, #316]	; (8000878 <main+0x2a8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f5      	beq.n	800072e <main+0x15e>
  }
  UserButtonStatus = 0;
 8000742:	4b4d      	ldr	r3, [pc, #308]	; (8000878 <main+0x2a8>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
  UartReady = RESET;
 8000748:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <main+0x2b0>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED1);
 800074e:	2000      	movs	r0, #0
 8000750:	f001 f83c 	bl	80017cc <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000754:	2001      	movs	r0, #1
 8000756:	f001 f839 	bl	80017cc <BSP_LED_Off>
    /* Process Locked */
    __HAL_LOCK(&hspi1);
 800075a:	4b4a      	ldr	r3, [pc, #296]	; (8000884 <main+0x2b4>)
 800075c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000760:	2b01      	cmp	r3, #1
 8000762:	d101      	bne.n	8000768 <main+0x198>
 8000764:	2302      	movs	r3, #2
 8000766:	e184      	b.n	8000a72 <main+0x4a2>
 8000768:	4b46      	ldr	r3, [pc, #280]	; (8000884 <main+0x2b4>)
 800076a:	2201      	movs	r2, #1
 800076c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Configure communication direction : 1Line */
    if (hspi1.Init.Direction == SPI_DIRECTION_1LINE)
 8000770:	4b44      	ldr	r3, [pc, #272]	; (8000884 <main+0x2b4>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000778:	d107      	bne.n	800078a <main+0x1ba>
    {
      SPI_1LINE_RX(&hspi1);
 800077a:	4b42      	ldr	r3, [pc, #264]	; (8000884 <main+0x2b4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b40      	ldr	r3, [pc, #256]	; (8000884 <main+0x2b4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000788:	601a      	str	r2, [r3, #0]
    }

    /* Clear RXDMAEN bit */
    CLEAR_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800078a:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <main+0x2b4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <main+0x2b4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000798:	609a      	str	r2, [r3, #8]

    /* Set the SPI Rx DMA transfer complete callback */
    hspi1.hdmarx->XferCpltCallback = tx_complete;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <main+0x2b4>)
 800079c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800079e:	4a3a      	ldr	r2, [pc, #232]	; (8000888 <main+0x2b8>)
 80007a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <main+0x2b4>)
 80007a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007a6:	4a39      	ldr	r2, [pc, #228]	; (800088c <main+0x2bc>)
 80007a8:	641a      	str	r2, [r3, #64]	; 0x40

    MODIFY_REG(((DMA_Stream_TypeDef   *)hdma_spi1_rx.Instance)->CR, (DMA_IT_TC | DMA_IT_HT), (DMA_IT_TC | DMA_IT_HT));
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <main+0x2c0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <main+0x2c0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0218 	orr.w	r2, r2, #24
 80007b8:	601a      	str	r2, [r3, #0]
    /* Enable the Rx DMA Stream/Channel  */
    if (HAL_OK != HAL_DMA_Start(hspi1.hdmarx, (uint32_t)&hspi1.Instance->RXDR, (uint32_t)aRxBuffer, rxCount))
 80007ba:	4b32      	ldr	r3, [pc, #200]	; (8000884 <main+0x2b4>)
 80007bc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <main+0x2b4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3330      	adds	r3, #48	; 0x30
 80007c4:	4619      	mov	r1, r3
 80007c6:	4a33      	ldr	r2, [pc, #204]	; (8000894 <main+0x2c4>)
 80007c8:	897b      	ldrh	r3, [r7, #10]
 80007ca:	f001 fecb 	bl	8002564 <HAL_DMA_Start>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00d      	beq.n	80007f0 <main+0x220>
    {
      /* Update SPI error code */
      SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <main+0x2b4>)
 80007d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <main+0x2b4>)
 80007e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      hspi1.State = HAL_SPI_STATE_READY;
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <main+0x2b4>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      Error_Handler();
 80007ec:	f000 fc05 	bl	8000ffa <Error_Handler>
    }

      MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <main+0x2b4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6859      	ldr	r1, [r3, #4]
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <main+0x2b4>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <main+0x2c8>)
 80007fc:	400b      	ands	r3, r1
 80007fe:	6053      	str	r3, [r2, #4]

    /* Enable Rx DMA Request */
    SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <main+0x2b4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <main+0x2b4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800080e:	609a      	str	r2, [r3, #8]

    /* Enable the SPI Error Interrupt Bit */
    __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <main+0x2b4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	691a      	ldr	r2, [r3, #16]
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <main+0x2b4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800081e:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi1);
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <main+0x2b4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0x2b4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0201 	orr.w	r2, r2, #1
 800082e:	601a      	str	r2, [r3, #0]

      SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <main+0x2b4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <main+0x2b4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800083e:	601a      	str	r2, [r3, #0]

  while (wTransferState != TRANSFER_H_COMPLETE)
 8000840:	e002      	b.n	8000848 <main+0x278>
  {
	    BSP_LED_Toggle(LED3);
 8000842:	2002      	movs	r0, #2
 8000844:	f000 ffec 	bl	8001820 <BSP_LED_Toggle>
  while (wTransferState != TRANSFER_H_COMPLETE)
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <main+0x2cc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d1f8      	bne.n	8000842 <main+0x272>
  }
  wTransferState = TRANSFER_WAIT;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <main+0x2cc>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
  int j = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  aTxBuffer[0] = aRxBuffer[0];
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <main+0x2c4>)
 800085c:	881a      	ldrh	r2, [r3, #0]
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <main+0x2a0>)
 8000860:	801a      	strh	r2, [r3, #0]
  for( int i = 1; i < txCount; ++i){
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
 8000866:	e03f      	b.n	80008e8 <main+0x318>
	  for( int k = 0; k < 5; ++k, ++j){
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	e02e      	b.n	80008cc <main+0x2fc>
 800086e:	bf00      	nop
 8000870:	24000080 	.word	0x24000080
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	24000060 	.word	0x24000060
 800087c:	2400f90c 	.word	0x2400f90c
 8000880:	2400005c 	.word	0x2400005c
 8000884:	2400ff24 	.word	0x2400ff24
 8000888:	08000f61 	.word	0x08000f61
 800088c:	08000f81 	.word	0x08000f81
 8000890:	2400ffac 	.word	0x2400ffac
 8000894:	24000880 	.word	0x24000880
 8000898:	ffff0000 	.word	0xffff0000
 800089c:	2400f880 	.word	0x2400f880
		  yi[j] = aRxBuffer[j] * 1.0;
 80008a0:	4a76      	ldr	r2, [pc, #472]	; (8000a7c <main+0x4ac>)
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008b4:	4a72      	ldr	r2, [pc, #456]	; (8000a80 <main+0x4b0>)
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	edc3 7a00 	vstr	s15, [r3]
	  for( int k = 0; k < 5; ++k, ++j){
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	3301      	adds	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	3301      	adds	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	dde6      	ble.n	80008a0 <main+0x2d0>
	  }
	  aTxBuffer[i] = aRxBuffer[j];
 80008d2:	4a6a      	ldr	r2, [pc, #424]	; (8000a7c <main+0x4ac>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008da:	4a6a      	ldr	r2, [pc, #424]	; (8000a84 <main+0x4b4>)
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 1; i < txCount; ++i){
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	3301      	adds	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	6a3a      	ldr	r2, [r7, #32]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbbb      	blt.n	8000868 <main+0x298>
  }
  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 80008f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f4:	4963      	ldr	r1, [pc, #396]	; (8000a84 <main+0x4b4>)
 80008f6:	4864      	ldr	r0, [pc, #400]	; (8000a88 <main+0x4b8>)
 80008f8:	f007 fbb8 	bl	800806c <HAL_UART_Transmit_DMA>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <main+0x338>
  {
    Error_Handler();
 8000902:	f000 fb7a 	bl	8000ffa <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (wTransferState != TRANSFER_COMPLETE) {}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <main+0x4bc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d1fb      	bne.n	800090a <main+0x33a>
	  wTransferState = TRANSFER_WAIT;
 8000912:	4b5e      	ldr	r3, [pc, #376]	; (8000a8c <main+0x4bc>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
	  j = rxOffset;
 8000918:	893b      	ldrh	r3, [r7, #8]
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[j];
 800091c:	4a57      	ldr	r2, [pc, #348]	; (8000a7c <main+0x4ac>)
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000924:	4b57      	ldr	r3, [pc, #348]	; (8000a84 <main+0x4b4>)
 8000926:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i ){
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	e026      	b.n	800097c <main+0x3ac>
		  for( int k = 0; k < 5; ++k, ++j){
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e015      	b.n	8000960 <main+0x390>
			  yi[j] = aRxBuffer[j] * 1.0;
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <main+0x4ac>)
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000944:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000948:	4a4d      	ldr	r2, [pc, #308]	; (8000a80 <main+0x4b0>)
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < 5; ++k, ++j){
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	3301      	adds	r3, #1
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	3301      	adds	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	2b04      	cmp	r3, #4
 8000964:	dde6      	ble.n	8000934 <main+0x364>
		  }
		  aTxBuffer[i] = aRxBuffer[j];
 8000966:	4a45      	ldr	r2, [pc, #276]	; (8000a7c <main+0x4ac>)
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800096e:	4a45      	ldr	r2, [pc, #276]	; (8000a84 <main+0x4b4>)
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i ){
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	3301      	adds	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbd4      	blt.n	800092e <main+0x35e>
	  }
	  while ((UartReady == RESET)) {}
 8000984:	bf00      	nop
 8000986:	4b42      	ldr	r3, [pc, #264]	; (8000a90 <main+0x4c0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0fa      	beq.n	8000986 <main+0x3b6>
	  UartReady = RESET;
 8000990:	4b3f      	ldr	r3, [pc, #252]	; (8000a90 <main+0x4c0>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
	  MODIFY_REG(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT | DMA_SxCR_EN), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_SxCR_EN));
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <main+0x4c4>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f023 031f 	bic.w	r3, r3, #31
 800099e:	4a3d      	ldr	r2, [pc, #244]	; (8000a94 <main+0x4c4>)
 80009a0:	f043 0317 	orr.w	r3, r3, #23
 80009a4:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->ICR, UART_CLEAR_TCF);
 80009a6:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <main+0x4c8>)
 80009a8:	6a1b      	ldr	r3, [r3, #32]
 80009aa:	4a3b      	ldr	r2, [pc, #236]	; (8000a98 <main+0x4c8>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	6213      	str	r3, [r2, #32]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 80009b2:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <main+0x4c8>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	4a38      	ldr	r2, [pc, #224]	; (8000a98 <main+0x4c8>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6093      	str	r3, [r2, #8]

	  while (wTransferState != TRANSFER_H_COMPLETE) {}
 80009be:	bf00      	nop
 80009c0:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <main+0x4bc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d1fb      	bne.n	80009c0 <main+0x3f0>
	  wTransferState = TRANSFER_WAIT;
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <main+0x4bc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
	  j = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[0];
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <main+0x4ac>)
 80009d4:	881a      	ldrh	r2, [r3, #0]
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <main+0x4b4>)
 80009d8:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i){
 80009da:	2301      	movs	r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	e026      	b.n	8000a2e <main+0x45e>
		  for( int k = 0; k < 5; ++k, ++j){
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	e015      	b.n	8000a12 <main+0x442>
			  yi[j] = aRxBuffer[j] * 1.0;
 80009e6:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <main+0x4ac>)
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ee:	ee07 3a90 	vmov	s15, r3
 80009f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009fa:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <main+0x4b0>)
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < 5; ++k, ++j){
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	3301      	adds	r3, #1
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	dde6      	ble.n	80009e6 <main+0x416>
		  }
		  aTxBuffer[i] = aRxBuffer[j];
 8000a18:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <main+0x4ac>)
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a20:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <main+0x4b4>)
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i){
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dbd4      	blt.n	80009e0 <main+0x410>
	  }

	  while ((UartReady == RESET)) {}
 8000a36:	bf00      	nop
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <main+0x4c0>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0fa      	beq.n	8000a38 <main+0x468>
	  UartReady = RESET;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <main+0x4c0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
	  /*##-2- Start the transmission process #####################################*/
	  MODIFY_REG(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT | DMA_SxCR_EN), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_SxCR_EN));
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <main+0x4c4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f023 031f 	bic.w	r3, r3, #31
 8000a50:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <main+0x4c4>)
 8000a52:	f043 0317 	orr.w	r3, r3, #23
 8000a56:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->ICR, UART_CLEAR_TCF);
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <main+0x4c8>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <main+0x4c8>)
 8000a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a62:	6213      	str	r3, [r2, #32]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <main+0x4c8>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <main+0x4c8>)
 8000a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6e:	6093      	str	r3, [r2, #8]
	  while (wTransferState != TRANSFER_COMPLETE) {}
 8000a70:	e74a      	b.n	8000908 <main+0x338>
  }
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24000880 	.word	0x24000880
 8000a80:	24005880 	.word	0x24005880
 8000a84:	24000080 	.word	0x24000080
 8000a88:	2400f90c 	.word	0x2400f90c
 8000a8c:	2400f880 	.word	0x2400f880
 8000a90:	2400005c 	.word	0x2400005c
 8000a94:	40020028 	.word	0x40020028
 8000a98:	40004800 	.word	0x40004800

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	; 0x70
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	224c      	movs	r2, #76	; 0x4c
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 ff3a 	bl	8009924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 ff34 	bl	8009924 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000abc:	2002      	movs	r0, #2
 8000abe:	f004 fb81 	bl	80051c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <SystemClock_Config+0x100>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <SystemClock_Config+0x100>)
 8000acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <SystemClock_Config+0x100>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <SystemClock_Config+0x104>)
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <SystemClock_Config+0x104>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <SystemClock_Config+0x104>)
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af4:	bf00      	nop
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <SystemClock_Config+0x100>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b02:	d1f8      	bne.n	8000af6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <SystemClock_Config+0x108>)
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	f023 0303 	bic.w	r3, r3, #3
 8000b0c:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <SystemClock_Config+0x108>)
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b14:	2321      	movs	r3, #33	; 0x21
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b26:	2302      	movs	r3, #2
 8000b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 115;
 8000b2e:	2373      	movs	r3, #115	; 0x73
 8000b30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b36:	2304      	movs	r3, #4
 8000b38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b3e:	230c      	movs	r3, #12
 8000b40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 fb72 	bl	8005238 <HAL_RCC_OscConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b5a:	f000 fa4e 	bl	8000ffa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5e:	233f      	movs	r3, #63	; 0x3f
 8000b60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b62:	2303      	movs	r3, #3
 8000b64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b6e:	2340      	movs	r3, #64	; 0x40
 8000b70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b7c:	2340      	movs	r3, #64	; 0x40
 8000b7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2104      	movs	r1, #4
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 ff67 	bl	8005a58 <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000b90:	f000 fa33 	bl	8000ffa <Error_Handler>
  }


}
 8000b94:	bf00      	nop
 8000b96:	3770      	adds	r7, #112	; 0x70
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58024800 	.word	0x58024800
 8000ba0:	58000400 	.word	0x58000400
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bae:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <MX_SPI1_Init+0xac>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bbc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bc0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bc4:	220d      	movs	r2, #13
 8000bc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c24:	2220      	movs	r2, #32
 8000c26:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_SPI1_Init+0xa8>)
 8000c3c:	f006 fdfa 	bl	8007834 <HAL_SPI_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c46:	f000 f9d8 	bl	8000ffa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2400ff24 	.word	0x2400ff24
 8000c54:	40013000 	.word	0x40013000

08000c58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c5e:	4a29      	ldr	r2, [pc, #164]	; (8000d04 <MX_USART3_UART_Init+0xac>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11978688;
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c64:	4a28      	ldr	r2, [pc, #160]	; (8000d08 <MX_USART3_UART_Init+0xb0>)
 8000c66:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c68:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000ca8:	f007 f98f 	bl	8007fca <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000cb2:	f000 f9a2 	bl	8000ffa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4811      	ldr	r0, [pc, #68]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000cba:	f008 fd44 	bl	8009746 <HAL_UARTEx_SetTxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000cc4:	f000 f999 	bl	8000ffa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000ccc:	f008 fd79 	bl	80097c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000cd6:	f000 f990 	bl	8000ffa <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000cda:	4809      	ldr	r0, [pc, #36]	; (8000d00 <MX_USART3_UART_Init+0xa8>)
 8000cdc:	f008 fcf8 	bl	80096d0 <HAL_UARTEx_EnableFifoMode>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000ce6:	f000 f988 	bl	8000ffa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2100      	movs	r1, #0
 8000cee:	2027      	movs	r0, #39	; 0x27
 8000cf0:	f001 f8a7 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf4:	2027      	movs	r0, #39	; 0x27
 8000cf6:	f001 f8be 	bl	8001e76 <HAL_NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2400f90c 	.word	0x2400f90c
 8000d04:	40004800 	.word	0x40004800
 8000d08:	00b6c7c0 	.word	0x00b6c7c0

08000d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_DMA_Init+0x7c>)
 8000d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <MX_DMA_Init+0x7c>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_DMA_Init+0x7c>)
 8000d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_DMA_Init+0x7c>)
 8000d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <MX_DMA_Init+0x7c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_DMA_Init+0x7c>)
 8000d42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2100      	movs	r1, #0
 8000d52:	200b      	movs	r0, #11
 8000d54:	f001 f875 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d58:	200b      	movs	r0, #11
 8000d5a:	f001 f88c 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2100      	movs	r1, #0
 8000d62:	200c      	movs	r0, #12
 8000d64:	f001 f86d 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d68:	200c      	movs	r0, #12
 8000d6a:	f001 f884 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2100      	movs	r1, #0
 8000d72:	2038      	movs	r0, #56	; 0x38
 8000d74:	f001 f865 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d78:	2038      	movs	r0, #56	; 0x38
 8000d7a:	f001 f87c 	bl	8001e76 <HAL_NVIC_EnableIRQ>

}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	58024400 	.word	0x58024400

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	4a55      	ldr	r2, [pc, #340]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db2:	4b53      	ldr	r3, [pc, #332]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc0:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	4a4e      	ldr	r2, [pc, #312]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b48      	ldr	r3, [pc, #288]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dee:	4b44      	ldr	r3, [pc, #272]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	4a3f      	ldr	r2, [pc, #252]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a37      	ldr	r2, [pc, #220]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e38:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	4a30      	ldr	r2, [pc, #192]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	4a28      	ldr	r2, [pc, #160]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_GPIO_Init+0x174>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e7a:	4822      	ldr	r0, [pc, #136]	; (8000f04 <MX_GPIO_Init+0x178>)
 8000e7c:	f004 f954 	bl	8005128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2102      	movs	r1, #2
 8000e84:	4820      	ldr	r0, [pc, #128]	; (8000f08 <MX_GPIO_Init+0x17c>)
 8000e86:	f004 f94f 	bl	8005128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481b      	ldr	r0, [pc, #108]	; (8000f0c <MX_GPIO_Init+0x180>)
 8000ea0:	f003 ff92 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ea4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_GPIO_Init+0x178>)
 8000ebe:	f003 ff83 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <MX_GPIO_Init+0x17c>)
 8000eda:	f003 ff75 	bl	8004dc8 <HAL_GPIO_Init>

  BSP_LED_Init(LED1);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 fbd4 	bl	800168c <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f000 fbd1 	bl	800168c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000eea:	2002      	movs	r0, #2
 8000eec:	f000 fbce 	bl	800168c <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 fcbe 	bl	8001874 <BSP_PB_Init>
}
 8000ef8:	bf00      	nop
 8000efa:	3730      	adds	r7, #48	; 0x30
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020400 	.word	0x58020400
 8000f08:	58021000 	.word	0x58021000
 8000f0c:	58020800 	.word	0x58020800

08000f10 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f20:	d105      	bne.n	8000f2e <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f083 0301 	eor.w	r3, r3, #1
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f2c:	6013      	str	r3, [r2, #0]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	24000060 	.word	0x24000060

08000f40 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Turn LED1 on: Transfer in transmission process is complete */
  BSP_LED_On(LED1);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 fc15 	bl	8001778 <BSP_LED_On>
  wTransferState = TRANSFER_COMPLETE;
 8000f4e:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_SPI_RxCpltCallback+0x1c>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2400f880 	.word	0x2400f880

08000f60 <tx_complete>:

void tx_complete(DMA_HandleTypeDef *hdma)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
	  BSP_LED_On(LED1);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f000 fc05 	bl	8001778 <BSP_LED_On>
	  wTransferState = TRANSFER_COMPLETE;
 8000f6e:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <tx_complete+0x1c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2400f880 	.word	0x2400f880

08000f80 <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
	  BSP_LED_On(LED1);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 fbf5 	bl	8001778 <BSP_LED_On>
	  wTransferState = TRANSFER_H_COMPLETE;
 8000f8e:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <tx_h_complete+0x1c>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2400f880 	.word	0x2400f880

08000fa0 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <HAL_SPI_ErrorCallback+0x1c>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	601a      	str	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	2400f880 	.word	0x2400f880

08000fc0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <HAL_UART_TxCpltCallback+0x1c>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
  /* Turn LED2 off: Transfer in transmission process is correct */
  BSP_LED_On(LED2);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 fbd2 	bl	8001778 <BSP_LED_On>

}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2400005c 	.word	0x2400005c

08000fe0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f000 fbc5 	bl	8001778 <BSP_LED_On>
  Error_Handler();
 8000fee:	f000 f804 	bl	8000ffa <Error_Handler>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffe:	b672      	cpsid	i
}
 8001000:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8001002:	2002      	movs	r0, #2
 8001004:	f000 fc0c 	bl	8001820 <BSP_LED_Toggle>
	    HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	; 0x64
 800100a:	f000 fdff 	bl	8001c0c <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 800100e:	e7f8      	b.n	8001002 <Error_Handler+0x8>

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x30>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x30>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x30>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58024400 	.word	0x58024400

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0bc      	sub	sp, #240	; 0xf0
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	22bc      	movs	r2, #188	; 0xbc
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f008 fc5d 	bl	8009924 <memset>
  if(hspi->Instance==SPI1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4aa0      	ldr	r2, [pc, #640]	; (80012f0 <HAL_SPI_MspInit+0x2ac>)
 8001070:	4293      	cmp	r3, r2
 8001072:	f040 8096 	bne.w	80011a2 <HAL_SPI_MspInit+0x15e>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	623b      	str	r3, [r7, #32]
      PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	67fb      	str	r3, [r7, #124]	; 0x7c
      PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001082:	2304      	movs	r3, #4
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
      PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8001086:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
      PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 800108c:	2308      	movs	r3, #8
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
      PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001090:	2302      	movs	r3, #2
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
      PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001094:	2302      	movs	r3, #2
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
      PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001098:	2340      	movs	r3, #64	; 0x40
 800109a:	63bb      	str	r3, [r7, #56]	; 0x38
      PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800109c:	2300      	movs	r3, #0
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
      PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	4618      	mov	r0, r3
 80010aa:	f005 f861 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_SPI_MspInit+0x74>
      {
        Error_Handler();
 80010b4:	f7ff ffa1 	bl	8000ffa <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 80010b8:	4b8e      	ldr	r3, [pc, #568]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 80010ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010be:	4a8d      	ldr	r2, [pc, #564]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 80010c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010c8:	4b8a      	ldr	r3, [pc, #552]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 80010ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b87      	ldr	r3, [pc, #540]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	4a85      	ldr	r2, [pc, #532]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e6:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	69bb      	ldr	r3, [r7, #24]
      /**SPI1 GPIO Configuration
      PA5     ------> SPI1_SCK
      PA6     ------> SPI1_MISO
      PA15 (JTDI)     ------> SPI1_NSS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 80010f4:	f248 0360 	movw	r3, #32864	; 0x8060
 80010f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800110e:	2305      	movs	r3, #5
 8001110:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001118:	4619      	mov	r1, r3
 800111a:	4877      	ldr	r0, [pc, #476]	; (80012f8 <HAL_SPI_MspInit+0x2b4>)
 800111c:	f003 fe54 	bl	8004dc8 <HAL_GPIO_Init>

      /* SPI1 DMA Init */
      /* SPI1_RX Init */
      hdma_spi1_rx.Instance = DMA2_Stream0;
 8001120:	4b76      	ldr	r3, [pc, #472]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 8001122:	4a77      	ldr	r2, [pc, #476]	; (8001300 <HAL_SPI_MspInit+0x2bc>)
 8001124:	601a      	str	r2, [r3, #0]
      hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001126:	4b75      	ldr	r3, [pc, #468]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 8001128:	2225      	movs	r2, #37	; 0x25
 800112a:	605a      	str	r2, [r3, #4]
      hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112c:	4b73      	ldr	r3, [pc, #460]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
      hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001132:	4b72      	ldr	r3, [pc, #456]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
      hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001138:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 800113a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113e:	611a      	str	r2, [r3, #16]
      hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001140:	4b6e      	ldr	r3, [pc, #440]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 8001142:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001146:	615a      	str	r2, [r3, #20]
      hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001148:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 800114a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114e:	619a      	str	r2, [r3, #24]
      hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 8001152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001156:	61da      	str	r2, [r3, #28]
      hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001158:	4b68      	ldr	r3, [pc, #416]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
      hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 8001160:	2204      	movs	r2, #4
 8001162:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001164:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800116a:	4b64      	ldr	r3, [pc, #400]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 800116c:	2200      	movs	r2, #0
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001170:	4b62      	ldr	r3, [pc, #392]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 8001172:	2200      	movs	r2, #0
 8001174:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001176:	4861      	ldr	r0, [pc, #388]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 8001178:	f000 fe98 	bl	8001eac <HAL_DMA_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_SPI_MspInit+0x142>
      {
        Error_Handler();
 8001182:	f7ff ff3a 	bl	8000ffa <Error_Handler>
      }

      __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 800118a:	67da      	str	r2, [r3, #124]	; 0x7c
 800118c:	4a5b      	ldr	r2, [pc, #364]	; (80012fc <HAL_SPI_MspInit+0x2b8>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6393      	str	r3, [r2, #56]	; 0x38

      /* SPI1 interrupt Init */
      HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2023      	movs	r0, #35	; 0x23
 8001198:	f000 fe53 	bl	8001e42 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800119c:	2023      	movs	r0, #35	; 0x23
 800119e:	f000 fe6a 	bl	8001e76 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
    }
  if(hspi->Instance==SPI2)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_SPI_MspInit+0x2c0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	f040 809d 	bne.w	80012e8 <HAL_SPI_MspInit+0x2a4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 80011ba:	2304      	movs	r3, #4
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 80011be:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 80011c4:	2308      	movs	r3, #8
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 80011c8:	2302      	movs	r3, #2
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 80011cc:	2302      	movs	r3, #2
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80011d0:	2340      	movs	r3, #64	; 0x40
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 ffc5 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 80011ec:	f7ff ff05 	bl	8000ffa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011f0:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 80011f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f6:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 8001202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	4a37      	ldr	r2, [pc, #220]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001232:	4a30      	ldr	r2, [pc, #192]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001250:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_SPI_MspInit+0x2b0>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001268:	230c      	movs	r3, #12
 800126a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001280:	2305      	movs	r3, #5
 8001282:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800128a:	4619      	mov	r1, r3
 800128c:	481e      	ldr	r0, [pc, #120]	; (8001308 <HAL_SPI_MspInit+0x2c4>)
 800128e:	f003 fd9b 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ac:	2305      	movs	r3, #5
 80012ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012b6:	4619      	mov	r1, r3
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <HAL_SPI_MspInit+0x2c8>)
 80012ba:	f003 fd85 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012be:	2308      	movs	r3, #8
 80012c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d6:	2305      	movs	r3, #5
 80012d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012e0:	4619      	mov	r1, r3
 80012e2:	480b      	ldr	r0, [pc, #44]	; (8001310 <HAL_SPI_MspInit+0x2cc>)
 80012e4:	f003 fd70 	bl	8004dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	37f0      	adds	r7, #240	; 0xf0
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40013000 	.word	0x40013000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58020000 	.word	0x58020000
 80012fc:	2400ffac 	.word	0x2400ffac
 8001300:	40020410 	.word	0x40020410
 8001304:	40003800 	.word	0x40003800
 8001308:	58020800 	.word	0x58020800
 800130c:	58020400 	.word	0x58020400
 8001310:	58020c00 	.word	0x58020c00

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0ba      	sub	sp, #232	; 0xe8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	22bc      	movs	r2, #188	; 0xbc
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f008 faf5 	bl	8009924 <memset>
  if(huart->Instance==USART1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a94      	ldr	r2, [pc, #592]	; (8001590 <HAL_UART_MspInit+0x27c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	f040 8098 	bne.w	8001476 <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 800134a:	2304      	movs	r3, #4
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 800134e:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001354:	2309      	movs	r3, #9
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001358:	2308      	movs	r3, #8
 800135a:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 800135c:	2302      	movs	r3, #2
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001364:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001366:	2300      	movs	r3, #0
 8001368:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800136e:	2310      	movs	r3, #16
 8001370:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fef9 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 8001384:	f7ff fe39 	bl	8000ffa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001388:	4b82      	ldr	r3, [pc, #520]	; (8001594 <HAL_UART_MspInit+0x280>)
 800138a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800138e:	4a81      	ldr	r2, [pc, #516]	; (8001594 <HAL_UART_MspInit+0x280>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001398:	4b7e      	ldr	r3, [pc, #504]	; (8001594 <HAL_UART_MspInit+0x280>)
 800139a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b7b      	ldr	r3, [pc, #492]	; (8001594 <HAL_UART_MspInit+0x280>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4a79      	ldr	r2, [pc, #484]	; (8001594 <HAL_UART_MspInit+0x280>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b77      	ldr	r3, [pc, #476]	; (8001594 <HAL_UART_MspInit+0x280>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013de:	2304      	movs	r3, #4
 80013e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e8:	4619      	mov	r1, r3
 80013ea:	486b      	ldr	r0, [pc, #428]	; (8001598 <HAL_UART_MspInit+0x284>)
 80013ec:	f003 fcec 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f0:	2340      	movs	r3, #64	; 0x40
 80013f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001408:	2307      	movs	r3, #7
 800140a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001412:	4619      	mov	r1, r3
 8001414:	4860      	ldr	r0, [pc, #384]	; (8001598 <HAL_UART_MspInit+0x284>)
 8001416:	f003 fcd7 	bl	8004dc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 800141a:	4b60      	ldr	r3, [pc, #384]	; (800159c <HAL_UART_MspInit+0x288>)
 800141c:	4a60      	ldr	r2, [pc, #384]	; (80015a0 <HAL_UART_MspInit+0x28c>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001420:	4b5e      	ldr	r3, [pc, #376]	; (800159c <HAL_UART_MspInit+0x288>)
 8001422:	222a      	movs	r2, #42	; 0x2a
 8001424:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <HAL_UART_MspInit+0x288>)
 8001428:	2240      	movs	r2, #64	; 0x40
 800142a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <HAL_UART_MspInit+0x288>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001432:	4b5a      	ldr	r3, [pc, #360]	; (800159c <HAL_UART_MspInit+0x288>)
 8001434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001438:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143a:	4b58      	ldr	r3, [pc, #352]	; (800159c <HAL_UART_MspInit+0x288>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_UART_MspInit+0x288>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001446:	4b55      	ldr	r3, [pc, #340]	; (800159c <HAL_UART_MspInit+0x288>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_UART_MspInit+0x288>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001452:	4b52      	ldr	r3, [pc, #328]	; (800159c <HAL_UART_MspInit+0x288>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001458:	4850      	ldr	r0, [pc, #320]	; (800159c <HAL_UART_MspInit+0x288>)
 800145a:	f000 fd27 	bl	8001eac <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001464:	f7ff fdc9 	bl	8000ffa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a4c      	ldr	r2, [pc, #304]	; (800159c <HAL_UART_MspInit+0x288>)
 800146c:	679a      	str	r2, [r3, #120]	; 0x78
 800146e:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_UART_MspInit+0x288>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001474:	e088      	b.n	8001588 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a4a      	ldr	r2, [pc, #296]	; (80015a4 <HAL_UART_MspInit+0x290>)
 800147c:	4293      	cmp	r3, r2
 800147e:	f040 8083 	bne.w	8001588 <HAL_UART_MspInit+0x274>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001486:	2304      	movs	r3, #4
 8001488:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 800148a:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001490:	2309      	movs	r3, #9
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001494:	2308      	movs	r3, #8
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001498:	2302      	movs	r3, #2
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800149c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a0:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	65bb      	str	r3, [r7, #88]	; 0x58
	  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b0:	f107 0318 	add.w	r3, r7, #24
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 fe5b 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_MspInit+0x1b0>
	    Error_Handler();
 80014c0:	f7ff fd9b 	bl	8000ffa <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <HAL_UART_MspInit+0x280>)
 80014c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ca:	4a32      	ldr	r2, [pc, #200]	; (8001594 <HAL_UART_MspInit+0x280>)
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_UART_MspInit+0x280>)
 80014d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <HAL_UART_MspInit+0x280>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	4a2a      	ldr	r2, [pc, #168]	; (8001594 <HAL_UART_MspInit+0x280>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_UART_MspInit+0x280>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001500:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800151a:	2307      	movs	r3, #7
 800151c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001520:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001524:	4619      	mov	r1, r3
 8001526:	4820      	ldr	r0, [pc, #128]	; (80015a8 <HAL_UART_MspInit+0x294>)
 8001528:	f003 fc4e 	bl	8004dc8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_UART_MspInit+0x298>)
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <HAL_UART_MspInit+0x29c>)
 8001530:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001532:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <HAL_UART_MspInit+0x298>)
 8001534:	222e      	movs	r2, #46	; 0x2e
 8001536:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_UART_MspInit+0x298>)
 800153a:	2240      	movs	r2, #64	; 0x40
 800153c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_UART_MspInit+0x298>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_UART_MspInit+0x298>)
 8001546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_UART_MspInit+0x298>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_UART_MspInit+0x298>)
 8001554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001558:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_UART_MspInit+0x298>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_UART_MspInit+0x298>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_UART_MspInit+0x298>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800156c:	480f      	ldr	r0, [pc, #60]	; (80015ac <HAL_UART_MspInit+0x298>)
 800156e:	f000 fc9d 	bl	8001eac <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_UART_MspInit+0x268>
      Error_Handler();
 8001578:	f7ff fd3f 	bl	8000ffa <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_UART_MspInit+0x298>)
 8001580:	679a      	str	r2, [r3, #120]	; 0x78
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_UART_MspInit+0x298>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001588:	bf00      	nop
 800158a:	37e8      	adds	r7, #232	; 0xe8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40011000 	.word	0x40011000
 8001594:	58024400 	.word	0x58024400
 8001598:	58020400 	.word	0x58020400
 800159c:	2400fe1c 	.word	0x2400fe1c
 80015a0:	40020010 	.word	0x40020010
 80015a4:	40004800 	.word	0x40004800
 80015a8:	58020c00 	.word	0x58020c00
 80015ac:	2400fda4 	.word	0x2400fda4
 80015b0:	40020028 	.word	0x40020028

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 fae4 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA1_Stream0_IRQHandler+0x10>)
 800160e:	f002 f895 	bl	800373c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2400fe1c 	.word	0x2400fe1c

0800161c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8001620:	2001      	movs	r0, #1
 8001622:	f000 f8a9 	bl	8001778 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001626:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA1_Stream1_IRQHandler+0x14>)
 8001628:	f002 f888 	bl	800373c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2400fda4 	.word	0x2400fda4

08001634 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	  BSP_LED_On(LED1);
 8001638:	2000      	movs	r0, #0
 800163a:	f000 f89d 	bl	8001778 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800163e:	4802      	ldr	r0, [pc, #8]	; (8001648 <DMA2_Stream0_IRQHandler+0x14>)
 8001640:	f002 f87c 	bl	800373c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2400ffac 	.word	0x2400ffac

0800164c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8001650:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001654:	f003 fd9b 	bl	800518e <HAL_GPIO_EXTI_IRQHandler>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8001660:	2001      	movs	r0, #1
 8001662:	f000 f889 	bl	8001778 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 8001666:	4802      	ldr	r0, [pc, #8]	; (8001670 <USART3_IRQHandler+0x14>)
 8001668:	f006 fd80 	bl	800816c <HAL_UART_IRQHandler>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2400f90c 	.word	0x2400f90c

08001674 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <SPI1_IRQHandler+0x14>)
 800167a:	f006 f9dd 	bl	8007a38 <HAL_SPI_IRQHandler>
  BSP_LED_On(LED2);
 800167e:	2001      	movs	r0, #1
 8001680:	f000 f87a 	bl	8001778 <BSP_LED_On>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2400ff24 	.word	0x2400ff24

0800168c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <BSP_LED_Init+0x28>
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d006      	beq.n	80016b4 <BSP_LED_Init+0x28>
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d003      	beq.n	80016b4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016ac:	f06f 0301 	mvn.w	r3, #1
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b2:	e055      	b.n	8001760 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10f      	bne.n	80016da <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <BSP_LED_Init+0xe0>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	4a2a      	ldr	r2, [pc, #168]	; (800176c <BSP_LED_Init+0xe0>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <BSP_LED_Init+0xe0>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	e021      	b.n	800171e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d10f      	bne.n	8001700 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <BSP_LED_Init+0xe0>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	4a21      	ldr	r2, [pc, #132]	; (800176c <BSP_LED_Init+0xe0>)
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <BSP_LED_Init+0xe0>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	e00e      	b.n	800171e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <BSP_LED_Init+0xe0>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <BSP_LED_Init+0xe0>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <BSP_LED_Init+0xe0>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <BSP_LED_Init+0xe4>)
 8001722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001726:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <BSP_LED_Init+0xe8>)
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	f107 0218 	add.w	r2, r7, #24
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fb40 	bl	8004dc8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <BSP_LED_Init+0xe8>)
 800174c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	4a07      	ldr	r2, [pc, #28]	; (8001770 <BSP_LED_Init+0xe4>)
 8001754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	f003 fce4 	bl	8005128 <HAL_GPIO_WritePin>
  }

  return ret;
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001762:	4618      	mov	r0, r3
 8001764:	3730      	adds	r7, #48	; 0x30
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	58024400 	.word	0x58024400
 8001770:	0800994c 	.word	0x0800994c
 8001774:	24000000 	.word	0x24000000

08001778 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d009      	beq.n	80017a0 <BSP_LED_On+0x28>
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d006      	beq.n	80017a0 <BSP_LED_On+0x28>
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d003      	beq.n	80017a0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001798:	f06f 0301 	mvn.w	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e00b      	b.n	80017b8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <BSP_LED_On+0x4c>)
 80017a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <BSP_LED_On+0x50>)
 80017ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017b0:	2201      	movs	r2, #1
 80017b2:	4619      	mov	r1, r3
 80017b4:	f003 fcb8 	bl	8005128 <HAL_GPIO_WritePin>
  }

  return ret;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24000000 	.word	0x24000000
 80017c8:	0800994c 	.word	0x0800994c

080017cc <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d009      	beq.n	80017f4 <BSP_LED_Off+0x28>
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d006      	beq.n	80017f4 <BSP_LED_Off+0x28>
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d003      	beq.n	80017f4 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017ec:	f06f 0301 	mvn.w	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e00b      	b.n	800180c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4a08      	ldr	r2, [pc, #32]	; (8001818 <BSP_LED_Off+0x4c>)
 80017f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <BSP_LED_Off+0x50>)
 8001800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001804:	2200      	movs	r2, #0
 8001806:	4619      	mov	r1, r3
 8001808:	f003 fc8e 	bl	8005128 <HAL_GPIO_WritePin>
  }

  return ret;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000000 	.word	0x24000000
 800181c:	0800994c 	.word	0x0800994c

08001820 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <BSP_LED_Toggle+0x28>
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d006      	beq.n	8001848 <BSP_LED_Toggle+0x28>
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d003      	beq.n	8001848 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001840:	f06f 0301 	mvn.w	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e00b      	b.n	8001860 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <BSP_LED_Toggle+0x4c>)
 800184c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4907      	ldr	r1, [pc, #28]	; (8001870 <BSP_LED_Toggle+0x50>)
 8001854:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f003 fc7d 	bl	800515a <HAL_GPIO_TogglePin>
  }

  return ret;
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	24000000 	.word	0x24000000
 8001870:	0800994c 	.word	0x0800994c

08001874 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	460a      	mov	r2, r1
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	4613      	mov	r3, r2
 8001882:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <BSP_PB_Init+0xc8>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188a:	4a2c      	ldr	r2, [pc, #176]	; (800193c <BSP_PB_Init+0xc8>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <BSP_PB_Init+0xc8>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80018a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018a8:	2302      	movs	r3, #2
 80018aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4a20      	ldr	r2, [pc, #128]	; (8001940 <BSP_PB_Init+0xcc>)
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	f107 020c 	add.w	r2, r7, #12
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fa7d 	bl	8004dc8 <HAL_GPIO_Init>
 80018ce:	e030      	b.n	8001932 <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <BSP_PB_Init+0xd0>)
 80018d2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <BSP_PB_Init+0xcc>)
 80018d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018dc:	f107 020c 	add.w	r2, r7, #12
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fa70 	bl	8004dc8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4a16      	ldr	r2, [pc, #88]	; (8001948 <BSP_PB_Init+0xd4>)
 80018ee:	441a      	add	r2, r3
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4916      	ldr	r1, [pc, #88]	; (800194c <BSP_PB_Init+0xd8>)
 80018f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f003 fa4f 	bl	8004d9e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4a10      	ldr	r2, [pc, #64]	; (8001948 <BSP_PB_Init+0xd4>)
 8001906:	1898      	adds	r0, r3, r2
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <BSP_PB_Init+0xdc>)
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	461a      	mov	r2, r3
 8001912:	2100      	movs	r1, #0
 8001914:	f003 fa24 	bl	8004d60 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001918:	2028      	movs	r0, #40	; 0x28
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <BSP_PB_Init+0xe0>)
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	2200      	movs	r2, #0
 8001924:	4619      	mov	r1, r3
 8001926:	f000 fa8c 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800192a:	2328      	movs	r3, #40	; 0x28
 800192c:	4618      	mov	r0, r3
 800192e:	f000 faa2 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58024400 	.word	0x58024400
 8001940:	2400000c 	.word	0x2400000c
 8001944:	11110000 	.word	0x11110000
 8001948:	24010024 	.word	0x24010024
 800194c:	08009954 	.word	0x08009954
 8001950:	24000010 	.word	0x24000010
 8001954:	24000014 	.word	0x24000014

08001958 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff fff0 	bl	8001958 <BSP_PB_Callback>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <SystemInit+0xec>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <SystemInit+0xec>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <SystemInit+0xf0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	2b06      	cmp	r3, #6
 800199a:	d807      	bhi.n	80019ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <SystemInit+0xf0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 030f 	bic.w	r3, r3, #15
 80019a4:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <SystemInit+0xf0>)
 80019a6:	f043 0307 	orr.w	r3, r3, #7
 80019aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <SystemInit+0xf4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2f      	ldr	r2, [pc, #188]	; (8001a70 <SystemInit+0xf4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <SystemInit+0xf4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019be:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <SystemInit+0xf4>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	492b      	ldr	r1, [pc, #172]	; (8001a70 <SystemInit+0xf4>)
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <SystemInit+0xf8>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <SystemInit+0xf0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <SystemInit+0xf0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 030f 	bic.w	r3, r3, #15
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <SystemInit+0xf0>)
 80019e0:	f043 0307 	orr.w	r3, r3, #7
 80019e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <SystemInit+0xf4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <SystemInit+0xf4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <SystemInit+0xf4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <SystemInit+0xf4>)
 80019fa:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <SystemInit+0xfc>)
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <SystemInit+0xf4>)
 8001a00:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <SystemInit+0x100>)
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <SystemInit+0xf4>)
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <SystemInit+0x104>)
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <SystemInit+0xf4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <SystemInit+0xf4>)
 8001a12:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <SystemInit+0x104>)
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <SystemInit+0xf4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <SystemInit+0xf4>)
 8001a1e:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <SystemInit+0x104>)
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <SystemInit+0xf4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <SystemInit+0xf4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <SystemInit+0xf4>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <SystemInit+0xf4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <SystemInit+0x108>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <SystemInit+0x10c>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a46:	d202      	bcs.n	8001a4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <SystemInit+0x110>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <SystemInit+0x114>)
 8001a50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a54:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SystemInit+0xec>)
 8001a58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a5c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00
 8001a6c:	52002000 	.word	0x52002000
 8001a70:	58024400 	.word	0x58024400
 8001a74:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a78:	02020200 	.word	0x02020200
 8001a7c:	01ff0000 	.word	0x01ff0000
 8001a80:	01010280 	.word	0x01010280
 8001a84:	5c001000 	.word	0x5c001000
 8001a88:	ffff0000 	.word	0xffff0000
 8001a8c:	51008108 	.word	0x51008108
 8001a90:	52004000 	.word	0x52004000

08001a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a98:	f7ff ff70 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f007 ff0b 	bl	80098dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7fe fd83 	bl	80005d0 <main>
  bx  lr
 8001aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001acc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ad0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ad4:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001ad8:	080099a8 	.word	0x080099a8
  ldr r2, =_sbss
 8001adc:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001ae0:	240100c0 	.word	0x240100c0

08001ae4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC3_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aee:	2003      	movs	r0, #3
 8001af0:	f000 f99c 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001af4:	f004 f966 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_Init+0x68>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	4913      	ldr	r1, [pc, #76]	; (8001b54 <HAL_Init+0x6c>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_Init+0x68>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_Init+0x6c>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_Init+0x70>)
 8001b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <HAL_Init+0x74>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f814 	bl	8001b60 <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e002      	b.n	8001b48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b42:	f7ff fa65 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	58024400 	.word	0x58024400
 8001b54:	08009958 	.word	0x08009958
 8001b58:	2400001c 	.word	0x2400001c
 8001b5c:	24000018 	.word	0x24000018

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_InitTick+0x60>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e021      	b.n	8001bb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_InitTick+0x64>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_InitTick+0x60>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f981 	bl	8001e92 <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 f94b 	bl	8001e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HAL_InitTick+0x68>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	24000024 	.word	0x24000024
 8001bc4:	24000018 	.word	0x24000018
 8001bc8:	24000020 	.word	0x24000020

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	24000024 	.word	0x24000024
 8001bf0:	240100bc 	.word	0x240100bc

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	240100bc 	.word	0x240100bc

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_Delay+0x44>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	24000024 	.word	0x24000024

08001c54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_GetREVID+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	5c001000 	.word	0x5c001000

08001c6c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_EnableCompensationCell+0x1c>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_EnableCompensationCell+0x1c>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6213      	str	r3, [r2, #32]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	58000400 	.word	0x58000400

08001c8c <__NVIC_SetPriorityGrouping>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <__NVIC_SetPriorityGrouping+0x40>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <__NVIC_SetPriorityGrouping+0x40>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00
 8001cd0:	05fa0000 	.word	0x05fa0000

08001cd4 <__NVIC_GetPriorityGrouping>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_EnableIRQ>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <__NVIC_EnableIRQ+0x38>)
 8001d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df8:	d301      	bcc.n	8001dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <SysTick_Config+0x40>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f7ff ff8e 	bl	8001d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SysTick_Config+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SysTick_Config+0x40>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff29 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff40 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff90 	bl	8001d80 <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5f 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff33 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa4 	bl	8001de8 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fe9e 	bl	8001bf4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e316      	b.n	80024f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a66      	ldr	r2, [pc, #408]	; (8002064 <HAL_DMA_Init+0x1b8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d04a      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a65      	ldr	r2, [pc, #404]	; (8002068 <HAL_DMA_Init+0x1bc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d045      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a63      	ldr	r2, [pc, #396]	; (800206c <HAL_DMA_Init+0x1c0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d040      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a62      	ldr	r2, [pc, #392]	; (8002070 <HAL_DMA_Init+0x1c4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d03b      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a60      	ldr	r2, [pc, #384]	; (8002074 <HAL_DMA_Init+0x1c8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d036      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5f      	ldr	r2, [pc, #380]	; (8002078 <HAL_DMA_Init+0x1cc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d031      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5d      	ldr	r2, [pc, #372]	; (800207c <HAL_DMA_Init+0x1d0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d02c      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a5c      	ldr	r2, [pc, #368]	; (8002080 <HAL_DMA_Init+0x1d4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d027      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5a      	ldr	r2, [pc, #360]	; (8002084 <HAL_DMA_Init+0x1d8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d022      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a59      	ldr	r2, [pc, #356]	; (8002088 <HAL_DMA_Init+0x1dc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d01d      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a57      	ldr	r2, [pc, #348]	; (800208c <HAL_DMA_Init+0x1e0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d018      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a56      	ldr	r2, [pc, #344]	; (8002090 <HAL_DMA_Init+0x1e4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d013      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a54      	ldr	r2, [pc, #336]	; (8002094 <HAL_DMA_Init+0x1e8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00e      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a53      	ldr	r2, [pc, #332]	; (8002098 <HAL_DMA_Init+0x1ec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a51      	ldr	r2, [pc, #324]	; (800209c <HAL_DMA_Init+0x1f0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d004      	beq.n	8001f64 <HAL_DMA_Init+0xb8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a50      	ldr	r2, [pc, #320]	; (80020a0 <HAL_DMA_Init+0x1f4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_DMA_Init+0xbc>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_DMA_Init+0xbe>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 813b 	beq.w	80021e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a37      	ldr	r2, [pc, #220]	; (8002064 <HAL_DMA_Init+0x1b8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d04a      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a36      	ldr	r2, [pc, #216]	; (8002068 <HAL_DMA_Init+0x1bc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d045      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a34      	ldr	r2, [pc, #208]	; (800206c <HAL_DMA_Init+0x1c0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d040      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a33      	ldr	r2, [pc, #204]	; (8002070 <HAL_DMA_Init+0x1c4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d03b      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a31      	ldr	r2, [pc, #196]	; (8002074 <HAL_DMA_Init+0x1c8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d036      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a30      	ldr	r2, [pc, #192]	; (8002078 <HAL_DMA_Init+0x1cc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d031      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2e      	ldr	r2, [pc, #184]	; (800207c <HAL_DMA_Init+0x1d0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02c      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <HAL_DMA_Init+0x1d4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d027      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <HAL_DMA_Init+0x1d8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d022      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2a      	ldr	r2, [pc, #168]	; (8002088 <HAL_DMA_Init+0x1dc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d01d      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a28      	ldr	r2, [pc, #160]	; (800208c <HAL_DMA_Init+0x1e0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d018      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_DMA_Init+0x1e4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <HAL_DMA_Init+0x1e8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00e      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a24      	ldr	r2, [pc, #144]	; (8002098 <HAL_DMA_Init+0x1ec>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_DMA_Init+0x174>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_DMA_Init+0x1f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d004      	beq.n	8002020 <HAL_DMA_Init+0x174>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <HAL_DMA_Init+0x1f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d108      	bne.n	8002032 <HAL_DMA_Init+0x186>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e007      	b.n	8002042 <HAL_DMA_Init+0x196>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002042:	e02f      	b.n	80020a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002044:	f7ff fdd6 	bl	8001bf4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b05      	cmp	r3, #5
 8002050:	d928      	bls.n	80020a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2203      	movs	r2, #3
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e246      	b.n	80024f2 <HAL_DMA_Init+0x646>
 8002064:	40020010 	.word	0x40020010
 8002068:	40020028 	.word	0x40020028
 800206c:	40020040 	.word	0x40020040
 8002070:	40020058 	.word	0x40020058
 8002074:	40020070 	.word	0x40020070
 8002078:	40020088 	.word	0x40020088
 800207c:	400200a0 	.word	0x400200a0
 8002080:	400200b8 	.word	0x400200b8
 8002084:	40020410 	.word	0x40020410
 8002088:	40020428 	.word	0x40020428
 800208c:	40020440 	.word	0x40020440
 8002090:	40020458 	.word	0x40020458
 8002094:	40020470 	.word	0x40020470
 8002098:	40020488 	.word	0x40020488
 800209c:	400204a0 	.word	0x400204a0
 80020a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1c8      	bne.n	8002044 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4b83      	ldr	r3, [pc, #524]	; (80022cc <HAL_DMA_Init+0x420>)
 80020be:	4013      	ands	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d107      	bne.n	8002108 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	4313      	orrs	r3, r2
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002108:	4b71      	ldr	r3, [pc, #452]	; (80022d0 <HAL_DMA_Init+0x424>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b71      	ldr	r3, [pc, #452]	; (80022d4 <HAL_DMA_Init+0x428>)
 800210e:	4013      	ands	r3, r2
 8002110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002114:	d328      	bcc.n	8002168 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b28      	cmp	r3, #40	; 0x28
 800211c:	d903      	bls.n	8002126 <HAL_DMA_Init+0x27a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b2e      	cmp	r3, #46	; 0x2e
 8002124:	d917      	bls.n	8002156 <HAL_DMA_Init+0x2aa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b3e      	cmp	r3, #62	; 0x3e
 800212c:	d903      	bls.n	8002136 <HAL_DMA_Init+0x28a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b42      	cmp	r3, #66	; 0x42
 8002134:	d90f      	bls.n	8002156 <HAL_DMA_Init+0x2aa>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b46      	cmp	r3, #70	; 0x46
 800213c:	d903      	bls.n	8002146 <HAL_DMA_Init+0x29a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b48      	cmp	r3, #72	; 0x48
 8002144:	d907      	bls.n	8002156 <HAL_DMA_Init+0x2aa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b4e      	cmp	r3, #78	; 0x4e
 800214c:	d905      	bls.n	800215a <HAL_DMA_Init+0x2ae>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b52      	cmp	r3, #82	; 0x52
 8002154:	d801      	bhi.n	800215a <HAL_DMA_Init+0x2ae>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_DMA_Init+0x2b0>
 800215a:	2300      	movs	r3, #0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f023 0307 	bic.w	r3, r3, #7
 800217e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b04      	cmp	r3, #4
 8002190:	d117      	bne.n	80021c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00e      	beq.n	80021c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f002 fc51 	bl	8004a4c <DMA_CheckFifoParam>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e197      	b.n	80024f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f002 fb8c 	bl	80048e8 <DMA_CalcBaseAndBitshift>
 80021d0:	4603      	mov	r3, r0
 80021d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	223f      	movs	r2, #63	; 0x3f
 80021de:	409a      	lsls	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e0cd      	b.n	8002382 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <HAL_DMA_Init+0x42c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a39      	ldr	r2, [pc, #228]	; (80022dc <HAL_DMA_Init+0x430>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01d      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <HAL_DMA_Init+0x434>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d018      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <HAL_DMA_Init+0x438>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a35      	ldr	r2, [pc, #212]	; (80022e8 <HAL_DMA_Init+0x43c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00e      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a33      	ldr	r2, [pc, #204]	; (80022ec <HAL_DMA_Init+0x440>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_DMA_Init+0x444>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d004      	beq.n	8002236 <HAL_DMA_Init+0x38a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <HAL_DMA_Init+0x448>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_DMA_Init+0x38e>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_DMA_Init+0x390>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8097 	beq.w	8002370 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <HAL_DMA_Init+0x42c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d021      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <HAL_DMA_Init+0x430>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01c      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <HAL_DMA_Init+0x434>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d017      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <HAL_DMA_Init+0x438>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d012      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <HAL_DMA_Init+0x43c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00d      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_DMA_Init+0x440>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d008      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <HAL_DMA_Init+0x444>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d003      	beq.n	8002290 <HAL_DMA_Init+0x3e4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_DMA_Init+0x448>)
 800228e:	4293      	cmp	r3, r2
 8002290:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_DMA_Init+0x44c>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d020      	beq.n	80022fc <HAL_DMA_Init+0x450>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d102      	bne.n	80022c8 <HAL_DMA_Init+0x41c>
 80022c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c6:	e01a      	b.n	80022fe <HAL_DMA_Init+0x452>
 80022c8:	2300      	movs	r3, #0
 80022ca:	e018      	b.n	80022fe <HAL_DMA_Init+0x452>
 80022cc:	fe10803f 	.word	0xfe10803f
 80022d0:	5c001000 	.word	0x5c001000
 80022d4:	ffff0000 	.word	0xffff0000
 80022d8:	58025408 	.word	0x58025408
 80022dc:	5802541c 	.word	0x5802541c
 80022e0:	58025430 	.word	0x58025430
 80022e4:	58025444 	.word	0x58025444
 80022e8:	58025458 	.word	0x58025458
 80022ec:	5802546c 	.word	0x5802546c
 80022f0:	58025480 	.word	0x58025480
 80022f4:	58025494 	.word	0x58025494
 80022f8:	fffe000f 	.word	0xfffe000f
 80022fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68d2      	ldr	r2, [r2, #12]
 8002302:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002304:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800230c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002314:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800231c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002324:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800232c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b6e      	ldr	r3, [pc, #440]	; (80024fc <HAL_DMA_Init+0x650>)
 8002344:	4413      	add	r3, r2
 8002346:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_DMA_Init+0x654>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	009a      	lsls	r2, r3, #2
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f002 fac7 	bl	80048e8 <DMA_CalcBaseAndBitshift>
 800235a:	4603      	mov	r3, r0
 800235c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2201      	movs	r2, #1
 8002368:	409a      	lsls	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	e008      	b.n	8002382 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2203      	movs	r2, #3
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0b7      	b.n	80024f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a5f      	ldr	r2, [pc, #380]	; (8002504 <HAL_DMA_Init+0x658>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d072      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a5d      	ldr	r2, [pc, #372]	; (8002508 <HAL_DMA_Init+0x65c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d06d      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a5c      	ldr	r2, [pc, #368]	; (800250c <HAL_DMA_Init+0x660>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d068      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5a      	ldr	r2, [pc, #360]	; (8002510 <HAL_DMA_Init+0x664>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d063      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a59      	ldr	r2, [pc, #356]	; (8002514 <HAL_DMA_Init+0x668>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d05e      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a57      	ldr	r2, [pc, #348]	; (8002518 <HAL_DMA_Init+0x66c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d059      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a56      	ldr	r2, [pc, #344]	; (800251c <HAL_DMA_Init+0x670>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d054      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a54      	ldr	r2, [pc, #336]	; (8002520 <HAL_DMA_Init+0x674>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d04f      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a53      	ldr	r2, [pc, #332]	; (8002524 <HAL_DMA_Init+0x678>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d04a      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a51      	ldr	r2, [pc, #324]	; (8002528 <HAL_DMA_Init+0x67c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d045      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a50      	ldr	r2, [pc, #320]	; (800252c <HAL_DMA_Init+0x680>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d040      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a4e      	ldr	r2, [pc, #312]	; (8002530 <HAL_DMA_Init+0x684>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d03b      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a4d      	ldr	r2, [pc, #308]	; (8002534 <HAL_DMA_Init+0x688>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d036      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a4b      	ldr	r2, [pc, #300]	; (8002538 <HAL_DMA_Init+0x68c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d031      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a4a      	ldr	r2, [pc, #296]	; (800253c <HAL_DMA_Init+0x690>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d02c      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_DMA_Init+0x694>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d027      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a47      	ldr	r2, [pc, #284]	; (8002544 <HAL_DMA_Init+0x698>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d022      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_DMA_Init+0x69c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d01d      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a44      	ldr	r2, [pc, #272]	; (800254c <HAL_DMA_Init+0x6a0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d018      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a42      	ldr	r2, [pc, #264]	; (8002550 <HAL_DMA_Init+0x6a4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a41      	ldr	r2, [pc, #260]	; (8002554 <HAL_DMA_Init+0x6a8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00e      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a3f      	ldr	r2, [pc, #252]	; (8002558 <HAL_DMA_Init+0x6ac>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d009      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3e      	ldr	r2, [pc, #248]	; (800255c <HAL_DMA_Init+0x6b0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_DMA_Init+0x5c6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a3c      	ldr	r2, [pc, #240]	; (8002560 <HAL_DMA_Init+0x6b4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_DMA_Init+0x5ca>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_DMA_Init+0x5cc>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d032      	beq.n	80024e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f002 fb61 	bl	8004b44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b80      	cmp	r3, #128	; 0x80
 8002488:	d102      	bne.n	8002490 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_DMA_Init+0x624>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d80c      	bhi.n	80024d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f002 fbde 	bl	8004c78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	e008      	b.n	80024e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	a7fdabf8 	.word	0xa7fdabf8
 8002500:	cccccccd 	.word	0xcccccccd
 8002504:	40020010 	.word	0x40020010
 8002508:	40020028 	.word	0x40020028
 800250c:	40020040 	.word	0x40020040
 8002510:	40020058 	.word	0x40020058
 8002514:	40020070 	.word	0x40020070
 8002518:	40020088 	.word	0x40020088
 800251c:	400200a0 	.word	0x400200a0
 8002520:	400200b8 	.word	0x400200b8
 8002524:	40020410 	.word	0x40020410
 8002528:	40020428 	.word	0x40020428
 800252c:	40020440 	.word	0x40020440
 8002530:	40020458 	.word	0x40020458
 8002534:	40020470 	.word	0x40020470
 8002538:	40020488 	.word	0x40020488
 800253c:	400204a0 	.word	0x400204a0
 8002540:	400204b8 	.word	0x400204b8
 8002544:	58025408 	.word	0x58025408
 8002548:	5802541c 	.word	0x5802541c
 800254c:	58025430 	.word	0x58025430
 8002550:	58025444 	.word	0x58025444
 8002554:	58025458 	.word	0x58025458
 8002558:	5802546c 	.word	0x5802546c
 800255c:	58025480 	.word	0x58025480
 8002560:	58025494 	.word	0x58025494

08002564 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0ec      	b.n	800275a <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_DMA_Start+0x2a>
 800258a:	2302      	movs	r3, #2
 800258c:	e0e5      	b.n	800275a <HAL_DMA_Start+0x1f6>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 80d0 	bne.w	8002744 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6b      	ldr	r2, [pc, #428]	; (8002764 <HAL_DMA_Start+0x200>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04a      	beq.n	8002652 <HAL_DMA_Start+0xee>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a69      	ldr	r2, [pc, #420]	; (8002768 <HAL_DMA_Start+0x204>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d045      	beq.n	8002652 <HAL_DMA_Start+0xee>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a68      	ldr	r2, [pc, #416]	; (800276c <HAL_DMA_Start+0x208>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d040      	beq.n	8002652 <HAL_DMA_Start+0xee>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a66      	ldr	r2, [pc, #408]	; (8002770 <HAL_DMA_Start+0x20c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d03b      	beq.n	8002652 <HAL_DMA_Start+0xee>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a65      	ldr	r2, [pc, #404]	; (8002774 <HAL_DMA_Start+0x210>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d036      	beq.n	8002652 <HAL_DMA_Start+0xee>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a63      	ldr	r2, [pc, #396]	; (8002778 <HAL_DMA_Start+0x214>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d031      	beq.n	8002652 <HAL_DMA_Start+0xee>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a62      	ldr	r2, [pc, #392]	; (800277c <HAL_DMA_Start+0x218>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d02c      	beq.n	8002652 <HAL_DMA_Start+0xee>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a60      	ldr	r2, [pc, #384]	; (8002780 <HAL_DMA_Start+0x21c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d027      	beq.n	8002652 <HAL_DMA_Start+0xee>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5f      	ldr	r2, [pc, #380]	; (8002784 <HAL_DMA_Start+0x220>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <HAL_DMA_Start+0xee>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a5d      	ldr	r2, [pc, #372]	; (8002788 <HAL_DMA_Start+0x224>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01d      	beq.n	8002652 <HAL_DMA_Start+0xee>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a5c      	ldr	r2, [pc, #368]	; (800278c <HAL_DMA_Start+0x228>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_DMA_Start+0xee>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a5a      	ldr	r2, [pc, #360]	; (8002790 <HAL_DMA_Start+0x22c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_DMA_Start+0xee>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a59      	ldr	r2, [pc, #356]	; (8002794 <HAL_DMA_Start+0x230>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_DMA_Start+0xee>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a57      	ldr	r2, [pc, #348]	; (8002798 <HAL_DMA_Start+0x234>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_DMA_Start+0xee>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a56      	ldr	r2, [pc, #344]	; (800279c <HAL_DMA_Start+0x238>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_DMA_Start+0xee>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a54      	ldr	r2, [pc, #336]	; (80027a0 <HAL_DMA_Start+0x23c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d108      	bne.n	8002664 <HAL_DMA_Start+0x100>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e007      	b.n	8002674 <HAL_DMA_Start+0x110>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f001 ff88 	bl	8004590 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a37      	ldr	r2, [pc, #220]	; (8002764 <HAL_DMA_Start+0x200>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d04a      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a36      	ldr	r2, [pc, #216]	; (8002768 <HAL_DMA_Start+0x204>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d045      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a34      	ldr	r2, [pc, #208]	; (800276c <HAL_DMA_Start+0x208>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d040      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a33      	ldr	r2, [pc, #204]	; (8002770 <HAL_DMA_Start+0x20c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d03b      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a31      	ldr	r2, [pc, #196]	; (8002774 <HAL_DMA_Start+0x210>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d036      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a30      	ldr	r2, [pc, #192]	; (8002778 <HAL_DMA_Start+0x214>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d031      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a2e      	ldr	r2, [pc, #184]	; (800277c <HAL_DMA_Start+0x218>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d02c      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2d      	ldr	r2, [pc, #180]	; (8002780 <HAL_DMA_Start+0x21c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d027      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <HAL_DMA_Start+0x220>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d022      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <HAL_DMA_Start+0x224>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d01d      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a28      	ldr	r2, [pc, #160]	; (800278c <HAL_DMA_Start+0x228>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d018      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_DMA_Start+0x22c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a25      	ldr	r2, [pc, #148]	; (8002794 <HAL_DMA_Start+0x230>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00e      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a24      	ldr	r2, [pc, #144]	; (8002798 <HAL_DMA_Start+0x234>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d009      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a22      	ldr	r2, [pc, #136]	; (800279c <HAL_DMA_Start+0x238>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_DMA_Start+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <HAL_DMA_Start+0x23c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d108      	bne.n	8002732 <HAL_DMA_Start+0x1ce>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e012      	b.n	8002758 <HAL_DMA_Start+0x1f4>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e009      	b.n	8002758 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002752:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002758:	7dfb      	ldrb	r3, [r7, #23]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40020010 	.word	0x40020010
 8002768:	40020028 	.word	0x40020028
 800276c:	40020040 	.word	0x40020040
 8002770:	40020058 	.word	0x40020058
 8002774:	40020070 	.word	0x40020070
 8002778:	40020088 	.word	0x40020088
 800277c:	400200a0 	.word	0x400200a0
 8002780:	400200b8 	.word	0x400200b8
 8002784:	40020410 	.word	0x40020410
 8002788:	40020428 	.word	0x40020428
 800278c:	40020440 	.word	0x40020440
 8002790:	40020458 	.word	0x40020458
 8002794:	40020470 	.word	0x40020470
 8002798:	40020488 	.word	0x40020488
 800279c:	400204a0 	.word	0x400204a0
 80027a0:	400204b8 	.word	0x400204b8

080027a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e226      	b.n	8002c0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_DMA_Start_IT+0x2a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e21f      	b.n	8002c0e <HAL_DMA_Start_IT+0x46a>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f040 820a 	bne.w	8002bf8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a68      	ldr	r2, [pc, #416]	; (8002998 <HAL_DMA_Start_IT+0x1f4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d04a      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a66      	ldr	r2, [pc, #408]	; (800299c <HAL_DMA_Start_IT+0x1f8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d045      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a65      	ldr	r2, [pc, #404]	; (80029a0 <HAL_DMA_Start_IT+0x1fc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d040      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a63      	ldr	r2, [pc, #396]	; (80029a4 <HAL_DMA_Start_IT+0x200>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d03b      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a62      	ldr	r2, [pc, #392]	; (80029a8 <HAL_DMA_Start_IT+0x204>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d036      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a60      	ldr	r2, [pc, #384]	; (80029ac <HAL_DMA_Start_IT+0x208>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d031      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a5f      	ldr	r2, [pc, #380]	; (80029b0 <HAL_DMA_Start_IT+0x20c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d02c      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a5d      	ldr	r2, [pc, #372]	; (80029b4 <HAL_DMA_Start_IT+0x210>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d027      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5c      	ldr	r2, [pc, #368]	; (80029b8 <HAL_DMA_Start_IT+0x214>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d022      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5a      	ldr	r2, [pc, #360]	; (80029bc <HAL_DMA_Start_IT+0x218>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01d      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a59      	ldr	r2, [pc, #356]	; (80029c0 <HAL_DMA_Start_IT+0x21c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d018      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a57      	ldr	r2, [pc, #348]	; (80029c4 <HAL_DMA_Start_IT+0x220>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a56      	ldr	r2, [pc, #344]	; (80029c8 <HAL_DMA_Start_IT+0x224>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00e      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a54      	ldr	r2, [pc, #336]	; (80029cc <HAL_DMA_Start_IT+0x228>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a53      	ldr	r2, [pc, #332]	; (80029d0 <HAL_DMA_Start_IT+0x22c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_DMA_Start_IT+0xee>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a51      	ldr	r2, [pc, #324]	; (80029d4 <HAL_DMA_Start_IT+0x230>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d108      	bne.n	80028a4 <HAL_DMA_Start_IT+0x100>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e007      	b.n	80028b4 <HAL_DMA_Start_IT+0x110>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f001 fe68 	bl	8004590 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a34      	ldr	r2, [pc, #208]	; (8002998 <HAL_DMA_Start_IT+0x1f4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d04a      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a33      	ldr	r2, [pc, #204]	; (800299c <HAL_DMA_Start_IT+0x1f8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d045      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <HAL_DMA_Start_IT+0x1fc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d040      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a30      	ldr	r2, [pc, #192]	; (80029a4 <HAL_DMA_Start_IT+0x200>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d03b      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2e      	ldr	r2, [pc, #184]	; (80029a8 <HAL_DMA_Start_IT+0x204>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d036      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2d      	ldr	r2, [pc, #180]	; (80029ac <HAL_DMA_Start_IT+0x208>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d031      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a2b      	ldr	r2, [pc, #172]	; (80029b0 <HAL_DMA_Start_IT+0x20c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02c      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2a      	ldr	r2, [pc, #168]	; (80029b4 <HAL_DMA_Start_IT+0x210>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d027      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <HAL_DMA_Start_IT+0x214>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a27      	ldr	r2, [pc, #156]	; (80029bc <HAL_DMA_Start_IT+0x218>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d01d      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <HAL_DMA_Start_IT+0x21c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d018      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <HAL_DMA_Start_IT+0x220>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <HAL_DMA_Start_IT+0x224>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00e      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a21      	ldr	r2, [pc, #132]	; (80029cc <HAL_DMA_Start_IT+0x228>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_DMA_Start_IT+0x22c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_DMA_Start_IT+0x1bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1e      	ldr	r2, [pc, #120]	; (80029d4 <HAL_DMA_Start_IT+0x230>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_DMA_Start_IT+0x1c0>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_DMA_Start_IT+0x1c2>
 8002964:	2300      	movs	r3, #0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d036      	beq.n	80029d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 021e 	bic.w	r2, r3, #30
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0216 	orr.w	r2, r2, #22
 800297c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d03e      	beq.n	8002a04 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0208 	orr.w	r2, r2, #8
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e035      	b.n	8002a04 <HAL_DMA_Start_IT+0x260>
 8002998:	40020010 	.word	0x40020010
 800299c:	40020028 	.word	0x40020028
 80029a0:	40020040 	.word	0x40020040
 80029a4:	40020058 	.word	0x40020058
 80029a8:	40020070 	.word	0x40020070
 80029ac:	40020088 	.word	0x40020088
 80029b0:	400200a0 	.word	0x400200a0
 80029b4:	400200b8 	.word	0x400200b8
 80029b8:	40020410 	.word	0x40020410
 80029bc:	40020428 	.word	0x40020428
 80029c0:	40020440 	.word	0x40020440
 80029c4:	40020458 	.word	0x40020458
 80029c8:	40020470 	.word	0x40020470
 80029cc:	40020488 	.word	0x40020488
 80029d0:	400204a0 	.word	0x400204a0
 80029d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 020e 	bic.w	r2, r3, #14
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 020a 	orr.w	r2, r2, #10
 80029ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0204 	orr.w	r2, r2, #4
 8002a02:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a83      	ldr	r2, [pc, #524]	; (8002c18 <HAL_DMA_Start_IT+0x474>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d072      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a82      	ldr	r2, [pc, #520]	; (8002c1c <HAL_DMA_Start_IT+0x478>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d06d      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a80      	ldr	r2, [pc, #512]	; (8002c20 <HAL_DMA_Start_IT+0x47c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d068      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a7f      	ldr	r2, [pc, #508]	; (8002c24 <HAL_DMA_Start_IT+0x480>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d063      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a7d      	ldr	r2, [pc, #500]	; (8002c28 <HAL_DMA_Start_IT+0x484>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d05e      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a7c      	ldr	r2, [pc, #496]	; (8002c2c <HAL_DMA_Start_IT+0x488>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d059      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a7a      	ldr	r2, [pc, #488]	; (8002c30 <HAL_DMA_Start_IT+0x48c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d054      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a79      	ldr	r2, [pc, #484]	; (8002c34 <HAL_DMA_Start_IT+0x490>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04f      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a77      	ldr	r2, [pc, #476]	; (8002c38 <HAL_DMA_Start_IT+0x494>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d04a      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a76      	ldr	r2, [pc, #472]	; (8002c3c <HAL_DMA_Start_IT+0x498>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d045      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a74      	ldr	r2, [pc, #464]	; (8002c40 <HAL_DMA_Start_IT+0x49c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d040      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a73      	ldr	r2, [pc, #460]	; (8002c44 <HAL_DMA_Start_IT+0x4a0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d03b      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a71      	ldr	r2, [pc, #452]	; (8002c48 <HAL_DMA_Start_IT+0x4a4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d036      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a70      	ldr	r2, [pc, #448]	; (8002c4c <HAL_DMA_Start_IT+0x4a8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d031      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6e      	ldr	r2, [pc, #440]	; (8002c50 <HAL_DMA_Start_IT+0x4ac>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d02c      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6d      	ldr	r2, [pc, #436]	; (8002c54 <HAL_DMA_Start_IT+0x4b0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d027      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a6b      	ldr	r2, [pc, #428]	; (8002c58 <HAL_DMA_Start_IT+0x4b4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d022      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6a      	ldr	r2, [pc, #424]	; (8002c5c <HAL_DMA_Start_IT+0x4b8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d01d      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a68      	ldr	r2, [pc, #416]	; (8002c60 <HAL_DMA_Start_IT+0x4bc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d018      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <HAL_DMA_Start_IT+0x4c0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <HAL_DMA_Start_IT+0x4c4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00e      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a64      	ldr	r2, [pc, #400]	; (8002c6c <HAL_DMA_Start_IT+0x4c8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a62      	ldr	r2, [pc, #392]	; (8002c70 <HAL_DMA_Start_IT+0x4cc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_DMA_Start_IT+0x350>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a61      	ldr	r2, [pc, #388]	; (8002c74 <HAL_DMA_Start_IT+0x4d0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_DMA_Start_IT+0x354>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_DMA_Start_IT+0x356>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01a      	beq.n	8002b34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a37      	ldr	r2, [pc, #220]	; (8002c18 <HAL_DMA_Start_IT+0x474>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d04a      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a36      	ldr	r2, [pc, #216]	; (8002c1c <HAL_DMA_Start_IT+0x478>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d045      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a34      	ldr	r2, [pc, #208]	; (8002c20 <HAL_DMA_Start_IT+0x47c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d040      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a33      	ldr	r2, [pc, #204]	; (8002c24 <HAL_DMA_Start_IT+0x480>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d03b      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a31      	ldr	r2, [pc, #196]	; (8002c28 <HAL_DMA_Start_IT+0x484>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d036      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a30      	ldr	r2, [pc, #192]	; (8002c2c <HAL_DMA_Start_IT+0x488>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d031      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2e      	ldr	r2, [pc, #184]	; (8002c30 <HAL_DMA_Start_IT+0x48c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d02c      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2d      	ldr	r2, [pc, #180]	; (8002c34 <HAL_DMA_Start_IT+0x490>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d027      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2b      	ldr	r2, [pc, #172]	; (8002c38 <HAL_DMA_Start_IT+0x494>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d022      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <HAL_DMA_Start_IT+0x498>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d01d      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <HAL_DMA_Start_IT+0x49c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d018      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_DMA_Start_IT+0x4a0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a25      	ldr	r2, [pc, #148]	; (8002c48 <HAL_DMA_Start_IT+0x4a4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <HAL_DMA_Start_IT+0x4a8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <HAL_DMA_Start_IT+0x4ac>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x430>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <HAL_DMA_Start_IT+0x4b0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d108      	bne.n	8002be6 <HAL_DMA_Start_IT+0x442>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e012      	b.n	8002c0c <HAL_DMA_Start_IT+0x468>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e009      	b.n	8002c0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40020010 	.word	0x40020010
 8002c1c:	40020028 	.word	0x40020028
 8002c20:	40020040 	.word	0x40020040
 8002c24:	40020058 	.word	0x40020058
 8002c28:	40020070 	.word	0x40020070
 8002c2c:	40020088 	.word	0x40020088
 8002c30:	400200a0 	.word	0x400200a0
 8002c34:	400200b8 	.word	0x400200b8
 8002c38:	40020410 	.word	0x40020410
 8002c3c:	40020428 	.word	0x40020428
 8002c40:	40020440 	.word	0x40020440
 8002c44:	40020458 	.word	0x40020458
 8002c48:	40020470 	.word	0x40020470
 8002c4c:	40020488 	.word	0x40020488
 8002c50:	400204a0 	.word	0x400204a0
 8002c54:	400204b8 	.word	0x400204b8
 8002c58:	58025408 	.word	0x58025408
 8002c5c:	5802541c 	.word	0x5802541c
 8002c60:	58025430 	.word	0x58025430
 8002c64:	58025444 	.word	0x58025444
 8002c68:	58025458 	.word	0x58025458
 8002c6c:	5802546c 	.word	0x5802546c
 8002c70:	58025480 	.word	0x58025480
 8002c74:	58025494 	.word	0x58025494

08002c78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7fe ffb8 	bl	8001bf4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e2dc      	b.n	800324a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d008      	beq.n	8002cae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e2cd      	b.n	800324a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a76      	ldr	r2, [pc, #472]	; (8002e8c <HAL_DMA_Abort+0x214>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04a      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a74      	ldr	r2, [pc, #464]	; (8002e90 <HAL_DMA_Abort+0x218>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d045      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a73      	ldr	r2, [pc, #460]	; (8002e94 <HAL_DMA_Abort+0x21c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d040      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a71      	ldr	r2, [pc, #452]	; (8002e98 <HAL_DMA_Abort+0x220>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d03b      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a70      	ldr	r2, [pc, #448]	; (8002e9c <HAL_DMA_Abort+0x224>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d036      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a6e      	ldr	r2, [pc, #440]	; (8002ea0 <HAL_DMA_Abort+0x228>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d031      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6d      	ldr	r2, [pc, #436]	; (8002ea4 <HAL_DMA_Abort+0x22c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d02c      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a6b      	ldr	r2, [pc, #428]	; (8002ea8 <HAL_DMA_Abort+0x230>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d027      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6a      	ldr	r2, [pc, #424]	; (8002eac <HAL_DMA_Abort+0x234>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a68      	ldr	r2, [pc, #416]	; (8002eb0 <HAL_DMA_Abort+0x238>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01d      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a67      	ldr	r2, [pc, #412]	; (8002eb4 <HAL_DMA_Abort+0x23c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d018      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a65      	ldr	r2, [pc, #404]	; (8002eb8 <HAL_DMA_Abort+0x240>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a64      	ldr	r2, [pc, #400]	; (8002ebc <HAL_DMA_Abort+0x244>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a62      	ldr	r2, [pc, #392]	; (8002ec0 <HAL_DMA_Abort+0x248>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a61      	ldr	r2, [pc, #388]	; (8002ec4 <HAL_DMA_Abort+0x24c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_DMA_Abort+0xd6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a5f      	ldr	r2, [pc, #380]	; (8002ec8 <HAL_DMA_Abort+0x250>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_DMA_Abort+0xda>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_DMA_Abort+0xdc>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 021e 	bic.w	r2, r2, #30
 8002d66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e00a      	b.n	8002d96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 020e 	bic.w	r2, r2, #14
 8002d8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3c      	ldr	r2, [pc, #240]	; (8002e8c <HAL_DMA_Abort+0x214>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d072      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a3a      	ldr	r2, [pc, #232]	; (8002e90 <HAL_DMA_Abort+0x218>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d06d      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a39      	ldr	r2, [pc, #228]	; (8002e94 <HAL_DMA_Abort+0x21c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d068      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <HAL_DMA_Abort+0x220>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d063      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <HAL_DMA_Abort+0x224>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d05e      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_DMA_Abort+0x228>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d059      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	; (8002ea4 <HAL_DMA_Abort+0x22c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d054      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_DMA_Abort+0x230>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d04f      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a30      	ldr	r2, [pc, #192]	; (8002eac <HAL_DMA_Abort+0x234>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d04a      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2e      	ldr	r2, [pc, #184]	; (8002eb0 <HAL_DMA_Abort+0x238>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d045      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2d      	ldr	r2, [pc, #180]	; (8002eb4 <HAL_DMA_Abort+0x23c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d040      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2b      	ldr	r2, [pc, #172]	; (8002eb8 <HAL_DMA_Abort+0x240>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d03b      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2a      	ldr	r2, [pc, #168]	; (8002ebc <HAL_DMA_Abort+0x244>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d036      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <HAL_DMA_Abort+0x248>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d031      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <HAL_DMA_Abort+0x24c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d02c      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a25      	ldr	r2, [pc, #148]	; (8002ec8 <HAL_DMA_Abort+0x250>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d027      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <HAL_DMA_Abort+0x254>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d022      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <HAL_DMA_Abort+0x258>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01d      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <HAL_DMA_Abort+0x25c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d018      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <HAL_DMA_Abort+0x260>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_DMA_Abort+0x264>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00e      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_DMA_Abort+0x268>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_DMA_Abort+0x26c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_DMA_Abort+0x20e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <HAL_DMA_Abort+0x270>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d132      	bne.n	8002eec <HAL_DMA_Abort+0x274>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e031      	b.n	8002eee <HAL_DMA_Abort+0x276>
 8002e8a:	bf00      	nop
 8002e8c:	40020010 	.word	0x40020010
 8002e90:	40020028 	.word	0x40020028
 8002e94:	40020040 	.word	0x40020040
 8002e98:	40020058 	.word	0x40020058
 8002e9c:	40020070 	.word	0x40020070
 8002ea0:	40020088 	.word	0x40020088
 8002ea4:	400200a0 	.word	0x400200a0
 8002ea8:	400200b8 	.word	0x400200b8
 8002eac:	40020410 	.word	0x40020410
 8002eb0:	40020428 	.word	0x40020428
 8002eb4:	40020440 	.word	0x40020440
 8002eb8:	40020458 	.word	0x40020458
 8002ebc:	40020470 	.word	0x40020470
 8002ec0:	40020488 	.word	0x40020488
 8002ec4:	400204a0 	.word	0x400204a0
 8002ec8:	400204b8 	.word	0x400204b8
 8002ecc:	58025408 	.word	0x58025408
 8002ed0:	5802541c 	.word	0x5802541c
 8002ed4:	58025430 	.word	0x58025430
 8002ed8:	58025444 	.word	0x58025444
 8002edc:	58025458 	.word	0x58025458
 8002ee0:	5802546c 	.word	0x5802546c
 8002ee4:	58025480 	.word	0x58025480
 8002ee8:	58025494 	.word	0x58025494
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6d      	ldr	r2, [pc, #436]	; (80030bc <HAL_DMA_Abort+0x444>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d04a      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6b      	ldr	r2, [pc, #428]	; (80030c0 <HAL_DMA_Abort+0x448>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d045      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a6a      	ldr	r2, [pc, #424]	; (80030c4 <HAL_DMA_Abort+0x44c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d040      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a68      	ldr	r2, [pc, #416]	; (80030c8 <HAL_DMA_Abort+0x450>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d03b      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a67      	ldr	r2, [pc, #412]	; (80030cc <HAL_DMA_Abort+0x454>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d036      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a65      	ldr	r2, [pc, #404]	; (80030d0 <HAL_DMA_Abort+0x458>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d031      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a64      	ldr	r2, [pc, #400]	; (80030d4 <HAL_DMA_Abort+0x45c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d02c      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a62      	ldr	r2, [pc, #392]	; (80030d8 <HAL_DMA_Abort+0x460>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d027      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a61      	ldr	r2, [pc, #388]	; (80030dc <HAL_DMA_Abort+0x464>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5f      	ldr	r2, [pc, #380]	; (80030e0 <HAL_DMA_Abort+0x468>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01d      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a5e      	ldr	r2, [pc, #376]	; (80030e4 <HAL_DMA_Abort+0x46c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a5c      	ldr	r2, [pc, #368]	; (80030e8 <HAL_DMA_Abort+0x470>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5b      	ldr	r2, [pc, #364]	; (80030ec <HAL_DMA_Abort+0x474>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a59      	ldr	r2, [pc, #356]	; (80030f0 <HAL_DMA_Abort+0x478>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_DMA_Abort+0x47c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_DMA_Abort+0x32a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a56      	ldr	r2, [pc, #344]	; (80030f8 <HAL_DMA_Abort+0x480>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d108      	bne.n	8002fb4 <HAL_DMA_Abort+0x33c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e007      	b.n	8002fc4 <HAL_DMA_Abort+0x34c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fc4:	e013      	b.n	8002fee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc6:	f7fe fe15 	bl	8001bf4 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b05      	cmp	r3, #5
 8002fd2:	d90c      	bls.n	8002fee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e12d      	b.n	800324a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e5      	bne.n	8002fc6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <HAL_DMA_Abort+0x444>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04a      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <HAL_DMA_Abort+0x448>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d045      	beq.n	800309a <HAL_DMA_Abort+0x422>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2c      	ldr	r2, [pc, #176]	; (80030c4 <HAL_DMA_Abort+0x44c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d040      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <HAL_DMA_Abort+0x450>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d03b      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a29      	ldr	r2, [pc, #164]	; (80030cc <HAL_DMA_Abort+0x454>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d036      	beq.n	800309a <HAL_DMA_Abort+0x422>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <HAL_DMA_Abort+0x458>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d031      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <HAL_DMA_Abort+0x45c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d02c      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <HAL_DMA_Abort+0x460>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d027      	beq.n	800309a <HAL_DMA_Abort+0x422>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a23      	ldr	r2, [pc, #140]	; (80030dc <HAL_DMA_Abort+0x464>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a21      	ldr	r2, [pc, #132]	; (80030e0 <HAL_DMA_Abort+0x468>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01d      	beq.n	800309a <HAL_DMA_Abort+0x422>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <HAL_DMA_Abort+0x46c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d018      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_DMA_Abort+0x470>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <HAL_DMA_Abort+0x474>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_DMA_Abort+0x422>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <HAL_DMA_Abort+0x478>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <HAL_DMA_Abort+0x47c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_DMA_Abort+0x422>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_DMA_Abort+0x480>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_DMA_Abort+0x426>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_DMA_Abort+0x428>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d02b      	beq.n	80030fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	223f      	movs	r2, #63	; 0x3f
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	e02a      	b.n	8003112 <HAL_DMA_Abort+0x49a>
 80030bc:	40020010 	.word	0x40020010
 80030c0:	40020028 	.word	0x40020028
 80030c4:	40020040 	.word	0x40020040
 80030c8:	40020058 	.word	0x40020058
 80030cc:	40020070 	.word	0x40020070
 80030d0:	40020088 	.word	0x40020088
 80030d4:	400200a0 	.word	0x400200a0
 80030d8:	400200b8 	.word	0x400200b8
 80030dc:	40020410 	.word	0x40020410
 80030e0:	40020428 	.word	0x40020428
 80030e4:	40020440 	.word	0x40020440
 80030e8:	40020458 	.word	0x40020458
 80030ec:	40020470 	.word	0x40020470
 80030f0:	40020488 	.word	0x40020488
 80030f4:	400204a0 	.word	0x400204a0
 80030f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2201      	movs	r2, #1
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a4f      	ldr	r2, [pc, #316]	; (8003254 <HAL_DMA_Abort+0x5dc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d072      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_DMA_Abort+0x5e0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d06d      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_DMA_Abort+0x5e4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d068      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a4a      	ldr	r2, [pc, #296]	; (8003260 <HAL_DMA_Abort+0x5e8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d063      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a49      	ldr	r2, [pc, #292]	; (8003264 <HAL_DMA_Abort+0x5ec>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d05e      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a47      	ldr	r2, [pc, #284]	; (8003268 <HAL_DMA_Abort+0x5f0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d059      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a46      	ldr	r2, [pc, #280]	; (800326c <HAL_DMA_Abort+0x5f4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d054      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a44      	ldr	r2, [pc, #272]	; (8003270 <HAL_DMA_Abort+0x5f8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d04f      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a43      	ldr	r2, [pc, #268]	; (8003274 <HAL_DMA_Abort+0x5fc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d04a      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a41      	ldr	r2, [pc, #260]	; (8003278 <HAL_DMA_Abort+0x600>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d045      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a40      	ldr	r2, [pc, #256]	; (800327c <HAL_DMA_Abort+0x604>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d040      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a3e      	ldr	r2, [pc, #248]	; (8003280 <HAL_DMA_Abort+0x608>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d03b      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a3d      	ldr	r2, [pc, #244]	; (8003284 <HAL_DMA_Abort+0x60c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d036      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3b      	ldr	r2, [pc, #236]	; (8003288 <HAL_DMA_Abort+0x610>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d031      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a3a      	ldr	r2, [pc, #232]	; (800328c <HAL_DMA_Abort+0x614>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d02c      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a38      	ldr	r2, [pc, #224]	; (8003290 <HAL_DMA_Abort+0x618>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d027      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a37      	ldr	r2, [pc, #220]	; (8003294 <HAL_DMA_Abort+0x61c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d022      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a35      	ldr	r2, [pc, #212]	; (8003298 <HAL_DMA_Abort+0x620>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01d      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a34      	ldr	r2, [pc, #208]	; (800329c <HAL_DMA_Abort+0x624>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d018      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a32      	ldr	r2, [pc, #200]	; (80032a0 <HAL_DMA_Abort+0x628>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <HAL_DMA_Abort+0x62c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00e      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2f      	ldr	r2, [pc, #188]	; (80032a8 <HAL_DMA_Abort+0x630>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2e      	ldr	r2, [pc, #184]	; (80032ac <HAL_DMA_Abort+0x634>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_DMA_Abort+0x58a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2c      	ldr	r2, [pc, #176]	; (80032b0 <HAL_DMA_Abort+0x638>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_DMA_Abort+0x58e>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_DMA_Abort+0x590>
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003214:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800322c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003236:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40020010 	.word	0x40020010
 8003258:	40020028 	.word	0x40020028
 800325c:	40020040 	.word	0x40020040
 8003260:	40020058 	.word	0x40020058
 8003264:	40020070 	.word	0x40020070
 8003268:	40020088 	.word	0x40020088
 800326c:	400200a0 	.word	0x400200a0
 8003270:	400200b8 	.word	0x400200b8
 8003274:	40020410 	.word	0x40020410
 8003278:	40020428 	.word	0x40020428
 800327c:	40020440 	.word	0x40020440
 8003280:	40020458 	.word	0x40020458
 8003284:	40020470 	.word	0x40020470
 8003288:	40020488 	.word	0x40020488
 800328c:	400204a0 	.word	0x400204a0
 8003290:	400204b8 	.word	0x400204b8
 8003294:	58025408 	.word	0x58025408
 8003298:	5802541c 	.word	0x5802541c
 800329c:	58025430 	.word	0x58025430
 80032a0:	58025444 	.word	0x58025444
 80032a4:	58025458 	.word	0x58025458
 80032a8:	5802546c 	.word	0x5802546c
 80032ac:	58025480 	.word	0x58025480
 80032b0:	58025494 	.word	0x58025494

080032b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e205      	b.n	80036d2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d004      	beq.n	80032dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e1fa      	b.n	80036d2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a8c      	ldr	r2, [pc, #560]	; (8003514 <HAL_DMA_Abort_IT+0x260>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d04a      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a8b      	ldr	r2, [pc, #556]	; (8003518 <HAL_DMA_Abort_IT+0x264>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d045      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a89      	ldr	r2, [pc, #548]	; (800351c <HAL_DMA_Abort_IT+0x268>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d040      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a88      	ldr	r2, [pc, #544]	; (8003520 <HAL_DMA_Abort_IT+0x26c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d03b      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a86      	ldr	r2, [pc, #536]	; (8003524 <HAL_DMA_Abort_IT+0x270>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d036      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a85      	ldr	r2, [pc, #532]	; (8003528 <HAL_DMA_Abort_IT+0x274>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d031      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a83      	ldr	r2, [pc, #524]	; (800352c <HAL_DMA_Abort_IT+0x278>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02c      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a82      	ldr	r2, [pc, #520]	; (8003530 <HAL_DMA_Abort_IT+0x27c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d027      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a80      	ldr	r2, [pc, #512]	; (8003534 <HAL_DMA_Abort_IT+0x280>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d022      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a7f      	ldr	r2, [pc, #508]	; (8003538 <HAL_DMA_Abort_IT+0x284>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01d      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a7d      	ldr	r2, [pc, #500]	; (800353c <HAL_DMA_Abort_IT+0x288>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7c      	ldr	r2, [pc, #496]	; (8003540 <HAL_DMA_Abort_IT+0x28c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a7a      	ldr	r2, [pc, #488]	; (8003544 <HAL_DMA_Abort_IT+0x290>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a79      	ldr	r2, [pc, #484]	; (8003548 <HAL_DMA_Abort_IT+0x294>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a77      	ldr	r2, [pc, #476]	; (800354c <HAL_DMA_Abort_IT+0x298>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_DMA_Abort_IT+0xc8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a76      	ldr	r2, [pc, #472]	; (8003550 <HAL_DMA_Abort_IT+0x29c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_DMA_Abort_IT+0xcc>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_DMA_Abort_IT+0xce>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d065      	beq.n	8003452 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2204      	movs	r2, #4
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a60      	ldr	r2, [pc, #384]	; (8003514 <HAL_DMA_Abort_IT+0x260>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d04a      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5e      	ldr	r2, [pc, #376]	; (8003518 <HAL_DMA_Abort_IT+0x264>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d045      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a5d      	ldr	r2, [pc, #372]	; (800351c <HAL_DMA_Abort_IT+0x268>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d040      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_DMA_Abort_IT+0x26c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d03b      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5a      	ldr	r2, [pc, #360]	; (8003524 <HAL_DMA_Abort_IT+0x270>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d036      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_DMA_Abort_IT+0x274>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d031      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a57      	ldr	r2, [pc, #348]	; (800352c <HAL_DMA_Abort_IT+0x278>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d02c      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a55      	ldr	r2, [pc, #340]	; (8003530 <HAL_DMA_Abort_IT+0x27c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d027      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a54      	ldr	r2, [pc, #336]	; (8003534 <HAL_DMA_Abort_IT+0x280>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_DMA_Abort_IT+0x284>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a51      	ldr	r2, [pc, #324]	; (800353c <HAL_DMA_Abort_IT+0x288>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d018      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a4f      	ldr	r2, [pc, #316]	; (8003540 <HAL_DMA_Abort_IT+0x28c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a4e      	ldr	r2, [pc, #312]	; (8003544 <HAL_DMA_Abort_IT+0x290>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00e      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a4c      	ldr	r2, [pc, #304]	; (8003548 <HAL_DMA_Abort_IT+0x294>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a4b      	ldr	r2, [pc, #300]	; (800354c <HAL_DMA_Abort_IT+0x298>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_DMA_Abort_IT+0x17a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a49      	ldr	r2, [pc, #292]	; (8003550 <HAL_DMA_Abort_IT+0x29c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <HAL_DMA_Abort_IT+0x18c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e147      	b.n	80036d0 <HAL_DMA_Abort_IT+0x41c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e13e      	b.n	80036d0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 020e 	bic.w	r2, r2, #14
 8003460:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <HAL_DMA_Abort_IT+0x260>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d04a      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <HAL_DMA_Abort_IT+0x264>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d045      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a28      	ldr	r2, [pc, #160]	; (800351c <HAL_DMA_Abort_IT+0x268>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d040      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_DMA_Abort_IT+0x26c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d03b      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a25      	ldr	r2, [pc, #148]	; (8003524 <HAL_DMA_Abort_IT+0x270>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d036      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a23      	ldr	r2, [pc, #140]	; (8003528 <HAL_DMA_Abort_IT+0x274>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a22      	ldr	r2, [pc, #136]	; (800352c <HAL_DMA_Abort_IT+0x278>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d02c      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a20      	ldr	r2, [pc, #128]	; (8003530 <HAL_DMA_Abort_IT+0x27c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d027      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_DMA_Abort_IT+0x280>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_DMA_Abort_IT+0x284>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01d      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	; (800353c <HAL_DMA_Abort_IT+0x288>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <HAL_DMA_Abort_IT+0x28c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a19      	ldr	r2, [pc, #100]	; (8003544 <HAL_DMA_Abort_IT+0x290>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a17      	ldr	r2, [pc, #92]	; (8003548 <HAL_DMA_Abort_IT+0x294>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a16      	ldr	r2, [pc, #88]	; (800354c <HAL_DMA_Abort_IT+0x298>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_DMA_Abort_IT+0x24e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <HAL_DMA_Abort_IT+0x29c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d128      	bne.n	8003554 <HAL_DMA_Abort_IT+0x2a0>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e027      	b.n	8003564 <HAL_DMA_Abort_IT+0x2b0>
 8003514:	40020010 	.word	0x40020010
 8003518:	40020028 	.word	0x40020028
 800351c:	40020040 	.word	0x40020040
 8003520:	40020058 	.word	0x40020058
 8003524:	40020070 	.word	0x40020070
 8003528:	40020088 	.word	0x40020088
 800352c:	400200a0 	.word	0x400200a0
 8003530:	400200b8 	.word	0x400200b8
 8003534:	40020410 	.word	0x40020410
 8003538:	40020428 	.word	0x40020428
 800353c:	40020440 	.word	0x40020440
 8003540:	40020458 	.word	0x40020458
 8003544:	40020470 	.word	0x40020470
 8003548:	40020488 	.word	0x40020488
 800354c:	400204a0 	.word	0x400204a0
 8003550:	400204b8 	.word	0x400204b8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a5c      	ldr	r2, [pc, #368]	; (80036dc <HAL_DMA_Abort_IT+0x428>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d072      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a5b      	ldr	r2, [pc, #364]	; (80036e0 <HAL_DMA_Abort_IT+0x42c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d06d      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a59      	ldr	r2, [pc, #356]	; (80036e4 <HAL_DMA_Abort_IT+0x430>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d068      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_DMA_Abort_IT+0x434>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d063      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a56      	ldr	r2, [pc, #344]	; (80036ec <HAL_DMA_Abort_IT+0x438>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d05e      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a55      	ldr	r2, [pc, #340]	; (80036f0 <HAL_DMA_Abort_IT+0x43c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d059      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a53      	ldr	r2, [pc, #332]	; (80036f4 <HAL_DMA_Abort_IT+0x440>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d054      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a52      	ldr	r2, [pc, #328]	; (80036f8 <HAL_DMA_Abort_IT+0x444>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d04f      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a50      	ldr	r2, [pc, #320]	; (80036fc <HAL_DMA_Abort_IT+0x448>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d04a      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a4f      	ldr	r2, [pc, #316]	; (8003700 <HAL_DMA_Abort_IT+0x44c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d045      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a4d      	ldr	r2, [pc, #308]	; (8003704 <HAL_DMA_Abort_IT+0x450>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d040      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a4c      	ldr	r2, [pc, #304]	; (8003708 <HAL_DMA_Abort_IT+0x454>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d03b      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a4a      	ldr	r2, [pc, #296]	; (800370c <HAL_DMA_Abort_IT+0x458>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d036      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a49      	ldr	r2, [pc, #292]	; (8003710 <HAL_DMA_Abort_IT+0x45c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d031      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a47      	ldr	r2, [pc, #284]	; (8003714 <HAL_DMA_Abort_IT+0x460>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02c      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a46      	ldr	r2, [pc, #280]	; (8003718 <HAL_DMA_Abort_IT+0x464>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d027      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a44      	ldr	r2, [pc, #272]	; (800371c <HAL_DMA_Abort_IT+0x468>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a43      	ldr	r2, [pc, #268]	; (8003720 <HAL_DMA_Abort_IT+0x46c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a41      	ldr	r2, [pc, #260]	; (8003724 <HAL_DMA_Abort_IT+0x470>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a40      	ldr	r2, [pc, #256]	; (8003728 <HAL_DMA_Abort_IT+0x474>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3e      	ldr	r2, [pc, #248]	; (800372c <HAL_DMA_Abort_IT+0x478>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3d      	ldr	r2, [pc, #244]	; (8003730 <HAL_DMA_Abort_IT+0x47c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3b      	ldr	r2, [pc, #236]	; (8003734 <HAL_DMA_Abort_IT+0x480>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_Abort_IT+0x3a0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a3a      	ldr	r2, [pc, #232]	; (8003738 <HAL_DMA_Abort_IT+0x484>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_DMA_Abort_IT+0x3a4>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_DMA_Abort_IT+0x3a6>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d028      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800366c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2201      	movs	r2, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800368c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40020010 	.word	0x40020010
 80036e0:	40020028 	.word	0x40020028
 80036e4:	40020040 	.word	0x40020040
 80036e8:	40020058 	.word	0x40020058
 80036ec:	40020070 	.word	0x40020070
 80036f0:	40020088 	.word	0x40020088
 80036f4:	400200a0 	.word	0x400200a0
 80036f8:	400200b8 	.word	0x400200b8
 80036fc:	40020410 	.word	0x40020410
 8003700:	40020428 	.word	0x40020428
 8003704:	40020440 	.word	0x40020440
 8003708:	40020458 	.word	0x40020458
 800370c:	40020470 	.word	0x40020470
 8003710:	40020488 	.word	0x40020488
 8003714:	400204a0 	.word	0x400204a0
 8003718:	400204b8 	.word	0x400204b8
 800371c:	58025408 	.word	0x58025408
 8003720:	5802541c 	.word	0x5802541c
 8003724:	58025430 	.word	0x58025430
 8003728:	58025444 	.word	0x58025444
 800372c:	58025458 	.word	0x58025458
 8003730:	5802546c 	.word	0x5802546c
 8003734:	58025480 	.word	0x58025480
 8003738:	58025494 	.word	0x58025494

0800373c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003748:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <HAL_DMA_IRQHandler+0x1ac>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a67      	ldr	r2, [pc, #412]	; (80038ec <HAL_DMA_IRQHandler+0x1b0>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0a9b      	lsrs	r3, r3, #10
 8003754:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a5f      	ldr	r2, [pc, #380]	; (80038f0 <HAL_DMA_IRQHandler+0x1b4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d04a      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a5d      	ldr	r2, [pc, #372]	; (80038f4 <HAL_DMA_IRQHandler+0x1b8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d045      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a5c      	ldr	r2, [pc, #368]	; (80038f8 <HAL_DMA_IRQHandler+0x1bc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d040      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5a      	ldr	r2, [pc, #360]	; (80038fc <HAL_DMA_IRQHandler+0x1c0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d03b      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a59      	ldr	r2, [pc, #356]	; (8003900 <HAL_DMA_IRQHandler+0x1c4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d036      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a57      	ldr	r2, [pc, #348]	; (8003904 <HAL_DMA_IRQHandler+0x1c8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d031      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_DMA_IRQHandler+0x1cc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d02c      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a54      	ldr	r2, [pc, #336]	; (800390c <HAL_DMA_IRQHandler+0x1d0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d027      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a53      	ldr	r2, [pc, #332]	; (8003910 <HAL_DMA_IRQHandler+0x1d4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d022      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a51      	ldr	r2, [pc, #324]	; (8003914 <HAL_DMA_IRQHandler+0x1d8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01d      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a50      	ldr	r2, [pc, #320]	; (8003918 <HAL_DMA_IRQHandler+0x1dc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a4e      	ldr	r2, [pc, #312]	; (800391c <HAL_DMA_IRQHandler+0x1e0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4d      	ldr	r2, [pc, #308]	; (8003920 <HAL_DMA_IRQHandler+0x1e4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a4b      	ldr	r2, [pc, #300]	; (8003924 <HAL_DMA_IRQHandler+0x1e8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a4a      	ldr	r2, [pc, #296]	; (8003928 <HAL_DMA_IRQHandler+0x1ec>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a48      	ldr	r2, [pc, #288]	; (800392c <HAL_DMA_IRQHandler+0x1f0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_DMA_IRQHandler+0xd6>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_DMA_IRQHandler+0xd8>
 8003812:	2300      	movs	r3, #0
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 842b 	beq.w	8004070 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	2208      	movs	r2, #8
 8003824:	409a      	lsls	r2, r3
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80a2 	beq.w	8003974 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2e      	ldr	r2, [pc, #184]	; (80038f0 <HAL_DMA_IRQHandler+0x1b4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d04a      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2d      	ldr	r2, [pc, #180]	; (80038f4 <HAL_DMA_IRQHandler+0x1b8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d045      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <HAL_DMA_IRQHandler+0x1bc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d040      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <HAL_DMA_IRQHandler+0x1c0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d03b      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a28      	ldr	r2, [pc, #160]	; (8003900 <HAL_DMA_IRQHandler+0x1c4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d036      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a27      	ldr	r2, [pc, #156]	; (8003904 <HAL_DMA_IRQHandler+0x1c8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d031      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a25      	ldr	r2, [pc, #148]	; (8003908 <HAL_DMA_IRQHandler+0x1cc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d02c      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a24      	ldr	r2, [pc, #144]	; (800390c <HAL_DMA_IRQHandler+0x1d0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d027      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a22      	ldr	r2, [pc, #136]	; (8003910 <HAL_DMA_IRQHandler+0x1d4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a21      	ldr	r2, [pc, #132]	; (8003914 <HAL_DMA_IRQHandler+0x1d8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d01d      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_DMA_IRQHandler+0x1dc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d018      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_DMA_IRQHandler+0x1e0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_DMA_IRQHandler+0x1e4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_DMA_IRQHandler+0x1e8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_DMA_IRQHandler+0x1ec>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a18      	ldr	r2, [pc, #96]	; (800392c <HAL_DMA_IRQHandler+0x1f0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d12f      	bne.n	8003930 <HAL_DMA_IRQHandler+0x1f4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e02e      	b.n	8003944 <HAL_DMA_IRQHandler+0x208>
 80038e6:	bf00      	nop
 80038e8:	24000018 	.word	0x24000018
 80038ec:	1b4e81b5 	.word	0x1b4e81b5
 80038f0:	40020010 	.word	0x40020010
 80038f4:	40020028 	.word	0x40020028
 80038f8:	40020040 	.word	0x40020040
 80038fc:	40020058 	.word	0x40020058
 8003900:	40020070 	.word	0x40020070
 8003904:	40020088 	.word	0x40020088
 8003908:	400200a0 	.word	0x400200a0
 800390c:	400200b8 	.word	0x400200b8
 8003910:	40020410 	.word	0x40020410
 8003914:	40020428 	.word	0x40020428
 8003918:	40020440 	.word	0x40020440
 800391c:	40020458 	.word	0x40020458
 8003920:	40020470 	.word	0x40020470
 8003924:	40020488 	.word	0x40020488
 8003928:	400204a0 	.word	0x400204a0
 800392c:	400204b8 	.word	0x400204b8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d015      	beq.n	8003974 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0204 	bic.w	r2, r2, #4
 8003956:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2208      	movs	r2, #8
 8003962:	409a      	lsls	r2, r3
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	f043 0201 	orr.w	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	fa22 f303 	lsr.w	r3, r2, r3
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d06e      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a69      	ldr	r2, [pc, #420]	; (8003b34 <HAL_DMA_IRQHandler+0x3f8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d04a      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a67      	ldr	r2, [pc, #412]	; (8003b38 <HAL_DMA_IRQHandler+0x3fc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d045      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a66      	ldr	r2, [pc, #408]	; (8003b3c <HAL_DMA_IRQHandler+0x400>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d040      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a64      	ldr	r2, [pc, #400]	; (8003b40 <HAL_DMA_IRQHandler+0x404>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a63      	ldr	r2, [pc, #396]	; (8003b44 <HAL_DMA_IRQHandler+0x408>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d036      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a61      	ldr	r2, [pc, #388]	; (8003b48 <HAL_DMA_IRQHandler+0x40c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d031      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a60      	ldr	r2, [pc, #384]	; (8003b4c <HAL_DMA_IRQHandler+0x410>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d02c      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a5e      	ldr	r2, [pc, #376]	; (8003b50 <HAL_DMA_IRQHandler+0x414>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d027      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a5d      	ldr	r2, [pc, #372]	; (8003b54 <HAL_DMA_IRQHandler+0x418>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a5b      	ldr	r2, [pc, #364]	; (8003b58 <HAL_DMA_IRQHandler+0x41c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01d      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a5a      	ldr	r2, [pc, #360]	; (8003b5c <HAL_DMA_IRQHandler+0x420>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a58      	ldr	r2, [pc, #352]	; (8003b60 <HAL_DMA_IRQHandler+0x424>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a57      	ldr	r2, [pc, #348]	; (8003b64 <HAL_DMA_IRQHandler+0x428>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a55      	ldr	r2, [pc, #340]	; (8003b68 <HAL_DMA_IRQHandler+0x42c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a54      	ldr	r2, [pc, #336]	; (8003b6c <HAL_DMA_IRQHandler+0x430>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a52      	ldr	r2, [pc, #328]	; (8003b70 <HAL_DMA_IRQHandler+0x434>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10a      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x304>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e003      	b.n	8003a48 <HAL_DMA_IRQHandler+0x30c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00d      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f043 0202 	orr.w	r2, r3, #2
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2204      	movs	r2, #4
 8003a72:	409a      	lsls	r2, r3
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 808f 	beq.w	8003b9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <HAL_DMA_IRQHandler+0x3f8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d04a      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a2a      	ldr	r2, [pc, #168]	; (8003b38 <HAL_DMA_IRQHandler+0x3fc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d045      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a29      	ldr	r2, [pc, #164]	; (8003b3c <HAL_DMA_IRQHandler+0x400>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d040      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a27      	ldr	r2, [pc, #156]	; (8003b40 <HAL_DMA_IRQHandler+0x404>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d03b      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <HAL_DMA_IRQHandler+0x408>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d036      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <HAL_DMA_IRQHandler+0x40c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d031      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a23      	ldr	r2, [pc, #140]	; (8003b4c <HAL_DMA_IRQHandler+0x410>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d02c      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <HAL_DMA_IRQHandler+0x414>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d027      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a20      	ldr	r2, [pc, #128]	; (8003b54 <HAL_DMA_IRQHandler+0x418>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <HAL_DMA_IRQHandler+0x41c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <HAL_DMA_IRQHandler+0x420>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <HAL_DMA_IRQHandler+0x424>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <HAL_DMA_IRQHandler+0x428>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <HAL_DMA_IRQHandler+0x42c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a17      	ldr	r2, [pc, #92]	; (8003b6c <HAL_DMA_IRQHandler+0x430>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <HAL_DMA_IRQHandler+0x434>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d12a      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x438>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e023      	b.n	8003b7c <HAL_DMA_IRQHandler+0x440>
 8003b34:	40020010 	.word	0x40020010
 8003b38:	40020028 	.word	0x40020028
 8003b3c:	40020040 	.word	0x40020040
 8003b40:	40020058 	.word	0x40020058
 8003b44:	40020070 	.word	0x40020070
 8003b48:	40020088 	.word	0x40020088
 8003b4c:	400200a0 	.word	0x400200a0
 8003b50:	400200b8 	.word	0x400200b8
 8003b54:	40020410 	.word	0x40020410
 8003b58:	40020428 	.word	0x40020428
 8003b5c:	40020440 	.word	0x40020440
 8003b60:	40020458 	.word	0x40020458
 8003b64:	40020470 	.word	0x40020470
 8003b68:	40020488 	.word	0x40020488
 8003b6c:	400204a0 	.word	0x400204a0
 8003b70:	400204b8 	.word	0x400204b8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00d      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2204      	movs	r2, #4
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f043 0204 	orr.w	r2, r3, #4
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80a6 	beq.w	8003cfe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a85      	ldr	r2, [pc, #532]	; (8003dcc <HAL_DMA_IRQHandler+0x690>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a83      	ldr	r2, [pc, #524]	; (8003dd0 <HAL_DMA_IRQHandler+0x694>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a82      	ldr	r2, [pc, #520]	; (8003dd4 <HAL_DMA_IRQHandler+0x698>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a80      	ldr	r2, [pc, #512]	; (8003dd8 <HAL_DMA_IRQHandler+0x69c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a7f      	ldr	r2, [pc, #508]	; (8003ddc <HAL_DMA_IRQHandler+0x6a0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a7d      	ldr	r2, [pc, #500]	; (8003de0 <HAL_DMA_IRQHandler+0x6a4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7c      	ldr	r2, [pc, #496]	; (8003de4 <HAL_DMA_IRQHandler+0x6a8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a7a      	ldr	r2, [pc, #488]	; (8003de8 <HAL_DMA_IRQHandler+0x6ac>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a79      	ldr	r2, [pc, #484]	; (8003dec <HAL_DMA_IRQHandler+0x6b0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a77      	ldr	r2, [pc, #476]	; (8003df0 <HAL_DMA_IRQHandler+0x6b4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a76      	ldr	r2, [pc, #472]	; (8003df4 <HAL_DMA_IRQHandler+0x6b8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a74      	ldr	r2, [pc, #464]	; (8003df8 <HAL_DMA_IRQHandler+0x6bc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a73      	ldr	r2, [pc, #460]	; (8003dfc <HAL_DMA_IRQHandler+0x6c0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a71      	ldr	r2, [pc, #452]	; (8003e00 <HAL_DMA_IRQHandler+0x6c4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a70      	ldr	r2, [pc, #448]	; (8003e04 <HAL_DMA_IRQHandler+0x6c8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a6e      	ldr	r2, [pc, #440]	; (8003e08 <HAL_DMA_IRQHandler+0x6cc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d10a      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x52c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e009      	b.n	8003c7c <HAL_DMA_IRQHandler+0x540>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d03e      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2210      	movs	r2, #16
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d018      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d108      	bne.n	8003cbe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d024      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4798      	blx	r3
 8003cbc:	e01f      	b.n	8003cfe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d01b      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
 8003cce:	e016      	b.n	8003cfe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d107      	bne.n	8003cee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0208 	bic.w	r2, r2, #8
 8003cec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2220      	movs	r2, #32
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8110 	beq.w	8003f34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <HAL_DMA_IRQHandler+0x690>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d04a      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <HAL_DMA_IRQHandler+0x694>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d045      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <HAL_DMA_IRQHandler+0x698>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d040      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <HAL_DMA_IRQHandler+0x69c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d03b      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <HAL_DMA_IRQHandler+0x6a0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d036      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <HAL_DMA_IRQHandler+0x6a4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d031      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <HAL_DMA_IRQHandler+0x6a8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d02c      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <HAL_DMA_IRQHandler+0x6ac>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d027      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a20      	ldr	r2, [pc, #128]	; (8003dec <HAL_DMA_IRQHandler+0x6b0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d022      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <HAL_DMA_IRQHandler+0x6b4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d01d      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_DMA_IRQHandler+0x6b8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d018      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_DMA_IRQHandler+0x6bc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <HAL_DMA_IRQHandler+0x6c0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00e      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_DMA_IRQHandler+0x6c4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a17      	ldr	r2, [pc, #92]	; (8003e04 <HAL_DMA_IRQHandler+0x6c8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <HAL_DMA_IRQHandler+0x6cc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d12b      	bne.n	8003e0c <HAL_DMA_IRQHandler+0x6d0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf14      	ite	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	2300      	moveq	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	e02a      	b.n	8003e20 <HAL_DMA_IRQHandler+0x6e4>
 8003dca:	bf00      	nop
 8003dcc:	40020010 	.word	0x40020010
 8003dd0:	40020028 	.word	0x40020028
 8003dd4:	40020040 	.word	0x40020040
 8003dd8:	40020058 	.word	0x40020058
 8003ddc:	40020070 	.word	0x40020070
 8003de0:	40020088 	.word	0x40020088
 8003de4:	400200a0 	.word	0x400200a0
 8003de8:	400200b8 	.word	0x400200b8
 8003dec:	40020410 	.word	0x40020410
 8003df0:	40020428 	.word	0x40020428
 8003df4:	40020440 	.word	0x40020440
 8003df8:	40020458 	.word	0x40020458
 8003dfc:	40020470 	.word	0x40020470
 8003e00:	40020488 	.word	0x40020488
 8003e04:	400204a0 	.word	0x400204a0
 8003e08:	400204b8 	.word	0x400204b8
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	2300      	moveq	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8087 	beq.w	8003f34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2220      	movs	r2, #32
 8003e30:	409a      	lsls	r2, r3
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d139      	bne.n	8003eb6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0216 	bic.w	r2, r2, #22
 8003e50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_DMA_IRQHandler+0x736>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0208 	bic.w	r2, r2, #8
 8003e80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	223f      	movs	r2, #63	; 0x3f
 8003e8c:	409a      	lsls	r2, r3
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 834a 	beq.w	8004540 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
          }
          return;
 8003eb4:	e344      	b.n	8004540 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d018      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d108      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02c      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
 8003ee2:	e027      	b.n	8003f34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d023      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
 8003ef4:	e01e      	b.n	8003f34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10f      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0210 	bic.w	r2, r2, #16
 8003f12:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8306 	beq.w	800454a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8088 	beq.w	800405c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2204      	movs	r2, #4
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a7a      	ldr	r2, [pc, #488]	; (8004144 <HAL_DMA_IRQHandler+0xa08>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d04a      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a79      	ldr	r2, [pc, #484]	; (8004148 <HAL_DMA_IRQHandler+0xa0c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d045      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a77      	ldr	r2, [pc, #476]	; (800414c <HAL_DMA_IRQHandler+0xa10>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d040      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a76      	ldr	r2, [pc, #472]	; (8004150 <HAL_DMA_IRQHandler+0xa14>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d03b      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a74      	ldr	r2, [pc, #464]	; (8004154 <HAL_DMA_IRQHandler+0xa18>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d036      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a73      	ldr	r2, [pc, #460]	; (8004158 <HAL_DMA_IRQHandler+0xa1c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d031      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a71      	ldr	r2, [pc, #452]	; (800415c <HAL_DMA_IRQHandler+0xa20>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d02c      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a70      	ldr	r2, [pc, #448]	; (8004160 <HAL_DMA_IRQHandler+0xa24>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d027      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6e      	ldr	r2, [pc, #440]	; (8004164 <HAL_DMA_IRQHandler+0xa28>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d022      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6d      	ldr	r2, [pc, #436]	; (8004168 <HAL_DMA_IRQHandler+0xa2c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a6b      	ldr	r2, [pc, #428]	; (800416c <HAL_DMA_IRQHandler+0xa30>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d018      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6a      	ldr	r2, [pc, #424]	; (8004170 <HAL_DMA_IRQHandler+0xa34>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a68      	ldr	r2, [pc, #416]	; (8004174 <HAL_DMA_IRQHandler+0xa38>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a67      	ldr	r2, [pc, #412]	; (8004178 <HAL_DMA_IRQHandler+0xa3c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d009      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a65      	ldr	r2, [pc, #404]	; (800417c <HAL_DMA_IRQHandler+0xa40>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a64      	ldr	r2, [pc, #400]	; (8004180 <HAL_DMA_IRQHandler+0xa44>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <HAL_DMA_IRQHandler+0x8ca>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e007      	b.n	8004016 <HAL_DMA_IRQHandler+0x8da>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3301      	adds	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	429a      	cmp	r2, r3
 8004020:	d307      	bcc.n	8004032 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f2      	bne.n	8004016 <HAL_DMA_IRQHandler+0x8da>
 8004030:	e000      	b.n	8004034 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004032:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2203      	movs	r2, #3
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004052:	e003      	b.n	800405c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8272 	beq.w	800454a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
 800406e:	e26c      	b.n	800454a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a43      	ldr	r2, [pc, #268]	; (8004184 <HAL_DMA_IRQHandler+0xa48>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d022      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x984>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a42      	ldr	r2, [pc, #264]	; (8004188 <HAL_DMA_IRQHandler+0xa4c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d01d      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x984>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a40      	ldr	r2, [pc, #256]	; (800418c <HAL_DMA_IRQHandler+0xa50>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d018      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x984>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a3f      	ldr	r2, [pc, #252]	; (8004190 <HAL_DMA_IRQHandler+0xa54>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x984>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3d      	ldr	r2, [pc, #244]	; (8004194 <HAL_DMA_IRQHandler+0xa58>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00e      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x984>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3c      	ldr	r2, [pc, #240]	; (8004198 <HAL_DMA_IRQHandler+0xa5c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d009      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x984>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a3a      	ldr	r2, [pc, #232]	; (800419c <HAL_DMA_IRQHandler+0xa60>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x984>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a39      	ldr	r2, [pc, #228]	; (80041a0 <HAL_DMA_IRQHandler+0xa64>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_IRQHandler+0x988>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_DMA_IRQHandler+0x98a>
 80040c4:	2300      	movs	r3, #0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 823f 	beq.w	800454a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2204      	movs	r2, #4
 80040de:	409a      	lsls	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80cd 	beq.w	8004284 <HAL_DMA_IRQHandler+0xb48>
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80c7 	beq.w	8004284 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2204      	movs	r2, #4
 8004100:	409a      	lsls	r2, r3
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d049      	beq.n	80041a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8210 	beq.w	8004544 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800412c:	e20a      	b.n	8004544 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8206 	beq.w	8004544 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004140:	e200      	b.n	8004544 <HAL_DMA_IRQHandler+0xe08>
 8004142:	bf00      	nop
 8004144:	40020010 	.word	0x40020010
 8004148:	40020028 	.word	0x40020028
 800414c:	40020040 	.word	0x40020040
 8004150:	40020058 	.word	0x40020058
 8004154:	40020070 	.word	0x40020070
 8004158:	40020088 	.word	0x40020088
 800415c:	400200a0 	.word	0x400200a0
 8004160:	400200b8 	.word	0x400200b8
 8004164:	40020410 	.word	0x40020410
 8004168:	40020428 	.word	0x40020428
 800416c:	40020440 	.word	0x40020440
 8004170:	40020458 	.word	0x40020458
 8004174:	40020470 	.word	0x40020470
 8004178:	40020488 	.word	0x40020488
 800417c:	400204a0 	.word	0x400204a0
 8004180:	400204b8 	.word	0x400204b8
 8004184:	58025408 	.word	0x58025408
 8004188:	5802541c 	.word	0x5802541c
 800418c:	58025430 	.word	0x58025430
 8004190:	58025444 	.word	0x58025444
 8004194:	58025458 	.word	0x58025458
 8004198:	5802546c 	.word	0x5802546c
 800419c:	58025480 	.word	0x58025480
 80041a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d160      	bne.n	8004270 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a8c      	ldr	r2, [pc, #560]	; (80043e4 <HAL_DMA_IRQHandler+0xca8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d04a      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a8a      	ldr	r2, [pc, #552]	; (80043e8 <HAL_DMA_IRQHandler+0xcac>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d045      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a89      	ldr	r2, [pc, #548]	; (80043ec <HAL_DMA_IRQHandler+0xcb0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d040      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a87      	ldr	r2, [pc, #540]	; (80043f0 <HAL_DMA_IRQHandler+0xcb4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d03b      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a86      	ldr	r2, [pc, #536]	; (80043f4 <HAL_DMA_IRQHandler+0xcb8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d036      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a84      	ldr	r2, [pc, #528]	; (80043f8 <HAL_DMA_IRQHandler+0xcbc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d031      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a83      	ldr	r2, [pc, #524]	; (80043fc <HAL_DMA_IRQHandler+0xcc0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d02c      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a81      	ldr	r2, [pc, #516]	; (8004400 <HAL_DMA_IRQHandler+0xcc4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d027      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a80      	ldr	r2, [pc, #512]	; (8004404 <HAL_DMA_IRQHandler+0xcc8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a7e      	ldr	r2, [pc, #504]	; (8004408 <HAL_DMA_IRQHandler+0xccc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01d      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7d      	ldr	r2, [pc, #500]	; (800440c <HAL_DMA_IRQHandler+0xcd0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d018      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a7b      	ldr	r2, [pc, #492]	; (8004410 <HAL_DMA_IRQHandler+0xcd4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7a      	ldr	r2, [pc, #488]	; (8004414 <HAL_DMA_IRQHandler+0xcd8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a78      	ldr	r2, [pc, #480]	; (8004418 <HAL_DMA_IRQHandler+0xcdc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a77      	ldr	r2, [pc, #476]	; (800441c <HAL_DMA_IRQHandler+0xce0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a75      	ldr	r2, [pc, #468]	; (8004420 <HAL_DMA_IRQHandler+0xce4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d108      	bne.n	8004260 <HAL_DMA_IRQHandler+0xb24>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0208 	bic.w	r2, r2, #8
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e007      	b.n	8004270 <HAL_DMA_IRQHandler+0xb34>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0204 	bic.w	r2, r2, #4
 800426e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8165 	beq.w	8004544 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004282:	e15f      	b.n	8004544 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2202      	movs	r2, #2
 800428e:	409a      	lsls	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80c5 	beq.w	8004424 <HAL_DMA_IRQHandler+0xce8>
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80bf 	beq.w	8004424 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2202      	movs	r2, #2
 80042b0:	409a      	lsls	r2, r3
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d018      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 813a 	beq.w	8004548 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042dc:	e134      	b.n	8004548 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 8130 	beq.w	8004548 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f0:	e12a      	b.n	8004548 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d168      	bne.n	80043ce <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a38      	ldr	r2, [pc, #224]	; (80043e4 <HAL_DMA_IRQHandler+0xca8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d04a      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a37      	ldr	r2, [pc, #220]	; (80043e8 <HAL_DMA_IRQHandler+0xcac>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d045      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a35      	ldr	r2, [pc, #212]	; (80043ec <HAL_DMA_IRQHandler+0xcb0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d040      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a34      	ldr	r2, [pc, #208]	; (80043f0 <HAL_DMA_IRQHandler+0xcb4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d03b      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a32      	ldr	r2, [pc, #200]	; (80043f4 <HAL_DMA_IRQHandler+0xcb8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d036      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a31      	ldr	r2, [pc, #196]	; (80043f8 <HAL_DMA_IRQHandler+0xcbc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d031      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <HAL_DMA_IRQHandler+0xcc0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d02c      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2e      	ldr	r2, [pc, #184]	; (8004400 <HAL_DMA_IRQHandler+0xcc4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d027      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a2c      	ldr	r2, [pc, #176]	; (8004404 <HAL_DMA_IRQHandler+0xcc8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <HAL_DMA_IRQHandler+0xccc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01d      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a29      	ldr	r2, [pc, #164]	; (800440c <HAL_DMA_IRQHandler+0xcd0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a28      	ldr	r2, [pc, #160]	; (8004410 <HAL_DMA_IRQHandler+0xcd4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a26      	ldr	r2, [pc, #152]	; (8004414 <HAL_DMA_IRQHandler+0xcd8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <HAL_DMA_IRQHandler+0xcdc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a23      	ldr	r2, [pc, #140]	; (800441c <HAL_DMA_IRQHandler+0xce0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_DMA_IRQHandler+0xc60>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a22      	ldr	r2, [pc, #136]	; (8004420 <HAL_DMA_IRQHandler+0xce4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d108      	bne.n	80043ae <HAL_DMA_IRQHandler+0xc72>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0214 	bic.w	r2, r2, #20
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e007      	b.n	80043be <HAL_DMA_IRQHandler+0xc82>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 020a 	bic.w	r2, r2, #10
 80043bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80b8 	beq.w	8004548 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043e0:	e0b2      	b.n	8004548 <HAL_DMA_IRQHandler+0xe0c>
 80043e2:	bf00      	nop
 80043e4:	40020010 	.word	0x40020010
 80043e8:	40020028 	.word	0x40020028
 80043ec:	40020040 	.word	0x40020040
 80043f0:	40020058 	.word	0x40020058
 80043f4:	40020070 	.word	0x40020070
 80043f8:	40020088 	.word	0x40020088
 80043fc:	400200a0 	.word	0x400200a0
 8004400:	400200b8 	.word	0x400200b8
 8004404:	40020410 	.word	0x40020410
 8004408:	40020428 	.word	0x40020428
 800440c:	40020440 	.word	0x40020440
 8004410:	40020458 	.word	0x40020458
 8004414:	40020470 	.word	0x40020470
 8004418:	40020488 	.word	0x40020488
 800441c:	400204a0 	.word	0x400204a0
 8004420:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2208      	movs	r2, #8
 800442e:	409a      	lsls	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8088 	beq.w	800454a <HAL_DMA_IRQHandler+0xe0e>
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8082 	beq.w	800454a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a41      	ldr	r2, [pc, #260]	; (8004550 <HAL_DMA_IRQHandler+0xe14>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d04a      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3f      	ldr	r2, [pc, #252]	; (8004554 <HAL_DMA_IRQHandler+0xe18>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d045      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a3e      	ldr	r2, [pc, #248]	; (8004558 <HAL_DMA_IRQHandler+0xe1c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d040      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3c      	ldr	r2, [pc, #240]	; (800455c <HAL_DMA_IRQHandler+0xe20>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d03b      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3b      	ldr	r2, [pc, #236]	; (8004560 <HAL_DMA_IRQHandler+0xe24>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d036      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a39      	ldr	r2, [pc, #228]	; (8004564 <HAL_DMA_IRQHandler+0xe28>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d031      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a38      	ldr	r2, [pc, #224]	; (8004568 <HAL_DMA_IRQHandler+0xe2c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d02c      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a36      	ldr	r2, [pc, #216]	; (800456c <HAL_DMA_IRQHandler+0xe30>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d027      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a35      	ldr	r2, [pc, #212]	; (8004570 <HAL_DMA_IRQHandler+0xe34>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a33      	ldr	r2, [pc, #204]	; (8004574 <HAL_DMA_IRQHandler+0xe38>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01d      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a32      	ldr	r2, [pc, #200]	; (8004578 <HAL_DMA_IRQHandler+0xe3c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a30      	ldr	r2, [pc, #192]	; (800457c <HAL_DMA_IRQHandler+0xe40>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <HAL_DMA_IRQHandler+0xe44>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2d      	ldr	r2, [pc, #180]	; (8004584 <HAL_DMA_IRQHandler+0xe48>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2c      	ldr	r2, [pc, #176]	; (8004588 <HAL_DMA_IRQHandler+0xe4c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2a      	ldr	r2, [pc, #168]	; (800458c <HAL_DMA_IRQHandler+0xe50>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d108      	bne.n	80044f8 <HAL_DMA_IRQHandler+0xdbc>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 021c 	bic.w	r2, r2, #28
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <HAL_DMA_IRQHandler+0xdcc>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 020e 	bic.w	r2, r2, #14
 8004506:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2201      	movs	r2, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
 800453e:	e004      	b.n	800454a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004540:	bf00      	nop
 8004542:	e002      	b.n	800454a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004548:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800454a:	3728      	adds	r7, #40	; 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40020010 	.word	0x40020010
 8004554:	40020028 	.word	0x40020028
 8004558:	40020040 	.word	0x40020040
 800455c:	40020058 	.word	0x40020058
 8004560:	40020070 	.word	0x40020070
 8004564:	40020088 	.word	0x40020088
 8004568:	400200a0 	.word	0x400200a0
 800456c:	400200b8 	.word	0x400200b8
 8004570:	40020410 	.word	0x40020410
 8004574:	40020428 	.word	0x40020428
 8004578:	40020440 	.word	0x40020440
 800457c:	40020458 	.word	0x40020458
 8004580:	40020470 	.word	0x40020470
 8004584:	40020488 	.word	0x40020488
 8004588:	400204a0 	.word	0x400204a0
 800458c:	400204b8 	.word	0x400204b8

08004590 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a84      	ldr	r2, [pc, #528]	; (80047c0 <DMA_SetConfig+0x230>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d072      	beq.n	800469a <DMA_SetConfig+0x10a>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a82      	ldr	r2, [pc, #520]	; (80047c4 <DMA_SetConfig+0x234>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d06d      	beq.n	800469a <DMA_SetConfig+0x10a>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a81      	ldr	r2, [pc, #516]	; (80047c8 <DMA_SetConfig+0x238>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d068      	beq.n	800469a <DMA_SetConfig+0x10a>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a7f      	ldr	r2, [pc, #508]	; (80047cc <DMA_SetConfig+0x23c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d063      	beq.n	800469a <DMA_SetConfig+0x10a>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7e      	ldr	r2, [pc, #504]	; (80047d0 <DMA_SetConfig+0x240>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d05e      	beq.n	800469a <DMA_SetConfig+0x10a>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7c      	ldr	r2, [pc, #496]	; (80047d4 <DMA_SetConfig+0x244>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d059      	beq.n	800469a <DMA_SetConfig+0x10a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7b      	ldr	r2, [pc, #492]	; (80047d8 <DMA_SetConfig+0x248>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d054      	beq.n	800469a <DMA_SetConfig+0x10a>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a79      	ldr	r2, [pc, #484]	; (80047dc <DMA_SetConfig+0x24c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d04f      	beq.n	800469a <DMA_SetConfig+0x10a>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a78      	ldr	r2, [pc, #480]	; (80047e0 <DMA_SetConfig+0x250>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d04a      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a76      	ldr	r2, [pc, #472]	; (80047e4 <DMA_SetConfig+0x254>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d045      	beq.n	800469a <DMA_SetConfig+0x10a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a75      	ldr	r2, [pc, #468]	; (80047e8 <DMA_SetConfig+0x258>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d040      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a73      	ldr	r2, [pc, #460]	; (80047ec <DMA_SetConfig+0x25c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d03b      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a72      	ldr	r2, [pc, #456]	; (80047f0 <DMA_SetConfig+0x260>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d036      	beq.n	800469a <DMA_SetConfig+0x10a>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a70      	ldr	r2, [pc, #448]	; (80047f4 <DMA_SetConfig+0x264>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d031      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6f      	ldr	r2, [pc, #444]	; (80047f8 <DMA_SetConfig+0x268>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d02c      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a6d      	ldr	r2, [pc, #436]	; (80047fc <DMA_SetConfig+0x26c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d027      	beq.n	800469a <DMA_SetConfig+0x10a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6c      	ldr	r2, [pc, #432]	; (8004800 <DMA_SetConfig+0x270>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d022      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a6a      	ldr	r2, [pc, #424]	; (8004804 <DMA_SetConfig+0x274>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d01d      	beq.n	800469a <DMA_SetConfig+0x10a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a69      	ldr	r2, [pc, #420]	; (8004808 <DMA_SetConfig+0x278>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d018      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a67      	ldr	r2, [pc, #412]	; (800480c <DMA_SetConfig+0x27c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a66      	ldr	r2, [pc, #408]	; (8004810 <DMA_SetConfig+0x280>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00e      	beq.n	800469a <DMA_SetConfig+0x10a>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a64      	ldr	r2, [pc, #400]	; (8004814 <DMA_SetConfig+0x284>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a63      	ldr	r2, [pc, #396]	; (8004818 <DMA_SetConfig+0x288>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <DMA_SetConfig+0x10a>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a61      	ldr	r2, [pc, #388]	; (800481c <DMA_SetConfig+0x28c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <DMA_SetConfig+0x10e>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <DMA_SetConfig+0x110>
 800469e:	2300      	movs	r3, #0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d004      	beq.n	80046c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3e      	ldr	r2, [pc, #248]	; (80047c0 <DMA_SetConfig+0x230>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d04a      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3d      	ldr	r2, [pc, #244]	; (80047c4 <DMA_SetConfig+0x234>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d045      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3b      	ldr	r2, [pc, #236]	; (80047c8 <DMA_SetConfig+0x238>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d040      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3a      	ldr	r2, [pc, #232]	; (80047cc <DMA_SetConfig+0x23c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d03b      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a38      	ldr	r2, [pc, #224]	; (80047d0 <DMA_SetConfig+0x240>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d036      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a37      	ldr	r2, [pc, #220]	; (80047d4 <DMA_SetConfig+0x244>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d031      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a35      	ldr	r2, [pc, #212]	; (80047d8 <DMA_SetConfig+0x248>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d02c      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a34      	ldr	r2, [pc, #208]	; (80047dc <DMA_SetConfig+0x24c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d027      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a32      	ldr	r2, [pc, #200]	; (80047e0 <DMA_SetConfig+0x250>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d022      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a31      	ldr	r2, [pc, #196]	; (80047e4 <DMA_SetConfig+0x254>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d01d      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2f      	ldr	r2, [pc, #188]	; (80047e8 <DMA_SetConfig+0x258>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d018      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2e      	ldr	r2, [pc, #184]	; (80047ec <DMA_SetConfig+0x25c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <DMA_SetConfig+0x260>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00e      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <DMA_SetConfig+0x264>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d009      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <DMA_SetConfig+0x268>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <DMA_SetConfig+0x1d0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a28      	ldr	r2, [pc, #160]	; (80047fc <DMA_SetConfig+0x26c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d101      	bne.n	8004764 <DMA_SetConfig+0x1d4>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <DMA_SetConfig+0x1d6>
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d05a      	beq.n	8004820 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	223f      	movs	r2, #63	; 0x3f
 8004774:	409a      	lsls	r2, r3
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004788:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d108      	bne.n	80047ac <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047aa:	e087      	b.n	80048bc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	60da      	str	r2, [r3, #12]
}
 80047bc:	e07e      	b.n	80048bc <DMA_SetConfig+0x32c>
 80047be:	bf00      	nop
 80047c0:	40020010 	.word	0x40020010
 80047c4:	40020028 	.word	0x40020028
 80047c8:	40020040 	.word	0x40020040
 80047cc:	40020058 	.word	0x40020058
 80047d0:	40020070 	.word	0x40020070
 80047d4:	40020088 	.word	0x40020088
 80047d8:	400200a0 	.word	0x400200a0
 80047dc:	400200b8 	.word	0x400200b8
 80047e0:	40020410 	.word	0x40020410
 80047e4:	40020428 	.word	0x40020428
 80047e8:	40020440 	.word	0x40020440
 80047ec:	40020458 	.word	0x40020458
 80047f0:	40020470 	.word	0x40020470
 80047f4:	40020488 	.word	0x40020488
 80047f8:	400204a0 	.word	0x400204a0
 80047fc:	400204b8 	.word	0x400204b8
 8004800:	58025408 	.word	0x58025408
 8004804:	5802541c 	.word	0x5802541c
 8004808:	58025430 	.word	0x58025430
 800480c:	58025444 	.word	0x58025444
 8004810:	58025458 	.word	0x58025458
 8004814:	5802546c 	.word	0x5802546c
 8004818:	58025480 	.word	0x58025480
 800481c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a28      	ldr	r2, [pc, #160]	; (80048c8 <DMA_SetConfig+0x338>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <DMA_SetConfig+0x2e0>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a27      	ldr	r2, [pc, #156]	; (80048cc <DMA_SetConfig+0x33c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d01d      	beq.n	8004870 <DMA_SetConfig+0x2e0>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <DMA_SetConfig+0x340>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <DMA_SetConfig+0x2e0>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a24      	ldr	r2, [pc, #144]	; (80048d4 <DMA_SetConfig+0x344>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <DMA_SetConfig+0x2e0>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <DMA_SetConfig+0x348>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <DMA_SetConfig+0x2e0>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	; (80048dc <DMA_SetConfig+0x34c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <DMA_SetConfig+0x2e0>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <DMA_SetConfig+0x350>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <DMA_SetConfig+0x2e0>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <DMA_SetConfig+0x354>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <DMA_SetConfig+0x2e4>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <DMA_SetConfig+0x2e6>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d020      	beq.n	80048bc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	2201      	movs	r2, #1
 8004884:	409a      	lsls	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	d108      	bne.n	80048ac <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	60da      	str	r2, [r3, #12]
}
 80048aa:	e007      	b.n	80048bc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	60da      	str	r2, [r3, #12]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	58025408 	.word	0x58025408
 80048cc:	5802541c 	.word	0x5802541c
 80048d0:	58025430 	.word	0x58025430
 80048d4:	58025444 	.word	0x58025444
 80048d8:	58025458 	.word	0x58025458
 80048dc:	5802546c 	.word	0x5802546c
 80048e0:	58025480 	.word	0x58025480
 80048e4:	58025494 	.word	0x58025494

080048e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a42      	ldr	r2, [pc, #264]	; (8004a00 <DMA_CalcBaseAndBitshift+0x118>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d04a      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a41      	ldr	r2, [pc, #260]	; (8004a04 <DMA_CalcBaseAndBitshift+0x11c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d045      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a3f      	ldr	r2, [pc, #252]	; (8004a08 <DMA_CalcBaseAndBitshift+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d040      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3e      	ldr	r2, [pc, #248]	; (8004a0c <DMA_CalcBaseAndBitshift+0x124>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d03b      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3c      	ldr	r2, [pc, #240]	; (8004a10 <DMA_CalcBaseAndBitshift+0x128>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d036      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a3b      	ldr	r2, [pc, #236]	; (8004a14 <DMA_CalcBaseAndBitshift+0x12c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d031      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a39      	ldr	r2, [pc, #228]	; (8004a18 <DMA_CalcBaseAndBitshift+0x130>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d02c      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a38      	ldr	r2, [pc, #224]	; (8004a1c <DMA_CalcBaseAndBitshift+0x134>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d027      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a36      	ldr	r2, [pc, #216]	; (8004a20 <DMA_CalcBaseAndBitshift+0x138>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d022      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a35      	ldr	r2, [pc, #212]	; (8004a24 <DMA_CalcBaseAndBitshift+0x13c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d01d      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a33      	ldr	r2, [pc, #204]	; (8004a28 <DMA_CalcBaseAndBitshift+0x140>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d018      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a32      	ldr	r2, [pc, #200]	; (8004a2c <DMA_CalcBaseAndBitshift+0x144>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a30      	ldr	r2, [pc, #192]	; (8004a30 <DMA_CalcBaseAndBitshift+0x148>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00e      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2f      	ldr	r2, [pc, #188]	; (8004a34 <DMA_CalcBaseAndBitshift+0x14c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2d      	ldr	r2, [pc, #180]	; (8004a38 <DMA_CalcBaseAndBitshift+0x150>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <DMA_CalcBaseAndBitshift+0xa8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2c      	ldr	r2, [pc, #176]	; (8004a3c <DMA_CalcBaseAndBitshift+0x154>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d101      	bne.n	8004994 <DMA_CalcBaseAndBitshift+0xac>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <DMA_CalcBaseAndBitshift+0xae>
 8004994:	2300      	movs	r3, #0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d024      	beq.n	80049e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	3b10      	subs	r3, #16
 80049a2:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <DMA_CalcBaseAndBitshift+0x158>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	4a24      	ldr	r2, [pc, #144]	; (8004a44 <DMA_CalcBaseAndBitshift+0x15c>)
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d908      	bls.n	80049d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	4b1f      	ldr	r3, [pc, #124]	; (8004a48 <DMA_CalcBaseAndBitshift+0x160>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	659a      	str	r2, [r3, #88]	; 0x58
 80049d2:	e00d      	b.n	80049f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <DMA_CalcBaseAndBitshift+0x160>)
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6593      	str	r3, [r2, #88]	; 0x58
 80049e2:	e005      	b.n	80049f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40020010 	.word	0x40020010
 8004a04:	40020028 	.word	0x40020028
 8004a08:	40020040 	.word	0x40020040
 8004a0c:	40020058 	.word	0x40020058
 8004a10:	40020070 	.word	0x40020070
 8004a14:	40020088 	.word	0x40020088
 8004a18:	400200a0 	.word	0x400200a0
 8004a1c:	400200b8 	.word	0x400200b8
 8004a20:	40020410 	.word	0x40020410
 8004a24:	40020428 	.word	0x40020428
 8004a28:	40020440 	.word	0x40020440
 8004a2c:	40020458 	.word	0x40020458
 8004a30:	40020470 	.word	0x40020470
 8004a34:	40020488 	.word	0x40020488
 8004a38:	400204a0 	.word	0x400204a0
 8004a3c:	400204b8 	.word	0x400204b8
 8004a40:	aaaaaaab 	.word	0xaaaaaaab
 8004a44:	08009968 	.word	0x08009968
 8004a48:	fffffc00 	.word	0xfffffc00

08004a4c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d120      	bne.n	8004aa2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d858      	bhi.n	8004b1a <DMA_CheckFifoParam+0xce>
 8004a68:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <DMA_CheckFifoParam+0x24>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a93 	.word	0x08004a93
 8004a78:	08004a81 	.word	0x08004a81
 8004a7c:	08004b1b 	.word	0x08004b1b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d048      	beq.n	8004b1e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a90:	e045      	b.n	8004b1e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a9a:	d142      	bne.n	8004b22 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004aa0:	e03f      	b.n	8004b22 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aaa:	d123      	bne.n	8004af4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d838      	bhi.n	8004b26 <DMA_CheckFifoParam+0xda>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <DMA_CheckFifoParam+0x70>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004ad3 	.word	0x08004ad3
 8004ac4:	08004acd 	.word	0x08004acd
 8004ac8:	08004ae5 	.word	0x08004ae5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
        break;
 8004ad0:	e030      	b.n	8004b34 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d025      	beq.n	8004b2a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ae2:	e022      	b.n	8004b2a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aec:	d11f      	bne.n	8004b2e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004af2:	e01c      	b.n	8004b2e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d902      	bls.n	8004b02 <DMA_CheckFifoParam+0xb6>
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d003      	beq.n	8004b08 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b00:	e018      	b.n	8004b34 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
        break;
 8004b06:	e015      	b.n	8004b34 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00e      	beq.n	8004b32 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
    break;
 8004b18:	e00b      	b.n	8004b32 <DMA_CheckFifoParam+0xe6>
        break;
 8004b1a:	bf00      	nop
 8004b1c:	e00a      	b.n	8004b34 <DMA_CheckFifoParam+0xe8>
        break;
 8004b1e:	bf00      	nop
 8004b20:	e008      	b.n	8004b34 <DMA_CheckFifoParam+0xe8>
        break;
 8004b22:	bf00      	nop
 8004b24:	e006      	b.n	8004b34 <DMA_CheckFifoParam+0xe8>
        break;
 8004b26:	bf00      	nop
 8004b28:	e004      	b.n	8004b34 <DMA_CheckFifoParam+0xe8>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <DMA_CheckFifoParam+0xe8>
        break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <DMA_CheckFifoParam+0xe8>
    break;
 8004b32:	bf00      	nop
    }
  }

  return status;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop

08004b44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a38      	ldr	r2, [pc, #224]	; (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d022      	beq.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a36      	ldr	r2, [pc, #216]	; (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01d      	beq.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a35      	ldr	r2, [pc, #212]	; (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a33      	ldr	r2, [pc, #204]	; (8004c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a32      	ldr	r2, [pc, #200]	; (8004c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a30      	ldr	r2, [pc, #192]	; (8004c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2f      	ldr	r2, [pc, #188]	; (8004c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d101      	bne.n	8004ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01a      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	3b08      	subs	r3, #8
 8004bb4:	4a28      	ldr	r2, [pc, #160]	; (8004c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a24      	ldr	r2, [pc, #144]	; (8004c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004bd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	2201      	movs	r2, #1
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004be0:	e024      	b.n	8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3b10      	subs	r3, #16
 8004bea:	4a1e      	ldr	r2, [pc, #120]	; (8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d806      	bhi.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d902      	bls.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3308      	adds	r3, #8
 8004c08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	461a      	mov	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a16      	ldr	r2, [pc, #88]	; (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	2201      	movs	r2, #1
 8004c26:	409a      	lsls	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	58025408 	.word	0x58025408
 8004c3c:	5802541c 	.word	0x5802541c
 8004c40:	58025430 	.word	0x58025430
 8004c44:	58025444 	.word	0x58025444
 8004c48:	58025458 	.word	0x58025458
 8004c4c:	5802546c 	.word	0x5802546c
 8004c50:	58025480 	.word	0x58025480
 8004c54:	58025494 	.word	0x58025494
 8004c58:	cccccccd 	.word	0xcccccccd
 8004c5c:	16009600 	.word	0x16009600
 8004c60:	58025880 	.word	0x58025880
 8004c64:	aaaaaaab 	.word	0xaaaaaaab
 8004c68:	400204b8 	.word	0x400204b8
 8004c6c:	4002040f 	.word	0x4002040f
 8004c70:	10008200 	.word	0x10008200
 8004c74:	40020880 	.word	0x40020880

08004c78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d04a      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d847      	bhi.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a25      	ldr	r2, [pc, #148]	; (8004d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d022      	beq.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a24      	ldr	r2, [pc, #144]	; (8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d01d      	beq.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a22      	ldr	r2, [pc, #136]	; (8004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d018      	beq.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a21      	ldr	r2, [pc, #132]	; (8004d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00e      	beq.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1e      	ldr	r2, [pc, #120]	; (8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d004      	beq.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1b      	ldr	r2, [pc, #108]	; (8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d101      	bne.n	8004ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d00:	671a      	str	r2, [r3, #112]	; 0x70
 8004d02:	e009      	b.n	8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d16:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	58025408 	.word	0x58025408
 8004d34:	5802541c 	.word	0x5802541c
 8004d38:	58025430 	.word	0x58025430
 8004d3c:	58025444 	.word	0x58025444
 8004d40:	58025458 	.word	0x58025458
 8004d44:	5802546c 	.word	0x5802546c
 8004d48:	58025480 	.word	0x58025480
 8004d4c:	58025494 	.word	0x58025494
 8004d50:	1600963f 	.word	0x1600963f
 8004d54:	58025940 	.word	0x58025940
 8004d58:	1000823f 	.word	0x1000823f
 8004d5c:	40020940 	.word	0x40020940

08004d60 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e00a      	b.n	8004d92 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004d7c:	7afb      	ldrb	r3, [r7, #11]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]
      break;
 8004d88:	e002      	b.n	8004d90 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8e:	bf00      	nop
  }

  return status;
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e003      	b.n	8004dba <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	; 0x24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dd6:	4b89      	ldr	r3, [pc, #548]	; (8004ffc <HAL_GPIO_Init+0x234>)
 8004dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dda:	e194      	b.n	8005106 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	2101      	movs	r1, #1
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	fa01 f303 	lsl.w	r3, r1, r3
 8004de8:	4013      	ands	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8186 	beq.w	8005100 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d00b      	beq.n	8004e14 <HAL_GPIO_Init+0x4c>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d007      	beq.n	8004e14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e08:	2b11      	cmp	r3, #17
 8004e0a:	d003      	beq.n	8004e14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b12      	cmp	r3, #18
 8004e12:	d130      	bne.n	8004e76 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	2203      	movs	r2, #3
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43db      	mvns	r3, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4013      	ands	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	f003 0201 	and.w	r2, r3, #1
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	2203      	movs	r2, #3
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d003      	beq.n	8004eb6 <HAL_GPIO_Init+0xee>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b12      	cmp	r3, #18
 8004eb4:	d123      	bne.n	8004efe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	08da      	lsrs	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3208      	adds	r2, #8
 8004ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	220f      	movs	r2, #15
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	08da      	lsrs	r2, r3, #3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3208      	adds	r2, #8
 8004ef8:	69b9      	ldr	r1, [r7, #24]
 8004efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	2203      	movs	r2, #3
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4013      	ands	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 0203 	and.w	r2, r3, #3
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80e0 	beq.w	8005100 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f40:	4b2f      	ldr	r3, [pc, #188]	; (8005000 <HAL_GPIO_Init+0x238>)
 8004f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f46:	4a2e      	ldr	r2, [pc, #184]	; (8005000 <HAL_GPIO_Init+0x238>)
 8004f48:	f043 0302 	orr.w	r3, r3, #2
 8004f4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f50:	4b2b      	ldr	r3, [pc, #172]	; (8005000 <HAL_GPIO_Init+0x238>)
 8004f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f5e:	4a29      	ldr	r2, [pc, #164]	; (8005004 <HAL_GPIO_Init+0x23c>)
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	3302      	adds	r3, #2
 8004f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	220f      	movs	r2, #15
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a20      	ldr	r2, [pc, #128]	; (8005008 <HAL_GPIO_Init+0x240>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d052      	beq.n	8005030 <HAL_GPIO_Init+0x268>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	; (800500c <HAL_GPIO_Init+0x244>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d031      	beq.n	8004ff6 <HAL_GPIO_Init+0x22e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1e      	ldr	r2, [pc, #120]	; (8005010 <HAL_GPIO_Init+0x248>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d02b      	beq.n	8004ff2 <HAL_GPIO_Init+0x22a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <HAL_GPIO_Init+0x24c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d025      	beq.n	8004fee <HAL_GPIO_Init+0x226>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <HAL_GPIO_Init+0x250>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d01f      	beq.n	8004fea <HAL_GPIO_Init+0x222>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1b      	ldr	r2, [pc, #108]	; (800501c <HAL_GPIO_Init+0x254>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d019      	beq.n	8004fe6 <HAL_GPIO_Init+0x21e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1a      	ldr	r2, [pc, #104]	; (8005020 <HAL_GPIO_Init+0x258>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_GPIO_Init+0x21a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a19      	ldr	r2, [pc, #100]	; (8005024 <HAL_GPIO_Init+0x25c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00d      	beq.n	8004fde <HAL_GPIO_Init+0x216>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a18      	ldr	r2, [pc, #96]	; (8005028 <HAL_GPIO_Init+0x260>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d007      	beq.n	8004fda <HAL_GPIO_Init+0x212>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a17      	ldr	r2, [pc, #92]	; (800502c <HAL_GPIO_Init+0x264>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_GPIO_Init+0x20e>
 8004fd2:	2309      	movs	r3, #9
 8004fd4:	e02d      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004fd6:	230a      	movs	r3, #10
 8004fd8:	e02b      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004fda:	2308      	movs	r3, #8
 8004fdc:	e029      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004fde:	2307      	movs	r3, #7
 8004fe0:	e027      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004fe2:	2306      	movs	r3, #6
 8004fe4:	e025      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004fe6:	2305      	movs	r3, #5
 8004fe8:	e023      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004fea:	2304      	movs	r3, #4
 8004fec:	e021      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e01f      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e01d      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e01b      	b.n	8005032 <HAL_GPIO_Init+0x26a>
 8004ffa:	bf00      	nop
 8004ffc:	58000080 	.word	0x58000080
 8005000:	58024400 	.word	0x58024400
 8005004:	58000400 	.word	0x58000400
 8005008:	58020000 	.word	0x58020000
 800500c:	58020400 	.word	0x58020400
 8005010:	58020800 	.word	0x58020800
 8005014:	58020c00 	.word	0x58020c00
 8005018:	58021000 	.word	0x58021000
 800501c:	58021400 	.word	0x58021400
 8005020:	58021800 	.word	0x58021800
 8005024:	58021c00 	.word	0x58021c00
 8005028:	58022000 	.word	0x58022000
 800502c:	58022400 	.word	0x58022400
 8005030:	2300      	movs	r3, #0
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	f002 0203 	and.w	r2, r2, #3
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	4093      	lsls	r3, r2
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4313      	orrs	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005042:	4938      	ldr	r1, [pc, #224]	; (8005124 <HAL_GPIO_Init+0x35c>)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	3302      	adds	r3, #2
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	43db      	mvns	r3, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	43db      	mvns	r3, r3
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4013      	ands	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	43db      	mvns	r3, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4013      	ands	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80050ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	43db      	mvns	r3, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4013      	ands	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	f47f ae63 	bne.w	8004ddc <HAL_GPIO_Init+0x14>
  }
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	3724      	adds	r7, #36	; 0x24
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	58000400 	.word	0x58000400

08005128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	807b      	strh	r3, [r7, #2]
 8005134:	4613      	mov	r3, r2
 8005136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005138:	787b      	ldrb	r3, [r7, #1]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800513e:	887a      	ldrh	r2, [r7, #2]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005144:	e003      	b.n	800514e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005146:	887b      	ldrh	r3, [r7, #2]
 8005148:	041a      	lsls	r2, r3, #16
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	619a      	str	r2, [r3, #24]
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800516c:	887a      	ldrh	r2, [r7, #2]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4013      	ands	r3, r2
 8005172:	041a      	lsls	r2, r3, #16
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	43d9      	mvns	r1, r3
 8005178:	887b      	ldrh	r3, [r7, #2]
 800517a:	400b      	ands	r3, r1
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	619a      	str	r2, [r3, #24]
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	4603      	mov	r3, r0
 8005196:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb feab 	bl	8000f10 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80051cc:	4b19      	ldr	r3, [pc, #100]	; (8005234 <HAL_PWREx_ConfigSupply+0x70>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d00a      	beq.n	80051ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80051d8:	4b16      	ldr	r3, [pc, #88]	; (8005234 <HAL_PWREx_ConfigSupply+0x70>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d001      	beq.n	80051ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e01f      	b.n	800522a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e01d      	b.n	800522a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_PWREx_ConfigSupply+0x70>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f023 0207 	bic.w	r2, r3, #7
 80051f6:	490f      	ldr	r1, [pc, #60]	; (8005234 <HAL_PWREx_ConfigSupply+0x70>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051fe:	f7fc fcf9 	bl	8001bf4 <HAL_GetTick>
 8005202:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005204:	e009      	b.n	800521a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005206:	f7fc fcf5 	bl	8001bf4 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005214:	d901      	bls.n	800521a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e007      	b.n	800522a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_PWREx_ConfigSupply+0x70>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005226:	d1ee      	bne.n	8005206 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	58024800 	.word	0x58024800

08005238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08c      	sub	sp, #48	; 0x30
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e3ff      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8087 	beq.w	8005366 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005258:	4b99      	ldr	r3, [pc, #612]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005262:	4b97      	ldr	r3, [pc, #604]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	2b10      	cmp	r3, #16
 800526c:	d007      	beq.n	800527e <HAL_RCC_OscConfig+0x46>
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	2b18      	cmp	r3, #24
 8005272:	d110      	bne.n	8005296 <HAL_RCC_OscConfig+0x5e>
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d10b      	bne.n	8005296 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527e:	4b90      	ldr	r3, [pc, #576]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d06c      	beq.n	8005364 <HAL_RCC_OscConfig+0x12c>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d168      	bne.n	8005364 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e3d9      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529e:	d106      	bne.n	80052ae <HAL_RCC_OscConfig+0x76>
 80052a0:	4b87      	ldr	r3, [pc, #540]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a86      	ldr	r2, [pc, #536]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e02e      	b.n	800530c <HAL_RCC_OscConfig+0xd4>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x98>
 80052b6:	4b82      	ldr	r3, [pc, #520]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a81      	ldr	r2, [pc, #516]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b7f      	ldr	r3, [pc, #508]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a7e      	ldr	r2, [pc, #504]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e01d      	b.n	800530c <HAL_RCC_OscConfig+0xd4>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0xbc>
 80052da:	4b79      	ldr	r3, [pc, #484]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a78      	ldr	r2, [pc, #480]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b76      	ldr	r3, [pc, #472]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a75      	ldr	r2, [pc, #468]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0xd4>
 80052f4:	4b72      	ldr	r3, [pc, #456]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a71      	ldr	r2, [pc, #452]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4b6f      	ldr	r3, [pc, #444]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a6e      	ldr	r2, [pc, #440]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d013      	beq.n	800533c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fc fc6e 	bl	8001bf4 <HAL_GetTick>
 8005318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800531c:	f7fc fc6a 	bl	8001bf4 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	; 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e38d      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800532e:	4b64      	ldr	r3, [pc, #400]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0xe4>
 800533a:	e014      	b.n	8005366 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fc5a 	bl	8001bf4 <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005344:	f7fc fc56 	bl	8001bf4 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	; 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e379      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005356:	4b5a      	ldr	r3, [pc, #360]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x10c>
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 80ae 	beq.w	80054d0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005374:	4b52      	ldr	r3, [pc, #328]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800537c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800537e:	4b50      	ldr	r3, [pc, #320]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <HAL_RCC_OscConfig+0x162>
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	2b18      	cmp	r3, #24
 800538e:	d13a      	bne.n	8005406 <HAL_RCC_OscConfig+0x1ce>
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d135      	bne.n	8005406 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800539a:	4b49      	ldr	r3, [pc, #292]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_RCC_OscConfig+0x17a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e34b      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b2:	f7fc fc4f 	bl	8001c54 <HAL_GetREVID>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80053bc:	4293      	cmp	r3, r2
 80053be:	d817      	bhi.n	80053f0 <HAL_RCC_OscConfig+0x1b8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d108      	bne.n	80053da <HAL_RCC_OscConfig+0x1a2>
 80053c8:	4b3d      	ldr	r3, [pc, #244]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053d0:	4a3b      	ldr	r2, [pc, #236]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80053d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d8:	e07a      	b.n	80054d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053da:	4b39      	ldr	r3, [pc, #228]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	031b      	lsls	r3, r3, #12
 80053e8:	4935      	ldr	r1, [pc, #212]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ee:	e06f      	b.n	80054d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f0:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	4930      	ldr	r1, [pc, #192]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005404:	e064      	b.n	80054d0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d045      	beq.n	800549a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 0219 	bic.w	r2, r3, #25
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	4929      	ldr	r1, [pc, #164]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fc fbe8 	bl	8001bf4 <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005428:	f7fc fbe4 	bl	8001bf4 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e307      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800543a:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005446:	f7fc fc05 	bl	8001c54 <HAL_GetREVID>
 800544a:	4603      	mov	r3, r0
 800544c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005450:	4293      	cmp	r3, r2
 8005452:	d817      	bhi.n	8005484 <HAL_RCC_OscConfig+0x24c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d108      	bne.n	800546e <HAL_RCC_OscConfig+0x236>
 800545c:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005464:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546a:	6053      	str	r3, [r2, #4]
 800546c:	e030      	b.n	80054d0 <HAL_RCC_OscConfig+0x298>
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	031b      	lsls	r3, r3, #12
 800547c:	4910      	ldr	r1, [pc, #64]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 800547e:	4313      	orrs	r3, r2
 8005480:	604b      	str	r3, [r1, #4]
 8005482:	e025      	b.n	80054d0 <HAL_RCC_OscConfig+0x298>
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	061b      	lsls	r3, r3, #24
 8005492:	490b      	ldr	r1, [pc, #44]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 8005494:	4313      	orrs	r3, r2
 8005496:	604b      	str	r3, [r1, #4]
 8005498:	e01a      	b.n	80054d0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <HAL_RCC_OscConfig+0x288>)
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a6:	f7fc fba5 	bl	8001bf4 <HAL_GetTick>
 80054aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ae:	f7fc fba1 	bl	8001bf4 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d903      	bls.n	80054c4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e2c4      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
 80054c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054c4:	4ba4      	ldr	r3, [pc, #656]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ee      	bne.n	80054ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80a9 	beq.w	8005630 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054de:	4b9e      	ldr	r3, [pc, #632]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054e8:	4b9b      	ldr	r3, [pc, #620]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d007      	beq.n	8005504 <HAL_RCC_OscConfig+0x2cc>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b18      	cmp	r3, #24
 80054f8:	d13a      	bne.n	8005570 <HAL_RCC_OscConfig+0x338>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 0303 	and.w	r3, r3, #3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d135      	bne.n	8005570 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005504:	4b94      	ldr	r3, [pc, #592]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x2e4>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d001      	beq.n	800551c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e296      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800551c:	f7fc fb9a 	bl	8001c54 <HAL_GetREVID>
 8005520:	4603      	mov	r3, r0
 8005522:	f241 0203 	movw	r2, #4099	; 0x1003
 8005526:	4293      	cmp	r3, r2
 8005528:	d817      	bhi.n	800555a <HAL_RCC_OscConfig+0x322>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	2b20      	cmp	r3, #32
 8005530:	d108      	bne.n	8005544 <HAL_RCC_OscConfig+0x30c>
 8005532:	4b89      	ldr	r3, [pc, #548]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800553a:	4a87      	ldr	r2, [pc, #540]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800553c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005540:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005542:	e075      	b.n	8005630 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005544:	4b84      	ldr	r3, [pc, #528]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	069b      	lsls	r3, r3, #26
 8005552:	4981      	ldr	r1, [pc, #516]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005558:	e06a      	b.n	8005630 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800555a:	4b7f      	ldr	r3, [pc, #508]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	497b      	ldr	r1, [pc, #492]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800556a:	4313      	orrs	r3, r2
 800556c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800556e:	e05f      	b.n	8005630 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d042      	beq.n	80055fe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005578:	4b77      	ldr	r3, [pc, #476]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a76      	ldr	r2, [pc, #472]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800557e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fc fb36 	bl	8001bf4 <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800558c:	f7fc fb32 	bl	8001bf4 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e255      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800559e:	4b6e      	ldr	r3, [pc, #440]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055aa:	f7fc fb53 	bl	8001c54 <HAL_GetREVID>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d817      	bhi.n	80055e8 <HAL_RCC_OscConfig+0x3b0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d108      	bne.n	80055d2 <HAL_RCC_OscConfig+0x39a>
 80055c0:	4b65      	ldr	r3, [pc, #404]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055c8:	4a63      	ldr	r2, [pc, #396]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80055ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ce:	6053      	str	r3, [r2, #4]
 80055d0:	e02e      	b.n	8005630 <HAL_RCC_OscConfig+0x3f8>
 80055d2:	4b61      	ldr	r3, [pc, #388]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	069b      	lsls	r3, r3, #26
 80055e0:	495d      	ldr	r1, [pc, #372]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	604b      	str	r3, [r1, #4]
 80055e6:	e023      	b.n	8005630 <HAL_RCC_OscConfig+0x3f8>
 80055e8:	4b5b      	ldr	r3, [pc, #364]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	061b      	lsls	r3, r3, #24
 80055f6:	4958      	ldr	r1, [pc, #352]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60cb      	str	r3, [r1, #12]
 80055fc:	e018      	b.n	8005630 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055fe:	4b56      	ldr	r3, [pc, #344]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a55      	ldr	r2, [pc, #340]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 8005604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560a:	f7fc faf3 	bl	8001bf4 <HAL_GetTick>
 800560e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005612:	f7fc faef 	bl	8001bf4 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e212      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005624:	4b4c      	ldr	r3, [pc, #304]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f0      	bne.n	8005612 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d036      	beq.n	80056aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d019      	beq.n	8005678 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005644:	4b44      	ldr	r3, [pc, #272]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 8005646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005648:	4a43      	ldr	r2, [pc, #268]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fc fad0 	bl	8001bf4 <HAL_GetTick>
 8005654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005658:	f7fc facc 	bl	8001bf4 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e1ef      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800566a:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800566c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0x420>
 8005676:	e018      	b.n	80056aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005678:	4b37      	ldr	r3, [pc, #220]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800567a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567c:	4a36      	ldr	r2, [pc, #216]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fc fab6 	bl	8001bf4 <HAL_GetTick>
 8005688:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568c:	f7fc fab2 	bl	8001bf4 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e1d5      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800569e:	4b2e      	ldr	r3, [pc, #184]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d036      	beq.n	8005724 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d019      	beq.n	80056f2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056be:	4b26      	ldr	r3, [pc, #152]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a25      	ldr	r2, [pc, #148]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80056c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056ca:	f7fc fa93 	bl	8001bf4 <HAL_GetTick>
 80056ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056d2:	f7fc fa8f 	bl	8001bf4 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e1b2      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056e4:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x49a>
 80056f0:	e018      	b.n	8005724 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056f2:	4b19      	ldr	r3, [pc, #100]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 80056f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056fe:	f7fc fa79 	bl	8001bf4 <HAL_GetTick>
 8005702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005706:	f7fc fa75 	bl	8001bf4 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e198      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005718:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <HAL_RCC_OscConfig+0x520>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8085 	beq.w	800583c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005732:	4b0a      	ldr	r3, [pc, #40]	; (800575c <HAL_RCC_OscConfig+0x524>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a09      	ldr	r2, [pc, #36]	; (800575c <HAL_RCC_OscConfig+0x524>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800573e:	f7fc fa59 	bl	8001bf4 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005744:	e00c      	b.n	8005760 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005746:	f7fc fa55 	bl	8001bf4 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b64      	cmp	r3, #100	; 0x64
 8005752:	d905      	bls.n	8005760 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e178      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
 8005758:	58024400 	.word	0x58024400
 800575c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005760:	4b96      	ldr	r3, [pc, #600]	; (80059bc <HAL_RCC_OscConfig+0x784>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ec      	beq.n	8005746 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d106      	bne.n	8005782 <HAL_RCC_OscConfig+0x54a>
 8005774:	4b92      	ldr	r3, [pc, #584]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	4a91      	ldr	r2, [pc, #580]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	6713      	str	r3, [r2, #112]	; 0x70
 8005780:	e02d      	b.n	80057de <HAL_RCC_OscConfig+0x5a6>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10c      	bne.n	80057a4 <HAL_RCC_OscConfig+0x56c>
 800578a:	4b8d      	ldr	r3, [pc, #564]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	4a8c      	ldr	r2, [pc, #560]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005790:	f023 0301 	bic.w	r3, r3, #1
 8005794:	6713      	str	r3, [r2, #112]	; 0x70
 8005796:	4b8a      	ldr	r3, [pc, #552]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	4a89      	ldr	r2, [pc, #548]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800579c:	f023 0304 	bic.w	r3, r3, #4
 80057a0:	6713      	str	r3, [r2, #112]	; 0x70
 80057a2:	e01c      	b.n	80057de <HAL_RCC_OscConfig+0x5a6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	d10c      	bne.n	80057c6 <HAL_RCC_OscConfig+0x58e>
 80057ac:	4b84      	ldr	r3, [pc, #528]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	4a83      	ldr	r2, [pc, #524]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80057b2:	f043 0304 	orr.w	r3, r3, #4
 80057b6:	6713      	str	r3, [r2, #112]	; 0x70
 80057b8:	4b81      	ldr	r3, [pc, #516]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	4a80      	ldr	r2, [pc, #512]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6713      	str	r3, [r2, #112]	; 0x70
 80057c4:	e00b      	b.n	80057de <HAL_RCC_OscConfig+0x5a6>
 80057c6:	4b7e      	ldr	r3, [pc, #504]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	4a7d      	ldr	r2, [pc, #500]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	6713      	str	r3, [r2, #112]	; 0x70
 80057d2:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	4a7a      	ldr	r2, [pc, #488]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80057d8:	f023 0304 	bic.w	r3, r3, #4
 80057dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d015      	beq.n	8005812 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fc fa05 	bl	8001bf4 <HAL_GetTick>
 80057ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ec:	e00a      	b.n	8005804 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ee:	f7fc fa01 	bl	8001bf4 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e122      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005804:	4b6e      	ldr	r3, [pc, #440]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ee      	beq.n	80057ee <HAL_RCC_OscConfig+0x5b6>
 8005810:	e014      	b.n	800583c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005812:	f7fc f9ef 	bl	8001bf4 <HAL_GetTick>
 8005816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005818:	e00a      	b.n	8005830 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581a:	f7fc f9eb 	bl	8001bf4 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	f241 3288 	movw	r2, #5000	; 0x1388
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e10c      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005830:	4b63      	ldr	r3, [pc, #396]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ee      	bne.n	800581a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8101 	beq.w	8005a48 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005846:	4b5e      	ldr	r3, [pc, #376]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800584e:	2b18      	cmp	r3, #24
 8005850:	f000 80bc 	beq.w	80059cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	2b02      	cmp	r3, #2
 800585a:	f040 8095 	bne.w	8005988 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585e:	4b58      	ldr	r3, [pc, #352]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a57      	ldr	r2, [pc, #348]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fc f9c3 	bl	8001bf4 <HAL_GetTick>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005872:	f7fc f9bf 	bl	8001bf4 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e0e2      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005884:	4b4e      	ldr	r3, [pc, #312]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f0      	bne.n	8005872 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005890:	4b4b      	ldr	r3, [pc, #300]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005894:	4b4b      	ldr	r3, [pc, #300]	; (80059c4 <HAL_RCC_OscConfig+0x78c>)
 8005896:	4013      	ands	r3, r2
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058a0:	0112      	lsls	r2, r2, #4
 80058a2:	430a      	orrs	r2, r1
 80058a4:	4946      	ldr	r1, [pc, #280]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	628b      	str	r3, [r1, #40]	; 0x28
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	3b01      	subs	r3, #1
 80058b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b8:	3b01      	subs	r3, #1
 80058ba:	025b      	lsls	r3, r3, #9
 80058bc:	b29b      	uxth	r3, r3
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	3b01      	subs	r3, #1
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	3b01      	subs	r3, #1
 80058d4:	061b      	lsls	r3, r3, #24
 80058d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058da:	4939      	ldr	r1, [pc, #228]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80058e0:	4b37      	ldr	r3, [pc, #220]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a36      	ldr	r2, [pc, #216]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058ec:	4b34      	ldr	r3, [pc, #208]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80058ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f0:	4b35      	ldr	r3, [pc, #212]	; (80059c8 <HAL_RCC_OscConfig+0x790>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058f8:	00d2      	lsls	r2, r2, #3
 80058fa:	4931      	ldr	r1, [pc, #196]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005900:	4b2f      	ldr	r3, [pc, #188]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	f023 020c 	bic.w	r2, r3, #12
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	492c      	ldr	r1, [pc, #176]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800590e:	4313      	orrs	r3, r2
 8005910:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005912:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	f023 0202 	bic.w	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	4928      	ldr	r1, [pc, #160]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005920:	4313      	orrs	r3, r2
 8005922:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800592a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005930:	4b23      	ldr	r3, [pc, #140]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800593a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800593c:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	4a1f      	ldr	r2, [pc, #124]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005948:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005954:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800595a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800595e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005960:	f7fc f948 	bl	8001bf4 <HAL_GetTick>
 8005964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005968:	f7fc f944 	bl	8001bf4 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e067      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800597a:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0x730>
 8005986:	e05f      	b.n	8005a48 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 800598e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fc f92e 	bl	8001bf4 <HAL_GetTick>
 8005998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800599c:	f7fc f92a 	bl	8001bf4 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e04d      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <HAL_RCC_OscConfig+0x788>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f0      	bne.n	800599c <HAL_RCC_OscConfig+0x764>
 80059ba:	e045      	b.n	8005a48 <HAL_RCC_OscConfig+0x810>
 80059bc:	58024800 	.word	0x58024800
 80059c0:	58024400 	.word	0x58024400
 80059c4:	fffffc0c 	.word	0xfffffc0c
 80059c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <HAL_RCC_OscConfig+0x81c>)
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <HAL_RCC_OscConfig+0x81c>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d031      	beq.n	8005a44 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f003 0203 	and.w	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d12a      	bne.n	8005a44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d122      	bne.n	8005a44 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d11a      	bne.n	8005a44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	0a5b      	lsrs	r3, r3, #9
 8005a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d111      	bne.n	8005a44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d108      	bne.n	8005a44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	0e1b      	lsrs	r3, r3, #24
 8005a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3730      	adds	r7, #48	; 0x30
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	58024400 	.word	0x58024400

08005a58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e19c      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b8a      	ldr	r3, [pc, #552]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d910      	bls.n	8005a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b87      	ldr	r3, [pc, #540]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 020f 	bic.w	r2, r3, #15
 8005a82:	4985      	ldr	r1, [pc, #532]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8a:	4b83      	ldr	r3, [pc, #524]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d001      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e184      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d010      	beq.n	8005aca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	4b7b      	ldr	r3, [pc, #492]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d908      	bls.n	8005aca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ab8:	4b78      	ldr	r3, [pc, #480]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	4975      	ldr	r1, [pc, #468]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d010      	beq.n	8005af8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	4b70      	ldr	r3, [pc, #448]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d908      	bls.n	8005af8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ae6:	4b6d      	ldr	r3, [pc, #436]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	496a      	ldr	r1, [pc, #424]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d010      	beq.n	8005b26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	4b64      	ldr	r3, [pc, #400]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d908      	bls.n	8005b26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b14:	4b61      	ldr	r3, [pc, #388]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	495e      	ldr	r1, [pc, #376]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d010      	beq.n	8005b54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69da      	ldr	r2, [r3, #28]
 8005b36:	4b59      	ldr	r3, [pc, #356]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d908      	bls.n	8005b54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b42:	4b56      	ldr	r3, [pc, #344]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4953      	ldr	r1, [pc, #332]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d010      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	4b4d      	ldr	r3, [pc, #308]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d908      	bls.n	8005b82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b70:	4b4a      	ldr	r3, [pc, #296]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f023 020f 	bic.w	r2, r3, #15
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4947      	ldr	r1, [pc, #284]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d055      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b8e:	4b43      	ldr	r3, [pc, #268]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4940      	ldr	r1, [pc, #256]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d107      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ba8:	4b3c      	ldr	r3, [pc, #240]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d121      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0f6      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bc0:	4b36      	ldr	r3, [pc, #216]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d115      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0ea      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bd8:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d109      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0de      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be8:	4b2c      	ldr	r3, [pc, #176]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0d6      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bf8:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f023 0207 	bic.w	r2, r3, #7
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4925      	ldr	r1, [pc, #148]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0a:	f7fb fff3 	bl	8001bf4 <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c10:	e00a      	b.n	8005c28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c12:	f7fb ffef 	bl	8001bf4 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0be      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c28:	4b1c      	ldr	r3, [pc, #112]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d1eb      	bne.n	8005c12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d208      	bcs.n	8005c68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f023 020f 	bic.w	r2, r3, #15
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	490e      	ldr	r1, [pc, #56]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d214      	bcs.n	8005ca0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c76:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f023 020f 	bic.w	r2, r3, #15
 8005c7e:	4906      	ldr	r1, [pc, #24]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c86:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e086      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
 8005c98:	52002000 	.word	0x52002000
 8005c9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d010      	beq.n	8005cce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d208      	bcs.n	8005cce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cbc:	4b3c      	ldr	r3, [pc, #240]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	4939      	ldr	r1, [pc, #228]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d010      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d208      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cea:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	492e      	ldr	r1, [pc, #184]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d010      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699a      	ldr	r2, [r3, #24]
 8005d0c:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d208      	bcs.n	8005d2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	4922      	ldr	r1, [pc, #136]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d010      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69da      	ldr	r2, [r3, #28]
 8005d3a:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d208      	bcs.n	8005d58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d46:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	4917      	ldr	r1, [pc, #92]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d58:	f000 f834 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	4912      	ldr	r1, [pc, #72]	; (8005db4 <HAL_RCC_ClockConfig+0x35c>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	4a0d      	ldr	r2, [pc, #52]	; (8005db4 <HAL_RCC_ClockConfig+0x35c>)
 8005d80:	5cd3      	ldrb	r3, [r2, r3]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8c:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <HAL_RCC_ClockConfig+0x360>)
 8005d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d90:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <HAL_RCC_ClockConfig+0x364>)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d96:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <HAL_RCC_ClockConfig+0x368>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fb fee0 	bl	8001b60 <HAL_InitTick>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	58024400 	.word	0x58024400
 8005db4:	08009958 	.word	0x08009958
 8005db8:	2400001c 	.word	0x2400001c
 8005dbc:	24000018 	.word	0x24000018
 8005dc0:	24000020 	.word	0x24000020

08005dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b089      	sub	sp, #36	; 0x24
 8005dc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dca:	4bb3      	ldr	r3, [pc, #716]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd2:	2b18      	cmp	r3, #24
 8005dd4:	f200 8155 	bhi.w	8006082 <HAL_RCC_GetSysClockFreq+0x2be>
 8005dd8:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e45 	.word	0x08005e45
 8005de4:	08006083 	.word	0x08006083
 8005de8:	08006083 	.word	0x08006083
 8005dec:	08006083 	.word	0x08006083
 8005df0:	08006083 	.word	0x08006083
 8005df4:	08006083 	.word	0x08006083
 8005df8:	08006083 	.word	0x08006083
 8005dfc:	08006083 	.word	0x08006083
 8005e00:	08005e6b 	.word	0x08005e6b
 8005e04:	08006083 	.word	0x08006083
 8005e08:	08006083 	.word	0x08006083
 8005e0c:	08006083 	.word	0x08006083
 8005e10:	08006083 	.word	0x08006083
 8005e14:	08006083 	.word	0x08006083
 8005e18:	08006083 	.word	0x08006083
 8005e1c:	08006083 	.word	0x08006083
 8005e20:	08005e71 	.word	0x08005e71
 8005e24:	08006083 	.word	0x08006083
 8005e28:	08006083 	.word	0x08006083
 8005e2c:	08006083 	.word	0x08006083
 8005e30:	08006083 	.word	0x08006083
 8005e34:	08006083 	.word	0x08006083
 8005e38:	08006083 	.word	0x08006083
 8005e3c:	08006083 	.word	0x08006083
 8005e40:	08005e77 	.word	0x08005e77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e44:	4b94      	ldr	r3, [pc, #592]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e50:	4b91      	ldr	r3, [pc, #580]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	08db      	lsrs	r3, r3, #3
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	4a90      	ldr	r2, [pc, #576]	; (800609c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e62:	e111      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e64:	4b8d      	ldr	r3, [pc, #564]	; (800609c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e66:	61bb      	str	r3, [r7, #24]
    break;
 8005e68:	e10e      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e6a:	4b8d      	ldr	r3, [pc, #564]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e6c:	61bb      	str	r3, [r7, #24]
    break;
 8005e6e:	e10b      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e70:	4b8c      	ldr	r3, [pc, #560]	; (80060a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e72:	61bb      	str	r3, [r7, #24]
    break;
 8005e74:	e108      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e76:	4b88      	ldr	r3, [pc, #544]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e80:	4b85      	ldr	r3, [pc, #532]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e8c:	4b82      	ldr	r3, [pc, #520]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e96:	4b80      	ldr	r3, [pc, #512]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	08db      	lsrs	r3, r3, #3
 8005e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80e1 	beq.w	800607c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	f000 8083 	beq.w	8005fc8 <HAL_RCC_GetSysClockFreq+0x204>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	f200 80a1 	bhi.w	800600c <HAL_RCC_GetSysClockFreq+0x248>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x114>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d056      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ed6:	e099      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed8:	4b6f      	ldr	r3, [pc, #444]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02d      	beq.n	8005f40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ee4:	4b6c      	ldr	r3, [pc, #432]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	4a6b      	ldr	r2, [pc, #428]	; (800609c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	ee07 3a90 	vmov	s15, r3
 8005efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0e:	4b62      	ldr	r3, [pc, #392]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f22:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f3e:	e087      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060ac <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f52:	4b51      	ldr	r3, [pc, #324]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f66:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f82:	e065      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f96:	4b40      	ldr	r3, [pc, #256]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005faa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc6:	e043      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fda:	4b2f      	ldr	r3, [pc, #188]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800600a:	e021      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006016:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800601a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601e:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006032:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800604e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006050:	4b11      	ldr	r3, [pc, #68]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	0a5b      	lsrs	r3, r3, #9
 8006056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605a:	3301      	adds	r3, #1
 800605c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006068:	edd7 6a07 	vldr	s13, [r7, #28]
 800606c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006074:	ee17 3a90 	vmov	r3, s15
 8006078:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800607a:	e005      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	61bb      	str	r3, [r7, #24]
    break;
 8006080:	e002      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006082:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006084:	61bb      	str	r3, [r7, #24]
    break;
 8006086:	bf00      	nop
  }

  return sysclockfreq;
 8006088:	69bb      	ldr	r3, [r7, #24]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3724      	adds	r7, #36	; 0x24
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	58024400 	.word	0x58024400
 800609c:	03d09000 	.word	0x03d09000
 80060a0:	003d0900 	.word	0x003d0900
 80060a4:	007f2815 	.word	0x007f2815
 80060a8:	46000000 	.word	0x46000000
 80060ac:	4c742400 	.word	0x4c742400
 80060b0:	4a742400 	.word	0x4a742400
 80060b4:	4afe502a 	.word	0x4afe502a

080060b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060be:	f7ff fe81 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4b10      	ldr	r3, [pc, #64]	; (8006108 <HAL_RCC_GetHCLKFreq+0x50>)
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	490f      	ldr	r1, [pc, #60]	; (800610c <HAL_RCC_GetHCLKFreq+0x54>)
 80060d0:	5ccb      	ldrb	r3, [r1, r3]
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	fa22 f303 	lsr.w	r3, r2, r3
 80060da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <HAL_RCC_GetHCLKFreq+0x50>)
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	4a09      	ldr	r2, [pc, #36]	; (800610c <HAL_RCC_GetHCLKFreq+0x54>)
 80060e6:	5cd3      	ldrb	r3, [r2, r3]
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	fa22 f303 	lsr.w	r3, r2, r3
 80060f2:	4a07      	ldr	r2, [pc, #28]	; (8006110 <HAL_RCC_GetHCLKFreq+0x58>)
 80060f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060f6:	4a07      	ldr	r2, [pc, #28]	; (8006114 <HAL_RCC_GetHCLKFreq+0x5c>)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <HAL_RCC_GetHCLKFreq+0x58>)
 80060fe:	681b      	ldr	r3, [r3, #0]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	58024400 	.word	0x58024400
 800610c:	08009958 	.word	0x08009958
 8006110:	2400001c 	.word	0x2400001c
 8006114:	24000018 	.word	0x24000018

08006118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800611c:	f7ff ffcc 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 8006120:	4602      	mov	r2, r0
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	091b      	lsrs	r3, r3, #4
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	4904      	ldr	r1, [pc, #16]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800612e:	5ccb      	ldrb	r3, [r1, r3]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	58024400 	.word	0x58024400
 8006140:	08009958 	.word	0x08009958

08006144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006148:	f7ff ffb6 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 800614c:	4602      	mov	r2, r0
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	0a1b      	lsrs	r3, r3, #8
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	4904      	ldr	r1, [pc, #16]	; (800616c <HAL_RCC_GetPCLK2Freq+0x28>)
 800615a:	5ccb      	ldrb	r3, [r1, r3]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006164:	4618      	mov	r0, r3
 8006166:	bd80      	pop	{r7, pc}
 8006168:	58024400 	.word	0x58024400
 800616c:	08009958 	.word	0x08009958

08006170 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006178:	2300      	movs	r3, #0
 800617a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800617c:	2300      	movs	r3, #0
 800617e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d03f      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006194:	d02a      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006196:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800619a:	d824      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800619c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a0:	d018      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a6:	d81e      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b0:	d007      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061b2:	e018      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b4:	4bab      	ldr	r3, [pc, #684]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	4aaa      	ldr	r2, [pc, #680]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061c0:	e015      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3304      	adds	r3, #4
 80061c6:	2102      	movs	r1, #2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f9cf 	bl	800756c <RCCEx_PLL2_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061d2:	e00c      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	2102      	movs	r1, #2
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 fa78 	bl	80076d0 <RCCEx_PLL3_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061e4:	e003      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]
      break;
 80061ea:	e000      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d109      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061f4:	4b9b      	ldr	r3, [pc, #620]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006200:	4998      	ldr	r1, [pc, #608]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006202:	4313      	orrs	r3, r2
 8006204:	650b      	str	r3, [r1, #80]	; 0x50
 8006206:	e001      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d03d      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	2b04      	cmp	r3, #4
 800621e:	d826      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	0800623d 	.word	0x0800623d
 800622c:	0800624b 	.word	0x0800624b
 8006230:	0800625d 	.word	0x0800625d
 8006234:	08006275 	.word	0x08006275
 8006238:	08006275 	.word	0x08006275
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623c:	4b89      	ldr	r3, [pc, #548]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4a88      	ldr	r2, [pc, #544]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006248:	e015      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f001 f98b 	bl	800756c <RCCEx_PLL2_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800625a:	e00c      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3324      	adds	r3, #36	; 0x24
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fa34 	bl	80076d0 <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800626c:	e003      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
      break;
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800627c:	4b79      	ldr	r3, [pc, #484]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800627e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006280:	f023 0207 	bic.w	r2, r3, #7
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006288:	4976      	ldr	r1, [pc, #472]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800628a:	4313      	orrs	r3, r2
 800628c:	650b      	str	r3, [r1, #80]	; 0x50
 800628e:	e001      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629c:	2b00      	cmp	r3, #0
 800629e:	d042      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a8:	d02b      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ae:	d825      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062b0:	2bc0      	cmp	r3, #192	; 0xc0
 80062b2:	d028      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062b4:	2bc0      	cmp	r3, #192	; 0xc0
 80062b6:	d821      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d016      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80062bc:	2b80      	cmp	r3, #128	; 0x80
 80062be:	d81d      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d007      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80062c8:	e018      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ca:	4b66      	ldr	r3, [pc, #408]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	4a65      	ldr	r2, [pc, #404]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062d6:	e017      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f944 	bl	800756c <RCCEx_PLL2_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062e8:	e00e      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3324      	adds	r3, #36	; 0x24
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f9ed 	bl	80076d0 <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062fa:	e005      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006300:	e002      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800630e:	4b55      	ldr	r3, [pc, #340]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006312:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631a:	4952      	ldr	r1, [pc, #328]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800631c:	4313      	orrs	r3, r2
 800631e:	650b      	str	r3, [r1, #80]	; 0x50
 8006320:	e001      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632e:	2b00      	cmp	r3, #0
 8006330:	d049      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800633c:	d030      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800633e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006342:	d82a      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006344:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006348:	d02c      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800634a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800634e:	d824      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006354:	d018      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800635a:	d81e      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006364:	d007      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006366:	e018      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006368:	4b3e      	ldr	r3, [pc, #248]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	4a3d      	ldr	r2, [pc, #244]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800636e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006374:	e017      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3304      	adds	r3, #4
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f001 f8f5 	bl	800756c <RCCEx_PLL2_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006386:	e00e      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3324      	adds	r3, #36	; 0x24
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f001 f99e 	bl	80076d0 <RCCEx_PLL3_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006398:	e005      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
      break;
 800639e:	e002      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063a0:	bf00      	nop
 80063a2:	e000      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063ac:	4b2d      	ldr	r3, [pc, #180]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063ba:	492a      	ldr	r1, [pc, #168]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	658b      	str	r3, [r1, #88]	; 0x58
 80063c0:	e001      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d04c      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063dc:	d030      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80063de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e2:	d82a      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063e8:	d02c      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80063ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063ee:	d824      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063f4:	d018      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80063f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063fa:	d81e      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006404:	d007      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006406:	e018      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006408:	4b16      	ldr	r3, [pc, #88]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800640e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006414:	e017      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3304      	adds	r3, #4
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f8a5 	bl	800756c <RCCEx_PLL2_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006426:	e00e      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3324      	adds	r3, #36	; 0x24
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f94e 	bl	80076d0 <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006438:	e005      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	75fb      	strb	r3, [r7, #23]
      break;
 800643e:	e002      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006440:	bf00      	nop
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10d      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800644e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006450:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800645a:	4902      	ldr	r1, [pc, #8]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800645c:	4313      	orrs	r3, r2
 800645e:	658b      	str	r3, [r1, #88]	; 0x58
 8006460:	e004      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006462:	bf00      	nop
 8006464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d032      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d01c      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006480:	2b30      	cmp	r3, #48	; 0x30
 8006482:	d817      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006484:	2b20      	cmp	r3, #32
 8006486:	d00c      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006488:	2b20      	cmp	r3, #32
 800648a:	d813      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d016      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006490:	2b10      	cmp	r3, #16
 8006492:	d10f      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006494:	4baf      	ldr	r3, [pc, #700]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	4aae      	ldr	r2, [pc, #696]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800649a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800649e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064a0:	e00e      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3304      	adds	r3, #4
 80064a6:	2102      	movs	r1, #2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 f85f 	bl	800756c <RCCEx_PLL2_Config>
 80064ae:	4603      	mov	r3, r0
 80064b0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064b2:	e005      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
      break;
 80064b8:	e002      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064c6:	4ba3      	ldr	r3, [pc, #652]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d2:	49a0      	ldr	r1, [pc, #640]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064d8:	e001      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d047      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f2:	d030      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80064f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f8:	d82a      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80064fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064fe:	d02c      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006500:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006504:	d824      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650a:	d018      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800650c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006510:	d81e      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	d007      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800651c:	e018      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800651e:	4b8d      	ldr	r3, [pc, #564]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	4a8c      	ldr	r2, [pc, #560]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006528:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800652a:	e017      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f001 f81a 	bl	800756c <RCCEx_PLL2_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800653c:	e00e      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3324      	adds	r3, #36	; 0x24
 8006542:	2100      	movs	r1, #0
 8006544:	4618      	mov	r0, r3
 8006546:	f001 f8c3 	bl	80076d0 <RCCEx_PLL3_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800654e:	e005      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	75fb      	strb	r3, [r7, #23]
      break;
 8006554:	e002      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006556:	bf00      	nop
 8006558:	e000      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800655a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006562:	4b7c      	ldr	r3, [pc, #496]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006566:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656e:	4979      	ldr	r1, [pc, #484]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006570:	4313      	orrs	r3, r2
 8006572:	650b      	str	r3, [r1, #80]	; 0x50
 8006574:	e001      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d049      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800658a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800658e:	d02e      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006594:	d828      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800659a:	d02a      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800659c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065a0:	d822      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065a6:	d026      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80065a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ac:	d81c      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b2:	d010      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80065b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b8:	d816      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01d      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c2:	d111      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	2101      	movs	r1, #1
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 ffce 	bl	800756c <RCCEx_PLL2_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065d4:	e012      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3324      	adds	r3, #36	; 0x24
 80065da:	2101      	movs	r1, #1
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 f877 	bl	80076d0 <RCCEx_PLL3_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065e6:	e009      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
      break;
 80065ec:	e006      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065ee:	bf00      	nop
 80065f0:	e004      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065f2:	bf00      	nop
 80065f4:	e002      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065f6:	bf00      	nop
 80065f8:	e000      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80065fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d109      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006602:	4b54      	ldr	r3, [pc, #336]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006606:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660e:	4951      	ldr	r1, [pc, #324]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006610:	4313      	orrs	r3, r2
 8006612:	650b      	str	r3, [r1, #80]	; 0x50
 8006614:	e001      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d04b      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800662c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006630:	d02e      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006636:	d828      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663c:	d02a      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	d822      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006644:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006648:	d026      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800664a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800664e:	d81c      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006654:	d010      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665a:	d816      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01d      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006664:	d111      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	2101      	movs	r1, #1
 800666c:	4618      	mov	r0, r3
 800666e:	f000 ff7d 	bl	800756c <RCCEx_PLL2_Config>
 8006672:	4603      	mov	r3, r0
 8006674:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006676:	e012      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3324      	adds	r3, #36	; 0x24
 800667c:	2101      	movs	r1, #1
 800667e:	4618      	mov	r0, r3
 8006680:	f001 f826 	bl	80076d0 <RCCEx_PLL3_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006688:	e009      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
      break;
 800668e:	e006      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006690:	bf00      	nop
 8006692:	e004      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006694:	bf00      	nop
 8006696:	e002      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006698:	bf00      	nop
 800669a:	e000      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800669c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066a4:	4b2b      	ldr	r3, [pc, #172]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066b2:	4928      	ldr	r1, [pc, #160]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	658b      	str	r3, [r1, #88]	; 0x58
 80066b8:	e001      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d02f      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d2:	d00e      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d8:	d814      	bhi.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d015      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80066de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e2:	d10f      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e4:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	4a1a      	ldr	r2, [pc, #104]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066f0:	e00c      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3304      	adds	r3, #4
 80066f6:	2101      	movs	r1, #1
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 ff37 	bl	800756c <RCCEx_PLL2_Config>
 80066fe:	4603      	mov	r3, r0
 8006700:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006702:	e003      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	75fb      	strb	r3, [r7, #23]
      break;
 8006708:	e000      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800670a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d109      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006712:	4b10      	ldr	r3, [pc, #64]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006716:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671e:	490d      	ldr	r1, [pc, #52]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006720:	4313      	orrs	r3, r2
 8006722:	650b      	str	r3, [r1, #80]	; 0x50
 8006724:	e001      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d033      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	2b03      	cmp	r3, #3
 800673c:	d81c      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	0800677f 	.word	0x0800677f
 8006748:	08006759 	.word	0x08006759
 800674c:	08006767 	.word	0x08006767
 8006750:	0800677f 	.word	0x0800677f
 8006754:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006758:	4bb8      	ldr	r3, [pc, #736]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4ab7      	ldr	r2, [pc, #732]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800675e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006764:	e00c      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2102      	movs	r1, #2
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fefd 	bl	800756c <RCCEx_PLL2_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006776:	e003      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
      break;
 800677c:	e000      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800677e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006786:	4bad      	ldr	r3, [pc, #692]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	f023 0203 	bic.w	r2, r3, #3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	49aa      	ldr	r1, [pc, #680]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006794:	4313      	orrs	r3, r2
 8006796:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006798:	e001      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 8086 	beq.w	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ac:	4ba4      	ldr	r3, [pc, #656]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4aa3      	ldr	r2, [pc, #652]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067b8:	f7fb fa1c 	bl	8001bf4 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067be:	e009      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c0:	f7fb fa18 	bl	8001bf4 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b64      	cmp	r3, #100	; 0x64
 80067cc:	d902      	bls.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	75fb      	strb	r3, [r7, #23]
        break;
 80067d2:	e005      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d4:	4b9a      	ldr	r3, [pc, #616]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0ef      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d166      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067e6:	4b95      	ldr	r3, [pc, #596]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067f0:	4053      	eors	r3, r2
 80067f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d013      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067fa:	4b90      	ldr	r3, [pc, #576]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006802:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006804:	4b8d      	ldr	r3, [pc, #564]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	4a8c      	ldr	r2, [pc, #560]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800680a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006810:	4b8a      	ldr	r3, [pc, #552]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4a89      	ldr	r2, [pc, #548]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800681a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800681c:	4a87      	ldr	r2, [pc, #540]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682c:	d115      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682e:	f7fb f9e1 	bl	8001bf4 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006834:	e00b      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fb f9dd 	bl	8001bf4 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d902      	bls.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	75fb      	strb	r3, [r7, #23]
            break;
 800684c:	e005      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684e:	4b7b      	ldr	r3, [pc, #492]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0ed      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d126      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686e:	d10d      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006870:	4b72      	ldr	r3, [pc, #456]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800687e:	0919      	lsrs	r1, r3, #4
 8006880:	4b70      	ldr	r3, [pc, #448]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006882:	400b      	ands	r3, r1
 8006884:	496d      	ldr	r1, [pc, #436]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006886:	4313      	orrs	r3, r2
 8006888:	610b      	str	r3, [r1, #16]
 800688a:	e005      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800688c:	4b6b      	ldr	r3, [pc, #428]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	4a6a      	ldr	r2, [pc, #424]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006892:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006896:	6113      	str	r3, [r2, #16]
 8006898:	4b68      	ldr	r3, [pc, #416]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800689a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a6:	4965      	ldr	r1, [pc, #404]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	670b      	str	r3, [r1, #112]	; 0x70
 80068ac:	e004      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	75bb      	strb	r3, [r7, #22]
 80068b2:	e001      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d07e      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c8:	2b28      	cmp	r3, #40	; 0x28
 80068ca:	d867      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	080069a3 	.word	0x080069a3
 80068d8:	0800699d 	.word	0x0800699d
 80068dc:	0800699d 	.word	0x0800699d
 80068e0:	0800699d 	.word	0x0800699d
 80068e4:	0800699d 	.word	0x0800699d
 80068e8:	0800699d 	.word	0x0800699d
 80068ec:	0800699d 	.word	0x0800699d
 80068f0:	0800699d 	.word	0x0800699d
 80068f4:	08006979 	.word	0x08006979
 80068f8:	0800699d 	.word	0x0800699d
 80068fc:	0800699d 	.word	0x0800699d
 8006900:	0800699d 	.word	0x0800699d
 8006904:	0800699d 	.word	0x0800699d
 8006908:	0800699d 	.word	0x0800699d
 800690c:	0800699d 	.word	0x0800699d
 8006910:	0800699d 	.word	0x0800699d
 8006914:	0800698b 	.word	0x0800698b
 8006918:	0800699d 	.word	0x0800699d
 800691c:	0800699d 	.word	0x0800699d
 8006920:	0800699d 	.word	0x0800699d
 8006924:	0800699d 	.word	0x0800699d
 8006928:	0800699d 	.word	0x0800699d
 800692c:	0800699d 	.word	0x0800699d
 8006930:	0800699d 	.word	0x0800699d
 8006934:	080069a3 	.word	0x080069a3
 8006938:	0800699d 	.word	0x0800699d
 800693c:	0800699d 	.word	0x0800699d
 8006940:	0800699d 	.word	0x0800699d
 8006944:	0800699d 	.word	0x0800699d
 8006948:	0800699d 	.word	0x0800699d
 800694c:	0800699d 	.word	0x0800699d
 8006950:	0800699d 	.word	0x0800699d
 8006954:	080069a3 	.word	0x080069a3
 8006958:	0800699d 	.word	0x0800699d
 800695c:	0800699d 	.word	0x0800699d
 8006960:	0800699d 	.word	0x0800699d
 8006964:	0800699d 	.word	0x0800699d
 8006968:	0800699d 	.word	0x0800699d
 800696c:	0800699d 	.word	0x0800699d
 8006970:	0800699d 	.word	0x0800699d
 8006974:	080069a3 	.word	0x080069a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	2101      	movs	r1, #1
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fdf4 	bl	800756c <RCCEx_PLL2_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006988:	e00c      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3324      	adds	r3, #36	; 0x24
 800698e:	2101      	movs	r1, #1
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fe9d 	bl	80076d0 <RCCEx_PLL3_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800699a:	e003      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	75fb      	strb	r3, [r7, #23]
      break;
 80069a0:	e000      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80069a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069aa:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b6:	4921      	ldr	r1, [pc, #132]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	654b      	str	r3, [r1, #84]	; 0x54
 80069bc:	e001      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d03e      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d2:	2b05      	cmp	r3, #5
 80069d4:	d820      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80069d6:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80069d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069dc:	08006a1f 	.word	0x08006a1f
 80069e0:	080069f5 	.word	0x080069f5
 80069e4:	08006a07 	.word	0x08006a07
 80069e8:	08006a1f 	.word	0x08006a1f
 80069ec:	08006a1f 	.word	0x08006a1f
 80069f0:	08006a1f 	.word	0x08006a1f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3304      	adds	r3, #4
 80069f8:	2101      	movs	r1, #1
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fdb6 	bl	800756c <RCCEx_PLL2_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a04:	e00c      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3324      	adds	r3, #36	; 0x24
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fe5f 	bl	80076d0 <RCCEx_PLL3_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a16:	e003      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1c:	e000      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d110      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a26:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	f023 0207 	bic.w	r2, r3, #7
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a32:	4902      	ldr	r1, [pc, #8]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	654b      	str	r3, [r1, #84]	; 0x54
 8006a38:	e008      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006a3a:	bf00      	nop
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	58024800 	.word	0x58024800
 8006a44:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d039      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5e:	2b05      	cmp	r3, #5
 8006a60:	d820      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006aab 	.word	0x08006aab
 8006a6c:	08006a81 	.word	0x08006a81
 8006a70:	08006a93 	.word	0x08006a93
 8006a74:	08006aab 	.word	0x08006aab
 8006a78:	08006aab 	.word	0x08006aab
 8006a7c:	08006aab 	.word	0x08006aab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	2101      	movs	r1, #1
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fd70 	bl	800756c <RCCEx_PLL2_Config>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a90:	e00c      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3324      	adds	r3, #36	; 0x24
 8006a96:	2101      	movs	r1, #1
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fe19 	bl	80076d0 <RCCEx_PLL3_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006aa2:	e003      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ab2:	4bb7      	ldr	r3, [pc, #732]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab6:	f023 0207 	bic.w	r2, r3, #7
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac0:	49b3      	ldr	r1, [pc, #716]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ac6:	e001      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d04b      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ae2:	d02e      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ae8:	d828      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aee:	d02a      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af4:	d822      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006af6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006afa:	d026      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006afc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b00:	d81c      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b06:	d010      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b0c:	d816      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01d      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b16:	d111      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fd24 	bl	800756c <RCCEx_PLL2_Config>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b28:	e012      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3324      	adds	r3, #36	; 0x24
 8006b2e:	2102      	movs	r1, #2
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fdcd 	bl	80076d0 <RCCEx_PLL3_Config>
 8006b36:	4603      	mov	r3, r0
 8006b38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b3a:	e009      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b40:	e006      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b42:	bf00      	nop
 8006b44:	e004      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b46:	bf00      	nop
 8006b48:	e002      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b56:	4b8e      	ldr	r3, [pc, #568]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b64:	498a      	ldr	r1, [pc, #552]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	654b      	str	r3, [r1, #84]	; 0x54
 8006b6a:	e001      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
 8006b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d04b      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b86:	d02e      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006b88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b8c:	d828      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b92:	d02a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b98:	d822      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b9e:	d026      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba4:	d81c      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006baa:	d010      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb0:	d816      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01d      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bba:	d111      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fcd2 	bl	800756c <RCCEx_PLL2_Config>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bcc:	e012      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3324      	adds	r3, #36	; 0x24
 8006bd2:	2102      	movs	r1, #2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fd7b 	bl	80076d0 <RCCEx_PLL3_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bde:	e009      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	e006      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006be6:	bf00      	nop
 8006be8:	e004      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006bea:	bf00      	nop
 8006bec:	e002      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e000      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bfa:	4b65      	ldr	r3, [pc, #404]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c08:	4961      	ldr	r1, [pc, #388]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c0e:	e001      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d04b      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c2a:	d02e      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006c2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c30:	d828      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c36:	d02a      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3c:	d822      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c42:	d026      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006c44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c48:	d81c      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4e:	d010      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c54:	d816      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01d      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5e:	d111      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	2100      	movs	r1, #0
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fc80 	bl	800756c <RCCEx_PLL2_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c70:	e012      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3324      	adds	r3, #36	; 0x24
 8006c76:	2102      	movs	r1, #2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fd29 	bl	80076d0 <RCCEx_PLL3_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c82:	e009      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	75fb      	strb	r3, [r7, #23]
      break;
 8006c88:	e006      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c9e:	4b3c      	ldr	r3, [pc, #240]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cac:	4938      	ldr	r1, [pc, #224]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	658b      	str	r3, [r1, #88]	; 0x58
 8006cb2:	e001      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01a      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cce:	d10a      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3324      	adds	r3, #36	; 0x24
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fcfa 	bl	80076d0 <RCCEx_PLL3_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ce6:	4b2a      	ldr	r3, [pc, #168]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf4:	4926      	ldr	r1, [pc, #152]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0310 	and.w	r3, r3, #16
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d01a      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d10:	d10a      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3324      	adds	r3, #36	; 0x24
 8006d16:	2102      	movs	r1, #2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fcd9 	bl	80076d0 <RCCEx_PLL3_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d28:	4b19      	ldr	r3, [pc, #100]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d36:	4916      	ldr	r1, [pc, #88]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d036      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d52:	d01f      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d58:	d817      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d62:	d009      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006d64:	e011      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fbfd 	bl	800756c <RCCEx_PLL2_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d76:	e00e      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3324      	adds	r3, #36	; 0x24
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fca6 	bl	80076d0 <RCCEx_PLL3_Config>
 8006d84:	4603      	mov	r3, r0
 8006d86:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d88:	e005      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8e:	e002      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006d90:	58024400 	.word	0x58024400
      break;
 8006d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d9c:	4b93      	ldr	r3, [pc, #588]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006daa:	4990      	ldr	r1, [pc, #576]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	658b      	str	r3, [r1, #88]	; 0x58
 8006db0:	e001      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d033      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dcc:	d01c      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006dce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dd2:	d816      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd8:	d003      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dde:	d007      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006de0:	e00f      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de2:	4b82      	ldr	r3, [pc, #520]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	4a81      	ldr	r2, [pc, #516]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006dee:	e00c      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3324      	adds	r3, #36	; 0x24
 8006df4:	2101      	movs	r1, #1
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fc6a 	bl	80076d0 <RCCEx_PLL3_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e00:	e003      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75fb      	strb	r3, [r7, #23]
      break;
 8006e06:	e000      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e10:	4b76      	ldr	r3, [pc, #472]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e1e:	4973      	ldr	r1, [pc, #460]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	654b      	str	r3, [r1, #84]	; 0x54
 8006e24:	e001      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d029      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e42:	d007      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006e44:	e00f      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e46:	4b69      	ldr	r3, [pc, #420]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	4a68      	ldr	r2, [pc, #416]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e52:	e00b      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	2102      	movs	r1, #2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fb86 	bl	800756c <RCCEx_PLL2_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e72:	4b5e      	ldr	r3, [pc, #376]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7e:	495b      	ldr	r1, [pc, #364]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e84:	e001      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3324      	adds	r3, #36	; 0x24
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fc17 	bl	80076d0 <RCCEx_PLL3_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d030      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec0:	d017      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec6:	d811      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ecc:	d013      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed2:	d80b      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006edc:	d106      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ede:	4b43      	ldr	r3, [pc, #268]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	4a42      	ldr	r2, [pc, #264]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006eea:	e007      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef0:	e004      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e002      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006ef6:	bf00      	nop
 8006ef8:	e000      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f02:	4b3a      	ldr	r3, [pc, #232]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f0e:	4937      	ldr	r1, [pc, #220]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	654b      	str	r3, [r1, #84]	; 0x54
 8006f14:	e001      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d008      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f26:	4b31      	ldr	r3, [pc, #196]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f32:	492e      	ldr	r1, [pc, #184]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f44:	4b29      	ldr	r3, [pc, #164]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f52:	4926      	ldr	r1, [pc, #152]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d008      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f64:	4b21      	ldr	r3, [pc, #132]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f70:	491e      	ldr	r1, [pc, #120]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00d      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f82:	4b1a      	ldr	r3, [pc, #104]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	4a19      	ldr	r2, [pc, #100]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f8c:	6113      	str	r3, [r2, #16]
 8006f8e:	4b17      	ldr	r3, [pc, #92]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f98:	4914      	ldr	r1, [pc, #80]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	da08      	bge.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fa6:	4b11      	ldr	r3, [pc, #68]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006faa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb2:	490e      	ldr	r1, [pc, #56]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fc4:	4b09      	ldr	r3, [pc, #36]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd2:	4906      	ldr	r1, [pc, #24]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006fd8:	7dbb      	ldrb	r3, [r7, #22]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e000      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	58024400 	.word	0x58024400

08006ff0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ff4:	f7ff f860 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	4b06      	ldr	r3, [pc, #24]	; (8007014 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	4904      	ldr	r1, [pc, #16]	; (8007018 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007006:	5ccb      	ldrb	r3, [r1, r3]
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007010:	4618      	mov	r0, r3
 8007012:	bd80      	pop	{r7, pc}
 8007014:	58024400 	.word	0x58024400
 8007018:	08009958 	.word	0x08009958

0800701c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800701c:	b480      	push	{r7}
 800701e:	b089      	sub	sp, #36	; 0x24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007024:	4ba1      	ldr	r3, [pc, #644]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800702e:	4b9f      	ldr	r3, [pc, #636]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	0b1b      	lsrs	r3, r3, #12
 8007034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007038:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800703a:	4b9c      	ldr	r3, [pc, #624]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	091b      	lsrs	r3, r3, #4
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007046:	4b99      	ldr	r3, [pc, #612]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704a:	08db      	lsrs	r3, r3, #3
 800704c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 8111 	beq.w	800728c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b02      	cmp	r3, #2
 800706e:	f000 8083 	beq.w	8007178 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	2b02      	cmp	r3, #2
 8007076:	f200 80a1 	bhi.w	80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d056      	beq.n	8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007086:	e099      	b.n	80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007088:	4b88      	ldr	r3, [pc, #544]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02d      	beq.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007094:	4b85      	ldr	r3, [pc, #532]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	08db      	lsrs	r3, r3, #3
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	4a84      	ldr	r2, [pc, #528]	; (80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
 80070a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	ee07 3a90 	vmov	s15, r3
 80070ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070be:	4b7b      	ldr	r3, [pc, #492]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80070d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070ee:	e087      	b.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007102:	4b6a      	ldr	r3, [pc, #424]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007112:	ed97 6a03 	vldr	s12, [r7, #12]
 8007116:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800711a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007132:	e065      	b.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007146:	4b59      	ldr	r3, [pc, #356]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007156:	ed97 6a03 	vldr	s12, [r7, #12]
 800715a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800715e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007176:	e043      	b.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b48      	ldr	r3, [pc, #288]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a03 	vldr	s12, [r7, #12]
 800719e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ba:	e021      	b.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b37      	ldr	r3, [pc, #220]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007200:	4b2a      	ldr	r3, [pc, #168]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	0a5b      	lsrs	r3, r3, #9
 8007206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800721a:	edd7 6a07 	vldr	s13, [r7, #28]
 800721e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007226:	ee17 2a90 	vmov	r2, s15
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800722e:	4b1f      	ldr	r3, [pc, #124]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	0c1b      	lsrs	r3, r3, #16
 8007234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007244:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007248:	edd7 6a07 	vldr	s13, [r7, #28]
 800724c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007254:	ee17 2a90 	vmov	r2, s15
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800725c:	4b13      	ldr	r3, [pc, #76]	; (80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007276:	edd7 6a07 	vldr	s13, [r7, #28]
 800727a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800727e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007282:	ee17 2a90 	vmov	r2, s15
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800728a:	e008      	b.n	800729e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	609a      	str	r2, [r3, #8]
}
 800729e:	bf00      	nop
 80072a0:	3724      	adds	r7, #36	; 0x24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	58024400 	.word	0x58024400
 80072b0:	03d09000 	.word	0x03d09000
 80072b4:	46000000 	.word	0x46000000
 80072b8:	4c742400 	.word	0x4c742400
 80072bc:	4a742400 	.word	0x4a742400
 80072c0:	4afe502a 	.word	0x4afe502a

080072c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b089      	sub	sp, #36	; 0x24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072cc:	4ba1      	ldr	r3, [pc, #644]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80072d6:	4b9f      	ldr	r3, [pc, #636]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072da:	0d1b      	lsrs	r3, r3, #20
 80072dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072e2:	4b9c      	ldr	r3, [pc, #624]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	0a1b      	lsrs	r3, r3, #8
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80072ee:	4b99      	ldr	r3, [pc, #612]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	08db      	lsrs	r3, r3, #3
 80072f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	fb02 f303 	mul.w	r3, r2, r3
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8111 	beq.w	8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b02      	cmp	r3, #2
 8007316:	f000 8083 	beq.w	8007420 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b02      	cmp	r3, #2
 800731e:	f200 80a1 	bhi.w	8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d056      	beq.n	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800732e:	e099      	b.n	8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007330:	4b88      	ldr	r3, [pc, #544]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	d02d      	beq.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800733c:	4b85      	ldr	r3, [pc, #532]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	08db      	lsrs	r3, r3, #3
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	4a84      	ldr	r2, [pc, #528]	; (8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
 800734c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b7b      	ldr	r3, [pc, #492]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a03 	vldr	s12, [r7, #12]
 800737a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800755c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007396:	e087      	b.n	80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b6a      	ldr	r3, [pc, #424]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80073be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800755c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073da:	e065      	b.n	80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b59      	ldr	r3, [pc, #356]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007402:	eddf 5a56 	vldr	s11, [pc, #344]	; 800755c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800741e:	e043      	b.n	80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	4b48      	ldr	r3, [pc, #288]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007442:	ed97 6a03 	vldr	s12, [r7, #12]
 8007446:	eddf 5a45 	vldr	s11, [pc, #276]	; 800755c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800744a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007462:	e021      	b.n	80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007476:	4b37      	ldr	r3, [pc, #220]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	ed97 6a03 	vldr	s12, [r7, #12]
 800748a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800755c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800748e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800749a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80074a8:	4b2a      	ldr	r3, [pc, #168]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	0a5b      	lsrs	r3, r3, #9
 80074ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ce:	ee17 2a90 	vmov	r2, s15
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80074d6:	4b1f      	ldr	r3, [pc, #124]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	0c1b      	lsrs	r3, r3, #16
 80074dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e0:	ee07 3a90 	vmov	s15, r3
 80074e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074fc:	ee17 2a90 	vmov	r2, s15
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007504:	4b13      	ldr	r3, [pc, #76]	; (8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	0e1b      	lsrs	r3, r3, #24
 800750a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800751a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800751e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752a:	ee17 2a90 	vmov	r2, s15
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007532:	e008      	b.n	8007546 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	609a      	str	r2, [r3, #8]
}
 8007546:	bf00      	nop
 8007548:	3724      	adds	r7, #36	; 0x24
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	58024400 	.word	0x58024400
 8007558:	03d09000 	.word	0x03d09000
 800755c:	46000000 	.word	0x46000000
 8007560:	4c742400 	.word	0x4c742400
 8007564:	4a742400 	.word	0x4a742400
 8007568:	4afe502a 	.word	0x4afe502a

0800756c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800757a:	4b53      	ldr	r3, [pc, #332]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	2b03      	cmp	r3, #3
 8007584:	d101      	bne.n	800758a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e099      	b.n	80076be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800758a:	4b4f      	ldr	r3, [pc, #316]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a4e      	ldr	r2, [pc, #312]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007590:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007596:	f7fa fb2d 	bl	8001bf4 <HAL_GetTick>
 800759a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800759c:	e008      	b.n	80075b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800759e:	f7fa fb29 	bl	8001bf4 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e086      	b.n	80076be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075b0:	4b45      	ldr	r3, [pc, #276]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1f0      	bne.n	800759e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075bc:	4b42      	ldr	r3, [pc, #264]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	031b      	lsls	r3, r3, #12
 80075ca:	493f      	ldr	r1, [pc, #252]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	628b      	str	r3, [r1, #40]	; 0x28
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	3b01      	subs	r3, #1
 80075e0:	025b      	lsls	r3, r3, #9
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	061b      	lsls	r3, r3, #24
 80075fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007600:	4931      	ldr	r1, [pc, #196]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007602:	4313      	orrs	r3, r2
 8007604:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007606:	4b30      	ldr	r3, [pc, #192]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	492d      	ldr	r1, [pc, #180]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007614:	4313      	orrs	r3, r2
 8007616:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007618:	4b2b      	ldr	r3, [pc, #172]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	f023 0220 	bic.w	r2, r3, #32
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	4928      	ldr	r1, [pc, #160]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007626:	4313      	orrs	r3, r2
 8007628:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800762a:	4b27      	ldr	r3, [pc, #156]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007630:	f023 0310 	bic.w	r3, r3, #16
 8007634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007636:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800763a:	4b24      	ldr	r3, [pc, #144]	; (80076cc <RCCEx_PLL2_Config+0x160>)
 800763c:	4013      	ands	r3, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	69d2      	ldr	r2, [r2, #28]
 8007642:	00d2      	lsls	r2, r2, #3
 8007644:	4920      	ldr	r1, [pc, #128]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007646:	4313      	orrs	r3, r2
 8007648:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800764a:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007650:	f043 0310 	orr.w	r3, r3, #16
 8007654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800765c:	4b1a      	ldr	r3, [pc, #104]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007668:	e00f      	b.n	800768a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d106      	bne.n	800767e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007670:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800767a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800767c:	e005      	b.n	800768a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800767e:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	4a11      	ldr	r2, [pc, #68]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007688:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800768a:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a0e      	ldr	r2, [pc, #56]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 8007690:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007696:	f7fa faad 	bl	8001bf4 <HAL_GetTick>
 800769a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800769c:	e008      	b.n	80076b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800769e:	f7fa faa9 	bl	8001bf4 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d901      	bls.n	80076b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e006      	b.n	80076be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076b0:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <RCCEx_PLL2_Config+0x15c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0f0      	beq.n	800769e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	58024400 	.word	0x58024400
 80076cc:	ffff0007 	.word	0xffff0007

080076d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076de:	4b53      	ldr	r3, [pc, #332]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d101      	bne.n	80076ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e099      	b.n	8007822 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076ee:	4b4f      	ldr	r3, [pc, #316]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a4e      	ldr	r2, [pc, #312]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80076f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fa:	f7fa fa7b 	bl	8001bf4 <HAL_GetTick>
 80076fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007700:	e008      	b.n	8007714 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007702:	f7fa fa77 	bl	8001bf4 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d901      	bls.n	8007714 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e086      	b.n	8007822 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007714:	4b45      	ldr	r3, [pc, #276]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1f0      	bne.n	8007702 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007720:	4b42      	ldr	r3, [pc, #264]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	051b      	lsls	r3, r3, #20
 800772e:	493f      	ldr	r1, [pc, #252]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 8007730:	4313      	orrs	r3, r2
 8007732:	628b      	str	r3, [r1, #40]	; 0x28
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	3b01      	subs	r3, #1
 800773a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	3b01      	subs	r3, #1
 8007744:	025b      	lsls	r3, r3, #9
 8007746:	b29b      	uxth	r3, r3
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	3b01      	subs	r3, #1
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	3b01      	subs	r3, #1
 800775e:	061b      	lsls	r3, r3, #24
 8007760:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007764:	4931      	ldr	r1, [pc, #196]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 8007766:	4313      	orrs	r3, r2
 8007768:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800776a:	4b30      	ldr	r3, [pc, #192]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 800776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	492d      	ldr	r1, [pc, #180]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 8007778:	4313      	orrs	r3, r2
 800777a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800777c:	4b2b      	ldr	r3, [pc, #172]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	4928      	ldr	r1, [pc, #160]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 800778a:	4313      	orrs	r3, r2
 800778c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800778e:	4b27      	ldr	r3, [pc, #156]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	4a26      	ldr	r2, [pc, #152]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 8007794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 800779c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800779e:	4b24      	ldr	r3, [pc, #144]	; (8007830 <RCCEx_PLL3_Config+0x160>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	69d2      	ldr	r2, [r2, #28]
 80077a6:	00d2      	lsls	r2, r2, #3
 80077a8:	4920      	ldr	r1, [pc, #128]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077ae:	4b1f      	ldr	r3, [pc, #124]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	4a1e      	ldr	r2, [pc, #120]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077c0:	4b1a      	ldr	r3, [pc, #104]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	4a19      	ldr	r2, [pc, #100]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077cc:	e00f      	b.n	80077ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d106      	bne.n	80077e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077d4:	4b15      	ldr	r3, [pc, #84]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	4a14      	ldr	r2, [pc, #80]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077e0:	e005      	b.n	80077ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077e2:	4b12      	ldr	r3, [pc, #72]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	4a11      	ldr	r2, [pc, #68]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077ee:	4b0f      	ldr	r3, [pc, #60]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a0e      	ldr	r2, [pc, #56]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 80077f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077fa:	f7fa f9fb 	bl	8001bf4 <HAL_GetTick>
 80077fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007800:	e008      	b.n	8007814 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007802:	f7fa f9f7 	bl	8001bf4 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e006      	b.n	8007822 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <RCCEx_PLL3_Config+0x15c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0f0      	beq.n	8007802 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	58024400 	.word	0x58024400
 8007830:	ffff0007 	.word	0xffff0007

08007834 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e0eb      	b.n	8007a22 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a75      	ldr	r2, [pc, #468]	; (8007a2c <HAL_SPI_Init+0x1f8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00f      	beq.n	800787a <HAL_SPI_Init+0x46>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a74      	ldr	r2, [pc, #464]	; (8007a30 <HAL_SPI_Init+0x1fc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00a      	beq.n	800787a <HAL_SPI_Init+0x46>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a72      	ldr	r2, [pc, #456]	; (8007a34 <HAL_SPI_Init+0x200>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d005      	beq.n	800787a <HAL_SPI_Init+0x46>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b0f      	cmp	r3, #15
 8007874:	d901      	bls.n	800787a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e0d3      	b.n	8007a22 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fb8a 	bl	8007f94 <SPI_GetPacketSize>
 8007880:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a69      	ldr	r2, [pc, #420]	; (8007a2c <HAL_SPI_Init+0x1f8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00c      	beq.n	80078a6 <HAL_SPI_Init+0x72>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a67      	ldr	r2, [pc, #412]	; (8007a30 <HAL_SPI_Init+0x1fc>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d007      	beq.n	80078a6 <HAL_SPI_Init+0x72>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a66      	ldr	r2, [pc, #408]	; (8007a34 <HAL_SPI_Init+0x200>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d002      	beq.n	80078a6 <HAL_SPI_Init+0x72>
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d811      	bhi.n	80078ca <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078aa:	4a60      	ldr	r2, [pc, #384]	; (8007a2c <HAL_SPI_Init+0x1f8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a5e      	ldr	r2, [pc, #376]	; (8007a30 <HAL_SPI_Init+0x1fc>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_SPI_Init+0x90>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a5d      	ldr	r2, [pc, #372]	; (8007a34 <HAL_SPI_Init+0x200>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d104      	bne.n	80078ce <HAL_SPI_Init+0x9a>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b10      	cmp	r3, #16
 80078c8:	d901      	bls.n	80078ce <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e0a9      	b.n	8007a22 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7f9 fbae 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0201 	bic.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007908:	d119      	bne.n	800793e <HAL_SPI_Init+0x10a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007912:	d103      	bne.n	800791c <HAL_SPI_Init+0xe8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	2b00      	cmp	r3, #0
 800791a:	d008      	beq.n	800792e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10c      	bne.n	800793e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800792c:	d107      	bne.n	800793e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800793c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69da      	ldr	r2, [r3, #28]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	431a      	orrs	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007950:	ea42 0103 	orr.w	r1, r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	431a      	orrs	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	431a      	orrs	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	431a      	orrs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	431a      	orrs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799e:	ea42 0103 	orr.w	r1, r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d113      	bne.n	80079de <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40013000 	.word	0x40013000
 8007a30:	40003800 	.word	0x40003800
 8007a34:	40003c00 	.word	0x40003c00

08007a38 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007a50:	6a3a      	ldr	r2, [r7, #32]
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	4013      	ands	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a6a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3330      	adds	r3, #48	; 0x30
 8007a72:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d113      	bne.n	8007aa6 <HAL_SPI_IRQHandler+0x6e>
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10e      	bne.n	8007aa6 <HAL_SPI_IRQHandler+0x6e>
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
    handled = 1UL;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10f      	bne.n	8007ad0 <HAL_SPI_IRQHandler+0x98>
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <HAL_SPI_IRQHandler+0x98>
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
    handled = 1UL;
 8007acc:	2301      	movs	r3, #1
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10f      	bne.n	8007afa <HAL_SPI_IRQHandler+0xc2>
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <HAL_SPI_IRQHandler+0xc2>
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d105      	bne.n	8007afa <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
    handled = 1UL;
 8007af6:	2301      	movs	r3, #1
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f040 816f 	bne.w	8007de0 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 80a0 	beq.w	8007c4e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 0208 	orr.w	r2, r2, #8
 8007b1c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699a      	ldr	r2, [r3, #24]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0210 	orr.w	r2, r2, #16
 8007b2c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699a      	ldr	r2, [r3, #24]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b3c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0208 	bic.w	r2, r2, #8
 8007b4c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00f      	beq.n	8007b78 <HAL_SPI_IRQHandler+0x140>
 8007b58:	7cfb      	ldrb	r3, [r7, #19]
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d004      	beq.n	8007b68 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <HAL_SPI_IRQHandler+0x140>
 8007b68:	7cfb      	ldrb	r3, [r7, #19]
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d059      	beq.n	8007c22 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d154      	bne.n	8007c22 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d13d      	bne.n	8007c02 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007b86:	e036      	b.n	8007bf6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2b0f      	cmp	r3, #15
 8007b8e:	d90b      	bls.n	8007ba8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b9a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba0:	1d1a      	adds	r2, r3, #4
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	665a      	str	r2, [r3, #100]	; 0x64
 8007ba6:	e01d      	b.n	8007be4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b07      	cmp	r3, #7
 8007bae:	d90b      	bls.n	8007bc8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	8812      	ldrh	r2, [r2, #0]
 8007bb8:	b292      	uxth	r2, r2
 8007bba:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc0:	1c9a      	adds	r2, r3, #2
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	665a      	str	r2, [r3, #100]	; 0x64
 8007bc6:	e00d      	b.n	8007be4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd4:	7812      	ldrb	r2, [r2, #0]
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1c2      	bne.n	8007b88 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f926 	bl	8007e54 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7f9 f9c0 	bl	8000fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007c20:	e0e3      	b.n	8007dea <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007c22:	7cfb      	ldrb	r3, [r7, #19]
 8007c24:	2b05      	cmp	r3, #5
 8007c26:	d103      	bne.n	8007c30 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f8ef 	bl	8007e0c <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007c2e:	e0d9      	b.n	8007de4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007c30:	7cfb      	ldrb	r3, [r7, #19]
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d103      	bne.n	8007c3e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7f9 f982 	bl	8000f40 <HAL_SPI_RxCpltCallback>
    return;
 8007c3c:	e0d2      	b.n	8007de4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007c3e:	7cfb      	ldrb	r3, [r7, #19]
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	f040 80cf 	bne.w	8007de4 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f8d6 	bl	8007df8 <HAL_SPI_TxCpltCallback>
    return;
 8007c4c:	e0ca      	b.n	8007de4 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00d      	beq.n	8007c74 <HAL_SPI_IRQHandler+0x23c>
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d008      	beq.n	8007c74 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699a      	ldr	r2, [r3, #24]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c70:	619a      	str	r2, [r3, #24]

    return;
 8007c72:	e0ba      	b.n	8007dea <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 80b5 	beq.w	8007dea <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00f      	beq.n	8007caa <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c90:	f043 0204 	orr.w	r2, r3, #4
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	699a      	ldr	r2, [r3, #24]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ca8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00f      	beq.n	8007cd4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cba:	f043 0201 	orr.w	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cd2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00f      	beq.n	8007cfe <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce4:	f043 0208 	orr.w	r2, r3, #8
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699a      	ldr	r2, [r3, #24]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cfc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00f      	beq.n	8007d28 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0220 	orr.w	r2, r2, #32
 8007d26:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d05a      	beq.n	8007de8 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6919      	ldr	r1, [r3, #16]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	4b28      	ldr	r3, [pc, #160]	; (8007df0 <HAL_SPI_IRQHandler+0x3b8>)
 8007d4e:	400b      	ands	r3, r1
 8007d50:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d5c:	d138      	bne.n	8007dd0 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d6c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d013      	beq.n	8007d9e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7a:	4a1e      	ldr	r2, [pc, #120]	; (8007df4 <HAL_SPI_IRQHandler+0x3bc>)
 8007d7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fb fa96 	bl	80032b4 <HAL_DMA_Abort_IT>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d020      	beq.n	8007de8 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007daa:	4a12      	ldr	r2, [pc, #72]	; (8007df4 <HAL_SPI_IRQHandler+0x3bc>)
 8007dac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fb fa7e 	bl	80032b4 <HAL_DMA_Abort_IT>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d014      	beq.n	8007de8 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007dce:	e00b      	b.n	8007de8 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7f9 f8e1 	bl	8000fa0 <HAL_SPI_ErrorCallback>
    return;
 8007dde:	e003      	b.n	8007de8 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007de0:	bf00      	nop
 8007de2:	e002      	b.n	8007dea <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007de4:	bf00      	nop
 8007de6:	e000      	b.n	8007dea <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007de8:	bf00      	nop
  }
}
 8007dea:	3728      	adds	r7, #40	; 0x28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	fffffc94 	.word	0xfffffc94
 8007df4:	08007e21 	.word	0x08007e21

08007df8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7f9 f8aa 	bl	8000fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0208 	orr.w	r2, r2, #8
 8007e72:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0210 	orr.w	r2, r2, #16
 8007e82:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0201 	bic.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6919      	ldr	r1, [r3, #16]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b3c      	ldr	r3, [pc, #240]	; (8007f90 <SPI_CloseTransfer+0x13c>)
 8007ea0:	400b      	ands	r3, r1
 8007ea2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007eb2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d014      	beq.n	8007eea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00f      	beq.n	8007eea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0220 	orr.w	r2, r2, #32
 8007ee8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d014      	beq.n	8007f20 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00f      	beq.n	8007f20 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f06:	f043 0204 	orr.w	r2, r3, #4
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699a      	ldr	r2, [r3, #24]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f1e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f30:	f043 0201 	orr.w	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699a      	ldr	r2, [r3, #24]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f48:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00f      	beq.n	8007f74 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5a:	f043 0208 	orr.w	r2, r3, #8
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f72:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007f84:	bf00      	nop
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	fffffc90 	.word	0xfffffc90

08007f94 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	3301      	adds	r3, #1
 8007fac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	3307      	adds	r3, #7
 8007fb2:	08db      	lsrs	r3, r3, #3
 8007fb4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	fb02 f303 	mul.w	r3, r2, r3
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e042      	b.n	8008062 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7f9 f990 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2224      	movs	r2, #36	; 0x24
 8007ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0201 	bic.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fb7d 	bl	800870c <UART_SetConfig>
 8008012:	4603      	mov	r3, r0
 8008014:	2b01      	cmp	r3, #1
 8008016:	d101      	bne.n	800801c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e022      	b.n	8008062 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 f8d1 	bl	80091cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008038:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008048:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f042 0201 	orr.w	r2, r2, #1
 8008058:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f958 	bl	8009310 <UART_CheckIdleState>
 8008060:	4603      	mov	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008080:	2b20      	cmp	r3, #32
 8008082:	d168      	bne.n	8008156 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <HAL_UART_Transmit_DMA+0x24>
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e061      	b.n	8008158 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_UART_Transmit_DMA+0x36>
 800809e:	2302      	movs	r3, #2
 80080a0:	e05a      	b.n	8008158 <HAL_UART_Transmit_DMA+0xec>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	88fa      	ldrh	r2, [r7, #6]
 80080b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	88fa      	ldrh	r2, [r7, #6]
 80080bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2221      	movs	r2, #33	; 0x21
 80080cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d02c      	beq.n	8008132 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080dc:	4a20      	ldr	r2, [pc, #128]	; (8008160 <HAL_UART_Transmit_DMA+0xf4>)
 80080de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080e4:	4a1f      	ldr	r2, [pc, #124]	; (8008164 <HAL_UART_Transmit_DMA+0xf8>)
 80080e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ec:	4a1e      	ldr	r2, [pc, #120]	; (8008168 <HAL_UART_Transmit_DMA+0xfc>)
 80080ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080f4:	2200      	movs	r2, #0
 80080f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008100:	4619      	mov	r1, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3328      	adds	r3, #40	; 0x28
 8008108:	461a      	mov	r2, r3
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	f7fa fb4a 	bl	80027a4 <HAL_DMA_Start_IT>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00d      	beq.n	8008132 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2210      	movs	r2, #16
 800811a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2220      	movs	r2, #32
 800812a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e012      	b.n	8008158 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2240      	movs	r2, #64	; 0x40
 8008138:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008150:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	e000      	b.n	8008158 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008156:	2302      	movs	r3, #2
  }
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	08009549 	.word	0x08009549
 8008164:	08009599 	.word	0x08009599
 8008168:	080095b5 	.word	0x080095b5

0800816c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008192:	4013      	ands	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d118      	bne.n	80081ce <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d013      	beq.n	80081ce <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d104      	bne.n	80081ba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d009      	beq.n	80081ce <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 8282 	beq.w	80086c8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	4798      	blx	r3
      }
      return;
 80081cc:	e27c      	b.n	80086c8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 80ef 	beq.w	80083b4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4b73      	ldr	r3, [pc, #460]	; (80083a8 <HAL_UART_IRQHandler+0x23c>)
 80081da:	4013      	ands	r3, r2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	4b72      	ldr	r3, [pc, #456]	; (80083ac <HAL_UART_IRQHandler+0x240>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 80e4 	beq.w	80083b4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d010      	beq.n	8008218 <HAL_UART_IRQHandler+0xac>
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00b      	beq.n	8008218 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2201      	movs	r2, #1
 8008206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800820e:	f043 0201 	orr.w	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d010      	beq.n	8008244 <HAL_UART_IRQHandler+0xd8>
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2202      	movs	r2, #2
 8008232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800823a:	f043 0204 	orr.w	r2, r3, #4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	d010      	beq.n	8008270 <HAL_UART_IRQHandler+0x104>
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2204      	movs	r2, #4
 800825e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008266:	f043 0202 	orr.w	r2, r3, #2
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	f003 0308 	and.w	r3, r3, #8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d015      	beq.n	80082a6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d104      	bne.n	800828e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4b48      	ldr	r3, [pc, #288]	; (80083a8 <HAL_UART_IRQHandler+0x23c>)
 8008288:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2208      	movs	r2, #8
 8008294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800829c:	f043 0208 	orr.w	r2, r3, #8
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d011      	beq.n	80082d4 <HAL_UART_IRQHandler+0x168>
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00c      	beq.n	80082d4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ca:	f043 0220 	orr.w	r2, r3, #32
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 81f6 	beq.w	80086cc <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d011      	beq.n	800830e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	f003 0320 	and.w	r3, r3, #32
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d007      	beq.n	800830e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008314:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008320:	2b40      	cmp	r3, #64	; 0x40
 8008322:	d004      	beq.n	800832e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800832a:	2b00      	cmp	r3, #0
 800832c:	d031      	beq.n	8008392 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 f8d8 	bl	80094e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d123      	bne.n	800838a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008350:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d013      	beq.n	8008382 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835e:	4a14      	ldr	r2, [pc, #80]	; (80083b0 <HAL_UART_IRQHandler+0x244>)
 8008360:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008366:	4618      	mov	r0, r3
 8008368:	f7fa ffa4 	bl	80032b4 <HAL_DMA_Abort_IT>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d017      	beq.n	80083a2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800837c:	4610      	mov	r0, r2
 800837e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008380:	e00f      	b.n	80083a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7f8 fe2c 	bl	8000fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008388:	e00b      	b.n	80083a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7f8 fe28 	bl	8000fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008390:	e007      	b.n	80083a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7f8 fe24 	bl	8000fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80083a0:	e194      	b.n	80086cc <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a2:	bf00      	nop
    return;
 80083a4:	e192      	b.n	80086cc <HAL_UART_IRQHandler+0x560>
 80083a6:	bf00      	nop
 80083a8:	10000001 	.word	0x10000001
 80083ac:	04000120 	.word	0x04000120
 80083b0:	08009635 	.word	0x08009635

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	f040 810f 	bne.w	80085dc <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	f003 0310 	and.w	r3, r3, #16
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 8109 	beq.w	80085dc <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	f003 0310 	and.w	r3, r3, #16
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8103 	beq.w	80085dc <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2210      	movs	r2, #16
 80083dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e8:	2b40      	cmp	r3, #64	; 0x40
 80083ea:	f040 80bb 	bne.w	8008564 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a96      	ldr	r2, [pc, #600]	; (8008650 <HAL_UART_IRQHandler+0x4e4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d059      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a94      	ldr	r2, [pc, #592]	; (8008654 <HAL_UART_IRQHandler+0x4e8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d053      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a92      	ldr	r2, [pc, #584]	; (8008658 <HAL_UART_IRQHandler+0x4ec>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d04d      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a90      	ldr	r2, [pc, #576]	; (800865c <HAL_UART_IRQHandler+0x4f0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d047      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a8e      	ldr	r2, [pc, #568]	; (8008660 <HAL_UART_IRQHandler+0x4f4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d041      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a8c      	ldr	r2, [pc, #560]	; (8008664 <HAL_UART_IRQHandler+0x4f8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d03b      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a8a      	ldr	r2, [pc, #552]	; (8008668 <HAL_UART_IRQHandler+0x4fc>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d035      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a88      	ldr	r2, [pc, #544]	; (800866c <HAL_UART_IRQHandler+0x500>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d02f      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a86      	ldr	r2, [pc, #536]	; (8008670 <HAL_UART_IRQHandler+0x504>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d029      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a84      	ldr	r2, [pc, #528]	; (8008674 <HAL_UART_IRQHandler+0x508>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d023      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a82      	ldr	r2, [pc, #520]	; (8008678 <HAL_UART_IRQHandler+0x50c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01d      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a80      	ldr	r2, [pc, #512]	; (800867c <HAL_UART_IRQHandler+0x510>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d017      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a7e      	ldr	r2, [pc, #504]	; (8008680 <HAL_UART_IRQHandler+0x514>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d011      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a7c      	ldr	r2, [pc, #496]	; (8008684 <HAL_UART_IRQHandler+0x518>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00b      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a7a      	ldr	r2, [pc, #488]	; (8008688 <HAL_UART_IRQHandler+0x51c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d005      	beq.n	80084ae <HAL_UART_IRQHandler+0x342>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a78      	ldr	r2, [pc, #480]	; (800868c <HAL_UART_IRQHandler+0x520>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d105      	bne.n	80084ba <HAL_UART_IRQHandler+0x34e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	e004      	b.n	80084c4 <HAL_UART_IRQHandler+0x358>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80084c6:	893b      	ldrh	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 8101 	beq.w	80086d0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084d4:	893a      	ldrh	r2, [r7, #8]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	f080 80fa 	bcs.w	80086d0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	893a      	ldrh	r2, [r7, #8]
 80084e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ee:	d02b      	beq.n	8008548 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084fe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0201 	bic.w	r2, r2, #1
 800850e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800851e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0210 	bic.w	r2, r2, #16
 800853c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008542:	4618      	mov	r0, r3
 8008544:	f7fa fb98 	bl	8002c78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008554:	b29b      	uxth	r3, r3
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	b29b      	uxth	r3, r3
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f8c9 	bl	80086f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008562:	e0b5      	b.n	80086d0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008570:	b29b      	uxth	r3, r3
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800857c:	b29b      	uxth	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80a8 	beq.w	80086d4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008584:	897b      	ldrh	r3, [r7, #10]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80a4 	beq.w	80086d4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800859a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6899      	ldr	r1, [r3, #8]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	4b3a      	ldr	r3, [pc, #232]	; (8008690 <HAL_UART_IRQHandler+0x524>)
 80085a8:	400b      	ands	r3, r1
 80085aa:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0210 	bic.w	r2, r2, #16
 80085ce:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085d0:	897b      	ldrh	r3, [r7, #10]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f88d 	bl	80086f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085da:	e07b      	b.n	80086d4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00d      	beq.n	8008602 <HAL_UART_IRQHandler+0x496>
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d008      	beq.n	8008602 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 f84a 	bl	8009694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008600:	e06b      	b.n	80086da <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008608:	2b00      	cmp	r3, #0
 800860a:	d012      	beq.n	8008632 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008612:	2b00      	cmp	r3, #0
 8008614:	d104      	bne.n	8008620 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d008      	beq.n	8008632 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008624:	2b00      	cmp	r3, #0
 8008626:	d057      	beq.n	80086d8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
    }
    return;
 8008630:	e052      	b.n	80086d8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	d02b      	beq.n	8008694 <HAL_UART_IRQHandler+0x528>
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d026      	beq.n	8008694 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 f80a 	bl	8009660 <UART_EndTransmit_IT>
    return;
 800864c:	e045      	b.n	80086da <HAL_UART_IRQHandler+0x56e>
 800864e:	bf00      	nop
 8008650:	40020010 	.word	0x40020010
 8008654:	40020028 	.word	0x40020028
 8008658:	40020040 	.word	0x40020040
 800865c:	40020058 	.word	0x40020058
 8008660:	40020070 	.word	0x40020070
 8008664:	40020088 	.word	0x40020088
 8008668:	400200a0 	.word	0x400200a0
 800866c:	400200b8 	.word	0x400200b8
 8008670:	40020410 	.word	0x40020410
 8008674:	40020428 	.word	0x40020428
 8008678:	40020440 	.word	0x40020440
 800867c:	40020458 	.word	0x40020458
 8008680:	40020470 	.word	0x40020470
 8008684:	40020488 	.word	0x40020488
 8008688:	400204a0 	.word	0x400204a0
 800868c:	400204b8 	.word	0x400204b8
 8008690:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <HAL_UART_IRQHandler+0x544>
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f807 	bl	80096bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086ae:	e014      	b.n	80086da <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00f      	beq.n	80086da <HAL_UART_IRQHandler+0x56e>
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	da0c      	bge.n	80086da <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fff1 	bl	80096a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086c6:	e008      	b.n	80086da <HAL_UART_IRQHandler+0x56e>
      return;
 80086c8:	bf00      	nop
 80086ca:	e006      	b.n	80086da <HAL_UART_IRQHandler+0x56e>
    return;
 80086cc:	bf00      	nop
 80086ce:	e004      	b.n	80086da <HAL_UART_IRQHandler+0x56e>
      return;
 80086d0:	bf00      	nop
 80086d2:	e002      	b.n	80086da <HAL_UART_IRQHandler+0x56e>
      return;
 80086d4:	bf00      	nop
 80086d6:	e000      	b.n	80086da <HAL_UART_IRQHandler+0x56e>
    return;
 80086d8:	bf00      	nop
  }
}
 80086da:	3720      	adds	r7, #32
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800870c:	b5b0      	push	{r4, r5, r7, lr}
 800870e:	b08e      	sub	sp, #56	; 0x38
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	431a      	orrs	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	4313      	orrs	r3, r2
 8008730:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	4bbf      	ldr	r3, [pc, #764]	; (8008a38 <UART_SetConfig+0x32c>)
 800873a:	4013      	ands	r3, r2
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008742:	430b      	orrs	r3, r1
 8008744:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4ab5      	ldr	r2, [pc, #724]	; (8008a3c <UART_SetConfig+0x330>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d004      	beq.n	8008776 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008772:	4313      	orrs	r3, r2
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	4bb0      	ldr	r3, [pc, #704]	; (8008a40 <UART_SetConfig+0x334>)
 800877e:	4013      	ands	r3, r2
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008786:	430b      	orrs	r3, r1
 8008788:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	f023 010f 	bic.w	r1, r3, #15
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4aa7      	ldr	r2, [pc, #668]	; (8008a44 <UART_SetConfig+0x338>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d176      	bne.n	8008898 <UART_SetConfig+0x18c>
 80087aa:	4ba7      	ldr	r3, [pc, #668]	; (8008a48 <UART_SetConfig+0x33c>)
 80087ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087b2:	2b28      	cmp	r3, #40	; 0x28
 80087b4:	d86c      	bhi.n	8008890 <UART_SetConfig+0x184>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <UART_SetConfig+0xb0>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	08008861 	.word	0x08008861
 80087c0:	08008891 	.word	0x08008891
 80087c4:	08008891 	.word	0x08008891
 80087c8:	08008891 	.word	0x08008891
 80087cc:	08008891 	.word	0x08008891
 80087d0:	08008891 	.word	0x08008891
 80087d4:	08008891 	.word	0x08008891
 80087d8:	08008891 	.word	0x08008891
 80087dc:	08008869 	.word	0x08008869
 80087e0:	08008891 	.word	0x08008891
 80087e4:	08008891 	.word	0x08008891
 80087e8:	08008891 	.word	0x08008891
 80087ec:	08008891 	.word	0x08008891
 80087f0:	08008891 	.word	0x08008891
 80087f4:	08008891 	.word	0x08008891
 80087f8:	08008891 	.word	0x08008891
 80087fc:	08008871 	.word	0x08008871
 8008800:	08008891 	.word	0x08008891
 8008804:	08008891 	.word	0x08008891
 8008808:	08008891 	.word	0x08008891
 800880c:	08008891 	.word	0x08008891
 8008810:	08008891 	.word	0x08008891
 8008814:	08008891 	.word	0x08008891
 8008818:	08008891 	.word	0x08008891
 800881c:	08008879 	.word	0x08008879
 8008820:	08008891 	.word	0x08008891
 8008824:	08008891 	.word	0x08008891
 8008828:	08008891 	.word	0x08008891
 800882c:	08008891 	.word	0x08008891
 8008830:	08008891 	.word	0x08008891
 8008834:	08008891 	.word	0x08008891
 8008838:	08008891 	.word	0x08008891
 800883c:	08008881 	.word	0x08008881
 8008840:	08008891 	.word	0x08008891
 8008844:	08008891 	.word	0x08008891
 8008848:	08008891 	.word	0x08008891
 800884c:	08008891 	.word	0x08008891
 8008850:	08008891 	.word	0x08008891
 8008854:	08008891 	.word	0x08008891
 8008858:	08008891 	.word	0x08008891
 800885c:	08008889 	.word	0x08008889
 8008860:	2301      	movs	r3, #1
 8008862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008866:	e222      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008868:	2304      	movs	r3, #4
 800886a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886e:	e21e      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008870:	2308      	movs	r3, #8
 8008872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008876:	e21a      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008878:	2310      	movs	r3, #16
 800887a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887e:	e216      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008880:	2320      	movs	r3, #32
 8008882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008886:	e212      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008888:	2340      	movs	r3, #64	; 0x40
 800888a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888e:	e20e      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008890:	2380      	movs	r3, #128	; 0x80
 8008892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008896:	e20a      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a6b      	ldr	r2, [pc, #428]	; (8008a4c <UART_SetConfig+0x340>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d130      	bne.n	8008904 <UART_SetConfig+0x1f8>
 80088a2:	4b69      	ldr	r3, [pc, #420]	; (8008a48 <UART_SetConfig+0x33c>)
 80088a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	d826      	bhi.n	80088fc <UART_SetConfig+0x1f0>
 80088ae:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <UART_SetConfig+0x1a8>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	080088cd 	.word	0x080088cd
 80088b8:	080088d5 	.word	0x080088d5
 80088bc:	080088dd 	.word	0x080088dd
 80088c0:	080088e5 	.word	0x080088e5
 80088c4:	080088ed 	.word	0x080088ed
 80088c8:	080088f5 	.word	0x080088f5
 80088cc:	2300      	movs	r3, #0
 80088ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d2:	e1ec      	b.n	8008cae <UART_SetConfig+0x5a2>
 80088d4:	2304      	movs	r3, #4
 80088d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088da:	e1e8      	b.n	8008cae <UART_SetConfig+0x5a2>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e2:	e1e4      	b.n	8008cae <UART_SetConfig+0x5a2>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e1e0      	b.n	8008cae <UART_SetConfig+0x5a2>
 80088ec:	2320      	movs	r3, #32
 80088ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f2:	e1dc      	b.n	8008cae <UART_SetConfig+0x5a2>
 80088f4:	2340      	movs	r3, #64	; 0x40
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fa:	e1d8      	b.n	8008cae <UART_SetConfig+0x5a2>
 80088fc:	2380      	movs	r3, #128	; 0x80
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008902:	e1d4      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a51      	ldr	r2, [pc, #324]	; (8008a50 <UART_SetConfig+0x344>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d130      	bne.n	8008970 <UART_SetConfig+0x264>
 800890e:	4b4e      	ldr	r3, [pc, #312]	; (8008a48 <UART_SetConfig+0x33c>)
 8008910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b05      	cmp	r3, #5
 8008918:	d826      	bhi.n	8008968 <UART_SetConfig+0x25c>
 800891a:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <UART_SetConfig+0x214>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008939 	.word	0x08008939
 8008924:	08008941 	.word	0x08008941
 8008928:	08008949 	.word	0x08008949
 800892c:	08008951 	.word	0x08008951
 8008930:	08008959 	.word	0x08008959
 8008934:	08008961 	.word	0x08008961
 8008938:	2300      	movs	r3, #0
 800893a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893e:	e1b6      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008940:	2304      	movs	r3, #4
 8008942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008946:	e1b2      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008948:	2308      	movs	r3, #8
 800894a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894e:	e1ae      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008950:	2310      	movs	r3, #16
 8008952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008956:	e1aa      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008958:	2320      	movs	r3, #32
 800895a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895e:	e1a6      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008960:	2340      	movs	r3, #64	; 0x40
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008966:	e1a2      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896e:	e19e      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a37      	ldr	r2, [pc, #220]	; (8008a54 <UART_SetConfig+0x348>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d130      	bne.n	80089dc <UART_SetConfig+0x2d0>
 800897a:	4b33      	ldr	r3, [pc, #204]	; (8008a48 <UART_SetConfig+0x33c>)
 800897c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897e:	f003 0307 	and.w	r3, r3, #7
 8008982:	2b05      	cmp	r3, #5
 8008984:	d826      	bhi.n	80089d4 <UART_SetConfig+0x2c8>
 8008986:	a201      	add	r2, pc, #4	; (adr r2, 800898c <UART_SetConfig+0x280>)
 8008988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898c:	080089a5 	.word	0x080089a5
 8008990:	080089ad 	.word	0x080089ad
 8008994:	080089b5 	.word	0x080089b5
 8008998:	080089bd 	.word	0x080089bd
 800899c:	080089c5 	.word	0x080089c5
 80089a0:	080089cd 	.word	0x080089cd
 80089a4:	2300      	movs	r3, #0
 80089a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089aa:	e180      	b.n	8008cae <UART_SetConfig+0x5a2>
 80089ac:	2304      	movs	r3, #4
 80089ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b2:	e17c      	b.n	8008cae <UART_SetConfig+0x5a2>
 80089b4:	2308      	movs	r3, #8
 80089b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ba:	e178      	b.n	8008cae <UART_SetConfig+0x5a2>
 80089bc:	2310      	movs	r3, #16
 80089be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c2:	e174      	b.n	8008cae <UART_SetConfig+0x5a2>
 80089c4:	2320      	movs	r3, #32
 80089c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ca:	e170      	b.n	8008cae <UART_SetConfig+0x5a2>
 80089cc:	2340      	movs	r3, #64	; 0x40
 80089ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d2:	e16c      	b.n	8008cae <UART_SetConfig+0x5a2>
 80089d4:	2380      	movs	r3, #128	; 0x80
 80089d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089da:	e168      	b.n	8008cae <UART_SetConfig+0x5a2>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a1d      	ldr	r2, [pc, #116]	; (8008a58 <UART_SetConfig+0x34c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d142      	bne.n	8008a6c <UART_SetConfig+0x360>
 80089e6:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <UART_SetConfig+0x33c>)
 80089e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	d838      	bhi.n	8008a64 <UART_SetConfig+0x358>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0x2ec>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a11 	.word	0x08008a11
 80089fc:	08008a19 	.word	0x08008a19
 8008a00:	08008a21 	.word	0x08008a21
 8008a04:	08008a29 	.word	0x08008a29
 8008a08:	08008a31 	.word	0x08008a31
 8008a0c:	08008a5d 	.word	0x08008a5d
 8008a10:	2300      	movs	r3, #0
 8008a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a16:	e14a      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1e:	e146      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008a20:	2308      	movs	r3, #8
 8008a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a26:	e142      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008a28:	2310      	movs	r3, #16
 8008a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2e:	e13e      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008a30:	2320      	movs	r3, #32
 8008a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a36:	e13a      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008a38:	cfff69f3 	.word	0xcfff69f3
 8008a3c:	58000c00 	.word	0x58000c00
 8008a40:	11fff4ff 	.word	0x11fff4ff
 8008a44:	40011000 	.word	0x40011000
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	40004400 	.word	0x40004400
 8008a50:	40004800 	.word	0x40004800
 8008a54:	40004c00 	.word	0x40004c00
 8008a58:	40005000 	.word	0x40005000
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a62:	e124      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008a64:	2380      	movs	r3, #128	; 0x80
 8008a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6a:	e120      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4acc      	ldr	r2, [pc, #816]	; (8008da4 <UART_SetConfig+0x698>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d176      	bne.n	8008b64 <UART_SetConfig+0x458>
 8008a76:	4bcc      	ldr	r3, [pc, #816]	; (8008da8 <UART_SetConfig+0x69c>)
 8008a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a7e:	2b28      	cmp	r3, #40	; 0x28
 8008a80:	d86c      	bhi.n	8008b5c <UART_SetConfig+0x450>
 8008a82:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <UART_SetConfig+0x37c>)
 8008a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a88:	08008b2d 	.word	0x08008b2d
 8008a8c:	08008b5d 	.word	0x08008b5d
 8008a90:	08008b5d 	.word	0x08008b5d
 8008a94:	08008b5d 	.word	0x08008b5d
 8008a98:	08008b5d 	.word	0x08008b5d
 8008a9c:	08008b5d 	.word	0x08008b5d
 8008aa0:	08008b5d 	.word	0x08008b5d
 8008aa4:	08008b5d 	.word	0x08008b5d
 8008aa8:	08008b35 	.word	0x08008b35
 8008aac:	08008b5d 	.word	0x08008b5d
 8008ab0:	08008b5d 	.word	0x08008b5d
 8008ab4:	08008b5d 	.word	0x08008b5d
 8008ab8:	08008b5d 	.word	0x08008b5d
 8008abc:	08008b5d 	.word	0x08008b5d
 8008ac0:	08008b5d 	.word	0x08008b5d
 8008ac4:	08008b5d 	.word	0x08008b5d
 8008ac8:	08008b3d 	.word	0x08008b3d
 8008acc:	08008b5d 	.word	0x08008b5d
 8008ad0:	08008b5d 	.word	0x08008b5d
 8008ad4:	08008b5d 	.word	0x08008b5d
 8008ad8:	08008b5d 	.word	0x08008b5d
 8008adc:	08008b5d 	.word	0x08008b5d
 8008ae0:	08008b5d 	.word	0x08008b5d
 8008ae4:	08008b5d 	.word	0x08008b5d
 8008ae8:	08008b45 	.word	0x08008b45
 8008aec:	08008b5d 	.word	0x08008b5d
 8008af0:	08008b5d 	.word	0x08008b5d
 8008af4:	08008b5d 	.word	0x08008b5d
 8008af8:	08008b5d 	.word	0x08008b5d
 8008afc:	08008b5d 	.word	0x08008b5d
 8008b00:	08008b5d 	.word	0x08008b5d
 8008b04:	08008b5d 	.word	0x08008b5d
 8008b08:	08008b4d 	.word	0x08008b4d
 8008b0c:	08008b5d 	.word	0x08008b5d
 8008b10:	08008b5d 	.word	0x08008b5d
 8008b14:	08008b5d 	.word	0x08008b5d
 8008b18:	08008b5d 	.word	0x08008b5d
 8008b1c:	08008b5d 	.word	0x08008b5d
 8008b20:	08008b5d 	.word	0x08008b5d
 8008b24:	08008b5d 	.word	0x08008b5d
 8008b28:	08008b55 	.word	0x08008b55
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b32:	e0bc      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008b34:	2304      	movs	r3, #4
 8008b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b3a:	e0b8      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008b3c:	2308      	movs	r3, #8
 8008b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b42:	e0b4      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008b44:	2310      	movs	r3, #16
 8008b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b4a:	e0b0      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b52:	e0ac      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008b54:	2340      	movs	r3, #64	; 0x40
 8008b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b5a:	e0a8      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008b5c:	2380      	movs	r3, #128	; 0x80
 8008b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b62:	e0a4      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a90      	ldr	r2, [pc, #576]	; (8008dac <UART_SetConfig+0x6a0>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d130      	bne.n	8008bd0 <UART_SetConfig+0x4c4>
 8008b6e:	4b8e      	ldr	r3, [pc, #568]	; (8008da8 <UART_SetConfig+0x69c>)
 8008b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	2b05      	cmp	r3, #5
 8008b78:	d826      	bhi.n	8008bc8 <UART_SetConfig+0x4bc>
 8008b7a:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <UART_SetConfig+0x474>)
 8008b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b80:	08008b99 	.word	0x08008b99
 8008b84:	08008ba1 	.word	0x08008ba1
 8008b88:	08008ba9 	.word	0x08008ba9
 8008b8c:	08008bb1 	.word	0x08008bb1
 8008b90:	08008bb9 	.word	0x08008bb9
 8008b94:	08008bc1 	.word	0x08008bc1
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9e:	e086      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba6:	e082      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008ba8:	2308      	movs	r3, #8
 8008baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bae:	e07e      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb6:	e07a      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008bb8:	2320      	movs	r3, #32
 8008bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bbe:	e076      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008bc0:	2340      	movs	r3, #64	; 0x40
 8008bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc6:	e072      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008bc8:	2380      	movs	r3, #128	; 0x80
 8008bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bce:	e06e      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a76      	ldr	r2, [pc, #472]	; (8008db0 <UART_SetConfig+0x6a4>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d130      	bne.n	8008c3c <UART_SetConfig+0x530>
 8008bda:	4b73      	ldr	r3, [pc, #460]	; (8008da8 <UART_SetConfig+0x69c>)
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bde:	f003 0307 	and.w	r3, r3, #7
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	d826      	bhi.n	8008c34 <UART_SetConfig+0x528>
 8008be6:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <UART_SetConfig+0x4e0>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c05 	.word	0x08008c05
 8008bf0:	08008c0d 	.word	0x08008c0d
 8008bf4:	08008c15 	.word	0x08008c15
 8008bf8:	08008c1d 	.word	0x08008c1d
 8008bfc:	08008c25 	.word	0x08008c25
 8008c00:	08008c2d 	.word	0x08008c2d
 8008c04:	2300      	movs	r3, #0
 8008c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0a:	e050      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c0c:	2304      	movs	r3, #4
 8008c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c12:	e04c      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c14:	2308      	movs	r3, #8
 8008c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1a:	e048      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c1c:	2310      	movs	r3, #16
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c22:	e044      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c24:	2320      	movs	r3, #32
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2a:	e040      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c2c:	2340      	movs	r3, #64	; 0x40
 8008c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c32:	e03c      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c34:	2380      	movs	r3, #128	; 0x80
 8008c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3a:	e038      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a5c      	ldr	r2, [pc, #368]	; (8008db4 <UART_SetConfig+0x6a8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d130      	bne.n	8008ca8 <UART_SetConfig+0x59c>
 8008c46:	4b58      	ldr	r3, [pc, #352]	; (8008da8 <UART_SetConfig+0x69c>)
 8008c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	2b05      	cmp	r3, #5
 8008c50:	d826      	bhi.n	8008ca0 <UART_SetConfig+0x594>
 8008c52:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <UART_SetConfig+0x54c>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008c71 	.word	0x08008c71
 8008c5c:	08008c79 	.word	0x08008c79
 8008c60:	08008c81 	.word	0x08008c81
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008c91 	.word	0x08008c91
 8008c6c:	08008c99 	.word	0x08008c99
 8008c70:	2302      	movs	r3, #2
 8008c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c76:	e01a      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7e:	e016      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c80:	2308      	movs	r3, #8
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c86:	e012      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c88:	2310      	movs	r3, #16
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e00e      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c90:	2320      	movs	r3, #32
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c96:	e00a      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008c98:	2340      	movs	r3, #64	; 0x40
 8008c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9e:	e006      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008ca0:	2380      	movs	r3, #128	; 0x80
 8008ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca6:	e002      	b.n	8008cae <UART_SetConfig+0x5a2>
 8008ca8:	2380      	movs	r3, #128	; 0x80
 8008caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a40      	ldr	r2, [pc, #256]	; (8008db4 <UART_SetConfig+0x6a8>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	f040 80ef 	bne.w	8008e98 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cbe:	2b20      	cmp	r3, #32
 8008cc0:	dc46      	bgt.n	8008d50 <UART_SetConfig+0x644>
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	f2c0 8081 	blt.w	8008dca <UART_SetConfig+0x6be>
 8008cc8:	3b02      	subs	r3, #2
 8008cca:	2b1e      	cmp	r3, #30
 8008ccc:	d87d      	bhi.n	8008dca <UART_SetConfig+0x6be>
 8008cce:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <UART_SetConfig+0x5c8>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008d57 	.word	0x08008d57
 8008cd8:	08008dcb 	.word	0x08008dcb
 8008cdc:	08008d5f 	.word	0x08008d5f
 8008ce0:	08008dcb 	.word	0x08008dcb
 8008ce4:	08008dcb 	.word	0x08008dcb
 8008ce8:	08008dcb 	.word	0x08008dcb
 8008cec:	08008d6f 	.word	0x08008d6f
 8008cf0:	08008dcb 	.word	0x08008dcb
 8008cf4:	08008dcb 	.word	0x08008dcb
 8008cf8:	08008dcb 	.word	0x08008dcb
 8008cfc:	08008dcb 	.word	0x08008dcb
 8008d00:	08008dcb 	.word	0x08008dcb
 8008d04:	08008dcb 	.word	0x08008dcb
 8008d08:	08008dcb 	.word	0x08008dcb
 8008d0c:	08008d7f 	.word	0x08008d7f
 8008d10:	08008dcb 	.word	0x08008dcb
 8008d14:	08008dcb 	.word	0x08008dcb
 8008d18:	08008dcb 	.word	0x08008dcb
 8008d1c:	08008dcb 	.word	0x08008dcb
 8008d20:	08008dcb 	.word	0x08008dcb
 8008d24:	08008dcb 	.word	0x08008dcb
 8008d28:	08008dcb 	.word	0x08008dcb
 8008d2c:	08008dcb 	.word	0x08008dcb
 8008d30:	08008dcb 	.word	0x08008dcb
 8008d34:	08008dcb 	.word	0x08008dcb
 8008d38:	08008dcb 	.word	0x08008dcb
 8008d3c:	08008dcb 	.word	0x08008dcb
 8008d40:	08008dcb 	.word	0x08008dcb
 8008d44:	08008dcb 	.word	0x08008dcb
 8008d48:	08008dcb 	.word	0x08008dcb
 8008d4c:	08008dbd 	.word	0x08008dbd
 8008d50:	2b40      	cmp	r3, #64	; 0x40
 8008d52:	d036      	beq.n	8008dc2 <UART_SetConfig+0x6b6>
 8008d54:	e039      	b.n	8008dca <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d56:	f7fe f94b 	bl	8006ff0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d5c:	e03b      	b.n	8008dd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d5e:	f107 0314 	add.w	r3, r7, #20
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fe f95a 	bl	800701c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d6c:	e033      	b.n	8008dd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d6e:	f107 0308 	add.w	r3, r7, #8
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe faa6 	bl	80072c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d7c:	e02b      	b.n	8008dd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d7e:	4b0a      	ldr	r3, [pc, #40]	; (8008da8 <UART_SetConfig+0x69c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d009      	beq.n	8008d9e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d8a:	4b07      	ldr	r3, [pc, #28]	; (8008da8 <UART_SetConfig+0x69c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	08db      	lsrs	r3, r3, #3
 8008d90:	f003 0303 	and.w	r3, r3, #3
 8008d94:	4a08      	ldr	r2, [pc, #32]	; (8008db8 <UART_SetConfig+0x6ac>)
 8008d96:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d9c:	e01b      	b.n	8008dd6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008d9e:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <UART_SetConfig+0x6ac>)
 8008da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008da2:	e018      	b.n	8008dd6 <UART_SetConfig+0x6ca>
 8008da4:	40011400 	.word	0x40011400
 8008da8:	58024400 	.word	0x58024400
 8008dac:	40007800 	.word	0x40007800
 8008db0:	40007c00 	.word	0x40007c00
 8008db4:	58000c00 	.word	0x58000c00
 8008db8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dbc:	4bc4      	ldr	r3, [pc, #784]	; (80090d0 <UART_SetConfig+0x9c4>)
 8008dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dc0:	e009      	b.n	8008dd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dc8:	e005      	b.n	8008dd6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 81da 	beq.w	8009192 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	4abc      	ldr	r2, [pc, #752]	; (80090d4 <UART_SetConfig+0x9c8>)
 8008de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008de8:	461a      	mov	r2, r3
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8008df0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	4613      	mov	r3, r2
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	4413      	add	r3, r2
 8008dfc:	6a3a      	ldr	r2, [r7, #32]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d305      	bcc.n	8008e0e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e08:	6a3a      	ldr	r2, [r7, #32]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d903      	bls.n	8008e16 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e14:	e1bd      	b.n	8009192 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f04f 0100 	mov.w	r1, #0
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	4aac      	ldr	r2, [pc, #688]	; (80090d4 <UART_SetConfig+0x9c8>)
 8008e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	f04f 0300 	mov.w	r3, #0
 8008e2e:	f7f7 fa53 	bl	80002d8 <__aeabi_uldivmod>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4610      	mov	r0, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f04f 0200 	mov.w	r2, #0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	020b      	lsls	r3, r1, #8
 8008e44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e48:	0202      	lsls	r2, r0, #8
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	6849      	ldr	r1, [r1, #4]
 8008e4e:	0849      	lsrs	r1, r1, #1
 8008e50:	4608      	mov	r0, r1
 8008e52:	f04f 0100 	mov.w	r1, #0
 8008e56:	1814      	adds	r4, r2, r0
 8008e58:	eb43 0501 	adc.w	r5, r3, r1
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	461a      	mov	r2, r3
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fa35 	bl	80002d8 <__aeabi_uldivmod>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4613      	mov	r3, r2
 8008e74:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e7c:	d308      	bcc.n	8008e90 <UART_SetConfig+0x784>
 8008e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e84:	d204      	bcs.n	8008e90 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8c:	60da      	str	r2, [r3, #12]
 8008e8e:	e180      	b.n	8009192 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e96:	e17c      	b.n	8009192 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ea0:	f040 80bf 	bne.w	8009022 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ea8:	2b20      	cmp	r3, #32
 8008eaa:	dc49      	bgt.n	8008f40 <UART_SetConfig+0x834>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	db7c      	blt.n	8008faa <UART_SetConfig+0x89e>
 8008eb0:	2b20      	cmp	r3, #32
 8008eb2:	d87a      	bhi.n	8008faa <UART_SetConfig+0x89e>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <UART_SetConfig+0x7b0>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008f47 	.word	0x08008f47
 8008ec0:	08008f4f 	.word	0x08008f4f
 8008ec4:	08008fab 	.word	0x08008fab
 8008ec8:	08008fab 	.word	0x08008fab
 8008ecc:	08008f57 	.word	0x08008f57
 8008ed0:	08008fab 	.word	0x08008fab
 8008ed4:	08008fab 	.word	0x08008fab
 8008ed8:	08008fab 	.word	0x08008fab
 8008edc:	08008f67 	.word	0x08008f67
 8008ee0:	08008fab 	.word	0x08008fab
 8008ee4:	08008fab 	.word	0x08008fab
 8008ee8:	08008fab 	.word	0x08008fab
 8008eec:	08008fab 	.word	0x08008fab
 8008ef0:	08008fab 	.word	0x08008fab
 8008ef4:	08008fab 	.word	0x08008fab
 8008ef8:	08008fab 	.word	0x08008fab
 8008efc:	08008f77 	.word	0x08008f77
 8008f00:	08008fab 	.word	0x08008fab
 8008f04:	08008fab 	.word	0x08008fab
 8008f08:	08008fab 	.word	0x08008fab
 8008f0c:	08008fab 	.word	0x08008fab
 8008f10:	08008fab 	.word	0x08008fab
 8008f14:	08008fab 	.word	0x08008fab
 8008f18:	08008fab 	.word	0x08008fab
 8008f1c:	08008fab 	.word	0x08008fab
 8008f20:	08008fab 	.word	0x08008fab
 8008f24:	08008fab 	.word	0x08008fab
 8008f28:	08008fab 	.word	0x08008fab
 8008f2c:	08008fab 	.word	0x08008fab
 8008f30:	08008fab 	.word	0x08008fab
 8008f34:	08008fab 	.word	0x08008fab
 8008f38:	08008fab 	.word	0x08008fab
 8008f3c:	08008f9d 	.word	0x08008f9d
 8008f40:	2b40      	cmp	r3, #64	; 0x40
 8008f42:	d02e      	beq.n	8008fa2 <UART_SetConfig+0x896>
 8008f44:	e031      	b.n	8008faa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f46:	f7fd f8e7 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8008f4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f4c:	e033      	b.n	8008fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f4e:	f7fd f8f9 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8008f52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f54:	e02f      	b.n	8008fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f56:	f107 0314 	add.w	r3, r7, #20
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe f85e 	bl	800701c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f64:	e027      	b.n	8008fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe f9aa 	bl	80072c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f74:	e01f      	b.n	8008fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f76:	4b58      	ldr	r3, [pc, #352]	; (80090d8 <UART_SetConfig+0x9cc>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d009      	beq.n	8008f96 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f82:	4b55      	ldr	r3, [pc, #340]	; (80090d8 <UART_SetConfig+0x9cc>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	08db      	lsrs	r3, r3, #3
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	4a53      	ldr	r2, [pc, #332]	; (80090dc <UART_SetConfig+0x9d0>)
 8008f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f94:	e00f      	b.n	8008fb6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008f96:	4b51      	ldr	r3, [pc, #324]	; (80090dc <UART_SetConfig+0x9d0>)
 8008f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f9a:	e00c      	b.n	8008fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f9c:	4b4c      	ldr	r3, [pc, #304]	; (80090d0 <UART_SetConfig+0x9c4>)
 8008f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fa0:	e009      	b.n	8008fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fa8:	e005      	b.n	8008fb6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 80ea 	beq.w	8009192 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc2:	4a44      	ldr	r2, [pc, #272]	; (80090d4 <UART_SetConfig+0x9c8>)
 8008fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fd0:	005a      	lsls	r2, r3, #1
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	441a      	add	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	2b0f      	cmp	r3, #15
 8008fea:	d916      	bls.n	800901a <UART_SetConfig+0x90e>
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff2:	d212      	bcs.n	800901a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	f023 030f 	bic.w	r3, r3, #15
 8008ffc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	b29b      	uxth	r3, r3
 8009004:	f003 0307 	and.w	r3, r3, #7
 8009008:	b29a      	uxth	r2, r3
 800900a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800900c:	4313      	orrs	r3, r2
 800900e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009016:	60da      	str	r2, [r3, #12]
 8009018:	e0bb      	b.n	8009192 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009020:	e0b7      	b.n	8009192 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009026:	2b20      	cmp	r3, #32
 8009028:	dc4a      	bgt.n	80090c0 <UART_SetConfig+0x9b4>
 800902a:	2b00      	cmp	r3, #0
 800902c:	f2c0 8086 	blt.w	800913c <UART_SetConfig+0xa30>
 8009030:	2b20      	cmp	r3, #32
 8009032:	f200 8083 	bhi.w	800913c <UART_SetConfig+0xa30>
 8009036:	a201      	add	r2, pc, #4	; (adr r2, 800903c <UART_SetConfig+0x930>)
 8009038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903c:	080090c7 	.word	0x080090c7
 8009040:	080090e1 	.word	0x080090e1
 8009044:	0800913d 	.word	0x0800913d
 8009048:	0800913d 	.word	0x0800913d
 800904c:	080090e9 	.word	0x080090e9
 8009050:	0800913d 	.word	0x0800913d
 8009054:	0800913d 	.word	0x0800913d
 8009058:	0800913d 	.word	0x0800913d
 800905c:	080090f9 	.word	0x080090f9
 8009060:	0800913d 	.word	0x0800913d
 8009064:	0800913d 	.word	0x0800913d
 8009068:	0800913d 	.word	0x0800913d
 800906c:	0800913d 	.word	0x0800913d
 8009070:	0800913d 	.word	0x0800913d
 8009074:	0800913d 	.word	0x0800913d
 8009078:	0800913d 	.word	0x0800913d
 800907c:	08009109 	.word	0x08009109
 8009080:	0800913d 	.word	0x0800913d
 8009084:	0800913d 	.word	0x0800913d
 8009088:	0800913d 	.word	0x0800913d
 800908c:	0800913d 	.word	0x0800913d
 8009090:	0800913d 	.word	0x0800913d
 8009094:	0800913d 	.word	0x0800913d
 8009098:	0800913d 	.word	0x0800913d
 800909c:	0800913d 	.word	0x0800913d
 80090a0:	0800913d 	.word	0x0800913d
 80090a4:	0800913d 	.word	0x0800913d
 80090a8:	0800913d 	.word	0x0800913d
 80090ac:	0800913d 	.word	0x0800913d
 80090b0:	0800913d 	.word	0x0800913d
 80090b4:	0800913d 	.word	0x0800913d
 80090b8:	0800913d 	.word	0x0800913d
 80090bc:	0800912f 	.word	0x0800912f
 80090c0:	2b40      	cmp	r3, #64	; 0x40
 80090c2:	d037      	beq.n	8009134 <UART_SetConfig+0xa28>
 80090c4:	e03a      	b.n	800913c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090c6:	f7fd f827 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 80090ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090cc:	e03c      	b.n	8009148 <UART_SetConfig+0xa3c>
 80090ce:	bf00      	nop
 80090d0:	003d0900 	.word	0x003d0900
 80090d4:	08009970 	.word	0x08009970
 80090d8:	58024400 	.word	0x58024400
 80090dc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090e0:	f7fd f830 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 80090e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090e6:	e02f      	b.n	8009148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090e8:	f107 0314 	add.w	r3, r7, #20
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fd ff95 	bl	800701c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090f6:	e027      	b.n	8009148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090f8:	f107 0308 	add.w	r3, r7, #8
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe f8e1 	bl	80072c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009106:	e01f      	b.n	8009148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009108:	4b2c      	ldr	r3, [pc, #176]	; (80091bc <UART_SetConfig+0xab0>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b00      	cmp	r3, #0
 8009112:	d009      	beq.n	8009128 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009114:	4b29      	ldr	r3, [pc, #164]	; (80091bc <UART_SetConfig+0xab0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	08db      	lsrs	r3, r3, #3
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	4a28      	ldr	r2, [pc, #160]	; (80091c0 <UART_SetConfig+0xab4>)
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
 8009124:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009126:	e00f      	b.n	8009148 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009128:	4b25      	ldr	r3, [pc, #148]	; (80091c0 <UART_SetConfig+0xab4>)
 800912a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800912c:	e00c      	b.n	8009148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800912e:	4b25      	ldr	r3, [pc, #148]	; (80091c4 <UART_SetConfig+0xab8>)
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009132:	e009      	b.n	8009148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009138:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800913a:	e005      	b.n	8009148 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009146:	bf00      	nop
    }

    if (pclk != 0U)
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914a:	2b00      	cmp	r3, #0
 800914c:	d021      	beq.n	8009192 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	4a1d      	ldr	r2, [pc, #116]	; (80091c8 <UART_SetConfig+0xabc>)
 8009154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009158:	461a      	mov	r2, r3
 800915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	085b      	lsrs	r3, r3, #1
 8009166:	441a      	add	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009170:	b29b      	uxth	r3, r3
 8009172:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	2b0f      	cmp	r3, #15
 8009178:	d908      	bls.n	800918c <UART_SetConfig+0xa80>
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009180:	d204      	bcs.n	800918c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009188:	60da      	str	r2, [r3, #12]
 800918a:	e002      	b.n	8009192 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80091ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3738      	adds	r7, #56	; 0x38
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bdb0      	pop	{r4, r5, r7, pc}
 80091ba:	bf00      	nop
 80091bc:	58024400 	.word	0x58024400
 80091c0:	03d09000 	.word	0x03d09000
 80091c4:	003d0900 	.word	0x003d0900
 80091c8:	08009970 	.word	0x08009970

080091cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00a      	beq.n	80091f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00a      	beq.n	800923a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00a      	beq.n	800925c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009260:	f003 0310 	and.w	r3, r3, #16
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00a      	beq.n	800927e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	430a      	orrs	r2, r1
 800929e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d01a      	beq.n	80092e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ca:	d10a      	bne.n	80092e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00a      	beq.n	8009304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	605a      	str	r2, [r3, #4]
  }
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af02      	add	r7, sp, #8
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009320:	f7f8 fc68 	bl	8001bf4 <HAL_GetTick>
 8009324:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0308 	and.w	r3, r3, #8
 8009330:	2b08      	cmp	r3, #8
 8009332:	d10e      	bne.n	8009352 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f82f 	bl	80093a6 <UART_WaitOnFlagUntilTimeout>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e025      	b.n	800939e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b04      	cmp	r3, #4
 800935e:	d10e      	bne.n	800937e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f819 	bl	80093a6 <UART_WaitOnFlagUntilTimeout>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e00f      	b.n	800939e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2220      	movs	r2, #32
 8009382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	60f8      	str	r0, [r7, #12]
 80093ae:	60b9      	str	r1, [r7, #8]
 80093b0:	603b      	str	r3, [r7, #0]
 80093b2:	4613      	mov	r3, r2
 80093b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093b6:	e062      	b.n	800947e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093be:	d05e      	beq.n	800947e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093c0:	f7f8 fc18 	bl	8001bf4 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d302      	bcc.n	80093d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d11d      	bne.n	8009412 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0201 	bic.w	r2, r2, #1
 80093f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2220      	movs	r2, #32
 8009402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e045      	b.n	800949e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 0304 	and.w	r3, r3, #4
 800941c:	2b00      	cmp	r3, #0
 800941e:	d02e      	beq.n	800947e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800942a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800942e:	d126      	bne.n	800947e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009438:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009448:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0201 	bic.w	r2, r2, #1
 8009458:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2220      	movs	r2, #32
 800945e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2220      	movs	r2, #32
 8009466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2220      	movs	r2, #32
 800946e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e00f      	b.n	800949e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69da      	ldr	r2, [r3, #28]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	4013      	ands	r3, r2
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	bf0c      	ite	eq
 800948e:	2301      	moveq	r3, #1
 8009490:	2300      	movne	r3, #0
 8009492:	b2db      	uxtb	r3, r3
 8009494:	461a      	mov	r2, r3
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	429a      	cmp	r2, r3
 800949a:	d08d      	beq.n	80093b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80094bc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80094cc:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6899      	ldr	r1, [r3, #8]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	4b0f      	ldr	r3, [pc, #60]	; (8009544 <UART_EndRxTransfer+0x60>)
 8009508:	400b      	ands	r3, r1
 800950a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d107      	bne.n	8009524 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0210 	bic.w	r2, r2, #16
 8009522:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2220      	movs	r2, #32
 8009528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	effffffe 	.word	0xeffffffe

08009548 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009554:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955e:	d014      	beq.n	800958a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689a      	ldr	r2, [r3, #8]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009576:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009586:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009588:	e002      	b.n	8009590 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f7f7 fd18 	bl	8000fc0 <HAL_UART_TxCpltCallback>
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff f89a 	bl	80086e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095dc:	2b80      	cmp	r3, #128	; 0x80
 80095de:	d109      	bne.n	80095f4 <UART_DMAError+0x40>
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2b21      	cmp	r3, #33	; 0x21
 80095e4:	d106      	bne.n	80095f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80095ee:	6978      	ldr	r0, [r7, #20]
 80095f0:	f7ff ff59 	bl	80094a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fe:	2b40      	cmp	r3, #64	; 0x40
 8009600:	d109      	bne.n	8009616 <UART_DMAError+0x62>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b22      	cmp	r3, #34	; 0x22
 8009606:	d106      	bne.n	8009616 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2200      	movs	r2, #0
 800960c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009610:	6978      	ldr	r0, [r7, #20]
 8009612:	f7ff ff67 	bl	80094e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800961c:	f043 0210 	orr.w	r2, r3, #16
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009626:	6978      	ldr	r0, [r7, #20]
 8009628:	f7f7 fcda 	bl	8000fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800962c:	bf00      	nop
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f7f7 fcc4 	bl	8000fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009658:	bf00      	nop
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009676:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7f7 fc9a 	bl	8000fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d101      	bne.n	80096e6 <HAL_UARTEx_EnableFifoMode+0x16>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e02b      	b.n	800973e <HAL_UARTEx_EnableFifoMode+0x6e>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2224      	movs	r2, #36	; 0x24
 80096f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 0201 	bic.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009714:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800971c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f88a 	bl	8009840 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2220      	movs	r2, #32
 8009730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009756:	2b01      	cmp	r3, #1
 8009758:	d101      	bne.n	800975e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800975a:	2302      	movs	r3, #2
 800975c:	e02d      	b.n	80097ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2224      	movs	r2, #36	; 0x24
 800976a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0201 	bic.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f850 	bl	8009840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e02d      	b.n	8009836 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2224      	movs	r2, #36	; 0x24
 80097e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f022 0201 	bic.w	r2, r2, #1
 8009800:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f812 	bl	8009840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800984c:	2b00      	cmp	r3, #0
 800984e:	d108      	bne.n	8009862 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009860:	e031      	b.n	80098c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009862:	2310      	movs	r3, #16
 8009864:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009866:	2310      	movs	r3, #16
 8009868:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	0e5b      	lsrs	r3, r3, #25
 8009872:	b2db      	uxtb	r3, r3
 8009874:	f003 0307 	and.w	r3, r3, #7
 8009878:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	0f5b      	lsrs	r3, r3, #29
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	7b3a      	ldrb	r2, [r7, #12]
 800988e:	4911      	ldr	r1, [pc, #68]	; (80098d4 <UARTEx_SetNbDataToProcess+0x94>)
 8009890:	5c8a      	ldrb	r2, [r1, r2]
 8009892:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009896:	7b3a      	ldrb	r2, [r7, #12]
 8009898:	490f      	ldr	r1, [pc, #60]	; (80098d8 <UARTEx_SetNbDataToProcess+0x98>)
 800989a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800989c:	fb93 f3f2 	sdiv	r3, r3, r2
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	7b7a      	ldrb	r2, [r7, #13]
 80098ac:	4909      	ldr	r1, [pc, #36]	; (80098d4 <UARTEx_SetNbDataToProcess+0x94>)
 80098ae:	5c8a      	ldrb	r2, [r1, r2]
 80098b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098b4:	7b7a      	ldrb	r2, [r7, #13]
 80098b6:	4908      	ldr	r1, [pc, #32]	; (80098d8 <UARTEx_SetNbDataToProcess+0x98>)
 80098b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80098be:	b29a      	uxth	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80098c6:	bf00      	nop
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	08009988 	.word	0x08009988
 80098d8:	08009990 	.word	0x08009990

080098dc <__libc_init_array>:
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	4d0d      	ldr	r5, [pc, #52]	; (8009914 <__libc_init_array+0x38>)
 80098e0:	4c0d      	ldr	r4, [pc, #52]	; (8009918 <__libc_init_array+0x3c>)
 80098e2:	1b64      	subs	r4, r4, r5
 80098e4:	10a4      	asrs	r4, r4, #2
 80098e6:	2600      	movs	r6, #0
 80098e8:	42a6      	cmp	r6, r4
 80098ea:	d109      	bne.n	8009900 <__libc_init_array+0x24>
 80098ec:	4d0b      	ldr	r5, [pc, #44]	; (800991c <__libc_init_array+0x40>)
 80098ee:	4c0c      	ldr	r4, [pc, #48]	; (8009920 <__libc_init_array+0x44>)
 80098f0:	f000 f820 	bl	8009934 <_init>
 80098f4:	1b64      	subs	r4, r4, r5
 80098f6:	10a4      	asrs	r4, r4, #2
 80098f8:	2600      	movs	r6, #0
 80098fa:	42a6      	cmp	r6, r4
 80098fc:	d105      	bne.n	800990a <__libc_init_array+0x2e>
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	f855 3b04 	ldr.w	r3, [r5], #4
 8009904:	4798      	blx	r3
 8009906:	3601      	adds	r6, #1
 8009908:	e7ee      	b.n	80098e8 <__libc_init_array+0xc>
 800990a:	f855 3b04 	ldr.w	r3, [r5], #4
 800990e:	4798      	blx	r3
 8009910:	3601      	adds	r6, #1
 8009912:	e7f2      	b.n	80098fa <__libc_init_array+0x1e>
 8009914:	080099a0 	.word	0x080099a0
 8009918:	080099a0 	.word	0x080099a0
 800991c:	080099a0 	.word	0x080099a0
 8009920:	080099a4 	.word	0x080099a4

08009924 <memset>:
 8009924:	4402      	add	r2, r0
 8009926:	4603      	mov	r3, r0
 8009928:	4293      	cmp	r3, r2
 800992a:	d100      	bne.n	800992e <memset+0xa>
 800992c:	4770      	bx	lr
 800992e:	f803 1b01 	strb.w	r1, [r3], #1
 8009932:	e7f9      	b.n	8009928 <memset+0x4>

08009934 <_init>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	bf00      	nop
 8009938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993a:	bc08      	pop	{r3}
 800993c:	469e      	mov	lr, r3
 800993e:	4770      	bx	lr

08009940 <_fini>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr
