
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095cc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009864  08009864  00019864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098b0  080098b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080098b8  080098b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  080098c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003880  24000040  080098e8  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240038c0  080098e8  000238c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001da5e  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fd5  00000000  00000000  0003dab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00040a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  00041860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374e7  00000000  00000000  00042558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000130ab  00000000  00000000  00079a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f713  00000000  00000000  0008caea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec1fd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038fc  00000000  00000000  001ec250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800984c 	.word	0x0800984c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800984c 	.word	0x0800984c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af02      	add	r7, sp, #8
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	817b      	strh	r3, [r7, #10]
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005e0:	813b      	strh	r3, [r7, #8]
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < txCount; ++i ){
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
 80005e6:	e00f      	b.n	8000608 <main+0x38>
	  aTxBuffer[i] = i % 16384;
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	425a      	negs	r2, r3
 80005ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f0:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005f4:	bf58      	it	pl
 80005f6:	4253      	negpl	r3, r2
 80005f8:	b299      	uxth	r1, r3
 80005fa:	4aaa      	ldr	r2, [pc, #680]	; (80008a4 <main+0x2d4>)
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3301      	adds	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
 8000608:	893b      	ldrh	r3, [r7, #8]
 800060a:	69fa      	ldr	r2, [r7, #28]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbeb      	blt.n	80005e8 <main+0x18>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000610:	4ba5      	ldr	r3, [pc, #660]	; (80008a8 <main+0x2d8>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000618:	2b00      	cmp	r3, #0
 800061a:	d11b      	bne.n	8000654 <main+0x84>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800061c:	f3bf 8f4f 	dsb	sy
}
 8000620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000622:	f3bf 8f6f 	isb	sy
}
 8000626:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000628:	4b9f      	ldr	r3, [pc, #636]	; (80008a8 <main+0x2d8>)
 800062a:	2200      	movs	r2, #0
 800062c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000630:	f3bf 8f4f 	dsb	sy
}
 8000634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000636:	f3bf 8f6f 	isb	sy
}
 800063a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800063c:	4b9a      	ldr	r3, [pc, #616]	; (80008a8 <main+0x2d8>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a99      	ldr	r2, [pc, #612]	; (80008a8 <main+0x2d8>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000648:	f3bf 8f4f 	dsb	sy
}
 800064c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800064e:	f3bf 8f6f 	isb	sy
}
 8000652:	e000      	b.n	8000656 <main+0x86>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000654:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f001 f9d3 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f99d 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 fb13 	bl	8000c88 <MX_GPIO_Init>
  HAL_EnableCompensationCell();
 8000662:	f001 fa8f 	bl	8001b84 <HAL_EnableCompensationCell>
  MX_DMA_Init();
 8000666:	f000 facf 	bl	8000c08 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800066a:	f000 fa73 	bl	8000b54 <MX_USART3_UART_Init>
//  MX_USART1_UART_Init();
//  MX_SPI2_Init();
  MX_SPI1_Init();
 800066e:	f000 fa19 	bl	8000aa4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */

  while(UserButtonStatus == 0)
 8000672:	e005      	b.n	8000680 <main+0xb0>
  {
    BSP_LED_Toggle(LED1);
 8000674:	2000      	movs	r0, #0
 8000676:	f001 f85f 	bl	8001738 <BSP_LED_Toggle>
    HAL_Delay(100);
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f001 fa52 	bl	8001b24 <HAL_Delay>
  while(UserButtonStatus == 0)
 8000680:	4b8a      	ldr	r3, [pc, #552]	; (80008ac <main+0x2dc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f5      	beq.n	8000674 <main+0xa4>
  }
  UserButtonStatus = 0;
 8000688:	4b88      	ldr	r3, [pc, #544]	; (80008ac <main+0x2dc>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800068e:	f001 fa3d 	bl	8001b0c <HAL_GetTick>
 8000692:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	e030      	b.n	80006fc <main+0x12c>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 800069a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	4882      	ldr	r0, [pc, #520]	; (80008b0 <main+0x2e0>)
 80006a8:	f008 fe09 	bl	80092be <UART_WaitOnFlagUntilTimeout>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <main+0xe6>
      {
        return HAL_TIMEOUT;
 80006b2:	2303      	movs	r3, #3
 80006b4:	e162      	b.n	800097c <main+0x3ac>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006b6:	4a7b      	ldr	r2, [pc, #492]	; (80008a4 <main+0x2d4>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006be:	461a      	mov	r2, r3
 80006c0:	4b7b      	ldr	r3, [pc, #492]	; (80008b0 <main+0x2e0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4876      	ldr	r0, [pc, #472]	; (80008b0 <main+0x2e0>)
 80006d6:	f008 fdf2 	bl	80092be <UART_WaitOnFlagUntilTimeout>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <main+0x114>
      {
        return HAL_TIMEOUT;
 80006e0:	2303      	movs	r3, #3
 80006e2:	e14b      	b.n	800097c <main+0x3ac>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006e4:	4a6f      	ldr	r2, [pc, #444]	; (80008a4 <main+0x2d4>)
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <main+0x2e0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	3301      	adds	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000702:	d3ca      	bcc.n	800069a <main+0xca>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 8000704:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2200      	movs	r2, #0
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	4867      	ldr	r0, [pc, #412]	; (80008b0 <main+0x2e0>)
 8000712:	f008 fdd4 	bl	80092be <UART_WaitOnFlagUntilTimeout>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <main+0x150>
  {
    return HAL_TIMEOUT;
 800071c:	2303      	movs	r3, #3
 800071e:	e12d      	b.n	800097c <main+0x3ac>
  }
  BSP_LED_Off(LED1);
 8000720:	2000      	movs	r0, #0
 8000722:	f000 ffdf 	bl	80016e4 <BSP_LED_Off>
  while(UserButtonStatus == 0)
 8000726:	e005      	b.n	8000734 <main+0x164>
  {
    BSP_LED_Toggle(LED2);
 8000728:	2001      	movs	r0, #1
 800072a:	f001 f805 	bl	8001738 <BSP_LED_Toggle>
    HAL_Delay(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f001 f9f8 	bl	8001b24 <HAL_Delay>
  while(UserButtonStatus == 0)
 8000734:	4b5d      	ldr	r3, [pc, #372]	; (80008ac <main+0x2dc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0f5      	beq.n	8000728 <main+0x158>
  }
  UserButtonStatus = 0;
 800073c:	4b5b      	ldr	r3, [pc, #364]	; (80008ac <main+0x2dc>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
  UartReady = RESET;
 8000742:	4b5c      	ldr	r3, [pc, #368]	; (80008b4 <main+0x2e4>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED1);
 8000748:	2000      	movs	r0, #0
 800074a:	f000 ffcb 	bl	80016e4 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 800074e:	2001      	movs	r0, #1
 8000750:	f000 ffc8 	bl	80016e4 <BSP_LED_Off>
    /* Process Locked */
    __HAL_LOCK(&hspi1);
 8000754:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <main+0x2e8>)
 8000756:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800075a:	2b01      	cmp	r3, #1
 800075c:	d101      	bne.n	8000762 <main+0x192>
 800075e:	2302      	movs	r3, #2
 8000760:	e10c      	b.n	800097c <main+0x3ac>
 8000762:	4b55      	ldr	r3, [pc, #340]	; (80008b8 <main+0x2e8>)
 8000764:	2201      	movs	r2, #1
 8000766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Configure communication direction : 1Line */
    if (hspi1.Init.Direction == SPI_DIRECTION_1LINE)
 800076a:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <main+0x2e8>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000772:	d107      	bne.n	8000784 <main+0x1b4>
    {
      SPI_1LINE_RX(&hspi1);
 8000774:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <main+0x2e8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <main+0x2e8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000782:	601a      	str	r2, [r3, #0]
    }

    /* Clear RXDMAEN bit */
    CLEAR_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <main+0x2e8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <main+0x2e8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000792:	609a      	str	r2, [r3, #8]

    /* Set the SPI Rx DMA transfer complete callback */
    hspi1.hdmarx->XferCpltCallback = tx_complete;
 8000794:	4b48      	ldr	r3, [pc, #288]	; (80008b8 <main+0x2e8>)
 8000796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000798:	4a48      	ldr	r2, [pc, #288]	; (80008bc <main+0x2ec>)
 800079a:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 800079c:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <main+0x2e8>)
 800079e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007a0:	4a47      	ldr	r2, [pc, #284]	; (80008c0 <main+0x2f0>)
 80007a2:	641a      	str	r2, [r3, #64]	; 0x40

    MODIFY_REG(((DMA_Stream_TypeDef   *)hdma_spi1_rx.Instance)->CR, (DMA_IT_TC | DMA_IT_HT), (DMA_IT_TC | DMA_IT_HT));
 80007a4:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <main+0x2f4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b46      	ldr	r3, [pc, #280]	; (80008c4 <main+0x2f4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f042 0218 	orr.w	r2, r2, #24
 80007b2:	601a      	str	r2, [r3, #0]
    /* Enable the Rx DMA Stream/Channel  */
    if (HAL_OK != HAL_DMA_Start(hspi1.hdmarx, (uint32_t)&hspi1.Instance->RXDR, (uint32_t)aRxBuffer, rxCount))
 80007b4:	4b40      	ldr	r3, [pc, #256]	; (80008b8 <main+0x2e8>)
 80007b6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007b8:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <main+0x2e8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3330      	adds	r3, #48	; 0x30
 80007be:	4619      	mov	r1, r3
 80007c0:	4a41      	ldr	r2, [pc, #260]	; (80008c8 <main+0x2f8>)
 80007c2:	897b      	ldrh	r3, [r7, #10]
 80007c4:	f001 fe5a 	bl	800247c <HAL_DMA_Start>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00d      	beq.n	80007ea <main+0x21a>
    {
      /* Update SPI error code */
      SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80007ce:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <main+0x2e8>)
 80007d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	4a37      	ldr	r2, [pc, #220]	; (80008b8 <main+0x2e8>)
 80007da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      hspi1.State = HAL_SPI_STATE_READY;
 80007de:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <main+0x2e8>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      Error_Handler();
 80007e6:	f000 fb86 	bl	8000ef6 <Error_Handler>
    }

      MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <main+0x2e8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6859      	ldr	r1, [r3, #4]
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <main+0x2e8>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b35      	ldr	r3, [pc, #212]	; (80008cc <main+0x2fc>)
 80007f6:	400b      	ands	r3, r1
 80007f8:	6053      	str	r3, [r2, #4]

    /* Enable Rx DMA Request */
    SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <main+0x2e8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <main+0x2e8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000808:	609a      	str	r2, [r3, #8]

    /* Enable the SPI Error Interrupt Bit */
    __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <main+0x2e8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	691a      	ldr	r2, [r3, #16]
 8000810:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <main+0x2e8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8000818:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi1);
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <main+0x2e8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <main+0x2e8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f042 0201 	orr.w	r2, r2, #1
 8000828:	601a      	str	r2, [r3, #0]

      SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <main+0x2e8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <main+0x2e8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000838:	601a      	str	r2, [r3, #0]

  while (wTransferState != TRANSFER_H_COMPLETE)
 800083a:	e002      	b.n	8000842 <main+0x272>
  {
	    BSP_LED_Toggle(LED3);
 800083c:	2002      	movs	r0, #2
 800083e:	f000 ff7b 	bl	8001738 <BSP_LED_Toggle>
  while (wTransferState != TRANSFER_H_COMPLETE)
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <main+0x300>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d1f8      	bne.n	800083c <main+0x26c>
  }
  wTransferState = TRANSFER_WAIT;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <main+0x300>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
  for( int i = 0; i < txCount; ++i ){
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00a      	b.n	800086c <main+0x29c>
	  aTxBuffer[i] = aRxBuffer[i];
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <main+0x2f8>)
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <main+0x2d4>)
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	893b      	ldrh	r3, [r7, #8]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf0      	blt.n	8000856 <main+0x286>
  }
  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 8000874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000878:	490a      	ldr	r1, [pc, #40]	; (80008a4 <main+0x2d4>)
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <main+0x2e0>)
 800087c:	f007 fb82 	bl	8007f84 <HAL_UART_Transmit_DMA>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <main+0x2bc>
  {
    Error_Handler();
 8000886:	f000 fb36 	bl	8000ef6 <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (wTransferState != TRANSFER_COMPLETE) {}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <main+0x300>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d1fb      	bne.n	800088e <main+0x2be>
	  wTransferState = TRANSFER_WAIT;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <main+0x300>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
	  for( int i = 0; i < txCount; ++i ){
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	e025      	b.n	80008ee <main+0x31e>
 80008a2:	bf00      	nop
 80008a4:	24000080 	.word	0x24000080
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	24000060 	.word	0x24000060
 80008b0:	2400310c 	.word	0x2400310c
 80008b4:	2400005c 	.word	0x2400005c
 80008b8:	24003724 	.word	0x24003724
 80008bc:	08000e5d 	.word	0x08000e5d
 80008c0:	08000e7d 	.word	0x08000e7d
 80008c4:	240037ac 	.word	0x240037ac
 80008c8:	24001080 	.word	0x24001080
 80008cc:	ffff0000 	.word	0xffff0000
 80008d0:	24003080 	.word	0x24003080
		  aTxBuffer[i] = aRxBuffer[i + txCount];
 80008d4:	893a      	ldrh	r2, [r7, #8]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	4413      	add	r3, r2
 80008da:	4a2a      	ldr	r2, [pc, #168]	; (8000984 <main+0x3b4>)
 80008dc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008e0:	4a29      	ldr	r2, [pc, #164]	; (8000988 <main+0x3b8>)
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 0; i < txCount; ++i ){
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	3301      	adds	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	893b      	ldrh	r3, [r7, #8]
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dbee      	blt.n	80008d4 <main+0x304>
	  }
	  while ((UartReady == RESET)) {}
 80008f6:	bf00      	nop
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <main+0x3bc>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0fa      	beq.n	80008f8 <main+0x328>
	  UartReady = RESET;
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <main+0x3bc>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
	  /*##-2- Start the transmission process #####################################*/
	  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 8000908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800090c:	491e      	ldr	r1, [pc, #120]	; (8000988 <main+0x3b8>)
 800090e:	4820      	ldr	r0, [pc, #128]	; (8000990 <main+0x3c0>)
 8000910:	f007 fb38 	bl	8007f84 <HAL_UART_Transmit_DMA>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <main+0x34e>
	  {
	    Error_Handler();
 800091a:	f000 faec 	bl	8000ef6 <Error_Handler>
	  }
	  while (wTransferState != TRANSFER_H_COMPLETE) {}
 800091e:	bf00      	nop
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <main+0x3c4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d1fb      	bne.n	8000920 <main+0x350>
	  wTransferState = TRANSFER_WAIT;
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <main+0x3c4>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
	  for( int i = 0; i < txCount; ++i ){
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e00a      	b.n	800094a <main+0x37a>
		  aTxBuffer[i] = aRxBuffer[i];
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <main+0x3b4>)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <main+0x3b8>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 0; i < txCount; ++i ){
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	893b      	ldrh	r3, [r7, #8]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	429a      	cmp	r2, r3
 8000950:	dbf0      	blt.n	8000934 <main+0x364>
	  }
	  while ((UartReady == RESET)) {}
 8000952:	bf00      	nop
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <main+0x3bc>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0fa      	beq.n	8000954 <main+0x384>
	  UartReady = RESET;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <main+0x3bc>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	  /*##-2- Start the transmission process #####################################*/
	  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 8000964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <main+0x3b8>)
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <main+0x3c0>)
 800096c:	f007 fb0a 	bl	8007f84 <HAL_UART_Transmit_DMA>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d08a      	beq.n	800088c <main+0x2bc>
	  {
		Error_Handler();
 8000976:	f000 fabe 	bl	8000ef6 <Error_Handler>
	  while (wTransferState != TRANSFER_COMPLETE) {}
 800097a:	e787      	b.n	800088c <main+0x2bc>
	  }
  }
}
 800097c:	4618      	mov	r0, r3
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24001080 	.word	0x24001080
 8000988:	24000080 	.word	0x24000080
 800098c:	2400005c 	.word	0x2400005c
 8000990:	2400310c 	.word	0x2400310c
 8000994:	24003080 	.word	0x24003080

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b09c      	sub	sp, #112	; 0x70
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	224c      	movs	r2, #76	; 0x4c
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f008 ff48 	bl	800983c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2220      	movs	r2, #32
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f008 ff42 	bl	800983c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 fb8f 	bl	80050dc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b35      	ldr	r3, [pc, #212]	; (8000a98 <SystemClock_Config+0x100>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4a34      	ldr	r2, [pc, #208]	; (8000a98 <SystemClock_Config+0x100>)
 80009c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009cc:	6193      	str	r3, [r2, #24]
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <SystemClock_Config+0x100>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <SystemClock_Config+0x104>)
 80009da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009dc:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <SystemClock_Config+0x104>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <SystemClock_Config+0x104>)
 80009e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f0:	bf00      	nop
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <SystemClock_Config+0x100>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009fe:	d1f8      	bne.n	80009f2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a00:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <SystemClock_Config+0x108>)
 8000a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a04:	f023 0303 	bic.w	r3, r3, #3
 8000a08:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <SystemClock_Config+0x108>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a10:	2321      	movs	r3, #33	; 0x21
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	2302      	movs	r3, #2
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 115;
 8000a2a:	2373      	movs	r3, #115	; 0x73
 8000a2c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fb80 	bl	8005150 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a56:	f000 fa4e 	bl	8000ef6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	233f      	movs	r3, #63	; 0x3f
 8000a5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a66:	2308      	movs	r3, #8
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4618      	mov	r0, r3
 8000a82:	f004 ff75 	bl	8005970 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000a8c:	f000 fa33 	bl	8000ef6 <Error_Handler>
  }


}
 8000a90:	bf00      	nop
 8000a92:	3770      	adds	r7, #112	; 0x70
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	58024800 	.word	0x58024800
 8000a9c:	58000400 	.word	0x58000400
 8000aa0:	58024400 	.word	0x58024400

08000aa4 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000aaa:	4a29      	ldr	r2, [pc, #164]	; (8000b50 <MX_SPI1_Init+0xac>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000ab0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000ab8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000abc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000ac0:	220d      	movs	r2, #13
 8000ac2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000aca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000ad4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ad8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000afe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b20:	2220      	movs	r2, #32
 8000b22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000b38:	f006 fe08 	bl	800774c <HAL_SPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000b42:	f000 f9d8 	bl	8000ef6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	24003724 	.word	0x24003724
 8000b50:	40013000 	.word	0x40013000

08000b54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b58:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b5a:	4a29      	ldr	r2, [pc, #164]	; (8000c00 <MX_USART3_UART_Init+0xac>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11978688;
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b60:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <MX_USART3_UART_Init+0xb0>)
 8000b62:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b78:	220c      	movs	r2, #12
 8000b7a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b98:	2280      	movs	r2, #128	; 0x80
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba2:	4816      	ldr	r0, [pc, #88]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000ba4:	f007 f99d 	bl	8007ee2 <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000bae:	f000 f9a2 	bl	8000ef6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000bb6:	f008 fd52 	bl	800965e <HAL_UARTEx_SetTxFifoThreshold>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000bc0:	f000 f999 	bl	8000ef6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000bc8:	f008 fd87 	bl	80096da <HAL_UARTEx_SetRxFifoThreshold>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000bd2:	f000 f990 	bl	8000ef6 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000bd6:	4809      	ldr	r0, [pc, #36]	; (8000bfc <MX_USART3_UART_Init+0xa8>)
 8000bd8:	f008 fd06 	bl	80095e8 <HAL_UARTEx_EnableFifoMode>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000be2:	f000 f988 	bl	8000ef6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2100      	movs	r1, #0
 8000bea:	2027      	movs	r0, #39	; 0x27
 8000bec:	f001 f8b5 	bl	8001d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bf0:	2027      	movs	r0, #39	; 0x27
 8000bf2:	f001 f8cc 	bl	8001d8e <HAL_NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2400310c 	.word	0x2400310c
 8000c00:	40004800 	.word	0x40004800
 8000c04:	00b6c7c0 	.word	0x00b6c7c0

08000c08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_DMA_Init+0x7c>)
 8000c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <MX_DMA_Init+0x7c>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_DMA_Init+0x7c>)
 8000c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_DMA_Init+0x7c>)
 8000c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c32:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <MX_DMA_Init+0x7c>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_DMA_Init+0x7c>)
 8000c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200b      	movs	r0, #11
 8000c50:	f001 f883 	bl	8001d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c54:	200b      	movs	r0, #11
 8000c56:	f001 f89a 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200c      	movs	r0, #12
 8000c60:	f001 f87b 	bl	8001d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c64:	200c      	movs	r0, #12
 8000c66:	f001 f892 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2038      	movs	r0, #56	; 0x38
 8000c70:	f001 f873 	bl	8001d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c74:	2038      	movs	r0, #56	; 0x38
 8000c76:	f001 f88a 	bl	8001d8e <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	58024400 	.word	0x58024400

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b57      	ldr	r3, [pc, #348]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a55      	ldr	r2, [pc, #340]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbc:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a4e      	ldr	r2, [pc, #312]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	4a3f      	ldr	r2, [pc, #252]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d08:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	4a37      	ldr	r2, [pc, #220]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d34:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a30      	ldr	r2, [pc, #192]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <MX_GPIO_Init+0x174>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d76:	4822      	ldr	r0, [pc, #136]	; (8000e00 <MX_GPIO_Init+0x178>)
 8000d78:	f004 f962 	bl	8005040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4820      	ldr	r0, [pc, #128]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000d82:	f004 f95d 	bl	8005040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481b      	ldr	r0, [pc, #108]	; (8000e08 <MX_GPIO_Init+0x180>)
 8000d9c:	f003 ffa0 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000da0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <MX_GPIO_Init+0x178>)
 8000dba:	f003 ff91 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480b      	ldr	r0, [pc, #44]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000dd6:	f003 ff83 	bl	8004ce0 <HAL_GPIO_Init>

  BSP_LED_Init(LED1);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 fbe2 	bl	80015a4 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 fbdf 	bl	80015a4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000de6:	2002      	movs	r0, #2
 8000de8:	f000 fbdc 	bl	80015a4 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000dec:	2101      	movs	r1, #1
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 fccc 	bl	800178c <BSP_PB_Init>
}
 8000df4:	bf00      	nop
 8000df6:	3730      	adds	r7, #48	; 0x30
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	58020400 	.word	0x58020400
 8000e04:	58021000 	.word	0x58021000
 8000e08:	58020800 	.word	0x58020800

08000e0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e1c:	d105      	bne.n	8000e2a <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f083 0301 	eor.w	r3, r3, #1
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e28:	6013      	str	r3, [r2, #0]
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	24000060 	.word	0x24000060

08000e3c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Turn LED1 on: Transfer in transmission process is complete */
  BSP_LED_On(LED1);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 fc23 	bl	8001690 <BSP_LED_On>
  wTransferState = TRANSFER_COMPLETE;
 8000e4a:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_SPI_RxCpltCallback+0x1c>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24003080 	.word	0x24003080

08000e5c <tx_complete>:

void tx_complete(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
	  BSP_LED_On(LED1);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f000 fc13 	bl	8001690 <BSP_LED_On>
	  wTransferState = TRANSFER_COMPLETE;
 8000e6a:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <tx_complete+0x1c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	24003080 	.word	0x24003080

08000e7c <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
	  BSP_LED_On(LED1);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 fc03 	bl	8001690 <BSP_LED_On>
	  wTransferState = TRANSFER_H_COMPLETE;
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <tx_h_complete+0x1c>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	24003080 	.word	0x24003080

08000e9c <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <HAL_SPI_ErrorCallback+0x1c>)
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	24003080 	.word	0x24003080

08000ebc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_UART_TxCpltCallback+0x1c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
  /* Turn LED2 off: Transfer in transmission process is correct */
  BSP_LED_On(LED2);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f000 fbe0 	bl	8001690 <BSP_LED_On>

}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2400005c 	.word	0x2400005c

08000edc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f000 fbd3 	bl	8001690 <BSP_LED_On>
  Error_Handler();
 8000eea:	f000 f804 	bl	8000ef6 <Error_Handler>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000efa:	b672      	cpsid	i
}
 8000efc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f000 fc1a 	bl	8001738 <BSP_LED_Toggle>
	    HAL_Delay(100);
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f000 fe0d 	bl	8001b24 <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8000f0a:	e7f8      	b.n	8000efe <Error_Handler+0x8>

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_MspInit+0x30>)
 8000f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x30>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x30>)
 8000f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0bc      	sub	sp, #240	; 0xf0
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	22bc      	movs	r2, #188	; 0xbc
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f008 fc6b 	bl	800983c <memset>
  if(hspi->Instance==SPI1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4aa0      	ldr	r2, [pc, #640]	; (80011ec <HAL_SPI_MspInit+0x2ac>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	f040 8097 	bne.w	80010a0 <HAL_SPI_MspInit+0x160>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	623b      	str	r3, [r7, #32]
      PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
      PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
      PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8000f82:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
      PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8000f88:	2332      	movs	r3, #50	; 0x32
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	653b      	str	r3, [r7, #80]	; 0x50
      PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8000f90:	2302      	movs	r3, #2
 8000f92:	657b      	str	r3, [r7, #84]	; 0x54
      PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8000f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f98:	65bb      	str	r3, [r7, #88]	; 0x58
      PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
      PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	663b      	str	r3, [r7, #96]	; 0x60
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 f86e 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_SPI_MspInit+0x76>
      {
        Error_Handler();
 8000fb2:	f7ff ffa0 	bl	8000ef6 <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 8000fb6:	4b8e      	ldr	r3, [pc, #568]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8000fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fbc:	4a8c      	ldr	r2, [pc, #560]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8000fbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fc6:	4b8a      	ldr	r3, [pc, #552]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8000fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	69fb      	ldr	r3, [r7, #28]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b86      	ldr	r3, [pc, #536]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fda:	4a85      	ldr	r2, [pc, #532]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe4:	4b82      	ldr	r3, [pc, #520]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
      /**SPI1 GPIO Configuration
      PA5     ------> SPI1_SCK
      PA6     ------> SPI1_MISO
      PA15 (JTDI)     ------> SPI1_NSS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000ff2:	f248 0360 	movw	r3, #32864	; 0x8060
 8000ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100c:	2305      	movs	r3, #5
 800100e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001016:	4619      	mov	r1, r3
 8001018:	4876      	ldr	r0, [pc, #472]	; (80011f4 <HAL_SPI_MspInit+0x2b4>)
 800101a:	f003 fe61 	bl	8004ce0 <HAL_GPIO_Init>

      /* SPI1 DMA Init */
      /* SPI1_RX Init */
      hdma_spi1_rx.Instance = DMA2_Stream0;
 800101e:	4b76      	ldr	r3, [pc, #472]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001020:	4a76      	ldr	r2, [pc, #472]	; (80011fc <HAL_SPI_MspInit+0x2bc>)
 8001022:	601a      	str	r2, [r3, #0]
      hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001024:	4b74      	ldr	r3, [pc, #464]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001026:	2225      	movs	r2, #37	; 0x25
 8001028:	605a      	str	r2, [r3, #4]
      hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102a:	4b73      	ldr	r3, [pc, #460]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
      hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b71      	ldr	r3, [pc, #452]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
      hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b70      	ldr	r3, [pc, #448]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103c:	611a      	str	r2, [r3, #16]
      hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103e:	4b6e      	ldr	r3, [pc, #440]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001044:	615a      	str	r2, [r3, #20]
      hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001046:	4b6c      	ldr	r3, [pc, #432]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001048:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800104c:	619a      	str	r2, [r3, #24]
      hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800104e:	4b6a      	ldr	r3, [pc, #424]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	61da      	str	r2, [r3, #28]
      hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001056:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
      hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800105c:	4b66      	ldr	r3, [pc, #408]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 800105e:	2204      	movs	r2, #4
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001062:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001068:	4b63      	ldr	r3, [pc, #396]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001074:	4860      	ldr	r0, [pc, #384]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001076:	f000 fea5 	bl	8001dc4 <HAL_DMA_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_SPI_MspInit+0x144>
      {
        Error_Handler();
 8001080:	f7ff ff39 	bl	8000ef6 <Error_Handler>
      }

      __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a5c      	ldr	r2, [pc, #368]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 8001088:	67da      	str	r2, [r3, #124]	; 0x7c
 800108a:	4a5b      	ldr	r2, [pc, #364]	; (80011f8 <HAL_SPI_MspInit+0x2b8>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6393      	str	r3, [r2, #56]	; 0x38

      /* SPI1 interrupt Init */
      HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2023      	movs	r0, #35	; 0x23
 8001096:	f000 fe60 	bl	8001d5a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800109a:	2023      	movs	r0, #35	; 0x23
 800109c:	f000 fe77 	bl	8001d8e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
    }
  if(hspi->Instance==SPI2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a56      	ldr	r2, [pc, #344]	; (8001200 <HAL_SPI_MspInit+0x2c0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	f040 809c 	bne.w	80011e4 <HAL_SPI_MspInit+0x2a4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80010b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 80010bc:	2332      	movs	r3, #50	; 0x32
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010cc:	23c0      	movs	r3, #192	; 0xc0
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 ffd3 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 80010e8:	f7ff ff05 	bl	8000ef6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ec:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 80010ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 80010fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	4a37      	ldr	r2, [pc, #220]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	4a30      	ldr	r2, [pc, #192]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4a28      	ldr	r2, [pc, #160]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_SPI_MspInit+0x2b0>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001164:	230c      	movs	r3, #12
 8001166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800117c:	2305      	movs	r3, #5
 800117e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001186:	4619      	mov	r1, r3
 8001188:	481e      	ldr	r0, [pc, #120]	; (8001204 <HAL_SPI_MspInit+0x2c4>)
 800118a:	f003 fda9 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011a8:	2305      	movs	r3, #5
 80011aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011b2:	4619      	mov	r1, r3
 80011b4:	4814      	ldr	r0, [pc, #80]	; (8001208 <HAL_SPI_MspInit+0x2c8>)
 80011b6:	f003 fd93 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ba:	2308      	movs	r3, #8
 80011bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d2:	2305      	movs	r3, #5
 80011d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011dc:	4619      	mov	r1, r3
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <HAL_SPI_MspInit+0x2cc>)
 80011e0:	f003 fd7e 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	37f0      	adds	r7, #240	; 0xf0
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40013000 	.word	0x40013000
 80011f0:	58024400 	.word	0x58024400
 80011f4:	58020000 	.word	0x58020000
 80011f8:	240037ac 	.word	0x240037ac
 80011fc:	40020410 	.word	0x40020410
 8001200:	40003800 	.word	0x40003800
 8001204:	58020800 	.word	0x58020800
 8001208:	58020400 	.word	0x58020400
 800120c:	58020c00 	.word	0x58020c00

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0ea      	sub	sp, #424	; 0x1a8
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800122e:	22bc      	movs	r2, #188	; 0xbc
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f008 fb02 	bl	800983c <memset>
  if(huart->Instance==USART1)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a9a      	ldr	r2, [pc, #616]	; (80014a8 <HAL_UART_MspInit+0x298>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d17c      	bne.n	800133e <HAL_UART_MspInit+0x12e>
//    {
//      Error_Handler();
//    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001244:	4b99      	ldr	r3, [pc, #612]	; (80014ac <HAL_UART_MspInit+0x29c>)
 8001246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800124a:	4a98      	ldr	r2, [pc, #608]	; (80014ac <HAL_UART_MspInit+0x29c>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001254:	4b95      	ldr	r3, [pc, #596]	; (80014ac <HAL_UART_MspInit+0x29c>)
 8001256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b91      	ldr	r3, [pc, #580]	; (80014ac <HAL_UART_MspInit+0x29c>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a8f      	ldr	r2, [pc, #572]	; (80014ac <HAL_UART_MspInit+0x29c>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b8d      	ldr	r3, [pc, #564]	; (80014ac <HAL_UART_MspInit+0x29c>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001284:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800128c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80012a2:	2304      	movs	r3, #4
 80012a4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80012ac:	4619      	mov	r1, r3
 80012ae:	4880      	ldr	r0, [pc, #512]	; (80014b0 <HAL_UART_MspInit+0x2a0>)
 80012b0:	f003 fd16 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b4:	2340      	movs	r3, #64	; 0x40
 80012b6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012cc:	2307      	movs	r3, #7
 80012ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80012d6:	4619      	mov	r1, r3
 80012d8:	4875      	ldr	r0, [pc, #468]	; (80014b0 <HAL_UART_MspInit+0x2a0>)
 80012da:	f003 fd01 	bl	8004ce0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80012de:	4b75      	ldr	r3, [pc, #468]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 80012e0:	4a75      	ldr	r2, [pc, #468]	; (80014b8 <HAL_UART_MspInit+0x2a8>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80012e4:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 80012e6:	222a      	movs	r2, #42	; 0x2a
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ea:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 80012ec:	2240      	movs	r2, #64	; 0x40
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 80012f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fe:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001304:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800130a:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001316:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800131c:	4865      	ldr	r0, [pc, #404]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 800131e:	f000 fd51 	bl	8001dc4 <HAL_DMA_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 8001328:	f7ff fde5 	bl	8000ef6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a60      	ldr	r2, [pc, #384]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 8001332:	679a      	str	r2, [r3, #120]	; 0x78
 8001334:	4a5f      	ldr	r2, [pc, #380]	; (80014b4 <HAL_UART_MspInit+0x2a4>)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800133c:	e0af      	b.n	800149e <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART3)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a5d      	ldr	r2, [pc, #372]	; (80014bc <HAL_UART_MspInit+0x2ac>)
 8001346:	4293      	cmp	r3, r2
 8001348:	f040 80a9 	bne.w	800149e <HAL_UART_MspInit+0x28e>
	  RCC_PeriphCLKInitTypeDef usart3ClkInitStr = {0};
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4618      	mov	r0, r3
 8001352:	23bc      	movs	r3, #188	; 0xbc
 8001354:	461a      	mov	r2, r3
 8001356:	2100      	movs	r1, #0
 8001358:	f008 fa70 	bl	800983c <memset>
	  usart3ClkInitStr.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2202      	movs	r2, #2
 8001362:	601a      	str	r2, [r3, #0]
	  usart3ClkInitStr.PLL3.PLL3M = pll3_m;
 8001364:	2304      	movs	r3, #4
 8001366:	461a      	mov	r2, r3
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
	  usart3ClkInitStr.PLL3.PLL3N = pll3_n;
 800136e:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001372:	461a      	mov	r2, r3
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
	  usart3ClkInitStr.PLL3.PLL3P = pll3_p;
 800137a:	2332      	movs	r3, #50	; 0x32
 800137c:	461a      	mov	r2, r3
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
	  usart3ClkInitStr.PLL3.PLL3Q = pll3_q;
 8001384:	2308      	movs	r3, #8
 8001386:	461a      	mov	r2, r3
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	631a      	str	r2, [r3, #48]	; 0x30
	  usart3ClkInitStr.PLL3.PLL3R = pll3_r;
 800138e:	2302      	movs	r3, #2
 8001390:	461a      	mov	r2, r3
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	635a      	str	r2, [r3, #52]	; 0x34
	  usart3ClkInitStr.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a0:	639a      	str	r2, [r3, #56]	; 0x38
	  usart3ClkInitStr.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	2200      	movs	r2, #0
 80013a8:	63da      	str	r2, [r3, #60]	; 0x3c
	  usart3ClkInitStr.PLL3.PLL3FRACN = 0;
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2200      	movs	r2, #0
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
	  usart3ClkInitStr.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2202      	movs	r2, #2
 80013b8:	675a      	str	r2, [r3, #116]	; 0x74
	  if (HAL_RCCEx_PeriphCLKConfig(&usart3ClkInitStr) != HAL_OK)
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 fe62 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_UART_MspInit+0x1be>
	    Error_Handler();
 80013ca:	f7ff fd94 	bl	8000ef6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <HAL_UART_MspInit+0x29c>)
 80013d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013d4:	4a35      	ldr	r2, [pc, #212]	; (80014ac <HAL_UART_MspInit+0x29c>)
 80013d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <HAL_UART_MspInit+0x29c>)
 80013e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_UART_MspInit+0x29c>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <HAL_UART_MspInit+0x29c>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_UART_MspInit+0x29c>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800140e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001416:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800142c:	2307      	movs	r3, #7
 800142e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001432:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001436:	4619      	mov	r1, r3
 8001438:	4821      	ldr	r0, [pc, #132]	; (80014c0 <HAL_UART_MspInit+0x2b0>)
 800143a:	f003 fc51 	bl	8004ce0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <HAL_UART_MspInit+0x2b8>)
 8001442:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001446:	222e      	movs	r2, #46	; 0x2e
 8001448:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800147e:	4811      	ldr	r0, [pc, #68]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001480:	f000 fca0 	bl	8001dc4 <HAL_DMA_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_UART_MspInit+0x27e>
      Error_Handler();
 800148a:	f7ff fd34 	bl	8000ef6 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001494:	679a      	str	r2, [r3, #120]	; 0x78
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <HAL_UART_MspInit+0x2b4>)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800149e:	bf00      	nop
 80014a0:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40011000 	.word	0x40011000
 80014ac:	58024400 	.word	0x58024400
 80014b0:	58020400 	.word	0x58020400
 80014b4:	2400361c 	.word	0x2400361c
 80014b8:	40020010 	.word	0x40020010
 80014bc:	40004800 	.word	0x40004800
 80014c0:	58020c00 	.word	0x58020c00
 80014c4:	240035a4 	.word	0x240035a4
 80014c8:	40020028 	.word	0x40020028

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 fae4 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <DMA1_Stream0_IRQHandler+0x10>)
 8001526:	f002 f895 	bl	8003654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2400361c 	.word	0x2400361c

08001534 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8001538:	2001      	movs	r0, #1
 800153a:	f000 f8a9 	bl	8001690 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800153e:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA1_Stream1_IRQHandler+0x14>)
 8001540:	f002 f888 	bl	8003654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	240035a4 	.word	0x240035a4

0800154c <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	  BSP_LED_On(LED1);
 8001550:	2000      	movs	r0, #0
 8001552:	f000 f89d 	bl	8001690 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001556:	4802      	ldr	r0, [pc, #8]	; (8001560 <DMA2_Stream0_IRQHandler+0x14>)
 8001558:	f002 f87c 	bl	8003654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	240037ac 	.word	0x240037ac

08001564 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8001568:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800156c:	f003 fd9b 	bl	80050a6 <HAL_GPIO_EXTI_IRQHandler>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8001578:	2001      	movs	r0, #1
 800157a:	f000 f889 	bl	8001690 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 800157e:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART3_IRQHandler+0x14>)
 8001580:	f006 fd80 	bl	8008084 <HAL_UART_IRQHandler>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2400310c 	.word	0x2400310c

0800158c <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <SPI1_IRQHandler+0x14>)
 8001592:	f006 f9dd 	bl	8007950 <HAL_SPI_IRQHandler>
  BSP_LED_On(LED2);
 8001596:	2001      	movs	r0, #1
 8001598:	f000 f87a 	bl	8001690 <BSP_LED_On>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24003724 	.word	0x24003724

080015a4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <BSP_LED_Init+0x28>
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d006      	beq.n	80015cc <BSP_LED_Init+0x28>
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d003      	beq.n	80015cc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015c4:	f06f 0301 	mvn.w	r3, #1
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ca:	e055      	b.n	8001678 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10f      	bne.n	80015f2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <BSP_LED_Init+0xe0>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d8:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <BSP_LED_Init+0xe0>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <BSP_LED_Init+0xe0>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	e021      	b.n	8001636 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10f      	bne.n	8001618 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <BSP_LED_Init+0xe0>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	4a21      	ldr	r2, [pc, #132]	; (8001684 <BSP_LED_Init+0xe0>)
 8001600:	f043 0310 	orr.w	r3, r3, #16
 8001604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <BSP_LED_Init+0xe0>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	e00e      	b.n	8001636 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <BSP_LED_Init+0xe0>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	4a19      	ldr	r2, [pc, #100]	; (8001684 <BSP_LED_Init+0xe0>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <BSP_LED_Init+0xe0>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4a13      	ldr	r2, [pc, #76]	; (8001688 <BSP_LED_Init+0xe4>)
 800163a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800163e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <BSP_LED_Init+0xe8>)
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	f107 0218 	add.w	r2, r7, #24
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fb40 	bl	8004ce0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <BSP_LED_Init+0xe8>)
 8001664:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4a07      	ldr	r2, [pc, #28]	; (8001688 <BSP_LED_Init+0xe4>)
 800166c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	f003 fce4 	bl	8005040 <HAL_GPIO_WritePin>
  }

  return ret;
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800167a:	4618      	mov	r0, r3
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	58024400 	.word	0x58024400
 8001688:	08009864 	.word	0x08009864
 800168c:	24000000 	.word	0x24000000

08001690 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d009      	beq.n	80016b8 <BSP_LED_On+0x28>
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d006      	beq.n	80016b8 <BSP_LED_On+0x28>
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d003      	beq.n	80016b8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016b0:	f06f 0301 	mvn.w	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	e00b      	b.n	80016d0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <BSP_LED_On+0x4c>)
 80016bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <BSP_LED_On+0x50>)
 80016c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	f003 fcb8 	bl	8005040 <HAL_GPIO_WritePin>
  }

  return ret;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	24000000 	.word	0x24000000
 80016e0:	08009864 	.word	0x08009864

080016e4 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d009      	beq.n	800170c <BSP_LED_Off+0x28>
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d006      	beq.n	800170c <BSP_LED_Off+0x28>
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d003      	beq.n	800170c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001704:	f06f 0301 	mvn.w	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e00b      	b.n	8001724 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <BSP_LED_Off+0x4c>)
 8001710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4a07      	ldr	r2, [pc, #28]	; (8001734 <BSP_LED_Off+0x50>)
 8001718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	f003 fc8e 	bl	8005040 <HAL_GPIO_WritePin>
  }

  return ret;
 8001724:	68fb      	ldr	r3, [r7, #12]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	24000000 	.word	0x24000000
 8001734:	08009864 	.word	0x08009864

08001738 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d009      	beq.n	8001760 <BSP_LED_Toggle+0x28>
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d006      	beq.n	8001760 <BSP_LED_Toggle+0x28>
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d003      	beq.n	8001760 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001758:	f06f 0301 	mvn.w	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e00b      	b.n	8001778 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <BSP_LED_Toggle+0x4c>)
 8001764:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4907      	ldr	r1, [pc, #28]	; (8001788 <BSP_LED_Toggle+0x50>)
 800176c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f003 fc7d 	bl	8005072 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001778:	68fb      	ldr	r3, [r7, #12]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	24000000 	.word	0x24000000
 8001788:	08009864 	.word	0x08009864

0800178c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	460a      	mov	r2, r1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	4613      	mov	r3, r2
 800179a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <BSP_PB_Init+0xc8>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a2:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <BSP_PB_Init+0xc8>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <BSP_PB_Init+0xc8>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80017ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017be:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80017c0:	2302      	movs	r3, #2
 80017c2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4a20      	ldr	r2, [pc, #128]	; (8001858 <BSP_PB_Init+0xcc>)
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	f107 020c 	add.w	r2, r7, #12
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fa7d 	bl	8004ce0 <HAL_GPIO_Init>
 80017e6:	e030      	b.n	800184a <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <BSP_PB_Init+0xd0>)
 80017ea:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <BSP_PB_Init+0xcc>)
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	f107 020c 	add.w	r2, r7, #12
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fa70 	bl	8004ce0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4a16      	ldr	r2, [pc, #88]	; (8001860 <BSP_PB_Init+0xd4>)
 8001806:	441a      	add	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4916      	ldr	r1, [pc, #88]	; (8001864 <BSP_PB_Init+0xd8>)
 800180c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001810:	4619      	mov	r1, r3
 8001812:	4610      	mov	r0, r2
 8001814:	f003 fa4f 	bl	8004cb6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4a10      	ldr	r2, [pc, #64]	; (8001860 <BSP_PB_Init+0xd4>)
 800181e:	1898      	adds	r0, r3, r2
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a11      	ldr	r2, [pc, #68]	; (8001868 <BSP_PB_Init+0xdc>)
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	461a      	mov	r2, r3
 800182a:	2100      	movs	r1, #0
 800182c:	f003 fa24 	bl	8004c78 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001830:	2028      	movs	r0, #40	; 0x28
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <BSP_PB_Init+0xe0>)
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	f000 fa8c 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001842:	2328      	movs	r3, #40	; 0x28
 8001844:	4618      	mov	r0, r3
 8001846:	f000 faa2 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	58024400 	.word	0x58024400
 8001858:	2400000c 	.word	0x2400000c
 800185c:	11110000 	.word	0x11110000
 8001860:	24003824 	.word	0x24003824
 8001864:	0800986c 	.word	0x0800986c
 8001868:	24000010 	.word	0x24000010
 800186c:	24000014 	.word	0x24000014

08001870 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fff0 	bl	8001870 <BSP_PB_Callback>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001898:	4b39      	ldr	r3, [pc, #228]	; (8001980 <SystemInit+0xec>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a38      	ldr	r2, [pc, #224]	; (8001980 <SystemInit+0xec>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018a8:	4b36      	ldr	r3, [pc, #216]	; (8001984 <SystemInit+0xf0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	2b06      	cmp	r3, #6
 80018b2:	d807      	bhi.n	80018c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b4:	4b33      	ldr	r3, [pc, #204]	; (8001984 <SystemInit+0xf0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 030f 	bic.w	r3, r3, #15
 80018bc:	4a31      	ldr	r2, [pc, #196]	; (8001984 <SystemInit+0xf0>)
 80018be:	f043 0307 	orr.w	r3, r3, #7
 80018c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018c4:	4b30      	ldr	r3, [pc, #192]	; (8001988 <SystemInit+0xf4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2f      	ldr	r2, [pc, #188]	; (8001988 <SystemInit+0xf4>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <SystemInit+0xf4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <SystemInit+0xf4>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	492b      	ldr	r1, [pc, #172]	; (8001988 <SystemInit+0xf4>)
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <SystemInit+0xf8>)
 80018de:	4013      	ands	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <SystemInit+0xf0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <SystemInit+0xf0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 030f 	bic.w	r3, r3, #15
 80018f6:	4a23      	ldr	r2, [pc, #140]	; (8001984 <SystemInit+0xf0>)
 80018f8:	f043 0307 	orr.w	r3, r3, #7
 80018fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <SystemInit+0xf4>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <SystemInit+0xf4>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <SystemInit+0xf4>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <SystemInit+0xf4>)
 8001912:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <SystemInit+0xfc>)
 8001914:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <SystemInit+0xf4>)
 8001918:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <SystemInit+0x100>)
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <SystemInit+0xf4>)
 800191e:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <SystemInit+0x104>)
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <SystemInit+0xf4>)
 8001924:	2200      	movs	r2, #0
 8001926:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <SystemInit+0xf4>)
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <SystemInit+0x104>)
 800192c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <SystemInit+0xf4>)
 8001930:	2200      	movs	r2, #0
 8001932:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <SystemInit+0xf4>)
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <SystemInit+0x104>)
 8001938:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <SystemInit+0xf4>)
 800193c:	2200      	movs	r2, #0
 800193e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <SystemInit+0xf4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a10      	ldr	r2, [pc, #64]	; (8001988 <SystemInit+0xf4>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <SystemInit+0xf4>)
 800194e:	2200      	movs	r2, #0
 8001950:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <SystemInit+0x108>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <SystemInit+0x10c>)
 8001958:	4013      	ands	r3, r2
 800195a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800195e:	d202      	bcs.n	8001966 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <SystemInit+0x110>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <SystemInit+0x114>)
 8001968:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800196c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SystemInit+0xec>)
 8001970:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001974:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00
 8001984:	52002000 	.word	0x52002000
 8001988:	58024400 	.word	0x58024400
 800198c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001990:	02020200 	.word	0x02020200
 8001994:	01ff0000 	.word	0x01ff0000
 8001998:	01010280 	.word	0x01010280
 800199c:	5c001000 	.word	0x5c001000
 80019a0:	ffff0000 	.word	0xffff0000
 80019a4:	51008108 	.word	0x51008108
 80019a8:	52004000 	.word	0x52004000

080019ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b0:	f7ff ff70 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	; (80019f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f007 ff0b 	bl	80097f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019de:	f7fe fdf7 	bl	80005d0 <main>
  bx  lr
 80019e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019ec:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 80019f0:	080098c0 	.word	0x080098c0
  ldr r2, =_sbss
 80019f4:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 80019f8:	240038c0 	.word	0x240038c0

080019fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC3_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f000 f99c 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a0c:	f004 f966 	bl	8005cdc <HAL_RCC_GetSysClockFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_Init+0x68>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	4913      	ldr	r1, [pc, #76]	; (8001a6c <HAL_Init+0x6c>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_Init+0x68>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_Init+0x6c>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_Init+0x70>)
 8001a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a44:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <HAL_Init+0x74>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f814 	bl	8001a78 <HAL_InitTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e002      	b.n	8001a60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5a:	f7ff fa57 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	08009870 	.word	0x08009870
 8001a70:	2400001c 	.word	0x2400001c
 8001a74:	24000018 	.word	0x24000018

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_InitTick+0x60>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e021      	b.n	8001ad0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_InitTick+0x64>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_InitTick+0x60>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f981 	bl	8001daa <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f94b 	bl	8001d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <HAL_InitTick+0x68>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	24000024 	.word	0x24000024
 8001adc:	24000018 	.word	0x24000018
 8001ae0:	24000020 	.word	0x24000020

08001ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	24000024 	.word	0x24000024
 8001b08:	240038bc 	.word	0x240038bc

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	240038bc 	.word	0x240038bc

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	24000024 	.word	0x24000024

08001b6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetREVID+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0c1b      	lsrs	r3, r3, #16
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	5c001000 	.word	0x5c001000

08001b84 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_EnableCompensationCell+0x1c>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_EnableCompensationCell+0x1c>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	58000400 	.word	0x58000400

08001ba4 <__NVIC_SetPriorityGrouping>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00
 8001be8:	05fa0000 	.word	0x05fa0000

08001bec <__NVIC_GetPriorityGrouping>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_EnableIRQ>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0b      	blt.n	8001c32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4907      	ldr	r1, [pc, #28]	; (8001c40 <__NVIC_EnableIRQ+0x38>)
 8001c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100

08001c44 <__NVIC_SetPriority>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0a      	blt.n	8001c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	490c      	ldr	r1, [pc, #48]	; (8001c90 <__NVIC_SetPriority+0x4c>)
 8001c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	440b      	add	r3, r1
 8001c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c6c:	e00a      	b.n	8001c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <__NVIC_SetPriority+0x50>)
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	0112      	lsls	r2, r2, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	440b      	add	r3, r1
 8001c82:	761a      	strb	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <NVIC_EncodePriority>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	bf28      	it	cs
 8001cb6:	2304      	movcs	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d902      	bls.n	8001cc8 <NVIC_EncodePriority+0x30>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	e000      	b.n	8001cca <NVIC_EncodePriority+0x32>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43d9      	mvns	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	4313      	orrs	r3, r2
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff8e 	bl	8001c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff29 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d68:	f7ff ff40 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7ff ff90 	bl	8001c98 <NVIC_EncodePriority>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff5f 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff33 	bl	8001c08 <__NVIC_EnableIRQ>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffa4 	bl	8001d00 <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff fe9e 	bl	8001b0c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e316      	b.n	800240a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a66      	ldr	r2, [pc, #408]	; (8001f7c <HAL_DMA_Init+0x1b8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d04a      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a65      	ldr	r2, [pc, #404]	; (8001f80 <HAL_DMA_Init+0x1bc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d045      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a63      	ldr	r2, [pc, #396]	; (8001f84 <HAL_DMA_Init+0x1c0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d040      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a62      	ldr	r2, [pc, #392]	; (8001f88 <HAL_DMA_Init+0x1c4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d03b      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a60      	ldr	r2, [pc, #384]	; (8001f8c <HAL_DMA_Init+0x1c8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d036      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a5f      	ldr	r2, [pc, #380]	; (8001f90 <HAL_DMA_Init+0x1cc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d031      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a5d      	ldr	r2, [pc, #372]	; (8001f94 <HAL_DMA_Init+0x1d0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02c      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a5c      	ldr	r2, [pc, #368]	; (8001f98 <HAL_DMA_Init+0x1d4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d027      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a5a      	ldr	r2, [pc, #360]	; (8001f9c <HAL_DMA_Init+0x1d8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <HAL_DMA_Init+0x1dc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d01d      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a57      	ldr	r2, [pc, #348]	; (8001fa4 <HAL_DMA_Init+0x1e0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <HAL_DMA_Init+0x1e4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a54      	ldr	r2, [pc, #336]	; (8001fac <HAL_DMA_Init+0x1e8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a53      	ldr	r2, [pc, #332]	; (8001fb0 <HAL_DMA_Init+0x1ec>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_DMA_Init+0x1f0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_DMA_Init+0xb8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a50      	ldr	r2, [pc, #320]	; (8001fb8 <HAL_DMA_Init+0x1f4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0xbc>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_DMA_Init+0xbe>
 8001e80:	2300      	movs	r3, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 813b 	beq.w	80020fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a37      	ldr	r2, [pc, #220]	; (8001f7c <HAL_DMA_Init+0x1b8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d04a      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_DMA_Init+0x1bc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d045      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a34      	ldr	r2, [pc, #208]	; (8001f84 <HAL_DMA_Init+0x1c0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d040      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <HAL_DMA_Init+0x1c4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d03b      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <HAL_DMA_Init+0x1c8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d036      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a30      	ldr	r2, [pc, #192]	; (8001f90 <HAL_DMA_Init+0x1cc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d031      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2e      	ldr	r2, [pc, #184]	; (8001f94 <HAL_DMA_Init+0x1d0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d02c      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	; (8001f98 <HAL_DMA_Init+0x1d4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d027      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2b      	ldr	r2, [pc, #172]	; (8001f9c <HAL_DMA_Init+0x1d8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d022      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2a      	ldr	r2, [pc, #168]	; (8001fa0 <HAL_DMA_Init+0x1dc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d01d      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <HAL_DMA_Init+0x1e0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d018      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <HAL_DMA_Init+0x1e4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a25      	ldr	r2, [pc, #148]	; (8001fac <HAL_DMA_Init+0x1e8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00e      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <HAL_DMA_Init+0x1ec>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_DMA_Init+0x1f0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d004      	beq.n	8001f38 <HAL_DMA_Init+0x174>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <HAL_DMA_Init+0x1f4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <HAL_DMA_Init+0x186>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e007      	b.n	8001f5a <HAL_DMA_Init+0x196>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f5a:	e02f      	b.n	8001fbc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f5c:	f7ff fdd6 	bl	8001b0c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b05      	cmp	r3, #5
 8001f68:	d928      	bls.n	8001fbc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e246      	b.n	800240a <HAL_DMA_Init+0x646>
 8001f7c:	40020010 	.word	0x40020010
 8001f80:	40020028 	.word	0x40020028
 8001f84:	40020040 	.word	0x40020040
 8001f88:	40020058 	.word	0x40020058
 8001f8c:	40020070 	.word	0x40020070
 8001f90:	40020088 	.word	0x40020088
 8001f94:	400200a0 	.word	0x400200a0
 8001f98:	400200b8 	.word	0x400200b8
 8001f9c:	40020410 	.word	0x40020410
 8001fa0:	40020428 	.word	0x40020428
 8001fa4:	40020440 	.word	0x40020440
 8001fa8:	40020458 	.word	0x40020458
 8001fac:	40020470 	.word	0x40020470
 8001fb0:	40020488 	.word	0x40020488
 8001fb4:	400204a0 	.word	0x400204a0
 8001fb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1c8      	bne.n	8001f5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4b83      	ldr	r3, [pc, #524]	; (80021e4 <HAL_DMA_Init+0x420>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001fe2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4313      	orrs	r3, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002020:	4b71      	ldr	r3, [pc, #452]	; (80021e8 <HAL_DMA_Init+0x424>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b71      	ldr	r3, [pc, #452]	; (80021ec <HAL_DMA_Init+0x428>)
 8002026:	4013      	ands	r3, r2
 8002028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800202c:	d328      	bcc.n	8002080 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b28      	cmp	r3, #40	; 0x28
 8002034:	d903      	bls.n	800203e <HAL_DMA_Init+0x27a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b2e      	cmp	r3, #46	; 0x2e
 800203c:	d917      	bls.n	800206e <HAL_DMA_Init+0x2aa>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b3e      	cmp	r3, #62	; 0x3e
 8002044:	d903      	bls.n	800204e <HAL_DMA_Init+0x28a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b42      	cmp	r3, #66	; 0x42
 800204c:	d90f      	bls.n	800206e <HAL_DMA_Init+0x2aa>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b46      	cmp	r3, #70	; 0x46
 8002054:	d903      	bls.n	800205e <HAL_DMA_Init+0x29a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b48      	cmp	r3, #72	; 0x48
 800205c:	d907      	bls.n	800206e <HAL_DMA_Init+0x2aa>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b4e      	cmp	r3, #78	; 0x4e
 8002064:	d905      	bls.n	8002072 <HAL_DMA_Init+0x2ae>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b52      	cmp	r3, #82	; 0x52
 800206c:	d801      	bhi.n	8002072 <HAL_DMA_Init+0x2ae>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_DMA_Init+0x2b0>
 8002072:	2300      	movs	r3, #0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800207e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f023 0307 	bic.w	r3, r3, #7
 8002096:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d117      	bne.n	80020da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00e      	beq.n	80020da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f002 fc51 	bl	8004964 <DMA_CheckFifoParam>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2240      	movs	r2, #64	; 0x40
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e197      	b.n	800240a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f002 fb8c 	bl	8004800 <DMA_CalcBaseAndBitshift>
 80020e8:	4603      	mov	r3, r0
 80020ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	223f      	movs	r2, #63	; 0x3f
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	e0cd      	b.n	800229a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a3b      	ldr	r2, [pc, #236]	; (80021f0 <HAL_DMA_Init+0x42c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <HAL_DMA_Init+0x38a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a39      	ldr	r2, [pc, #228]	; (80021f4 <HAL_DMA_Init+0x430>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01d      	beq.n	800214e <HAL_DMA_Init+0x38a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a38      	ldr	r2, [pc, #224]	; (80021f8 <HAL_DMA_Init+0x434>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d018      	beq.n	800214e <HAL_DMA_Init+0x38a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a36      	ldr	r2, [pc, #216]	; (80021fc <HAL_DMA_Init+0x438>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_DMA_Init+0x38a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a35      	ldr	r2, [pc, #212]	; (8002200 <HAL_DMA_Init+0x43c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00e      	beq.n	800214e <HAL_DMA_Init+0x38a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a33      	ldr	r2, [pc, #204]	; (8002204 <HAL_DMA_Init+0x440>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d009      	beq.n	800214e <HAL_DMA_Init+0x38a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_DMA_Init+0x444>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_DMA_Init+0x38a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a30      	ldr	r2, [pc, #192]	; (800220c <HAL_DMA_Init+0x448>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_DMA_Init+0x38e>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_DMA_Init+0x390>
 8002152:	2300      	movs	r3, #0
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8097 	beq.w	8002288 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <HAL_DMA_Init+0x42c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d021      	beq.n	80021a8 <HAL_DMA_Init+0x3e4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_DMA_Init+0x430>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01c      	beq.n	80021a8 <HAL_DMA_Init+0x3e4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_DMA_Init+0x434>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d017      	beq.n	80021a8 <HAL_DMA_Init+0x3e4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_DMA_Init+0x438>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d012      	beq.n	80021a8 <HAL_DMA_Init+0x3e4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <HAL_DMA_Init+0x43c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00d      	beq.n	80021a8 <HAL_DMA_Init+0x3e4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_DMA_Init+0x440>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d008      	beq.n	80021a8 <HAL_DMA_Init+0x3e4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1b      	ldr	r2, [pc, #108]	; (8002208 <HAL_DMA_Init+0x444>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <HAL_DMA_Init+0x3e4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_DMA_Init+0x448>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_DMA_Init+0x44c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d020      	beq.n	8002214 <HAL_DMA_Init+0x450>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d102      	bne.n	80021e0 <HAL_DMA_Init+0x41c>
 80021da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021de:	e01a      	b.n	8002216 <HAL_DMA_Init+0x452>
 80021e0:	2300      	movs	r3, #0
 80021e2:	e018      	b.n	8002216 <HAL_DMA_Init+0x452>
 80021e4:	fe10803f 	.word	0xfe10803f
 80021e8:	5c001000 	.word	0x5c001000
 80021ec:	ffff0000 	.word	0xffff0000
 80021f0:	58025408 	.word	0x58025408
 80021f4:	5802541c 	.word	0x5802541c
 80021f8:	58025430 	.word	0x58025430
 80021fc:	58025444 	.word	0x58025444
 8002200:	58025458 	.word	0x58025458
 8002204:	5802546c 	.word	0x5802546c
 8002208:	58025480 	.word	0x58025480
 800220c:	58025494 	.word	0x58025494
 8002210:	fffe000f 	.word	0xfffe000f
 8002214:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68d2      	ldr	r2, [r2, #12]
 800221a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800221c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002224:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800222c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002234:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800223c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002244:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b6e      	ldr	r3, [pc, #440]	; (8002414 <HAL_DMA_Init+0x650>)
 800225c:	4413      	add	r3, r2
 800225e:	4a6e      	ldr	r2, [pc, #440]	; (8002418 <HAL_DMA_Init+0x654>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	009a      	lsls	r2, r3, #2
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f002 fac7 	bl	8004800 <DMA_CalcBaseAndBitshift>
 8002272:	4603      	mov	r3, r0
 8002274:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2201      	movs	r2, #1
 8002280:	409a      	lsls	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	e008      	b.n	800229a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2203      	movs	r2, #3
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0b7      	b.n	800240a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a5f      	ldr	r2, [pc, #380]	; (800241c <HAL_DMA_Init+0x658>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d072      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a5d      	ldr	r2, [pc, #372]	; (8002420 <HAL_DMA_Init+0x65c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d06d      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5c      	ldr	r2, [pc, #368]	; (8002424 <HAL_DMA_Init+0x660>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d068      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a5a      	ldr	r2, [pc, #360]	; (8002428 <HAL_DMA_Init+0x664>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d063      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a59      	ldr	r2, [pc, #356]	; (800242c <HAL_DMA_Init+0x668>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d05e      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a57      	ldr	r2, [pc, #348]	; (8002430 <HAL_DMA_Init+0x66c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d059      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a56      	ldr	r2, [pc, #344]	; (8002434 <HAL_DMA_Init+0x670>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d054      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a54      	ldr	r2, [pc, #336]	; (8002438 <HAL_DMA_Init+0x674>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d04f      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a53      	ldr	r2, [pc, #332]	; (800243c <HAL_DMA_Init+0x678>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d04a      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a51      	ldr	r2, [pc, #324]	; (8002440 <HAL_DMA_Init+0x67c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d045      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a50      	ldr	r2, [pc, #320]	; (8002444 <HAL_DMA_Init+0x680>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d040      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a4e      	ldr	r2, [pc, #312]	; (8002448 <HAL_DMA_Init+0x684>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d03b      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a4d      	ldr	r2, [pc, #308]	; (800244c <HAL_DMA_Init+0x688>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d036      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a4b      	ldr	r2, [pc, #300]	; (8002450 <HAL_DMA_Init+0x68c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d031      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a4a      	ldr	r2, [pc, #296]	; (8002454 <HAL_DMA_Init+0x690>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d02c      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a48      	ldr	r2, [pc, #288]	; (8002458 <HAL_DMA_Init+0x694>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d027      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a47      	ldr	r2, [pc, #284]	; (800245c <HAL_DMA_Init+0x698>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d022      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a45      	ldr	r2, [pc, #276]	; (8002460 <HAL_DMA_Init+0x69c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01d      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a44      	ldr	r2, [pc, #272]	; (8002464 <HAL_DMA_Init+0x6a0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d018      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a42      	ldr	r2, [pc, #264]	; (8002468 <HAL_DMA_Init+0x6a4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a41      	ldr	r2, [pc, #260]	; (800246c <HAL_DMA_Init+0x6a8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00e      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3f      	ldr	r2, [pc, #252]	; (8002470 <HAL_DMA_Init+0x6ac>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a3e      	ldr	r2, [pc, #248]	; (8002474 <HAL_DMA_Init+0x6b0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d004      	beq.n	800238a <HAL_DMA_Init+0x5c6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <HAL_DMA_Init+0x6b4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_DMA_Init+0x5ca>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_DMA_Init+0x5cc>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d032      	beq.n	80023fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f002 fb61 	bl	8004a5c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b80      	cmp	r3, #128	; 0x80
 80023a0:	d102      	bne.n	80023a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_DMA_Init+0x624>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d80c      	bhi.n	80023e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f002 fbde 	bl	8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	e008      	b.n	80023fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	a7fdabf8 	.word	0xa7fdabf8
 8002418:	cccccccd 	.word	0xcccccccd
 800241c:	40020010 	.word	0x40020010
 8002420:	40020028 	.word	0x40020028
 8002424:	40020040 	.word	0x40020040
 8002428:	40020058 	.word	0x40020058
 800242c:	40020070 	.word	0x40020070
 8002430:	40020088 	.word	0x40020088
 8002434:	400200a0 	.word	0x400200a0
 8002438:	400200b8 	.word	0x400200b8
 800243c:	40020410 	.word	0x40020410
 8002440:	40020428 	.word	0x40020428
 8002444:	40020440 	.word	0x40020440
 8002448:	40020458 	.word	0x40020458
 800244c:	40020470 	.word	0x40020470
 8002450:	40020488 	.word	0x40020488
 8002454:	400204a0 	.word	0x400204a0
 8002458:	400204b8 	.word	0x400204b8
 800245c:	58025408 	.word	0x58025408
 8002460:	5802541c 	.word	0x5802541c
 8002464:	58025430 	.word	0x58025430
 8002468:	58025444 	.word	0x58025444
 800246c:	58025458 	.word	0x58025458
 8002470:	5802546c 	.word	0x5802546c
 8002474:	58025480 	.word	0x58025480
 8002478:	58025494 	.word	0x58025494

0800247c <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0ec      	b.n	8002672 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Start+0x2a>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e0e5      	b.n	8002672 <HAL_DMA_Start+0x1f6>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	f040 80d0 	bne.w	800265c <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6b      	ldr	r2, [pc, #428]	; (800267c <HAL_DMA_Start+0x200>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d04a      	beq.n	800256a <HAL_DMA_Start+0xee>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_DMA_Start+0x204>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d045      	beq.n	800256a <HAL_DMA_Start+0xee>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a68      	ldr	r2, [pc, #416]	; (8002684 <HAL_DMA_Start+0x208>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d040      	beq.n	800256a <HAL_DMA_Start+0xee>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a66      	ldr	r2, [pc, #408]	; (8002688 <HAL_DMA_Start+0x20c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d03b      	beq.n	800256a <HAL_DMA_Start+0xee>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a65      	ldr	r2, [pc, #404]	; (800268c <HAL_DMA_Start+0x210>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d036      	beq.n	800256a <HAL_DMA_Start+0xee>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a63      	ldr	r2, [pc, #396]	; (8002690 <HAL_DMA_Start+0x214>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d031      	beq.n	800256a <HAL_DMA_Start+0xee>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a62      	ldr	r2, [pc, #392]	; (8002694 <HAL_DMA_Start+0x218>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d02c      	beq.n	800256a <HAL_DMA_Start+0xee>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a60      	ldr	r2, [pc, #384]	; (8002698 <HAL_DMA_Start+0x21c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d027      	beq.n	800256a <HAL_DMA_Start+0xee>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a5f      	ldr	r2, [pc, #380]	; (800269c <HAL_DMA_Start+0x220>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <HAL_DMA_Start+0xee>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a5d      	ldr	r2, [pc, #372]	; (80026a0 <HAL_DMA_Start+0x224>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01d      	beq.n	800256a <HAL_DMA_Start+0xee>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_DMA_Start+0x228>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d018      	beq.n	800256a <HAL_DMA_Start+0xee>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5a      	ldr	r2, [pc, #360]	; (80026a8 <HAL_DMA_Start+0x22c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_DMA_Start+0xee>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a59      	ldr	r2, [pc, #356]	; (80026ac <HAL_DMA_Start+0x230>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_DMA_Start+0xee>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a57      	ldr	r2, [pc, #348]	; (80026b0 <HAL_DMA_Start+0x234>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_DMA_Start+0xee>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a56      	ldr	r2, [pc, #344]	; (80026b4 <HAL_DMA_Start+0x238>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_DMA_Start+0xee>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_DMA_Start+0x23c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d108      	bne.n	800257c <HAL_DMA_Start+0x100>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e007      	b.n	800258c <HAL_DMA_Start+0x110>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f001 ff88 	bl	80044a8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a37      	ldr	r2, [pc, #220]	; (800267c <HAL_DMA_Start+0x200>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d04a      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a36      	ldr	r2, [pc, #216]	; (8002680 <HAL_DMA_Start+0x204>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d045      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a34      	ldr	r2, [pc, #208]	; (8002684 <HAL_DMA_Start+0x208>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d040      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a33      	ldr	r2, [pc, #204]	; (8002688 <HAL_DMA_Start+0x20c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d03b      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a31      	ldr	r2, [pc, #196]	; (800268c <HAL_DMA_Start+0x210>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d036      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a30      	ldr	r2, [pc, #192]	; (8002690 <HAL_DMA_Start+0x214>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d031      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <HAL_DMA_Start+0x218>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02c      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a2d      	ldr	r2, [pc, #180]	; (8002698 <HAL_DMA_Start+0x21c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d027      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a2b      	ldr	r2, [pc, #172]	; (800269c <HAL_DMA_Start+0x220>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d022      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2a      	ldr	r2, [pc, #168]	; (80026a0 <HAL_DMA_Start+0x224>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d01d      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a28      	ldr	r2, [pc, #160]	; (80026a4 <HAL_DMA_Start+0x228>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d018      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <HAL_DMA_Start+0x22c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a25      	ldr	r2, [pc, #148]	; (80026ac <HAL_DMA_Start+0x230>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00e      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <HAL_DMA_Start+0x234>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a22      	ldr	r2, [pc, #136]	; (80026b4 <HAL_DMA_Start+0x238>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_DMA_Start+0x1bc>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a21      	ldr	r2, [pc, #132]	; (80026b8 <HAL_DMA_Start+0x23c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d108      	bne.n	800264a <HAL_DMA_Start+0x1ce>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e012      	b.n	8002670 <HAL_DMA_Start+0x1f4>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e009      	b.n	8002670 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800266a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002670:	7dfb      	ldrb	r3, [r7, #23]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40020010 	.word	0x40020010
 8002680:	40020028 	.word	0x40020028
 8002684:	40020040 	.word	0x40020040
 8002688:	40020058 	.word	0x40020058
 800268c:	40020070 	.word	0x40020070
 8002690:	40020088 	.word	0x40020088
 8002694:	400200a0 	.word	0x400200a0
 8002698:	400200b8 	.word	0x400200b8
 800269c:	40020410 	.word	0x40020410
 80026a0:	40020428 	.word	0x40020428
 80026a4:	40020440 	.word	0x40020440
 80026a8:	40020458 	.word	0x40020458
 80026ac:	40020470 	.word	0x40020470
 80026b0:	40020488 	.word	0x40020488
 80026b4:	400204a0 	.word	0x400204a0
 80026b8:	400204b8 	.word	0x400204b8

080026bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e226      	b.n	8002b26 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Start_IT+0x2a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e21f      	b.n	8002b26 <HAL_DMA_Start_IT+0x46a>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	f040 820a 	bne.w	8002b10 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a68      	ldr	r2, [pc, #416]	; (80028b0 <HAL_DMA_Start_IT+0x1f4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d04a      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a66      	ldr	r2, [pc, #408]	; (80028b4 <HAL_DMA_Start_IT+0x1f8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d045      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <HAL_DMA_Start_IT+0x1fc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d040      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a63      	ldr	r2, [pc, #396]	; (80028bc <HAL_DMA_Start_IT+0x200>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d03b      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a62      	ldr	r2, [pc, #392]	; (80028c0 <HAL_DMA_Start_IT+0x204>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d036      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a60      	ldr	r2, [pc, #384]	; (80028c4 <HAL_DMA_Start_IT+0x208>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d031      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <HAL_DMA_Start_IT+0x20c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d02c      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a5d      	ldr	r2, [pc, #372]	; (80028cc <HAL_DMA_Start_IT+0x210>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d027      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <HAL_DMA_Start_IT+0x214>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d022      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a5a      	ldr	r2, [pc, #360]	; (80028d4 <HAL_DMA_Start_IT+0x218>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01d      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a59      	ldr	r2, [pc, #356]	; (80028d8 <HAL_DMA_Start_IT+0x21c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d018      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a57      	ldr	r2, [pc, #348]	; (80028dc <HAL_DMA_Start_IT+0x220>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a56      	ldr	r2, [pc, #344]	; (80028e0 <HAL_DMA_Start_IT+0x224>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00e      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a54      	ldr	r2, [pc, #336]	; (80028e4 <HAL_DMA_Start_IT+0x228>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d009      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a53      	ldr	r2, [pc, #332]	; (80028e8 <HAL_DMA_Start_IT+0x22c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d004      	beq.n	80027aa <HAL_DMA_Start_IT+0xee>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a51      	ldr	r2, [pc, #324]	; (80028ec <HAL_DMA_Start_IT+0x230>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d108      	bne.n	80027bc <HAL_DMA_Start_IT+0x100>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e007      	b.n	80027cc <HAL_DMA_Start_IT+0x110>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f001 fe68 	bl	80044a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <HAL_DMA_Start_IT+0x1f4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d04a      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a33      	ldr	r2, [pc, #204]	; (80028b4 <HAL_DMA_Start_IT+0x1f8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d045      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a31      	ldr	r2, [pc, #196]	; (80028b8 <HAL_DMA_Start_IT+0x1fc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d040      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a30      	ldr	r2, [pc, #192]	; (80028bc <HAL_DMA_Start_IT+0x200>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d03b      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2e      	ldr	r2, [pc, #184]	; (80028c0 <HAL_DMA_Start_IT+0x204>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d036      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2d      	ldr	r2, [pc, #180]	; (80028c4 <HAL_DMA_Start_IT+0x208>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d031      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <HAL_DMA_Start_IT+0x20c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02c      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <HAL_DMA_Start_IT+0x210>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d027      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <HAL_DMA_Start_IT+0x214>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d022      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <HAL_DMA_Start_IT+0x218>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01d      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <HAL_DMA_Start_IT+0x21c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d018      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a24      	ldr	r2, [pc, #144]	; (80028dc <HAL_DMA_Start_IT+0x220>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <HAL_DMA_Start_IT+0x224>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00e      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <HAL_DMA_Start_IT+0x228>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_DMA_Start_IT+0x22c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_DMA_Start_IT+0x1bc>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <HAL_DMA_Start_IT+0x230>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_DMA_Start_IT+0x1c0>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_DMA_Start_IT+0x1c2>
 800287c:	2300      	movs	r3, #0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d036      	beq.n	80028f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 021e 	bic.w	r2, r3, #30
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0216 	orr.w	r2, r2, #22
 8002894:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d03e      	beq.n	800291c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0208 	orr.w	r2, r2, #8
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e035      	b.n	800291c <HAL_DMA_Start_IT+0x260>
 80028b0:	40020010 	.word	0x40020010
 80028b4:	40020028 	.word	0x40020028
 80028b8:	40020040 	.word	0x40020040
 80028bc:	40020058 	.word	0x40020058
 80028c0:	40020070 	.word	0x40020070
 80028c4:	40020088 	.word	0x40020088
 80028c8:	400200a0 	.word	0x400200a0
 80028cc:	400200b8 	.word	0x400200b8
 80028d0:	40020410 	.word	0x40020410
 80028d4:	40020428 	.word	0x40020428
 80028d8:	40020440 	.word	0x40020440
 80028dc:	40020458 	.word	0x40020458
 80028e0:	40020470 	.word	0x40020470
 80028e4:	40020488 	.word	0x40020488
 80028e8:	400204a0 	.word	0x400204a0
 80028ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 020e 	bic.w	r2, r3, #14
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 020a 	orr.w	r2, r2, #10
 8002902:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0204 	orr.w	r2, r2, #4
 800291a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a83      	ldr	r2, [pc, #524]	; (8002b30 <HAL_DMA_Start_IT+0x474>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d072      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a82      	ldr	r2, [pc, #520]	; (8002b34 <HAL_DMA_Start_IT+0x478>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d06d      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <HAL_DMA_Start_IT+0x47c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d068      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7f      	ldr	r2, [pc, #508]	; (8002b3c <HAL_DMA_Start_IT+0x480>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d063      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a7d      	ldr	r2, [pc, #500]	; (8002b40 <HAL_DMA_Start_IT+0x484>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d05e      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7c      	ldr	r2, [pc, #496]	; (8002b44 <HAL_DMA_Start_IT+0x488>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d059      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a7a      	ldr	r2, [pc, #488]	; (8002b48 <HAL_DMA_Start_IT+0x48c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d054      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a79      	ldr	r2, [pc, #484]	; (8002b4c <HAL_DMA_Start_IT+0x490>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d04f      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a77      	ldr	r2, [pc, #476]	; (8002b50 <HAL_DMA_Start_IT+0x494>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d04a      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a76      	ldr	r2, [pc, #472]	; (8002b54 <HAL_DMA_Start_IT+0x498>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d045      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a74      	ldr	r2, [pc, #464]	; (8002b58 <HAL_DMA_Start_IT+0x49c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d040      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a73      	ldr	r2, [pc, #460]	; (8002b5c <HAL_DMA_Start_IT+0x4a0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d03b      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a71      	ldr	r2, [pc, #452]	; (8002b60 <HAL_DMA_Start_IT+0x4a4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d036      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a70      	ldr	r2, [pc, #448]	; (8002b64 <HAL_DMA_Start_IT+0x4a8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d031      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a6e      	ldr	r2, [pc, #440]	; (8002b68 <HAL_DMA_Start_IT+0x4ac>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02c      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6d      	ldr	r2, [pc, #436]	; (8002b6c <HAL_DMA_Start_IT+0x4b0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d027      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a6b      	ldr	r2, [pc, #428]	; (8002b70 <HAL_DMA_Start_IT+0x4b4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d022      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6a      	ldr	r2, [pc, #424]	; (8002b74 <HAL_DMA_Start_IT+0x4b8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01d      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a68      	ldr	r2, [pc, #416]	; (8002b78 <HAL_DMA_Start_IT+0x4bc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d018      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a67      	ldr	r2, [pc, #412]	; (8002b7c <HAL_DMA_Start_IT+0x4c0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a65      	ldr	r2, [pc, #404]	; (8002b80 <HAL_DMA_Start_IT+0x4c4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00e      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a64      	ldr	r2, [pc, #400]	; (8002b84 <HAL_DMA_Start_IT+0x4c8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d009      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a62      	ldr	r2, [pc, #392]	; (8002b88 <HAL_DMA_Start_IT+0x4cc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_DMA_Start_IT+0x350>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a61      	ldr	r2, [pc, #388]	; (8002b8c <HAL_DMA_Start_IT+0x4d0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_DMA_Start_IT+0x354>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_DMA_Start_IT+0x356>
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d01a      	beq.n	8002a4c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a32:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a37      	ldr	r2, [pc, #220]	; (8002b30 <HAL_DMA_Start_IT+0x474>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d04a      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a36      	ldr	r2, [pc, #216]	; (8002b34 <HAL_DMA_Start_IT+0x478>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d045      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a34      	ldr	r2, [pc, #208]	; (8002b38 <HAL_DMA_Start_IT+0x47c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d040      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a33      	ldr	r2, [pc, #204]	; (8002b3c <HAL_DMA_Start_IT+0x480>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d03b      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a31      	ldr	r2, [pc, #196]	; (8002b40 <HAL_DMA_Start_IT+0x484>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d036      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a30      	ldr	r2, [pc, #192]	; (8002b44 <HAL_DMA_Start_IT+0x488>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d031      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <HAL_DMA_Start_IT+0x48c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d02c      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2d      	ldr	r2, [pc, #180]	; (8002b4c <HAL_DMA_Start_IT+0x490>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d027      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <HAL_DMA_Start_IT+0x494>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d022      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <HAL_DMA_Start_IT+0x498>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d01d      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a28      	ldr	r2, [pc, #160]	; (8002b58 <HAL_DMA_Start_IT+0x49c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d018      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <HAL_DMA_Start_IT+0x4a0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <HAL_DMA_Start_IT+0x4a4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00e      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a24      	ldr	r2, [pc, #144]	; (8002b64 <HAL_DMA_Start_IT+0x4a8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d009      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <HAL_DMA_Start_IT+0x4ac>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_DMA_Start_IT+0x430>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <HAL_DMA_Start_IT+0x4b0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d108      	bne.n	8002afe <HAL_DMA_Start_IT+0x442>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e012      	b.n	8002b24 <HAL_DMA_Start_IT+0x468>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e009      	b.n	8002b24 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40020010 	.word	0x40020010
 8002b34:	40020028 	.word	0x40020028
 8002b38:	40020040 	.word	0x40020040
 8002b3c:	40020058 	.word	0x40020058
 8002b40:	40020070 	.word	0x40020070
 8002b44:	40020088 	.word	0x40020088
 8002b48:	400200a0 	.word	0x400200a0
 8002b4c:	400200b8 	.word	0x400200b8
 8002b50:	40020410 	.word	0x40020410
 8002b54:	40020428 	.word	0x40020428
 8002b58:	40020440 	.word	0x40020440
 8002b5c:	40020458 	.word	0x40020458
 8002b60:	40020470 	.word	0x40020470
 8002b64:	40020488 	.word	0x40020488
 8002b68:	400204a0 	.word	0x400204a0
 8002b6c:	400204b8 	.word	0x400204b8
 8002b70:	58025408 	.word	0x58025408
 8002b74:	5802541c 	.word	0x5802541c
 8002b78:	58025430 	.word	0x58025430
 8002b7c:	58025444 	.word	0x58025444
 8002b80:	58025458 	.word	0x58025458
 8002b84:	5802546c 	.word	0x5802546c
 8002b88:	58025480 	.word	0x58025480
 8002b8c:	58025494 	.word	0x58025494

08002b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7fe ffb8 	bl	8001b0c <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e2dc      	b.n	8003162 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d008      	beq.n	8002bc6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e2cd      	b.n	8003162 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a76      	ldr	r2, [pc, #472]	; (8002da4 <HAL_DMA_Abort+0x214>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d04a      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a74      	ldr	r2, [pc, #464]	; (8002da8 <HAL_DMA_Abort+0x218>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d045      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a73      	ldr	r2, [pc, #460]	; (8002dac <HAL_DMA_Abort+0x21c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d040      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a71      	ldr	r2, [pc, #452]	; (8002db0 <HAL_DMA_Abort+0x220>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d03b      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a70      	ldr	r2, [pc, #448]	; (8002db4 <HAL_DMA_Abort+0x224>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d036      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6e      	ldr	r2, [pc, #440]	; (8002db8 <HAL_DMA_Abort+0x228>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d031      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6d      	ldr	r2, [pc, #436]	; (8002dbc <HAL_DMA_Abort+0x22c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d02c      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a6b      	ldr	r2, [pc, #428]	; (8002dc0 <HAL_DMA_Abort+0x230>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d027      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6a      	ldr	r2, [pc, #424]	; (8002dc4 <HAL_DMA_Abort+0x234>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d022      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a68      	ldr	r2, [pc, #416]	; (8002dc8 <HAL_DMA_Abort+0x238>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01d      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a67      	ldr	r2, [pc, #412]	; (8002dcc <HAL_DMA_Abort+0x23c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d018      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a65      	ldr	r2, [pc, #404]	; (8002dd0 <HAL_DMA_Abort+0x240>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a64      	ldr	r2, [pc, #400]	; (8002dd4 <HAL_DMA_Abort+0x244>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a62      	ldr	r2, [pc, #392]	; (8002dd8 <HAL_DMA_Abort+0x248>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a61      	ldr	r2, [pc, #388]	; (8002ddc <HAL_DMA_Abort+0x24c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_DMA_Abort+0xd6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a5f      	ldr	r2, [pc, #380]	; (8002de0 <HAL_DMA_Abort+0x250>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA_Abort+0xda>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_DMA_Abort+0xdc>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 021e 	bic.w	r2, r2, #30
 8002c7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e00a      	b.n	8002cae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 020e 	bic.w	r2, r2, #14
 8002ca6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <HAL_DMA_Abort+0x214>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d072      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a3a      	ldr	r2, [pc, #232]	; (8002da8 <HAL_DMA_Abort+0x218>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d06d      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a39      	ldr	r2, [pc, #228]	; (8002dac <HAL_DMA_Abort+0x21c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d068      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a37      	ldr	r2, [pc, #220]	; (8002db0 <HAL_DMA_Abort+0x220>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d063      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a36      	ldr	r2, [pc, #216]	; (8002db4 <HAL_DMA_Abort+0x224>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d05e      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <HAL_DMA_Abort+0x228>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d059      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <HAL_DMA_Abort+0x22c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d054      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <HAL_DMA_Abort+0x230>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04f      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_DMA_Abort+0x234>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d04a      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_DMA_Abort+0x238>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d045      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2d      	ldr	r2, [pc, #180]	; (8002dcc <HAL_DMA_Abort+0x23c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d040      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <HAL_DMA_Abort+0x240>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d03b      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2a      	ldr	r2, [pc, #168]	; (8002dd4 <HAL_DMA_Abort+0x244>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d036      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_DMA_Abort+0x248>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d031      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <HAL_DMA_Abort+0x24c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d02c      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <HAL_DMA_Abort+0x250>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d027      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <HAL_DMA_Abort+0x254>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_DMA_Abort+0x258>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01d      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_DMA_Abort+0x25c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d018      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_DMA_Abort+0x260>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_DMA_Abort+0x264>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00e      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <HAL_DMA_Abort+0x268>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_DMA_Abort+0x26c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <HAL_DMA_Abort+0x20e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <HAL_DMA_Abort+0x270>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d132      	bne.n	8002e04 <HAL_DMA_Abort+0x274>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e031      	b.n	8002e06 <HAL_DMA_Abort+0x276>
 8002da2:	bf00      	nop
 8002da4:	40020010 	.word	0x40020010
 8002da8:	40020028 	.word	0x40020028
 8002dac:	40020040 	.word	0x40020040
 8002db0:	40020058 	.word	0x40020058
 8002db4:	40020070 	.word	0x40020070
 8002db8:	40020088 	.word	0x40020088
 8002dbc:	400200a0 	.word	0x400200a0
 8002dc0:	400200b8 	.word	0x400200b8
 8002dc4:	40020410 	.word	0x40020410
 8002dc8:	40020428 	.word	0x40020428
 8002dcc:	40020440 	.word	0x40020440
 8002dd0:	40020458 	.word	0x40020458
 8002dd4:	40020470 	.word	0x40020470
 8002dd8:	40020488 	.word	0x40020488
 8002ddc:	400204a0 	.word	0x400204a0
 8002de0:	400204b8 	.word	0x400204b8
 8002de4:	58025408 	.word	0x58025408
 8002de8:	5802541c 	.word	0x5802541c
 8002dec:	58025430 	.word	0x58025430
 8002df0:	58025444 	.word	0x58025444
 8002df4:	58025458 	.word	0x58025458
 8002df8:	5802546c 	.word	0x5802546c
 8002dfc:	58025480 	.word	0x58025480
 8002e00:	58025494 	.word	0x58025494
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a6d      	ldr	r2, [pc, #436]	; (8002fd4 <HAL_DMA_Abort+0x444>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04a      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a6b      	ldr	r2, [pc, #428]	; (8002fd8 <HAL_DMA_Abort+0x448>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d045      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6a      	ldr	r2, [pc, #424]	; (8002fdc <HAL_DMA_Abort+0x44c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d040      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a68      	ldr	r2, [pc, #416]	; (8002fe0 <HAL_DMA_Abort+0x450>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d03b      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a67      	ldr	r2, [pc, #412]	; (8002fe4 <HAL_DMA_Abort+0x454>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d036      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a65      	ldr	r2, [pc, #404]	; (8002fe8 <HAL_DMA_Abort+0x458>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d031      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a64      	ldr	r2, [pc, #400]	; (8002fec <HAL_DMA_Abort+0x45c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d02c      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a62      	ldr	r2, [pc, #392]	; (8002ff0 <HAL_DMA_Abort+0x460>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d027      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a61      	ldr	r2, [pc, #388]	; (8002ff4 <HAL_DMA_Abort+0x464>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5f      	ldr	r2, [pc, #380]	; (8002ff8 <HAL_DMA_Abort+0x468>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01d      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5e      	ldr	r2, [pc, #376]	; (8002ffc <HAL_DMA_Abort+0x46c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d018      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a5c      	ldr	r2, [pc, #368]	; (8003000 <HAL_DMA_Abort+0x470>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a5b      	ldr	r2, [pc, #364]	; (8003004 <HAL_DMA_Abort+0x474>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a59      	ldr	r2, [pc, #356]	; (8003008 <HAL_DMA_Abort+0x478>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a58      	ldr	r2, [pc, #352]	; (800300c <HAL_DMA_Abort+0x47c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_DMA_Abort+0x32a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a56      	ldr	r2, [pc, #344]	; (8003010 <HAL_DMA_Abort+0x480>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d108      	bne.n	8002ecc <HAL_DMA_Abort+0x33c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e007      	b.n	8002edc <HAL_DMA_Abort+0x34c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002edc:	e013      	b.n	8002f06 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ede:	f7fe fe15 	bl	8001b0c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d90c      	bls.n	8002f06 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2203      	movs	r2, #3
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e12d      	b.n	8003162 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e5      	bne.n	8002ede <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <HAL_DMA_Abort+0x444>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d04a      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2d      	ldr	r2, [pc, #180]	; (8002fd8 <HAL_DMA_Abort+0x448>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d045      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2c      	ldr	r2, [pc, #176]	; (8002fdc <HAL_DMA_Abort+0x44c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d040      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a2a      	ldr	r2, [pc, #168]	; (8002fe0 <HAL_DMA_Abort+0x450>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d03b      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <HAL_DMA_Abort+0x454>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d036      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <HAL_DMA_Abort+0x458>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d031      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a26      	ldr	r2, [pc, #152]	; (8002fec <HAL_DMA_Abort+0x45c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d02c      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <HAL_DMA_Abort+0x460>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d027      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <HAL_DMA_Abort+0x464>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d022      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a21      	ldr	r2, [pc, #132]	; (8002ff8 <HAL_DMA_Abort+0x468>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01d      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <HAL_DMA_Abort+0x46c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d018      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <HAL_DMA_Abort+0x470>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_DMA_Abort+0x474>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00e      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <HAL_DMA_Abort+0x478>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1a      	ldr	r2, [pc, #104]	; (800300c <HAL_DMA_Abort+0x47c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_DMA_Abort+0x422>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HAL_DMA_Abort+0x480>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_DMA_Abort+0x426>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMA_Abort+0x428>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02b      	beq.n	8003014 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	223f      	movs	r2, #63	; 0x3f
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	e02a      	b.n	800302a <HAL_DMA_Abort+0x49a>
 8002fd4:	40020010 	.word	0x40020010
 8002fd8:	40020028 	.word	0x40020028
 8002fdc:	40020040 	.word	0x40020040
 8002fe0:	40020058 	.word	0x40020058
 8002fe4:	40020070 	.word	0x40020070
 8002fe8:	40020088 	.word	0x40020088
 8002fec:	400200a0 	.word	0x400200a0
 8002ff0:	400200b8 	.word	0x400200b8
 8002ff4:	40020410 	.word	0x40020410
 8002ff8:	40020428 	.word	0x40020428
 8002ffc:	40020440 	.word	0x40020440
 8003000:	40020458 	.word	0x40020458
 8003004:	40020470 	.word	0x40020470
 8003008:	40020488 	.word	0x40020488
 800300c:	400204a0 	.word	0x400204a0
 8003010:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2201      	movs	r2, #1
 8003024:	409a      	lsls	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a4f      	ldr	r2, [pc, #316]	; (800316c <HAL_DMA_Abort+0x5dc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d072      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a4d      	ldr	r2, [pc, #308]	; (8003170 <HAL_DMA_Abort+0x5e0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d06d      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a4c      	ldr	r2, [pc, #304]	; (8003174 <HAL_DMA_Abort+0x5e4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d068      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <HAL_DMA_Abort+0x5e8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d063      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a49      	ldr	r2, [pc, #292]	; (800317c <HAL_DMA_Abort+0x5ec>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d05e      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a47      	ldr	r2, [pc, #284]	; (8003180 <HAL_DMA_Abort+0x5f0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d059      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a46      	ldr	r2, [pc, #280]	; (8003184 <HAL_DMA_Abort+0x5f4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d054      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a44      	ldr	r2, [pc, #272]	; (8003188 <HAL_DMA_Abort+0x5f8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d04f      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a43      	ldr	r2, [pc, #268]	; (800318c <HAL_DMA_Abort+0x5fc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d04a      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a41      	ldr	r2, [pc, #260]	; (8003190 <HAL_DMA_Abort+0x600>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d045      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a40      	ldr	r2, [pc, #256]	; (8003194 <HAL_DMA_Abort+0x604>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d040      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3e      	ldr	r2, [pc, #248]	; (8003198 <HAL_DMA_Abort+0x608>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d03b      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3d      	ldr	r2, [pc, #244]	; (800319c <HAL_DMA_Abort+0x60c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d036      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <HAL_DMA_Abort+0x610>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <HAL_DMA_Abort+0x614>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d02c      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_DMA_Abort+0x618>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d027      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a37      	ldr	r2, [pc, #220]	; (80031ac <HAL_DMA_Abort+0x61c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <HAL_DMA_Abort+0x620>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01d      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a34      	ldr	r2, [pc, #208]	; (80031b4 <HAL_DMA_Abort+0x624>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d018      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a32      	ldr	r2, [pc, #200]	; (80031b8 <HAL_DMA_Abort+0x628>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a31      	ldr	r2, [pc, #196]	; (80031bc <HAL_DMA_Abort+0x62c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2f      	ldr	r2, [pc, #188]	; (80031c0 <HAL_DMA_Abort+0x630>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2e      	ldr	r2, [pc, #184]	; (80031c4 <HAL_DMA_Abort+0x634>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_DMA_Abort+0x58a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <HAL_DMA_Abort+0x638>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_DMA_Abort+0x58e>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_DMA_Abort+0x590>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800312c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800314e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40020010 	.word	0x40020010
 8003170:	40020028 	.word	0x40020028
 8003174:	40020040 	.word	0x40020040
 8003178:	40020058 	.word	0x40020058
 800317c:	40020070 	.word	0x40020070
 8003180:	40020088 	.word	0x40020088
 8003184:	400200a0 	.word	0x400200a0
 8003188:	400200b8 	.word	0x400200b8
 800318c:	40020410 	.word	0x40020410
 8003190:	40020428 	.word	0x40020428
 8003194:	40020440 	.word	0x40020440
 8003198:	40020458 	.word	0x40020458
 800319c:	40020470 	.word	0x40020470
 80031a0:	40020488 	.word	0x40020488
 80031a4:	400204a0 	.word	0x400204a0
 80031a8:	400204b8 	.word	0x400204b8
 80031ac:	58025408 	.word	0x58025408
 80031b0:	5802541c 	.word	0x5802541c
 80031b4:	58025430 	.word	0x58025430
 80031b8:	58025444 	.word	0x58025444
 80031bc:	58025458 	.word	0x58025458
 80031c0:	5802546c 	.word	0x5802546c
 80031c4:	58025480 	.word	0x58025480
 80031c8:	58025494 	.word	0x58025494

080031cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e205      	b.n	80035ea <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d004      	beq.n	80031f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e1fa      	b.n	80035ea <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a8c      	ldr	r2, [pc, #560]	; (800342c <HAL_DMA_Abort_IT+0x260>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d04a      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a8b      	ldr	r2, [pc, #556]	; (8003430 <HAL_DMA_Abort_IT+0x264>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d045      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a89      	ldr	r2, [pc, #548]	; (8003434 <HAL_DMA_Abort_IT+0x268>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d040      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a88      	ldr	r2, [pc, #544]	; (8003438 <HAL_DMA_Abort_IT+0x26c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d03b      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a86      	ldr	r2, [pc, #536]	; (800343c <HAL_DMA_Abort_IT+0x270>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d036      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a85      	ldr	r2, [pc, #532]	; (8003440 <HAL_DMA_Abort_IT+0x274>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d031      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a83      	ldr	r2, [pc, #524]	; (8003444 <HAL_DMA_Abort_IT+0x278>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02c      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a82      	ldr	r2, [pc, #520]	; (8003448 <HAL_DMA_Abort_IT+0x27c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d027      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a80      	ldr	r2, [pc, #512]	; (800344c <HAL_DMA_Abort_IT+0x280>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d022      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a7f      	ldr	r2, [pc, #508]	; (8003450 <HAL_DMA_Abort_IT+0x284>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d01d      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a7d      	ldr	r2, [pc, #500]	; (8003454 <HAL_DMA_Abort_IT+0x288>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d018      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7c      	ldr	r2, [pc, #496]	; (8003458 <HAL_DMA_Abort_IT+0x28c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a7a      	ldr	r2, [pc, #488]	; (800345c <HAL_DMA_Abort_IT+0x290>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00e      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a79      	ldr	r2, [pc, #484]	; (8003460 <HAL_DMA_Abort_IT+0x294>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d009      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a77      	ldr	r2, [pc, #476]	; (8003464 <HAL_DMA_Abort_IT+0x298>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a76      	ldr	r2, [pc, #472]	; (8003468 <HAL_DMA_Abort_IT+0x29c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_DMA_Abort_IT+0xcc>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_DMA_Abort_IT+0xce>
 8003298:	2300      	movs	r3, #0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d065      	beq.n	800336a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2204      	movs	r2, #4
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a60      	ldr	r2, [pc, #384]	; (800342c <HAL_DMA_Abort_IT+0x260>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04a      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a5e      	ldr	r2, [pc, #376]	; (8003430 <HAL_DMA_Abort_IT+0x264>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d045      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a5d      	ldr	r2, [pc, #372]	; (8003434 <HAL_DMA_Abort_IT+0x268>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d040      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a5b      	ldr	r2, [pc, #364]	; (8003438 <HAL_DMA_Abort_IT+0x26c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d03b      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5a      	ldr	r2, [pc, #360]	; (800343c <HAL_DMA_Abort_IT+0x270>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d036      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a58      	ldr	r2, [pc, #352]	; (8003440 <HAL_DMA_Abort_IT+0x274>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d031      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a57      	ldr	r2, [pc, #348]	; (8003444 <HAL_DMA_Abort_IT+0x278>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d02c      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a55      	ldr	r2, [pc, #340]	; (8003448 <HAL_DMA_Abort_IT+0x27c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d027      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a54      	ldr	r2, [pc, #336]	; (800344c <HAL_DMA_Abort_IT+0x280>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a52      	ldr	r2, [pc, #328]	; (8003450 <HAL_DMA_Abort_IT+0x284>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01d      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a51      	ldr	r2, [pc, #324]	; (8003454 <HAL_DMA_Abort_IT+0x288>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a4f      	ldr	r2, [pc, #316]	; (8003458 <HAL_DMA_Abort_IT+0x28c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a4e      	ldr	r2, [pc, #312]	; (800345c <HAL_DMA_Abort_IT+0x290>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a4c      	ldr	r2, [pc, #304]	; (8003460 <HAL_DMA_Abort_IT+0x294>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a4b      	ldr	r2, [pc, #300]	; (8003464 <HAL_DMA_Abort_IT+0x298>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_Abort_IT+0x17a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a49      	ldr	r2, [pc, #292]	; (8003468 <HAL_DMA_Abort_IT+0x29c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <HAL_DMA_Abort_IT+0x18c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e147      	b.n	80035e8 <HAL_DMA_Abort_IT+0x41c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e13e      	b.n	80035e8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 020e 	bic.w	r2, r2, #14
 8003378:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2b      	ldr	r2, [pc, #172]	; (800342c <HAL_DMA_Abort_IT+0x260>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d04a      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a29      	ldr	r2, [pc, #164]	; (8003430 <HAL_DMA_Abort_IT+0x264>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d045      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a28      	ldr	r2, [pc, #160]	; (8003434 <HAL_DMA_Abort_IT+0x268>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d040      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <HAL_DMA_Abort_IT+0x26c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d03b      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a25      	ldr	r2, [pc, #148]	; (800343c <HAL_DMA_Abort_IT+0x270>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d036      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a23      	ldr	r2, [pc, #140]	; (8003440 <HAL_DMA_Abort_IT+0x274>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d031      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a22      	ldr	r2, [pc, #136]	; (8003444 <HAL_DMA_Abort_IT+0x278>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d02c      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a20      	ldr	r2, [pc, #128]	; (8003448 <HAL_DMA_Abort_IT+0x27c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d027      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_DMA_Abort_IT+0x280>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d022      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <HAL_DMA_Abort_IT+0x284>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01d      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_DMA_Abort_IT+0x288>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d018      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1a      	ldr	r2, [pc, #104]	; (8003458 <HAL_DMA_Abort_IT+0x28c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_DMA_Abort_IT+0x290>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00e      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a17      	ldr	r2, [pc, #92]	; (8003460 <HAL_DMA_Abort_IT+0x294>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_DMA_Abort_IT+0x298>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_DMA_Abort_IT+0x24e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_DMA_Abort_IT+0x29c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d128      	bne.n	800346c <HAL_DMA_Abort_IT+0x2a0>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e027      	b.n	800347c <HAL_DMA_Abort_IT+0x2b0>
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	40020040 	.word	0x40020040
 8003438:	40020058 	.word	0x40020058
 800343c:	40020070 	.word	0x40020070
 8003440:	40020088 	.word	0x40020088
 8003444:	400200a0 	.word	0x400200a0
 8003448:	400200b8 	.word	0x400200b8
 800344c:	40020410 	.word	0x40020410
 8003450:	40020428 	.word	0x40020428
 8003454:	40020440 	.word	0x40020440
 8003458:	40020458 	.word	0x40020458
 800345c:	40020470 	.word	0x40020470
 8003460:	40020488 	.word	0x40020488
 8003464:	400204a0 	.word	0x400204a0
 8003468:	400204b8 	.word	0x400204b8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_DMA_Abort_IT+0x428>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d072      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a5b      	ldr	r2, [pc, #364]	; (80035f8 <HAL_DMA_Abort_IT+0x42c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d06d      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a59      	ldr	r2, [pc, #356]	; (80035fc <HAL_DMA_Abort_IT+0x430>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d068      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a58      	ldr	r2, [pc, #352]	; (8003600 <HAL_DMA_Abort_IT+0x434>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d063      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_DMA_Abort_IT+0x438>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d05e      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a55      	ldr	r2, [pc, #340]	; (8003608 <HAL_DMA_Abort_IT+0x43c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d059      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a53      	ldr	r2, [pc, #332]	; (800360c <HAL_DMA_Abort_IT+0x440>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d054      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a52      	ldr	r2, [pc, #328]	; (8003610 <HAL_DMA_Abort_IT+0x444>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d04f      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a50      	ldr	r2, [pc, #320]	; (8003614 <HAL_DMA_Abort_IT+0x448>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d04a      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a4f      	ldr	r2, [pc, #316]	; (8003618 <HAL_DMA_Abort_IT+0x44c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d045      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a4d      	ldr	r2, [pc, #308]	; (800361c <HAL_DMA_Abort_IT+0x450>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d040      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a4c      	ldr	r2, [pc, #304]	; (8003620 <HAL_DMA_Abort_IT+0x454>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d03b      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a4a      	ldr	r2, [pc, #296]	; (8003624 <HAL_DMA_Abort_IT+0x458>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d036      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a49      	ldr	r2, [pc, #292]	; (8003628 <HAL_DMA_Abort_IT+0x45c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d031      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a47      	ldr	r2, [pc, #284]	; (800362c <HAL_DMA_Abort_IT+0x460>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02c      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a46      	ldr	r2, [pc, #280]	; (8003630 <HAL_DMA_Abort_IT+0x464>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d027      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a44      	ldr	r2, [pc, #272]	; (8003634 <HAL_DMA_Abort_IT+0x468>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d022      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a43      	ldr	r2, [pc, #268]	; (8003638 <HAL_DMA_Abort_IT+0x46c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d01d      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a41      	ldr	r2, [pc, #260]	; (800363c <HAL_DMA_Abort_IT+0x470>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a40      	ldr	r2, [pc, #256]	; (8003640 <HAL_DMA_Abort_IT+0x474>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a3e      	ldr	r2, [pc, #248]	; (8003644 <HAL_DMA_Abort_IT+0x478>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a3d      	ldr	r2, [pc, #244]	; (8003648 <HAL_DMA_Abort_IT+0x47c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a3b      	ldr	r2, [pc, #236]	; (800364c <HAL_DMA_Abort_IT+0x480>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_DMA_Abort_IT+0x3a0>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a3a      	ldr	r2, [pc, #232]	; (8003650 <HAL_DMA_Abort_IT+0x484>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d101      	bne.n	8003570 <HAL_DMA_Abort_IT+0x3a4>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_DMA_Abort_IT+0x3a6>
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d028      	beq.n	80035c8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003584:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00c      	beq.n	80035c8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40020010 	.word	0x40020010
 80035f8:	40020028 	.word	0x40020028
 80035fc:	40020040 	.word	0x40020040
 8003600:	40020058 	.word	0x40020058
 8003604:	40020070 	.word	0x40020070
 8003608:	40020088 	.word	0x40020088
 800360c:	400200a0 	.word	0x400200a0
 8003610:	400200b8 	.word	0x400200b8
 8003614:	40020410 	.word	0x40020410
 8003618:	40020428 	.word	0x40020428
 800361c:	40020440 	.word	0x40020440
 8003620:	40020458 	.word	0x40020458
 8003624:	40020470 	.word	0x40020470
 8003628:	40020488 	.word	0x40020488
 800362c:	400204a0 	.word	0x400204a0
 8003630:	400204b8 	.word	0x400204b8
 8003634:	58025408 	.word	0x58025408
 8003638:	5802541c 	.word	0x5802541c
 800363c:	58025430 	.word	0x58025430
 8003640:	58025444 	.word	0x58025444
 8003644:	58025458 	.word	0x58025458
 8003648:	5802546c 	.word	0x5802546c
 800364c:	58025480 	.word	0x58025480
 8003650:	58025494 	.word	0x58025494

08003654 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003660:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_DMA_IRQHandler+0x1ac>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a67      	ldr	r2, [pc, #412]	; (8003804 <HAL_DMA_IRQHandler+0x1b0>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0a9b      	lsrs	r3, r3, #10
 800366c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a5f      	ldr	r2, [pc, #380]	; (8003808 <HAL_DMA_IRQHandler+0x1b4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d04a      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a5d      	ldr	r2, [pc, #372]	; (800380c <HAL_DMA_IRQHandler+0x1b8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d045      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a5c      	ldr	r2, [pc, #368]	; (8003810 <HAL_DMA_IRQHandler+0x1bc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d040      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a5a      	ldr	r2, [pc, #360]	; (8003814 <HAL_DMA_IRQHandler+0x1c0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d03b      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a59      	ldr	r2, [pc, #356]	; (8003818 <HAL_DMA_IRQHandler+0x1c4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d036      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a57      	ldr	r2, [pc, #348]	; (800381c <HAL_DMA_IRQHandler+0x1c8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d031      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a56      	ldr	r2, [pc, #344]	; (8003820 <HAL_DMA_IRQHandler+0x1cc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d02c      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a54      	ldr	r2, [pc, #336]	; (8003824 <HAL_DMA_IRQHandler+0x1d0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d027      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a53      	ldr	r2, [pc, #332]	; (8003828 <HAL_DMA_IRQHandler+0x1d4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a51      	ldr	r2, [pc, #324]	; (800382c <HAL_DMA_IRQHandler+0x1d8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01d      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a50      	ldr	r2, [pc, #320]	; (8003830 <HAL_DMA_IRQHandler+0x1dc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d018      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a4e      	ldr	r2, [pc, #312]	; (8003834 <HAL_DMA_IRQHandler+0x1e0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a4d      	ldr	r2, [pc, #308]	; (8003838 <HAL_DMA_IRQHandler+0x1e4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a4b      	ldr	r2, [pc, #300]	; (800383c <HAL_DMA_IRQHandler+0x1e8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4a      	ldr	r2, [pc, #296]	; (8003840 <HAL_DMA_IRQHandler+0x1ec>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_DMA_IRQHandler+0xd2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a48      	ldr	r2, [pc, #288]	; (8003844 <HAL_DMA_IRQHandler+0x1f0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_DMA_IRQHandler+0xd6>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_DMA_IRQHandler+0xd8>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 842b 	beq.w	8003f88 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2208      	movs	r2, #8
 800373c:	409a      	lsls	r2, r3
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80a2 	beq.w	800388c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2e      	ldr	r2, [pc, #184]	; (8003808 <HAL_DMA_IRQHandler+0x1b4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04a      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2d      	ldr	r2, [pc, #180]	; (800380c <HAL_DMA_IRQHandler+0x1b8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d045      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2b      	ldr	r2, [pc, #172]	; (8003810 <HAL_DMA_IRQHandler+0x1bc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d040      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <HAL_DMA_IRQHandler+0x1c0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d03b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a28      	ldr	r2, [pc, #160]	; (8003818 <HAL_DMA_IRQHandler+0x1c4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d036      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a27      	ldr	r2, [pc, #156]	; (800381c <HAL_DMA_IRQHandler+0x1c8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d031      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a25      	ldr	r2, [pc, #148]	; (8003820 <HAL_DMA_IRQHandler+0x1cc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02c      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a24      	ldr	r2, [pc, #144]	; (8003824 <HAL_DMA_IRQHandler+0x1d0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d027      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a22      	ldr	r2, [pc, #136]	; (8003828 <HAL_DMA_IRQHandler+0x1d4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a21      	ldr	r2, [pc, #132]	; (800382c <HAL_DMA_IRQHandler+0x1d8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d01d      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_DMA_IRQHandler+0x1dc>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_DMA_IRQHandler+0x1e0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_DMA_IRQHandler+0x1e4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1b      	ldr	r2, [pc, #108]	; (800383c <HAL_DMA_IRQHandler+0x1e8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_DMA_IRQHandler+0x1ec>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x194>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a18      	ldr	r2, [pc, #96]	; (8003844 <HAL_DMA_IRQHandler+0x1f0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d12f      	bne.n	8003848 <HAL_DMA_IRQHandler+0x1f4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e02e      	b.n	800385c <HAL_DMA_IRQHandler+0x208>
 80037fe:	bf00      	nop
 8003800:	24000018 	.word	0x24000018
 8003804:	1b4e81b5 	.word	0x1b4e81b5
 8003808:	40020010 	.word	0x40020010
 800380c:	40020028 	.word	0x40020028
 8003810:	40020040 	.word	0x40020040
 8003814:	40020058 	.word	0x40020058
 8003818:	40020070 	.word	0x40020070
 800381c:	40020088 	.word	0x40020088
 8003820:	400200a0 	.word	0x400200a0
 8003824:	400200b8 	.word	0x400200b8
 8003828:	40020410 	.word	0x40020410
 800382c:	40020428 	.word	0x40020428
 8003830:	40020440 	.word	0x40020440
 8003834:	40020458 	.word	0x40020458
 8003838:	40020470 	.word	0x40020470
 800383c:	40020488 	.word	0x40020488
 8003840:	400204a0 	.word	0x400204a0
 8003844:	400204b8 	.word	0x400204b8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf14      	ite	ne
 8003856:	2301      	movne	r3, #1
 8003858:	2300      	moveq	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0204 	bic.w	r2, r2, #4
 800386e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	2208      	movs	r2, #8
 800387a:	409a      	lsls	r2, r3
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	f043 0201 	orr.w	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	fa22 f303 	lsr.w	r3, r2, r3
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d06e      	beq.n	8003980 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a69      	ldr	r2, [pc, #420]	; (8003a4c <HAL_DMA_IRQHandler+0x3f8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d04a      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a67      	ldr	r2, [pc, #412]	; (8003a50 <HAL_DMA_IRQHandler+0x3fc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d045      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a66      	ldr	r2, [pc, #408]	; (8003a54 <HAL_DMA_IRQHandler+0x400>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d040      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a64      	ldr	r2, [pc, #400]	; (8003a58 <HAL_DMA_IRQHandler+0x404>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d03b      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a63      	ldr	r2, [pc, #396]	; (8003a5c <HAL_DMA_IRQHandler+0x408>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d036      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a61      	ldr	r2, [pc, #388]	; (8003a60 <HAL_DMA_IRQHandler+0x40c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d031      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a60      	ldr	r2, [pc, #384]	; (8003a64 <HAL_DMA_IRQHandler+0x410>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02c      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5e      	ldr	r2, [pc, #376]	; (8003a68 <HAL_DMA_IRQHandler+0x414>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d027      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5d      	ldr	r2, [pc, #372]	; (8003a6c <HAL_DMA_IRQHandler+0x418>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5b      	ldr	r2, [pc, #364]	; (8003a70 <HAL_DMA_IRQHandler+0x41c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01d      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a5a      	ldr	r2, [pc, #360]	; (8003a74 <HAL_DMA_IRQHandler+0x420>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d018      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_DMA_IRQHandler+0x424>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_DMA_IRQHandler+0x428>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a55      	ldr	r2, [pc, #340]	; (8003a80 <HAL_DMA_IRQHandler+0x42c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a54      	ldr	r2, [pc, #336]	; (8003a84 <HAL_DMA_IRQHandler+0x430>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2ee>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a52      	ldr	r2, [pc, #328]	; (8003a88 <HAL_DMA_IRQHandler+0x434>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10a      	bne.n	8003958 <HAL_DMA_IRQHandler+0x304>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e003      	b.n	8003960 <HAL_DMA_IRQHandler+0x30c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2201      	movs	r2, #1
 800396e:	409a      	lsls	r2, r3
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	f043 0202 	orr.w	r2, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2204      	movs	r2, #4
 800398a:	409a      	lsls	r2, r3
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 808f 	beq.w	8003ab4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <HAL_DMA_IRQHandler+0x3f8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d04a      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <HAL_DMA_IRQHandler+0x3fc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d045      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a29      	ldr	r2, [pc, #164]	; (8003a54 <HAL_DMA_IRQHandler+0x400>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d040      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <HAL_DMA_IRQHandler+0x404>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d03b      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a26      	ldr	r2, [pc, #152]	; (8003a5c <HAL_DMA_IRQHandler+0x408>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d036      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <HAL_DMA_IRQHandler+0x40c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d031      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <HAL_DMA_IRQHandler+0x410>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d02c      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <HAL_DMA_IRQHandler+0x414>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d027      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a20      	ldr	r2, [pc, #128]	; (8003a6c <HAL_DMA_IRQHandler+0x418>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d022      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <HAL_DMA_IRQHandler+0x41c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01d      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <HAL_DMA_IRQHandler+0x420>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d018      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_DMA_IRQHandler+0x424>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1a      	ldr	r2, [pc, #104]	; (8003a7c <HAL_DMA_IRQHandler+0x428>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00e      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_DMA_IRQHandler+0x42c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <HAL_DMA_IRQHandler+0x430>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x3e2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_DMA_IRQHandler+0x434>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d12a      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x438>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e023      	b.n	8003a94 <HAL_DMA_IRQHandler+0x440>
 8003a4c:	40020010 	.word	0x40020010
 8003a50:	40020028 	.word	0x40020028
 8003a54:	40020040 	.word	0x40020040
 8003a58:	40020058 	.word	0x40020058
 8003a5c:	40020070 	.word	0x40020070
 8003a60:	40020088 	.word	0x40020088
 8003a64:	400200a0 	.word	0x400200a0
 8003a68:	400200b8 	.word	0x400200b8
 8003a6c:	40020410 	.word	0x40020410
 8003a70:	40020428 	.word	0x40020428
 8003a74:	40020440 	.word	0x40020440
 8003a78:	40020458 	.word	0x40020458
 8003a7c:	40020470 	.word	0x40020470
 8003a80:	40020488 	.word	0x40020488
 8003a84:	400204a0 	.word	0x400204a0
 8003a88:	400204b8 	.word	0x400204b8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2210      	movs	r2, #16
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a6 	beq.w	8003c16 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a85      	ldr	r2, [pc, #532]	; (8003ce4 <HAL_DMA_IRQHandler+0x690>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d04a      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a83      	ldr	r2, [pc, #524]	; (8003ce8 <HAL_DMA_IRQHandler+0x694>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d045      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a82      	ldr	r2, [pc, #520]	; (8003cec <HAL_DMA_IRQHandler+0x698>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d040      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a80      	ldr	r2, [pc, #512]	; (8003cf0 <HAL_DMA_IRQHandler+0x69c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d03b      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a7f      	ldr	r2, [pc, #508]	; (8003cf4 <HAL_DMA_IRQHandler+0x6a0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d036      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a7d      	ldr	r2, [pc, #500]	; (8003cf8 <HAL_DMA_IRQHandler+0x6a4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d031      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7c      	ldr	r2, [pc, #496]	; (8003cfc <HAL_DMA_IRQHandler+0x6a8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d02c      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7a      	ldr	r2, [pc, #488]	; (8003d00 <HAL_DMA_IRQHandler+0x6ac>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d027      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a79      	ldr	r2, [pc, #484]	; (8003d04 <HAL_DMA_IRQHandler+0x6b0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d022      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a77      	ldr	r2, [pc, #476]	; (8003d08 <HAL_DMA_IRQHandler+0x6b4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01d      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a76      	ldr	r2, [pc, #472]	; (8003d0c <HAL_DMA_IRQHandler+0x6b8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a74      	ldr	r2, [pc, #464]	; (8003d10 <HAL_DMA_IRQHandler+0x6bc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a73      	ldr	r2, [pc, #460]	; (8003d14 <HAL_DMA_IRQHandler+0x6c0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a71      	ldr	r2, [pc, #452]	; (8003d18 <HAL_DMA_IRQHandler+0x6c4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a70      	ldr	r2, [pc, #448]	; (8003d1c <HAL_DMA_IRQHandler+0x6c8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x516>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a6e      	ldr	r2, [pc, #440]	; (8003d20 <HAL_DMA_IRQHandler+0x6cc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10a      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x52c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf14      	ite	ne
 8003b78:	2301      	movne	r3, #1
 8003b7a:	2300      	moveq	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e009      	b.n	8003b94 <HAL_DMA_IRQHandler+0x540>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf14      	ite	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	2300      	moveq	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d03e      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d018      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d108      	bne.n	8003bd6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d024      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
 8003bd4:	e01f      	b.n	8003c16 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01b      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
 8003be6:	e016      	b.n	8003c16 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d107      	bne.n	8003c06 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0208 	bic.w	r2, r2, #8
 8003c04:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2220      	movs	r2, #32
 8003c20:	409a      	lsls	r2, r3
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 8110 	beq.w	8003e4c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <HAL_DMA_IRQHandler+0x690>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d04a      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <HAL_DMA_IRQHandler+0x694>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d045      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a29      	ldr	r2, [pc, #164]	; (8003cec <HAL_DMA_IRQHandler+0x698>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d040      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <HAL_DMA_IRQHandler+0x69c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d03b      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <HAL_DMA_IRQHandler+0x6a0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d036      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <HAL_DMA_IRQHandler+0x6a4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d031      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a23      	ldr	r2, [pc, #140]	; (8003cfc <HAL_DMA_IRQHandler+0x6a8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d02c      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <HAL_DMA_IRQHandler+0x6ac>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d027      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <HAL_DMA_IRQHandler+0x6b0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d022      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_DMA_IRQHandler+0x6b4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d01d      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <HAL_DMA_IRQHandler+0x6b8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d018      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <HAL_DMA_IRQHandler+0x6bc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1a      	ldr	r2, [pc, #104]	; (8003d14 <HAL_DMA_IRQHandler+0x6c0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_DMA_IRQHandler+0x6c4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d009      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <HAL_DMA_IRQHandler+0x6c8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x678>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <HAL_DMA_IRQHandler+0x6cc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d12b      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x6d0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	e02a      	b.n	8003d38 <HAL_DMA_IRQHandler+0x6e4>
 8003ce2:	bf00      	nop
 8003ce4:	40020010 	.word	0x40020010
 8003ce8:	40020028 	.word	0x40020028
 8003cec:	40020040 	.word	0x40020040
 8003cf0:	40020058 	.word	0x40020058
 8003cf4:	40020070 	.word	0x40020070
 8003cf8:	40020088 	.word	0x40020088
 8003cfc:	400200a0 	.word	0x400200a0
 8003d00:	400200b8 	.word	0x400200b8
 8003d04:	40020410 	.word	0x40020410
 8003d08:	40020428 	.word	0x40020428
 8003d0c:	40020440 	.word	0x40020440
 8003d10:	40020458 	.word	0x40020458
 8003d14:	40020470 	.word	0x40020470
 8003d18:	40020488 	.word	0x40020488
 8003d1c:	400204a0 	.word	0x400204a0
 8003d20:	400204b8 	.word	0x400204b8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8087 	beq.w	8003e4c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	2220      	movs	r2, #32
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d139      	bne.n	8003dce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0216 	bic.w	r2, r2, #22
 8003d68:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d78:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_DMA_IRQHandler+0x736>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0208 	bic.w	r2, r2, #8
 8003d98:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	223f      	movs	r2, #63	; 0x3f
 8003da4:	409a      	lsls	r2, r3
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 834a 	beq.w	8004458 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
          }
          return;
 8003dcc:	e344      	b.n	8004458 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d018      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d108      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d02c      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
 8003dfa:	e027      	b.n	8003e4c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d023      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4798      	blx	r3
 8003e0c:	e01e      	b.n	8003e4c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10f      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0210 	bic.w	r2, r2, #16
 8003e2a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8306 	beq.w	8004462 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8088 	beq.w	8003f74 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2204      	movs	r2, #4
 8003e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7a      	ldr	r2, [pc, #488]	; (800405c <HAL_DMA_IRQHandler+0xa08>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d04a      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a79      	ldr	r2, [pc, #484]	; (8004060 <HAL_DMA_IRQHandler+0xa0c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d045      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a77      	ldr	r2, [pc, #476]	; (8004064 <HAL_DMA_IRQHandler+0xa10>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d040      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a76      	ldr	r2, [pc, #472]	; (8004068 <HAL_DMA_IRQHandler+0xa14>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d03b      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a74      	ldr	r2, [pc, #464]	; (800406c <HAL_DMA_IRQHandler+0xa18>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d036      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a73      	ldr	r2, [pc, #460]	; (8004070 <HAL_DMA_IRQHandler+0xa1c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d031      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a71      	ldr	r2, [pc, #452]	; (8004074 <HAL_DMA_IRQHandler+0xa20>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d02c      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a70      	ldr	r2, [pc, #448]	; (8004078 <HAL_DMA_IRQHandler+0xa24>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d027      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a6e      	ldr	r2, [pc, #440]	; (800407c <HAL_DMA_IRQHandler+0xa28>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d022      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a6d      	ldr	r2, [pc, #436]	; (8004080 <HAL_DMA_IRQHandler+0xa2c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d01d      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6b      	ldr	r2, [pc, #428]	; (8004084 <HAL_DMA_IRQHandler+0xa30>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d018      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6a      	ldr	r2, [pc, #424]	; (8004088 <HAL_DMA_IRQHandler+0xa34>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a68      	ldr	r2, [pc, #416]	; (800408c <HAL_DMA_IRQHandler+0xa38>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00e      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a67      	ldr	r2, [pc, #412]	; (8004090 <HAL_DMA_IRQHandler+0xa3c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a65      	ldr	r2, [pc, #404]	; (8004094 <HAL_DMA_IRQHandler+0xa40>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x8b8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a64      	ldr	r2, [pc, #400]	; (8004098 <HAL_DMA_IRQHandler+0xa44>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d108      	bne.n	8003f1e <HAL_DMA_IRQHandler+0x8ca>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e007      	b.n	8003f2e <HAL_DMA_IRQHandler+0x8da>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d307      	bcc.n	8003f4a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1f2      	bne.n	8003f2e <HAL_DMA_IRQHandler+0x8da>
 8003f48:	e000      	b.n	8003f4c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f4a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2203      	movs	r2, #3
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003f6a:	e003      	b.n	8003f74 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8272 	beq.w	8004462 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
 8003f86:	e26c      	b.n	8004462 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a43      	ldr	r2, [pc, #268]	; (800409c <HAL_DMA_IRQHandler+0xa48>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d022      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x984>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a42      	ldr	r2, [pc, #264]	; (80040a0 <HAL_DMA_IRQHandler+0xa4c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d01d      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x984>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a40      	ldr	r2, [pc, #256]	; (80040a4 <HAL_DMA_IRQHandler+0xa50>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d018      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x984>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3f      	ldr	r2, [pc, #252]	; (80040a8 <HAL_DMA_IRQHandler+0xa54>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x984>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a3d      	ldr	r2, [pc, #244]	; (80040ac <HAL_DMA_IRQHandler+0xa58>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00e      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x984>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a3c      	ldr	r2, [pc, #240]	; (80040b0 <HAL_DMA_IRQHandler+0xa5c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x984>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a3a      	ldr	r2, [pc, #232]	; (80040b4 <HAL_DMA_IRQHandler+0xa60>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x984>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a39      	ldr	r2, [pc, #228]	; (80040b8 <HAL_DMA_IRQHandler+0xa64>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d101      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x988>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_DMA_IRQHandler+0x98a>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 823f 	beq.w	8004462 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80cd 	beq.w	800419c <HAL_DMA_IRQHandler+0xb48>
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80c7 	beq.w	800419c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	2204      	movs	r2, #4
 8004018:	409a      	lsls	r2, r3
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d049      	beq.n	80040bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8210 	beq.w	800445c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004044:	e20a      	b.n	800445c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8206 	beq.w	800445c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004058:	e200      	b.n	800445c <HAL_DMA_IRQHandler+0xe08>
 800405a:	bf00      	nop
 800405c:	40020010 	.word	0x40020010
 8004060:	40020028 	.word	0x40020028
 8004064:	40020040 	.word	0x40020040
 8004068:	40020058 	.word	0x40020058
 800406c:	40020070 	.word	0x40020070
 8004070:	40020088 	.word	0x40020088
 8004074:	400200a0 	.word	0x400200a0
 8004078:	400200b8 	.word	0x400200b8
 800407c:	40020410 	.word	0x40020410
 8004080:	40020428 	.word	0x40020428
 8004084:	40020440 	.word	0x40020440
 8004088:	40020458 	.word	0x40020458
 800408c:	40020470 	.word	0x40020470
 8004090:	40020488 	.word	0x40020488
 8004094:	400204a0 	.word	0x400204a0
 8004098:	400204b8 	.word	0x400204b8
 800409c:	58025408 	.word	0x58025408
 80040a0:	5802541c 	.word	0x5802541c
 80040a4:	58025430 	.word	0x58025430
 80040a8:	58025444 	.word	0x58025444
 80040ac:	58025458 	.word	0x58025458
 80040b0:	5802546c 	.word	0x5802546c
 80040b4:	58025480 	.word	0x58025480
 80040b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d160      	bne.n	8004188 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a8c      	ldr	r2, [pc, #560]	; (80042fc <HAL_DMA_IRQHandler+0xca8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d04a      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a8a      	ldr	r2, [pc, #552]	; (8004300 <HAL_DMA_IRQHandler+0xcac>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d045      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a89      	ldr	r2, [pc, #548]	; (8004304 <HAL_DMA_IRQHandler+0xcb0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d040      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a87      	ldr	r2, [pc, #540]	; (8004308 <HAL_DMA_IRQHandler+0xcb4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d03b      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a86      	ldr	r2, [pc, #536]	; (800430c <HAL_DMA_IRQHandler+0xcb8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d036      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a84      	ldr	r2, [pc, #528]	; (8004310 <HAL_DMA_IRQHandler+0xcbc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d031      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a83      	ldr	r2, [pc, #524]	; (8004314 <HAL_DMA_IRQHandler+0xcc0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d02c      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a81      	ldr	r2, [pc, #516]	; (8004318 <HAL_DMA_IRQHandler+0xcc4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d027      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a80      	ldr	r2, [pc, #512]	; (800431c <HAL_DMA_IRQHandler+0xcc8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a7e      	ldr	r2, [pc, #504]	; (8004320 <HAL_DMA_IRQHandler+0xccc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01d      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7d      	ldr	r2, [pc, #500]	; (8004324 <HAL_DMA_IRQHandler+0xcd0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a7b      	ldr	r2, [pc, #492]	; (8004328 <HAL_DMA_IRQHandler+0xcd4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a7a      	ldr	r2, [pc, #488]	; (800432c <HAL_DMA_IRQHandler+0xcd8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a78      	ldr	r2, [pc, #480]	; (8004330 <HAL_DMA_IRQHandler+0xcdc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a77      	ldr	r2, [pc, #476]	; (8004334 <HAL_DMA_IRQHandler+0xce0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_DMA_IRQHandler+0xb12>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a75      	ldr	r2, [pc, #468]	; (8004338 <HAL_DMA_IRQHandler+0xce4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d108      	bne.n	8004178 <HAL_DMA_IRQHandler+0xb24>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0208 	bic.w	r2, r2, #8
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	e007      	b.n	8004188 <HAL_DMA_IRQHandler+0xb34>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0204 	bic.w	r2, r2, #4
 8004186:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8165 	beq.w	800445c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800419a:	e15f      	b.n	800445c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2202      	movs	r2, #2
 80041a6:	409a      	lsls	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80c5 	beq.w	800433c <HAL_DMA_IRQHandler+0xce8>
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80bf 	beq.w	800433c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	2202      	movs	r2, #2
 80041c8:	409a      	lsls	r2, r3
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d018      	beq.n	800420a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 813a 	beq.w	8004460 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041f4:	e134      	b.n	8004460 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8130 	beq.w	8004460 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004208:	e12a      	b.n	8004460 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d168      	bne.n	80042e6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a38      	ldr	r2, [pc, #224]	; (80042fc <HAL_DMA_IRQHandler+0xca8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d04a      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a37      	ldr	r2, [pc, #220]	; (8004300 <HAL_DMA_IRQHandler+0xcac>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d045      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a35      	ldr	r2, [pc, #212]	; (8004304 <HAL_DMA_IRQHandler+0xcb0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d040      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a34      	ldr	r2, [pc, #208]	; (8004308 <HAL_DMA_IRQHandler+0xcb4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d03b      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a32      	ldr	r2, [pc, #200]	; (800430c <HAL_DMA_IRQHandler+0xcb8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d036      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a31      	ldr	r2, [pc, #196]	; (8004310 <HAL_DMA_IRQHandler+0xcbc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d031      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <HAL_DMA_IRQHandler+0xcc0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d02c      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2e      	ldr	r2, [pc, #184]	; (8004318 <HAL_DMA_IRQHandler+0xcc4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d027      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2c      	ldr	r2, [pc, #176]	; (800431c <HAL_DMA_IRQHandler+0xcc8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d022      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_DMA_IRQHandler+0xccc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d01d      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_DMA_IRQHandler+0xcd0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d018      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_DMA_IRQHandler+0xcd4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d013      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_DMA_IRQHandler+0xcd8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00e      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a25      	ldr	r2, [pc, #148]	; (8004330 <HAL_DMA_IRQHandler+0xcdc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d009      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_DMA_IRQHandler+0xce0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xc60>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_DMA_IRQHandler+0xce4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d108      	bne.n	80042c6 <HAL_DMA_IRQHandler+0xc72>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0214 	bic.w	r2, r2, #20
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e007      	b.n	80042d6 <HAL_DMA_IRQHandler+0xc82>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 020a 	bic.w	r2, r2, #10
 80042d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80b8 	beq.w	8004460 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f8:	e0b2      	b.n	8004460 <HAL_DMA_IRQHandler+0xe0c>
 80042fa:	bf00      	nop
 80042fc:	40020010 	.word	0x40020010
 8004300:	40020028 	.word	0x40020028
 8004304:	40020040 	.word	0x40020040
 8004308:	40020058 	.word	0x40020058
 800430c:	40020070 	.word	0x40020070
 8004310:	40020088 	.word	0x40020088
 8004314:	400200a0 	.word	0x400200a0
 8004318:	400200b8 	.word	0x400200b8
 800431c:	40020410 	.word	0x40020410
 8004320:	40020428 	.word	0x40020428
 8004324:	40020440 	.word	0x40020440
 8004328:	40020458 	.word	0x40020458
 800432c:	40020470 	.word	0x40020470
 8004330:	40020488 	.word	0x40020488
 8004334:	400204a0 	.word	0x400204a0
 8004338:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2208      	movs	r2, #8
 8004346:	409a      	lsls	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8088 	beq.w	8004462 <HAL_DMA_IRQHandler+0xe0e>
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8082 	beq.w	8004462 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a41      	ldr	r2, [pc, #260]	; (8004468 <HAL_DMA_IRQHandler+0xe14>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d04a      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3f      	ldr	r2, [pc, #252]	; (800446c <HAL_DMA_IRQHandler+0xe18>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d045      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a3e      	ldr	r2, [pc, #248]	; (8004470 <HAL_DMA_IRQHandler+0xe1c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d040      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a3c      	ldr	r2, [pc, #240]	; (8004474 <HAL_DMA_IRQHandler+0xe20>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d03b      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a3b      	ldr	r2, [pc, #236]	; (8004478 <HAL_DMA_IRQHandler+0xe24>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d036      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a39      	ldr	r2, [pc, #228]	; (800447c <HAL_DMA_IRQHandler+0xe28>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d031      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a38      	ldr	r2, [pc, #224]	; (8004480 <HAL_DMA_IRQHandler+0xe2c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d02c      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a36      	ldr	r2, [pc, #216]	; (8004484 <HAL_DMA_IRQHandler+0xe30>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d027      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a35      	ldr	r2, [pc, #212]	; (8004488 <HAL_DMA_IRQHandler+0xe34>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d022      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a33      	ldr	r2, [pc, #204]	; (800448c <HAL_DMA_IRQHandler+0xe38>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01d      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a32      	ldr	r2, [pc, #200]	; (8004490 <HAL_DMA_IRQHandler+0xe3c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d018      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a30      	ldr	r2, [pc, #192]	; (8004494 <HAL_DMA_IRQHandler+0xe40>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <HAL_DMA_IRQHandler+0xe44>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00e      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2d      	ldr	r2, [pc, #180]	; (800449c <HAL_DMA_IRQHandler+0xe48>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <HAL_DMA_IRQHandler+0xe4c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <HAL_DMA_IRQHandler+0xdaa>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <HAL_DMA_IRQHandler+0xe50>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d108      	bne.n	8004410 <HAL_DMA_IRQHandler+0xdbc>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 021c 	bic.w	r2, r2, #28
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e007      	b.n	8004420 <HAL_DMA_IRQHandler+0xdcc>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 020e 	bic.w	r2, r2, #14
 800441e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2201      	movs	r2, #1
 800442a:	409a      	lsls	r2, r3
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
 8004456:	e004      	b.n	8004462 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004458:	bf00      	nop
 800445a:	e002      	b.n	8004462 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800445c:	bf00      	nop
 800445e:	e000      	b.n	8004462 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004460:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004462:	3728      	adds	r7, #40	; 0x28
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40020010 	.word	0x40020010
 800446c:	40020028 	.word	0x40020028
 8004470:	40020040 	.word	0x40020040
 8004474:	40020058 	.word	0x40020058
 8004478:	40020070 	.word	0x40020070
 800447c:	40020088 	.word	0x40020088
 8004480:	400200a0 	.word	0x400200a0
 8004484:	400200b8 	.word	0x400200b8
 8004488:	40020410 	.word	0x40020410
 800448c:	40020428 	.word	0x40020428
 8004490:	40020440 	.word	0x40020440
 8004494:	40020458 	.word	0x40020458
 8004498:	40020470 	.word	0x40020470
 800449c:	40020488 	.word	0x40020488
 80044a0:	400204a0 	.word	0x400204a0
 80044a4:	400204b8 	.word	0x400204b8

080044a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a84      	ldr	r2, [pc, #528]	; (80046d8 <DMA_SetConfig+0x230>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d072      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a82      	ldr	r2, [pc, #520]	; (80046dc <DMA_SetConfig+0x234>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d06d      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a81      	ldr	r2, [pc, #516]	; (80046e0 <DMA_SetConfig+0x238>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d068      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a7f      	ldr	r2, [pc, #508]	; (80046e4 <DMA_SetConfig+0x23c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d063      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7e      	ldr	r2, [pc, #504]	; (80046e8 <DMA_SetConfig+0x240>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d05e      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a7c      	ldr	r2, [pc, #496]	; (80046ec <DMA_SetConfig+0x244>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d059      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a7b      	ldr	r2, [pc, #492]	; (80046f0 <DMA_SetConfig+0x248>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d054      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a79      	ldr	r2, [pc, #484]	; (80046f4 <DMA_SetConfig+0x24c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d04f      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a78      	ldr	r2, [pc, #480]	; (80046f8 <DMA_SetConfig+0x250>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d04a      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a76      	ldr	r2, [pc, #472]	; (80046fc <DMA_SetConfig+0x254>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d045      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a75      	ldr	r2, [pc, #468]	; (8004700 <DMA_SetConfig+0x258>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d040      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a73      	ldr	r2, [pc, #460]	; (8004704 <DMA_SetConfig+0x25c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d03b      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a72      	ldr	r2, [pc, #456]	; (8004708 <DMA_SetConfig+0x260>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d036      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a70      	ldr	r2, [pc, #448]	; (800470c <DMA_SetConfig+0x264>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d031      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a6f      	ldr	r2, [pc, #444]	; (8004710 <DMA_SetConfig+0x268>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d02c      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a6d      	ldr	r2, [pc, #436]	; (8004714 <DMA_SetConfig+0x26c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d027      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6c      	ldr	r2, [pc, #432]	; (8004718 <DMA_SetConfig+0x270>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d022      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6a      	ldr	r2, [pc, #424]	; (800471c <DMA_SetConfig+0x274>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01d      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a69      	ldr	r2, [pc, #420]	; (8004720 <DMA_SetConfig+0x278>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d018      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a67      	ldr	r2, [pc, #412]	; (8004724 <DMA_SetConfig+0x27c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a66      	ldr	r2, [pc, #408]	; (8004728 <DMA_SetConfig+0x280>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a64      	ldr	r2, [pc, #400]	; (800472c <DMA_SetConfig+0x284>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a63      	ldr	r2, [pc, #396]	; (8004730 <DMA_SetConfig+0x288>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <DMA_SetConfig+0x10a>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a61      	ldr	r2, [pc, #388]	; (8004734 <DMA_SetConfig+0x28c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <DMA_SetConfig+0x10e>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <DMA_SetConfig+0x110>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00d      	beq.n	80045d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a3e      	ldr	r2, [pc, #248]	; (80046d8 <DMA_SetConfig+0x230>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d04a      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3d      	ldr	r2, [pc, #244]	; (80046dc <DMA_SetConfig+0x234>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d045      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a3b      	ldr	r2, [pc, #236]	; (80046e0 <DMA_SetConfig+0x238>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d040      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3a      	ldr	r2, [pc, #232]	; (80046e4 <DMA_SetConfig+0x23c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d03b      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a38      	ldr	r2, [pc, #224]	; (80046e8 <DMA_SetConfig+0x240>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d036      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a37      	ldr	r2, [pc, #220]	; (80046ec <DMA_SetConfig+0x244>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d031      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <DMA_SetConfig+0x248>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d02c      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a34      	ldr	r2, [pc, #208]	; (80046f4 <DMA_SetConfig+0x24c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d027      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a32      	ldr	r2, [pc, #200]	; (80046f8 <DMA_SetConfig+0x250>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d022      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a31      	ldr	r2, [pc, #196]	; (80046fc <DMA_SetConfig+0x254>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d01d      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2f      	ldr	r2, [pc, #188]	; (8004700 <DMA_SetConfig+0x258>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d018      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2e      	ldr	r2, [pc, #184]	; (8004704 <DMA_SetConfig+0x25c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2c      	ldr	r2, [pc, #176]	; (8004708 <DMA_SetConfig+0x260>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00e      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2b      	ldr	r2, [pc, #172]	; (800470c <DMA_SetConfig+0x264>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d009      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a29      	ldr	r2, [pc, #164]	; (8004710 <DMA_SetConfig+0x268>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <DMA_SetConfig+0x1d0>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a28      	ldr	r2, [pc, #160]	; (8004714 <DMA_SetConfig+0x26c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <DMA_SetConfig+0x1d4>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <DMA_SetConfig+0x1d6>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d05a      	beq.n	8004738 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	223f      	movs	r2, #63	; 0x3f
 800468c:	409a      	lsls	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d108      	bne.n	80046c4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046c2:	e087      	b.n	80047d4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]
}
 80046d4:	e07e      	b.n	80047d4 <DMA_SetConfig+0x32c>
 80046d6:	bf00      	nop
 80046d8:	40020010 	.word	0x40020010
 80046dc:	40020028 	.word	0x40020028
 80046e0:	40020040 	.word	0x40020040
 80046e4:	40020058 	.word	0x40020058
 80046e8:	40020070 	.word	0x40020070
 80046ec:	40020088 	.word	0x40020088
 80046f0:	400200a0 	.word	0x400200a0
 80046f4:	400200b8 	.word	0x400200b8
 80046f8:	40020410 	.word	0x40020410
 80046fc:	40020428 	.word	0x40020428
 8004700:	40020440 	.word	0x40020440
 8004704:	40020458 	.word	0x40020458
 8004708:	40020470 	.word	0x40020470
 800470c:	40020488 	.word	0x40020488
 8004710:	400204a0 	.word	0x400204a0
 8004714:	400204b8 	.word	0x400204b8
 8004718:	58025408 	.word	0x58025408
 800471c:	5802541c 	.word	0x5802541c
 8004720:	58025430 	.word	0x58025430
 8004724:	58025444 	.word	0x58025444
 8004728:	58025458 	.word	0x58025458
 800472c:	5802546c 	.word	0x5802546c
 8004730:	58025480 	.word	0x58025480
 8004734:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <DMA_SetConfig+0x338>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <DMA_SetConfig+0x33c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a25      	ldr	r2, [pc, #148]	; (80047e8 <DMA_SetConfig+0x340>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a24      	ldr	r2, [pc, #144]	; (80047ec <DMA_SetConfig+0x344>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <DMA_SetConfig+0x348>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <DMA_SetConfig+0x34c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <DMA_SetConfig+0x350>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <DMA_SetConfig+0x2e0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <DMA_SetConfig+0x354>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <DMA_SetConfig+0x2e4>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <DMA_SetConfig+0x2e6>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d020      	beq.n	80047d4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d108      	bne.n	80047c4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	60da      	str	r2, [r3, #12]
}
 80047c2:	e007      	b.n	80047d4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]
}
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	58025408 	.word	0x58025408
 80047e4:	5802541c 	.word	0x5802541c
 80047e8:	58025430 	.word	0x58025430
 80047ec:	58025444 	.word	0x58025444
 80047f0:	58025458 	.word	0x58025458
 80047f4:	5802546c 	.word	0x5802546c
 80047f8:	58025480 	.word	0x58025480
 80047fc:	58025494 	.word	0x58025494

08004800 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a42      	ldr	r2, [pc, #264]	; (8004918 <DMA_CalcBaseAndBitshift+0x118>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d04a      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a41      	ldr	r2, [pc, #260]	; (800491c <DMA_CalcBaseAndBitshift+0x11c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d045      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a3f      	ldr	r2, [pc, #252]	; (8004920 <DMA_CalcBaseAndBitshift+0x120>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d040      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3e      	ldr	r2, [pc, #248]	; (8004924 <DMA_CalcBaseAndBitshift+0x124>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d03b      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3c      	ldr	r2, [pc, #240]	; (8004928 <DMA_CalcBaseAndBitshift+0x128>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d036      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3b      	ldr	r2, [pc, #236]	; (800492c <DMA_CalcBaseAndBitshift+0x12c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d031      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a39      	ldr	r2, [pc, #228]	; (8004930 <DMA_CalcBaseAndBitshift+0x130>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d02c      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a38      	ldr	r2, [pc, #224]	; (8004934 <DMA_CalcBaseAndBitshift+0x134>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d027      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a36      	ldr	r2, [pc, #216]	; (8004938 <DMA_CalcBaseAndBitshift+0x138>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a35      	ldr	r2, [pc, #212]	; (800493c <DMA_CalcBaseAndBitshift+0x13c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d01d      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a33      	ldr	r2, [pc, #204]	; (8004940 <DMA_CalcBaseAndBitshift+0x140>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a32      	ldr	r2, [pc, #200]	; (8004944 <DMA_CalcBaseAndBitshift+0x144>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a30      	ldr	r2, [pc, #192]	; (8004948 <DMA_CalcBaseAndBitshift+0x148>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2f      	ldr	r2, [pc, #188]	; (800494c <DMA_CalcBaseAndBitshift+0x14c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <DMA_CalcBaseAndBitshift+0x150>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xa8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2c      	ldr	r2, [pc, #176]	; (8004954 <DMA_CalcBaseAndBitshift+0x154>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d101      	bne.n	80048ac <DMA_CalcBaseAndBitshift+0xac>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <DMA_CalcBaseAndBitshift+0xae>
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d024      	beq.n	80048fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3b10      	subs	r3, #16
 80048ba:	4a27      	ldr	r2, [pc, #156]	; (8004958 <DMA_CalcBaseAndBitshift+0x158>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	4a24      	ldr	r2, [pc, #144]	; (800495c <DMA_CalcBaseAndBitshift+0x15c>)
 80048cc:	5cd3      	ldrb	r3, [r2, r3]
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d908      	bls.n	80048ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <DMA_CalcBaseAndBitshift+0x160>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	659a      	str	r2, [r3, #88]	; 0x58
 80048ea:	e00d      	b.n	8004908 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <DMA_CalcBaseAndBitshift+0x160>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6593      	str	r3, [r2, #88]	; 0x58
 80048fa:	e005      	b.n	8004908 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40020010 	.word	0x40020010
 800491c:	40020028 	.word	0x40020028
 8004920:	40020040 	.word	0x40020040
 8004924:	40020058 	.word	0x40020058
 8004928:	40020070 	.word	0x40020070
 800492c:	40020088 	.word	0x40020088
 8004930:	400200a0 	.word	0x400200a0
 8004934:	400200b8 	.word	0x400200b8
 8004938:	40020410 	.word	0x40020410
 800493c:	40020428 	.word	0x40020428
 8004940:	40020440 	.word	0x40020440
 8004944:	40020458 	.word	0x40020458
 8004948:	40020470 	.word	0x40020470
 800494c:	40020488 	.word	0x40020488
 8004950:	400204a0 	.word	0x400204a0
 8004954:	400204b8 	.word	0x400204b8
 8004958:	aaaaaaab 	.word	0xaaaaaaab
 800495c:	08009880 	.word	0x08009880
 8004960:	fffffc00 	.word	0xfffffc00

08004964 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d120      	bne.n	80049ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	2b03      	cmp	r3, #3
 800497e:	d858      	bhi.n	8004a32 <DMA_CheckFifoParam+0xce>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <DMA_CheckFifoParam+0x24>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	08004999 	.word	0x08004999
 800498c:	080049ab 	.word	0x080049ab
 8004990:	08004999 	.word	0x08004999
 8004994:	08004a33 	.word	0x08004a33
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d048      	beq.n	8004a36 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049a8:	e045      	b.n	8004a36 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049b2:	d142      	bne.n	8004a3a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049b8:	e03f      	b.n	8004a3a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c2:	d123      	bne.n	8004a0c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d838      	bhi.n	8004a3e <DMA_CheckFifoParam+0xda>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <DMA_CheckFifoParam+0x70>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	080049eb 	.word	0x080049eb
 80049dc:	080049e5 	.word	0x080049e5
 80049e0:	080049fd 	.word	0x080049fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
        break;
 80049e8:	e030      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d025      	beq.n	8004a42 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049fa:	e022      	b.n	8004a42 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a04:	d11f      	bne.n	8004a46 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a0a:	e01c      	b.n	8004a46 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d902      	bls.n	8004a1a <DMA_CheckFifoParam+0xb6>
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d003      	beq.n	8004a20 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a18:	e018      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1e:	e015      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00e      	beq.n	8004a4a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a30:	e00b      	b.n	8004a4a <DMA_CheckFifoParam+0xe6>
        break;
 8004a32:	bf00      	nop
 8004a34:	e00a      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a36:	bf00      	nop
 8004a38:	e008      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a3a:	bf00      	nop
 8004a3c:	e006      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a3e:	bf00      	nop
 8004a40:	e004      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
        break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <DMA_CheckFifoParam+0xe8>
    break;
 8004a4a:	bf00      	nop
    }
  }

  return status;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a38      	ldr	r2, [pc, #224]	; (8004b50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d022      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a36      	ldr	r2, [pc, #216]	; (8004b54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01d      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a35      	ldr	r2, [pc, #212]	; (8004b58 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d018      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a33      	ldr	r2, [pc, #204]	; (8004b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a32      	ldr	r2, [pc, #200]	; (8004b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a30      	ldr	r2, [pc, #192]	; (8004b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d009      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2f      	ldr	r2, [pc, #188]	; (8004b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01a      	beq.n	8004afa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	3b08      	subs	r3, #8
 8004acc:	4a28      	ldr	r2, [pc, #160]	; (8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	461a      	mov	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ae8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2201      	movs	r2, #1
 8004af2:	409a      	lsls	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004af8:	e024      	b.n	8004b44 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3b10      	subs	r3, #16
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d806      	bhi.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d902      	bls.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b34:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	58025408 	.word	0x58025408
 8004b54:	5802541c 	.word	0x5802541c
 8004b58:	58025430 	.word	0x58025430
 8004b5c:	58025444 	.word	0x58025444
 8004b60:	58025458 	.word	0x58025458
 8004b64:	5802546c 	.word	0x5802546c
 8004b68:	58025480 	.word	0x58025480
 8004b6c:	58025494 	.word	0x58025494
 8004b70:	cccccccd 	.word	0xcccccccd
 8004b74:	16009600 	.word	0x16009600
 8004b78:	58025880 	.word	0x58025880
 8004b7c:	aaaaaaab 	.word	0xaaaaaaab
 8004b80:	400204b8 	.word	0x400204b8
 8004b84:	4002040f 	.word	0x4002040f
 8004b88:	10008200 	.word	0x10008200
 8004b8c:	40020880 	.word	0x40020880

08004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04a      	beq.n	8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d847      	bhi.n	8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a25      	ldr	r2, [pc, #148]	; (8004c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d01d      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a21      	ldr	r2, [pc, #132]	; (8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c00:	2300      	movs	r3, #0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c18:	671a      	str	r2, [r3, #112]	; 0x70
 8004c1a:	e009      	b.n	8004c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	461a      	mov	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a11      	ldr	r2, [pc, #68]	; (8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c2e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	2201      	movs	r2, #1
 8004c36:	409a      	lsls	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	58025408 	.word	0x58025408
 8004c4c:	5802541c 	.word	0x5802541c
 8004c50:	58025430 	.word	0x58025430
 8004c54:	58025444 	.word	0x58025444
 8004c58:	58025458 	.word	0x58025458
 8004c5c:	5802546c 	.word	0x5802546c
 8004c60:	58025480 	.word	0x58025480
 8004c64:	58025494 	.word	0x58025494
 8004c68:	1600963f 	.word	0x1600963f
 8004c6c:	58025940 	.word	0x58025940
 8004c70:	1000823f 	.word	0x1000823f
 8004c74:	40020940 	.word	0x40020940

08004c78 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	460b      	mov	r3, r1
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e00a      	b.n	8004caa <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004c94:	7afb      	ldrb	r3, [r7, #11]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	605a      	str	r2, [r3, #4]
      break;
 8004ca0:	e002      	b.n	8004ca8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca6:	bf00      	nop
  }

  return status;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e003      	b.n	8004cd2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cee:	4b89      	ldr	r3, [pc, #548]	; (8004f14 <HAL_GPIO_Init+0x234>)
 8004cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cf2:	e194      	b.n	800501e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8186 	beq.w	8005018 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d00b      	beq.n	8004d2c <HAL_GPIO_Init+0x4c>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d007      	beq.n	8004d2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d20:	2b11      	cmp	r3, #17
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b12      	cmp	r3, #18
 8004d2a:	d130      	bne.n	8004d8e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	2203      	movs	r2, #3
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d62:	2201      	movs	r2, #1
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 0201 	and.w	r2, r3, #1
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	2203      	movs	r2, #3
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_Init+0xee>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b12      	cmp	r3, #18
 8004dcc:	d123      	bne.n	8004e16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	08da      	lsrs	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3208      	adds	r2, #8
 8004dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	220f      	movs	r2, #15
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	43db      	mvns	r3, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4013      	ands	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	08da      	lsrs	r2, r3, #3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3208      	adds	r2, #8
 8004e10:	69b9      	ldr	r1, [r7, #24]
 8004e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	2203      	movs	r2, #3
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43db      	mvns	r3, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 0203 	and.w	r2, r3, #3
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80e0 	beq.w	8005018 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e58:	4b2f      	ldr	r3, [pc, #188]	; (8004f18 <HAL_GPIO_Init+0x238>)
 8004e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e5e:	4a2e      	ldr	r2, [pc, #184]	; (8004f18 <HAL_GPIO_Init+0x238>)
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e68:	4b2b      	ldr	r3, [pc, #172]	; (8004f18 <HAL_GPIO_Init+0x238>)
 8004e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e76:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <HAL_GPIO_Init+0x23c>)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <HAL_GPIO_Init+0x240>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d052      	beq.n	8004f48 <HAL_GPIO_Init+0x268>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <HAL_GPIO_Init+0x244>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d031      	beq.n	8004f0e <HAL_GPIO_Init+0x22e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1e      	ldr	r2, [pc, #120]	; (8004f28 <HAL_GPIO_Init+0x248>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02b      	beq.n	8004f0a <HAL_GPIO_Init+0x22a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_GPIO_Init+0x24c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d025      	beq.n	8004f06 <HAL_GPIO_Init+0x226>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1c      	ldr	r2, [pc, #112]	; (8004f30 <HAL_GPIO_Init+0x250>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <HAL_GPIO_Init+0x222>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a1b      	ldr	r2, [pc, #108]	; (8004f34 <HAL_GPIO_Init+0x254>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d019      	beq.n	8004efe <HAL_GPIO_Init+0x21e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <HAL_GPIO_Init+0x258>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <HAL_GPIO_Init+0x21a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a19      	ldr	r2, [pc, #100]	; (8004f3c <HAL_GPIO_Init+0x25c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_GPIO_Init+0x216>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a18      	ldr	r2, [pc, #96]	; (8004f40 <HAL_GPIO_Init+0x260>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d007      	beq.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <HAL_GPIO_Init+0x264>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <HAL_GPIO_Init+0x20e>
 8004eea:	2309      	movs	r3, #9
 8004eec:	e02d      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004eee:	230a      	movs	r3, #10
 8004ef0:	e02b      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	e029      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004ef6:	2307      	movs	r3, #7
 8004ef8:	e027      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004efa:	2306      	movs	r3, #6
 8004efc:	e025      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004efe:	2305      	movs	r3, #5
 8004f00:	e023      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004f02:	2304      	movs	r3, #4
 8004f04:	e021      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004f06:	2303      	movs	r3, #3
 8004f08:	e01f      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e01d      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e01b      	b.n	8004f4a <HAL_GPIO_Init+0x26a>
 8004f12:	bf00      	nop
 8004f14:	58000080 	.word	0x58000080
 8004f18:	58024400 	.word	0x58024400
 8004f1c:	58000400 	.word	0x58000400
 8004f20:	58020000 	.word	0x58020000
 8004f24:	58020400 	.word	0x58020400
 8004f28:	58020800 	.word	0x58020800
 8004f2c:	58020c00 	.word	0x58020c00
 8004f30:	58021000 	.word	0x58021000
 8004f34:	58021400 	.word	0x58021400
 8004f38:	58021800 	.word	0x58021800
 8004f3c:	58021c00 	.word	0x58021c00
 8004f40:	58022000 	.word	0x58022000
 8004f44:	58022400 	.word	0x58022400
 8004f48:	2300      	movs	r3, #0
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	f002 0203 	and.w	r2, r2, #3
 8004f50:	0092      	lsls	r2, r2, #2
 8004f52:	4093      	lsls	r3, r2
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f5a:	4938      	ldr	r1, [pc, #224]	; (800503c <HAL_GPIO_Init+0x35c>)
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	3302      	adds	r3, #2
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	3301      	adds	r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	f47f ae63 	bne.w	8004cf4 <HAL_GPIO_Init+0x14>
  }
}
 800502e:	bf00      	nop
 8005030:	bf00      	nop
 8005032:	3724      	adds	r7, #36	; 0x24
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	58000400 	.word	0x58000400

08005040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	807b      	strh	r3, [r7, #2]
 800504c:	4613      	mov	r3, r2
 800504e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005050:	787b      	ldrb	r3, [r7, #1]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005056:	887a      	ldrh	r2, [r7, #2]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800505c:	e003      	b.n	8005066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800505e:	887b      	ldrh	r3, [r7, #2]
 8005060:	041a      	lsls	r2, r3, #16
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	619a      	str	r2, [r3, #24]
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	460b      	mov	r3, r1
 800507c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005084:	887a      	ldrh	r2, [r7, #2]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4013      	ands	r3, r2
 800508a:	041a      	lsls	r2, r3, #16
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	43d9      	mvns	r1, r3
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	400b      	ands	r3, r1
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	619a      	str	r2, [r3, #24]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	4603      	mov	r3, r0
 80050ae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fb fe9d 	bl	8000e0c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050e4:	4b19      	ldr	r3, [pc, #100]	; (800514c <HAL_PWREx_ConfigSupply+0x70>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d00a      	beq.n	8005106 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050f0:	4b16      	ldr	r3, [pc, #88]	; (800514c <HAL_PWREx_ConfigSupply+0x70>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d001      	beq.n	8005102 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e01f      	b.n	8005142 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e01d      	b.n	8005142 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <HAL_PWREx_ConfigSupply+0x70>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f023 0207 	bic.w	r2, r3, #7
 800510e:	490f      	ldr	r1, [pc, #60]	; (800514c <HAL_PWREx_ConfigSupply+0x70>)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4313      	orrs	r3, r2
 8005114:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005116:	f7fc fcf9 	bl	8001b0c <HAL_GetTick>
 800511a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800511c:	e009      	b.n	8005132 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800511e:	f7fc fcf5 	bl	8001b0c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800512c:	d901      	bls.n	8005132 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e007      	b.n	8005142 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_PWREx_ConfigSupply+0x70>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513e:	d1ee      	bne.n	800511e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	58024800 	.word	0x58024800

08005150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08c      	sub	sp, #48	; 0x30
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e3ff      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8087 	beq.w	800527e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005170:	4b99      	ldr	r3, [pc, #612]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800517a:	4b97      	ldr	r3, [pc, #604]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	2b10      	cmp	r3, #16
 8005184:	d007      	beq.n	8005196 <HAL_RCC_OscConfig+0x46>
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	2b18      	cmp	r3, #24
 800518a:	d110      	bne.n	80051ae <HAL_RCC_OscConfig+0x5e>
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d10b      	bne.n	80051ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005196:	4b90      	ldr	r3, [pc, #576]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d06c      	beq.n	800527c <HAL_RCC_OscConfig+0x12c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d168      	bne.n	800527c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e3d9      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b6:	d106      	bne.n	80051c6 <HAL_RCC_OscConfig+0x76>
 80051b8:	4b87      	ldr	r3, [pc, #540]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a86      	ldr	r2, [pc, #536]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80051be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e02e      	b.n	8005224 <HAL_RCC_OscConfig+0xd4>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x98>
 80051ce:	4b82      	ldr	r3, [pc, #520]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a81      	ldr	r2, [pc, #516]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80051d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	4b7f      	ldr	r3, [pc, #508]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a7e      	ldr	r2, [pc, #504]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80051e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e01d      	b.n	8005224 <HAL_RCC_OscConfig+0xd4>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051f0:	d10c      	bne.n	800520c <HAL_RCC_OscConfig+0xbc>
 80051f2:	4b79      	ldr	r3, [pc, #484]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a78      	ldr	r2, [pc, #480]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80051f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	4b76      	ldr	r3, [pc, #472]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a75      	ldr	r2, [pc, #468]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e00b      	b.n	8005224 <HAL_RCC_OscConfig+0xd4>
 800520c:	4b72      	ldr	r3, [pc, #456]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a71      	ldr	r2, [pc, #452]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	4b6f      	ldr	r3, [pc, #444]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a6e      	ldr	r2, [pc, #440]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 800521e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d013      	beq.n	8005254 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fc fc6e 	bl	8001b0c <HAL_GetTick>
 8005230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005234:	f7fc fc6a 	bl	8001b0c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b64      	cmp	r3, #100	; 0x64
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e38d      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005246:	4b64      	ldr	r3, [pc, #400]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0xe4>
 8005252:	e014      	b.n	800527e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fc fc5a 	bl	8001b0c <HAL_GetTick>
 8005258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800525c:	f7fc fc56 	bl	8001b0c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b64      	cmp	r3, #100	; 0x64
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e379      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800526e:	4b5a      	ldr	r3, [pc, #360]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x10c>
 800527a:	e000      	b.n	800527e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 80ae 	beq.w	80053e8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528c:	4b52      	ldr	r3, [pc, #328]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005294:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005296:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_RCC_OscConfig+0x162>
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	2b18      	cmp	r3, #24
 80052a6:	d13a      	bne.n	800531e <HAL_RCC_OscConfig+0x1ce>
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d135      	bne.n	800531e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b2:	4b49      	ldr	r3, [pc, #292]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_RCC_OscConfig+0x17a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e34b      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ca:	f7fc fc4f 	bl	8001b6c <HAL_GetREVID>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d817      	bhi.n	8005308 <HAL_RCC_OscConfig+0x1b8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	d108      	bne.n	80052f2 <HAL_RCC_OscConfig+0x1a2>
 80052e0:	4b3d      	ldr	r3, [pc, #244]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052e8:	4a3b      	ldr	r2, [pc, #236]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80052ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f0:	e07a      	b.n	80053e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f2:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	031b      	lsls	r3, r3, #12
 8005300:	4935      	ldr	r1, [pc, #212]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005306:	e06f      	b.n	80053e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005308:	4b33      	ldr	r3, [pc, #204]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	061b      	lsls	r3, r3, #24
 8005316:	4930      	ldr	r1, [pc, #192]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800531c:	e064      	b.n	80053e8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d045      	beq.n	80053b2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005326:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 0219 	bic.w	r2, r3, #25
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	4929      	ldr	r1, [pc, #164]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fc fbe8 	bl	8001b0c <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005340:	f7fc fbe4 	bl	8001b0c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e307      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005352:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535e:	f7fc fc05 	bl	8001b6c <HAL_GetREVID>
 8005362:	4603      	mov	r3, r0
 8005364:	f241 0203 	movw	r2, #4099	; 0x1003
 8005368:	4293      	cmp	r3, r2
 800536a:	d817      	bhi.n	800539c <HAL_RCC_OscConfig+0x24c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d108      	bne.n	8005386 <HAL_RCC_OscConfig+0x236>
 8005374:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 800537e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005382:	6053      	str	r3, [r2, #4]
 8005384:	e030      	b.n	80053e8 <HAL_RCC_OscConfig+0x298>
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	031b      	lsls	r3, r3, #12
 8005394:	4910      	ldr	r1, [pc, #64]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
 800539a:	e025      	b.n	80053e8 <HAL_RCC_OscConfig+0x298>
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	061b      	lsls	r3, r3, #24
 80053aa:	490b      	ldr	r1, [pc, #44]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	604b      	str	r3, [r1, #4]
 80053b0:	e01a      	b.n	80053e8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <HAL_RCC_OscConfig+0x288>)
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7fc fba5 	bl	8001b0c <HAL_GetTick>
 80053c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053c4:	e00a      	b.n	80053dc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c6:	f7fc fba1 	bl	8001b0c <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d903      	bls.n	80053dc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e2c4      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
 80053d8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053dc:	4ba4      	ldr	r3, [pc, #656]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1ee      	bne.n	80053c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80a9 	beq.w	8005548 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f6:	4b9e      	ldr	r3, [pc, #632]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005400:	4b9b      	ldr	r3, [pc, #620]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d007      	beq.n	800541c <HAL_RCC_OscConfig+0x2cc>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b18      	cmp	r3, #24
 8005410:	d13a      	bne.n	8005488 <HAL_RCC_OscConfig+0x338>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d135      	bne.n	8005488 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800541c:	4b94      	ldr	r3, [pc, #592]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_RCC_OscConfig+0x2e4>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d001      	beq.n	8005434 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e296      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005434:	f7fc fb9a 	bl	8001b6c <HAL_GetREVID>
 8005438:	4603      	mov	r3, r0
 800543a:	f241 0203 	movw	r2, #4099	; 0x1003
 800543e:	4293      	cmp	r3, r2
 8005440:	d817      	bhi.n	8005472 <HAL_RCC_OscConfig+0x322>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	2b20      	cmp	r3, #32
 8005448:	d108      	bne.n	800545c <HAL_RCC_OscConfig+0x30c>
 800544a:	4b89      	ldr	r3, [pc, #548]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005452:	4a87      	ldr	r2, [pc, #540]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005458:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800545a:	e075      	b.n	8005548 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800545c:	4b84      	ldr	r3, [pc, #528]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	069b      	lsls	r3, r3, #26
 800546a:	4981      	ldr	r1, [pc, #516]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005470:	e06a      	b.n	8005548 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005472:	4b7f      	ldr	r3, [pc, #508]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	061b      	lsls	r3, r3, #24
 8005480:	497b      	ldr	r1, [pc, #492]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005482:	4313      	orrs	r3, r2
 8005484:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005486:	e05f      	b.n	8005548 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d042      	beq.n	8005516 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005490:	4b77      	ldr	r3, [pc, #476]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a76      	ldr	r2, [pc, #472]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fc fb36 	bl	8001b0c <HAL_GetTick>
 80054a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054a4:	f7fc fb32 	bl	8001b0c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e255      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054b6:	4b6e      	ldr	r3, [pc, #440]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f0      	beq.n	80054a4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054c2:	f7fc fb53 	bl	8001b6c <HAL_GetREVID>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d817      	bhi.n	8005500 <HAL_RCC_OscConfig+0x3b0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d108      	bne.n	80054ea <HAL_RCC_OscConfig+0x39a>
 80054d8:	4b65      	ldr	r3, [pc, #404]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054e0:	4a63      	ldr	r2, [pc, #396]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80054e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054e6:	6053      	str	r3, [r2, #4]
 80054e8:	e02e      	b.n	8005548 <HAL_RCC_OscConfig+0x3f8>
 80054ea:	4b61      	ldr	r3, [pc, #388]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	069b      	lsls	r3, r3, #26
 80054f8:	495d      	ldr	r1, [pc, #372]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	604b      	str	r3, [r1, #4]
 80054fe:	e023      	b.n	8005548 <HAL_RCC_OscConfig+0x3f8>
 8005500:	4b5b      	ldr	r3, [pc, #364]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	061b      	lsls	r3, r3, #24
 800550e:	4958      	ldr	r1, [pc, #352]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005510:	4313      	orrs	r3, r2
 8005512:	60cb      	str	r3, [r1, #12]
 8005514:	e018      	b.n	8005548 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005516:	4b56      	ldr	r3, [pc, #344]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a55      	ldr	r2, [pc, #340]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 800551c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005522:	f7fc faf3 	bl	8001b0c <HAL_GetTick>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800552a:	f7fc faef 	bl	8001b0c <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e212      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800553c:	4b4c      	ldr	r3, [pc, #304]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f0      	bne.n	800552a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d036      	beq.n	80055c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d019      	beq.n	8005590 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800555c:	4b44      	ldr	r3, [pc, #272]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	4a43      	ldr	r2, [pc, #268]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fc fad0 	bl	8001b0c <HAL_GetTick>
 800556c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005570:	f7fc facc 	bl	8001b0c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e1ef      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005582:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x420>
 800558e:	e018      	b.n	80055c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005590:	4b37      	ldr	r3, [pc, #220]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005594:	4a36      	ldr	r2, [pc, #216]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005596:	f023 0301 	bic.w	r3, r3, #1
 800559a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fc fab6 	bl	8001b0c <HAL_GetTick>
 80055a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a4:	f7fc fab2 	bl	8001b0c <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e1d5      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80055b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f0      	bne.n	80055a4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d036      	beq.n	800563c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d019      	beq.n	800560a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055d6:	4b26      	ldr	r3, [pc, #152]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a25      	ldr	r2, [pc, #148]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80055dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055e2:	f7fc fa93 	bl	8001b0c <HAL_GetTick>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055ea:	f7fc fa8f 	bl	8001b0c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e1b2      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055fc:	4b1c      	ldr	r3, [pc, #112]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x49a>
 8005608:	e018      	b.n	800563c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800560a:	4b19      	ldr	r3, [pc, #100]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a18      	ldr	r2, [pc, #96]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005614:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005616:	f7fc fa79 	bl	8001b0c <HAL_GetTick>
 800561a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800561e:	f7fc fa75 	bl	8001b0c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e198      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005630:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <HAL_RCC_OscConfig+0x520>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f0      	bne.n	800561e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8085 	beq.w	8005754 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <HAL_RCC_OscConfig+0x524>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <HAL_RCC_OscConfig+0x524>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005656:	f7fc fa59 	bl	8001b0c <HAL_GetTick>
 800565a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800565c:	e00c      	b.n	8005678 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800565e:	f7fc fa55 	bl	8001b0c <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b64      	cmp	r3, #100	; 0x64
 800566a:	d905      	bls.n	8005678 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e178      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
 8005670:	58024400 	.word	0x58024400
 8005674:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005678:	4b96      	ldr	r3, [pc, #600]	; (80058d4 <HAL_RCC_OscConfig+0x784>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0ec      	beq.n	800565e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x54a>
 800568c:	4b92      	ldr	r3, [pc, #584]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	4a91      	ldr	r2, [pc, #580]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	6713      	str	r3, [r2, #112]	; 0x70
 8005698:	e02d      	b.n	80056f6 <HAL_RCC_OscConfig+0x5a6>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10c      	bne.n	80056bc <HAL_RCC_OscConfig+0x56c>
 80056a2:	4b8d      	ldr	r3, [pc, #564]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	4a8c      	ldr	r2, [pc, #560]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	6713      	str	r3, [r2, #112]	; 0x70
 80056ae:	4b8a      	ldr	r3, [pc, #552]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	4a89      	ldr	r2, [pc, #548]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056b4:	f023 0304 	bic.w	r3, r3, #4
 80056b8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ba:	e01c      	b.n	80056f6 <HAL_RCC_OscConfig+0x5a6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b05      	cmp	r3, #5
 80056c2:	d10c      	bne.n	80056de <HAL_RCC_OscConfig+0x58e>
 80056c4:	4b84      	ldr	r3, [pc, #528]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	4a83      	ldr	r2, [pc, #524]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056ca:	f043 0304 	orr.w	r3, r3, #4
 80056ce:	6713      	str	r3, [r2, #112]	; 0x70
 80056d0:	4b81      	ldr	r3, [pc, #516]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d4:	4a80      	ldr	r2, [pc, #512]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	6713      	str	r3, [r2, #112]	; 0x70
 80056dc:	e00b      	b.n	80056f6 <HAL_RCC_OscConfig+0x5a6>
 80056de:	4b7e      	ldr	r3, [pc, #504]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	4a7d      	ldr	r2, [pc, #500]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ea:	4b7b      	ldr	r3, [pc, #492]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	4a7a      	ldr	r2, [pc, #488]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80056f0:	f023 0304 	bic.w	r3, r3, #4
 80056f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d015      	beq.n	800572a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fe:	f7fc fa05 	bl	8001b0c <HAL_GetTick>
 8005702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005704:	e00a      	b.n	800571c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	f7fc fa01 	bl	8001b0c <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	; 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e122      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800571c:	4b6e      	ldr	r3, [pc, #440]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0ee      	beq.n	8005706 <HAL_RCC_OscConfig+0x5b6>
 8005728:	e014      	b.n	8005754 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572a:	f7fc f9ef 	bl	8001b0c <HAL_GetTick>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005730:	e00a      	b.n	8005748 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005732:	f7fc f9eb 	bl	8001b0c <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e10c      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005748:	4b63      	ldr	r3, [pc, #396]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1ee      	bne.n	8005732 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8101 	beq.w	8005960 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800575e:	4b5e      	ldr	r3, [pc, #376]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005766:	2b18      	cmp	r3, #24
 8005768:	f000 80bc 	beq.w	80058e4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b02      	cmp	r3, #2
 8005772:	f040 8095 	bne.w	80058a0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005776:	4b58      	ldr	r3, [pc, #352]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a57      	ldr	r2, [pc, #348]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800577c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005782:	f7fc f9c3 	bl	8001b0c <HAL_GetTick>
 8005786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800578a:	f7fc f9bf 	bl	8001b0c <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e0e2      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800579c:	4b4e      	ldr	r3, [pc, #312]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f0      	bne.n	800578a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a8:	4b4b      	ldr	r3, [pc, #300]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80057aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ac:	4b4b      	ldr	r3, [pc, #300]	; (80058dc <HAL_RCC_OscConfig+0x78c>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057b8:	0112      	lsls	r2, r2, #4
 80057ba:	430a      	orrs	r2, r1
 80057bc:	4946      	ldr	r1, [pc, #280]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	628b      	str	r3, [r1, #40]	; 0x28
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	3b01      	subs	r3, #1
 80057d2:	025b      	lsls	r3, r3, #9
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	3b01      	subs	r3, #1
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ea:	3b01      	subs	r3, #1
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057f2:	4939      	ldr	r1, [pc, #228]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80057f8:	4b37      	ldr	r3, [pc, #220]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	4a36      	ldr	r2, [pc, #216]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005804:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005808:	4b35      	ldr	r3, [pc, #212]	; (80058e0 <HAL_RCC_OscConfig+0x790>)
 800580a:	4013      	ands	r3, r2
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005810:	00d2      	lsls	r2, r2, #3
 8005812:	4931      	ldr	r1, [pc, #196]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005814:	4313      	orrs	r3, r2
 8005816:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005818:	4b2f      	ldr	r3, [pc, #188]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	f023 020c 	bic.w	r2, r3, #12
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	492c      	ldr	r1, [pc, #176]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005826:	4313      	orrs	r3, r2
 8005828:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800582a:	4b2b      	ldr	r3, [pc, #172]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	f023 0202 	bic.w	r2, r3, #2
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	4928      	ldr	r1, [pc, #160]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005838:	4313      	orrs	r3, r2
 800583a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800583c:	4b26      	ldr	r3, [pc, #152]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	4a25      	ldr	r2, [pc, #148]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005848:	4b23      	ldr	r3, [pc, #140]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800584e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005854:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800585a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800585e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005860:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800586c:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a19      	ldr	r2, [pc, #100]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fc f948 	bl	8001b0c <HAL_GetTick>
 800587c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005880:	f7fc f944 	bl	8001b0c <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e067      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005892:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCC_OscConfig+0x730>
 800589e:	e05f      	b.n	8005960 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a0:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80058a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fc f92e 	bl	8001b0c <HAL_GetTick>
 80058b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b4:	f7fc f92a 	bl	8001b0c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e04d      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058c6:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <HAL_RCC_OscConfig+0x788>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x764>
 80058d2:	e045      	b.n	8005960 <HAL_RCC_OscConfig+0x810>
 80058d4:	58024800 	.word	0x58024800
 80058d8:	58024400 	.word	0x58024400
 80058dc:	fffffc0c 	.word	0xfffffc0c
 80058e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058e4:	4b21      	ldr	r3, [pc, #132]	; (800596c <HAL_RCC_OscConfig+0x81c>)
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058ea:	4b20      	ldr	r3, [pc, #128]	; (800596c <HAL_RCC_OscConfig+0x81c>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d031      	beq.n	800595c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f003 0203 	and.w	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d12a      	bne.n	800595c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	091b      	lsrs	r3, r3, #4
 800590a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005912:	429a      	cmp	r2, r3
 8005914:	d122      	bne.n	800595c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005922:	429a      	cmp	r2, r3
 8005924:	d11a      	bne.n	800595c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	0a5b      	lsrs	r3, r3, #9
 800592a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005934:	429a      	cmp	r2, r3
 8005936:	d111      	bne.n	800595c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	0c1b      	lsrs	r3, r3, #16
 800593c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d108      	bne.n	800595c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	0e1b      	lsrs	r3, r3, #24
 800594e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d001      	beq.n	8005960 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3730      	adds	r7, #48	; 0x30
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	58024400 	.word	0x58024400

08005970 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e19c      	b.n	8005cbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005984:	4b8a      	ldr	r3, [pc, #552]	; (8005bb0 <HAL_RCC_ClockConfig+0x240>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d910      	bls.n	80059b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	4b87      	ldr	r3, [pc, #540]	; (8005bb0 <HAL_RCC_ClockConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 020f 	bic.w	r2, r3, #15
 800599a:	4985      	ldr	r1, [pc, #532]	; (8005bb0 <HAL_RCC_ClockConfig+0x240>)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b83      	ldr	r3, [pc, #524]	; (8005bb0 <HAL_RCC_ClockConfig+0x240>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e184      	b.n	8005cbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	4b7b      	ldr	r3, [pc, #492]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d908      	bls.n	80059e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059d0:	4b78      	ldr	r3, [pc, #480]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	4975      	ldr	r1, [pc, #468]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d010      	beq.n	8005a10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	4b70      	ldr	r3, [pc, #448]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d908      	bls.n	8005a10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059fe:	4b6d      	ldr	r3, [pc, #436]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	496a      	ldr	r1, [pc, #424]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d010      	beq.n	8005a3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	4b64      	ldr	r3, [pc, #400]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d908      	bls.n	8005a3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a2c:	4b61      	ldr	r3, [pc, #388]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	495e      	ldr	r1, [pc, #376]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	4b59      	ldr	r3, [pc, #356]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d908      	bls.n	8005a6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a5a:	4b56      	ldr	r3, [pc, #344]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	4953      	ldr	r1, [pc, #332]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	4b4d      	ldr	r3, [pc, #308]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d908      	bls.n	8005a9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a88:	4b4a      	ldr	r3, [pc, #296]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f023 020f 	bic.w	r2, r3, #15
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4947      	ldr	r1, [pc, #284]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d055      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005aa6:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	4940      	ldr	r1, [pc, #256]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d107      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ac0:	4b3c      	ldr	r3, [pc, #240]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d121      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0f6      	b.n	8005cbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d107      	bne.n	8005ae8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ad8:	4b36      	ldr	r3, [pc, #216]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d115      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e0ea      	b.n	8005cbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d107      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005af0:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0de      	b.n	8005cbe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b00:	4b2c      	ldr	r3, [pc, #176]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0d6      	b.n	8005cbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b10:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f023 0207 	bic.w	r2, r3, #7
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4925      	ldr	r1, [pc, #148]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b22:	f7fb fff3 	bl	8001b0c <HAL_GetTick>
 8005b26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b28:	e00a      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b2a:	f7fb ffef 	bl	8001b0c <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e0be      	b.n	8005cbe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b40:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d1eb      	bne.n	8005b2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d010      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	4b14      	ldr	r3, [pc, #80]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d208      	bcs.n	8005b80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b6e:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f023 020f 	bic.w	r2, r3, #15
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	490e      	ldr	r1, [pc, #56]	; (8005bb4 <HAL_RCC_ClockConfig+0x244>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <HAL_RCC_ClockConfig+0x240>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d214      	bcs.n	8005bb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8e:	4b08      	ldr	r3, [pc, #32]	; (8005bb0 <HAL_RCC_ClockConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f023 020f 	bic.w	r2, r3, #15
 8005b96:	4906      	ldr	r1, [pc, #24]	; (8005bb0 <HAL_RCC_ClockConfig+0x240>)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <HAL_RCC_ClockConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e086      	b.n	8005cbe <HAL_RCC_ClockConfig+0x34e>
 8005bb0:	52002000 	.word	0x52002000
 8005bb4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d010      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	4b3f      	ldr	r3, [pc, #252]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d208      	bcs.n	8005be6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bd4:	4b3c      	ldr	r3, [pc, #240]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	4939      	ldr	r1, [pc, #228]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d010      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	4b34      	ldr	r3, [pc, #208]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d208      	bcs.n	8005c14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c02:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	492e      	ldr	r1, [pc, #184]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d010      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	4b28      	ldr	r3, [pc, #160]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d208      	bcs.n	8005c42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c30:	4b25      	ldr	r3, [pc, #148]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	4922      	ldr	r1, [pc, #136]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d010      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69da      	ldr	r2, [r3, #28]
 8005c52:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d208      	bcs.n	8005c70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c5e:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	4917      	ldr	r1, [pc, #92]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c70:	f000 f834 	bl	8005cdc <HAL_RCC_GetSysClockFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	4912      	ldr	r1, [pc, #72]	; (8005ccc <HAL_RCC_ClockConfig+0x35c>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c8e:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <HAL_RCC_ClockConfig+0x358>)
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	4a0d      	ldr	r2, [pc, #52]	; (8005ccc <HAL_RCC_ClockConfig+0x35c>)
 8005c98:	5cd3      	ldrb	r3, [r2, r3]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <HAL_RCC_ClockConfig+0x360>)
 8005ca6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ca8:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <HAL_RCC_ClockConfig+0x364>)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005cae:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <HAL_RCC_ClockConfig+0x368>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fb fee0 	bl	8001a78 <HAL_InitTick>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	08009870 	.word	0x08009870
 8005cd0:	2400001c 	.word	0x2400001c
 8005cd4:	24000018 	.word	0x24000018
 8005cd8:	24000020 	.word	0x24000020

08005cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ce2:	4bb3      	ldr	r3, [pc, #716]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cea:	2b18      	cmp	r3, #24
 8005cec:	f200 8155 	bhi.w	8005f9a <HAL_RCC_GetSysClockFreq+0x2be>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d5d 	.word	0x08005d5d
 8005cfc:	08005f9b 	.word	0x08005f9b
 8005d00:	08005f9b 	.word	0x08005f9b
 8005d04:	08005f9b 	.word	0x08005f9b
 8005d08:	08005f9b 	.word	0x08005f9b
 8005d0c:	08005f9b 	.word	0x08005f9b
 8005d10:	08005f9b 	.word	0x08005f9b
 8005d14:	08005f9b 	.word	0x08005f9b
 8005d18:	08005d83 	.word	0x08005d83
 8005d1c:	08005f9b 	.word	0x08005f9b
 8005d20:	08005f9b 	.word	0x08005f9b
 8005d24:	08005f9b 	.word	0x08005f9b
 8005d28:	08005f9b 	.word	0x08005f9b
 8005d2c:	08005f9b 	.word	0x08005f9b
 8005d30:	08005f9b 	.word	0x08005f9b
 8005d34:	08005f9b 	.word	0x08005f9b
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005f9b 	.word	0x08005f9b
 8005d40:	08005f9b 	.word	0x08005f9b
 8005d44:	08005f9b 	.word	0x08005f9b
 8005d48:	08005f9b 	.word	0x08005f9b
 8005d4c:	08005f9b 	.word	0x08005f9b
 8005d50:	08005f9b 	.word	0x08005f9b
 8005d54:	08005f9b 	.word	0x08005f9b
 8005d58:	08005d8f 	.word	0x08005d8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d5c:	4b94      	ldr	r3, [pc, #592]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d009      	beq.n	8005d7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d68:	4b91      	ldr	r3, [pc, #580]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	08db      	lsrs	r3, r3, #3
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	4a90      	ldr	r2, [pc, #576]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
 8005d78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d7a:	e111      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d7c:	4b8d      	ldr	r3, [pc, #564]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d7e:	61bb      	str	r3, [r7, #24]
    break;
 8005d80:	e10e      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d82:	4b8d      	ldr	r3, [pc, #564]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d84:	61bb      	str	r3, [r7, #24]
    break;
 8005d86:	e10b      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d88:	4b8c      	ldr	r3, [pc, #560]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d8a:	61bb      	str	r3, [r7, #24]
    break;
 8005d8c:	e108      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d8e:	4b88      	ldr	r3, [pc, #544]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d98:	4b85      	ldr	r3, [pc, #532]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	091b      	lsrs	r3, r3, #4
 8005d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005da2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005da4:	4b82      	ldr	r3, [pc, #520]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005dae:	4b80      	ldr	r3, [pc, #512]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db2:	08db      	lsrs	r3, r3, #3
 8005db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80e1 	beq.w	8005f94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	f000 8083 	beq.w	8005ee0 <HAL_RCC_GetSysClockFreq+0x204>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	f200 80a1 	bhi.w	8005f24 <HAL_RCC_GetSysClockFreq+0x248>
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_RCC_GetSysClockFreq+0x114>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d056      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dee:	e099      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005df0:	4b6f      	ldr	r3, [pc, #444]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d02d      	beq.n	8005e58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dfc:	4b6c      	ldr	r3, [pc, #432]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	08db      	lsrs	r3, r3, #3
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	4a6b      	ldr	r2, [pc, #428]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	ee07 3a90 	vmov	s15, r3
 8005e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e26:	4b62      	ldr	r3, [pc, #392]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005e56:	e087      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6a:	4b51      	ldr	r3, [pc, #324]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e9a:	e065      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005fc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eae:	4b40      	ldr	r3, [pc, #256]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ec2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ede:	e043      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005fcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef2:	4b2f      	ldr	r3, [pc, #188]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f22:	e021      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005fc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f68:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	0a5b      	lsrs	r3, r3, #9
 8005f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f72:	3301      	adds	r3, #1
 8005f74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f8c:	ee17 3a90 	vmov	r3, s15
 8005f90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f92:	e005      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61bb      	str	r3, [r7, #24]
    break;
 8005f98:	e002      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005f9a:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f9c:	61bb      	str	r3, [r7, #24]
    break;
 8005f9e:	bf00      	nop
  }

  return sysclockfreq;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3724      	adds	r7, #36	; 0x24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	03d09000 	.word	0x03d09000
 8005fb8:	003d0900 	.word	0x003d0900
 8005fbc:	007f2815 	.word	0x007f2815
 8005fc0:	46000000 	.word	0x46000000
 8005fc4:	4c742400 	.word	0x4c742400
 8005fc8:	4a742400 	.word	0x4a742400
 8005fcc:	4afe502a 	.word	0x4afe502a

08005fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fd6:	f7ff fe81 	bl	8005cdc <HAL_RCC_GetSysClockFreq>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	4b10      	ldr	r3, [pc, #64]	; (8006020 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	0a1b      	lsrs	r3, r3, #8
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	490f      	ldr	r1, [pc, #60]	; (8006024 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fe8:	5ccb      	ldrb	r3, [r1, r3]
 8005fea:	f003 031f 	and.w	r3, r3, #31
 8005fee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	4a09      	ldr	r2, [pc, #36]	; (8006024 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ffe:	5cd3      	ldrb	r3, [r2, r3]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	fa22 f303 	lsr.w	r3, r2, r3
 800600a:	4a07      	ldr	r2, [pc, #28]	; (8006028 <HAL_RCC_GetHCLKFreq+0x58>)
 800600c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800600e:	4a07      	ldr	r2, [pc, #28]	; (800602c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <HAL_RCC_GetHCLKFreq+0x58>)
 8006016:	681b      	ldr	r3, [r3, #0]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	58024400 	.word	0x58024400
 8006024:	08009870 	.word	0x08009870
 8006028:	2400001c 	.word	0x2400001c
 800602c:	24000018 	.word	0x24000018

08006030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006034:	f7ff ffcc 	bl	8005fd0 <HAL_RCC_GetHCLKFreq>
 8006038:	4602      	mov	r2, r0
 800603a:	4b06      	ldr	r3, [pc, #24]	; (8006054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	091b      	lsrs	r3, r3, #4
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	4904      	ldr	r1, [pc, #16]	; (8006058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006046:	5ccb      	ldrb	r3, [r1, r3]
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006050:	4618      	mov	r0, r3
 8006052:	bd80      	pop	{r7, pc}
 8006054:	58024400 	.word	0x58024400
 8006058:	08009870 	.word	0x08009870

0800605c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006060:	f7ff ffb6 	bl	8005fd0 <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4904      	ldr	r1, [pc, #16]	; (8006084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	58024400 	.word	0x58024400
 8006084:	08009870 	.word	0x08009870

08006088 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006090:	2300      	movs	r3, #0
 8006092:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006094:	2300      	movs	r3, #0
 8006096:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d03f      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060ac:	d02a      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060b2:	d824      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060b8:	d018      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060be:	d81e      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060c8:	d007      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060ca:	e018      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060cc:	4bab      	ldr	r3, [pc, #684]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	4aaa      	ldr	r2, [pc, #680]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060d8:	e015      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	2102      	movs	r1, #2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 f9cf 	bl	8007484 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060ea:	e00c      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3324      	adds	r3, #36	; 0x24
 80060f0:	2102      	movs	r1, #2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fa78 	bl	80075e8 <RCCEx_PLL3_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060fc:	e003      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	75fb      	strb	r3, [r7, #23]
      break;
 8006102:	e000      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006106:	7dfb      	ldrb	r3, [r7, #23]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d109      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800610c:	4b9b      	ldr	r3, [pc, #620]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800610e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006118:	4998      	ldr	r1, [pc, #608]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800611a:	4313      	orrs	r3, r2
 800611c:	650b      	str	r3, [r1, #80]	; 0x50
 800611e:	e001      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
 8006122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d03d      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	2b04      	cmp	r3, #4
 8006136:	d826      	bhi.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006138:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006155 	.word	0x08006155
 8006144:	08006163 	.word	0x08006163
 8006148:	08006175 	.word	0x08006175
 800614c:	0800618d 	.word	0x0800618d
 8006150:	0800618d 	.word	0x0800618d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006154:	4b89      	ldr	r3, [pc, #548]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	4a88      	ldr	r2, [pc, #544]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800615a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800615e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006160:	e015      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3304      	adds	r3, #4
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f001 f98b 	bl	8007484 <RCCEx_PLL2_Config>
 800616e:	4603      	mov	r3, r0
 8006170:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006172:	e00c      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3324      	adds	r3, #36	; 0x24
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f001 fa34 	bl	80075e8 <RCCEx_PLL3_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	75fb      	strb	r3, [r7, #23]
      break;
 800618a:	e000      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800618c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006194:	4b79      	ldr	r3, [pc, #484]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006198:	f023 0207 	bic.w	r2, r3, #7
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a0:	4976      	ldr	r1, [pc, #472]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	650b      	str	r3, [r1, #80]	; 0x50
 80061a6:	e001      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d042      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c0:	d02b      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80061c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c6:	d825      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061c8:	2bc0      	cmp	r3, #192	; 0xc0
 80061ca:	d028      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80061cc:	2bc0      	cmp	r3, #192	; 0xc0
 80061ce:	d821      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061d0:	2b80      	cmp	r3, #128	; 0x80
 80061d2:	d016      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80061d4:	2b80      	cmp	r3, #128	; 0x80
 80061d6:	d81d      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	d007      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80061e0:	e018      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e2:	4b66      	ldr	r3, [pc, #408]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	4a65      	ldr	r2, [pc, #404]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061ee:	e017      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 f944 	bl	8007484 <RCCEx_PLL2_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006200:	e00e      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3324      	adds	r3, #36	; 0x24
 8006206:	2100      	movs	r1, #0
 8006208:	4618      	mov	r0, r3
 800620a:	f001 f9ed 	bl	80075e8 <RCCEx_PLL3_Config>
 800620e:	4603      	mov	r3, r0
 8006210:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006212:	e005      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	75fb      	strb	r3, [r7, #23]
      break;
 8006218:	e002      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800621a:	bf00      	nop
 800621c:	e000      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800621e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d109      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006226:	4b55      	ldr	r3, [pc, #340]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006232:	4952      	ldr	r1, [pc, #328]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006234:	4313      	orrs	r3, r2
 8006236:	650b      	str	r3, [r1, #80]	; 0x50
 8006238:	e001      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006246:	2b00      	cmp	r3, #0
 8006248:	d049      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006254:	d030      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006256:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800625a:	d82a      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800625c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006260:	d02c      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006262:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006266:	d824      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800626c:	d018      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800626e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006272:	d81e      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006278:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800627c:	d007      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800627e:	e018      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006280:	4b3e      	ldr	r3, [pc, #248]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	4a3d      	ldr	r2, [pc, #244]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800628a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800628c:	e017      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3304      	adds	r3, #4
 8006292:	2100      	movs	r1, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f001 f8f5 	bl	8007484 <RCCEx_PLL2_Config>
 800629a:	4603      	mov	r3, r0
 800629c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800629e:	e00e      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3324      	adds	r3, #36	; 0x24
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 f99e 	bl	80075e8 <RCCEx_PLL3_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062b0:	e005      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
      break;
 80062b6:	e002      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80062b8:	bf00      	nop
 80062ba:	e000      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80062bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062c4:	4b2d      	ldr	r3, [pc, #180]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062d2:	492a      	ldr	r1, [pc, #168]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	658b      	str	r3, [r1, #88]	; 0x58
 80062d8:	e001      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062da:	7dfb      	ldrb	r3, [r7, #23]
 80062dc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d04c      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062f4:	d030      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80062f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062fa:	d82a      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80062fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006300:	d02c      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006306:	d824      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800630c:	d018      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800630e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006312:	d81e      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800631c:	d007      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800631e:	e018      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006320:	4b16      	ldr	r3, [pc, #88]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	4a15      	ldr	r2, [pc, #84]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800632c:	e017      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3304      	adds	r3, #4
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f001 f8a5 	bl	8007484 <RCCEx_PLL2_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800633e:	e00e      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3324      	adds	r3, #36	; 0x24
 8006344:	2100      	movs	r1, #0
 8006346:	4618      	mov	r0, r3
 8006348:	f001 f94e 	bl	80075e8 <RCCEx_PLL3_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006350:	e005      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	75fb      	strb	r3, [r7, #23]
      break;
 8006356:	e002      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800635c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10d      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006368:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006372:	4902      	ldr	r1, [pc, #8]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006374:	4313      	orrs	r3, r2
 8006376:	658b      	str	r3, [r1, #88]	; 0x58
 8006378:	e004      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800637a:	bf00      	nop
 800637c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d032      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006394:	2b30      	cmp	r3, #48	; 0x30
 8006396:	d01c      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006398:	2b30      	cmp	r3, #48	; 0x30
 800639a:	d817      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800639c:	2b20      	cmp	r3, #32
 800639e:	d00c      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x332>
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d813      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d016      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d10f      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ac:	4baf      	ldr	r3, [pc, #700]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4aae      	ldr	r2, [pc, #696]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063b8:	e00e      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3304      	adds	r3, #4
 80063be:	2102      	movs	r1, #2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 f85f 	bl	8007484 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063ca:	e005      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75fb      	strb	r3, [r7, #23]
      break;
 80063d0:	e002      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80063d2:	bf00      	nop
 80063d4:	e000      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80063d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063de:	4ba3      	ldr	r3, [pc, #652]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ea:	49a0      	ldr	r1, [pc, #640]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80063f0:	e001      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d047      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800640a:	d030      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800640c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006410:	d82a      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006412:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006416:	d02c      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006418:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800641c:	d824      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800641e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006422:	d018      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006428:	d81e      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006432:	d007      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006434:	e018      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006436:	4b8d      	ldr	r3, [pc, #564]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	4a8c      	ldr	r2, [pc, #560]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800643c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006442:	e017      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f001 f81a 	bl	8007484 <RCCEx_PLL2_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006454:	e00e      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f001 f8c3 	bl	80075e8 <RCCEx_PLL3_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006466:	e005      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	75fb      	strb	r3, [r7, #23]
      break;
 800646c:	e002      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800647a:	4b7c      	ldr	r3, [pc, #496]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006486:	4979      	ldr	r1, [pc, #484]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006488:	4313      	orrs	r3, r2
 800648a:	650b      	str	r3, [r1, #80]	; 0x50
 800648c:	e001      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d049      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064a6:	d02e      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80064a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064ac:	d828      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064b2:	d02a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80064b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064b8:	d822      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064be:	d026      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80064c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064c4:	d81c      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ca:	d010      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x466>
 80064cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064d0:	d816      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01d      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80064d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064da:	d111      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	2101      	movs	r1, #1
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 ffce 	bl	8007484 <RCCEx_PLL2_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80064ec:	e012      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3324      	adds	r3, #36	; 0x24
 80064f2:	2101      	movs	r1, #1
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 f877 	bl	80075e8 <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80064fe:	e009      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
      break;
 8006504:	e006      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006506:	bf00      	nop
 8006508:	e004      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800650a:	bf00      	nop
 800650c:	e002      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800650e:	bf00      	nop
 8006510:	e000      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d109      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800651a:	4b54      	ldr	r3, [pc, #336]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800651c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006526:	4951      	ldr	r1, [pc, #324]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006528:	4313      	orrs	r3, r2
 800652a:	650b      	str	r3, [r1, #80]	; 0x50
 800652c:	e001      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d04b      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006548:	d02e      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800654a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800654e:	d828      	bhi.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006554:	d02a      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655a:	d822      	bhi.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800655c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006560:	d026      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006562:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006566:	d81c      	bhi.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800656c:	d010      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800656e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006572:	d816      	bhi.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01d      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800657c:	d111      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3304      	adds	r3, #4
 8006582:	2101      	movs	r1, #1
 8006584:	4618      	mov	r0, r3
 8006586:	f000 ff7d 	bl	8007484 <RCCEx_PLL2_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800658e:	e012      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3324      	adds	r3, #36	; 0x24
 8006594:	2101      	movs	r1, #1
 8006596:	4618      	mov	r0, r3
 8006598:	f001 f826 	bl	80075e8 <RCCEx_PLL3_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065a0:	e009      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	75fb      	strb	r3, [r7, #23]
      break;
 80065a6:	e006      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065a8:	bf00      	nop
 80065aa:	e004      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065ac:	bf00      	nop
 80065ae:	e002      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065b0:	bf00      	nop
 80065b2:	e000      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065ca:	4928      	ldr	r1, [pc, #160]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	658b      	str	r3, [r1, #88]	; 0x58
 80065d0:	e001      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d02f      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ea:	d00e      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x582>
 80065ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f0:	d814      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d015      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065fa:	d10f      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	4a1a      	ldr	r2, [pc, #104]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006606:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006608:	e00c      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3304      	adds	r3, #4
 800660e:	2101      	movs	r1, #1
 8006610:	4618      	mov	r0, r3
 8006612:	f000 ff37 	bl	8007484 <RCCEx_PLL2_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800661a:	e003      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
      break;
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800662a:	4b10      	ldr	r3, [pc, #64]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800662c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006636:	490d      	ldr	r1, [pc, #52]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006638:	4313      	orrs	r3, r2
 800663a:	650b      	str	r3, [r1, #80]	; 0x50
 800663c:	e001      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d033      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	2b03      	cmp	r3, #3
 8006654:	d81c      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006697 	.word	0x08006697
 8006660:	08006671 	.word	0x08006671
 8006664:	0800667f 	.word	0x0800667f
 8006668:	08006697 	.word	0x08006697
 800666c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006670:	4bb8      	ldr	r3, [pc, #736]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	4ab7      	ldr	r2, [pc, #732]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800667a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800667c:	e00c      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3304      	adds	r3, #4
 8006682:	2102      	movs	r1, #2
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fefd 	bl	8007484 <RCCEx_PLL2_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800668e:	e003      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	75fb      	strb	r3, [r7, #23]
      break;
 8006694:	e000      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800669e:	4bad      	ldr	r3, [pc, #692]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	f023 0203 	bic.w	r2, r3, #3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066aa:	49aa      	ldr	r1, [pc, #680]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066b0:	e001      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
 80066b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8086 	beq.w	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066c4:	4ba4      	ldr	r3, [pc, #656]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4aa3      	ldr	r2, [pc, #652]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066d0:	f7fb fa1c 	bl	8001b0c <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066d6:	e009      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d8:	f7fb fa18 	bl	8001b0c <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b64      	cmp	r3, #100	; 0x64
 80066e4:	d902      	bls.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	75fb      	strb	r3, [r7, #23]
        break;
 80066ea:	e005      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066ec:	4b9a      	ldr	r3, [pc, #616]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0ef      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d166      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066fe:	4b95      	ldr	r3, [pc, #596]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006700:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006708:	4053      	eors	r3, r2
 800670a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800670e:	2b00      	cmp	r3, #0
 8006710:	d013      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006712:	4b90      	ldr	r3, [pc, #576]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800671c:	4b8d      	ldr	r3, [pc, #564]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800671e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006720:	4a8c      	ldr	r2, [pc, #560]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006726:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006728:	4b8a      	ldr	r3, [pc, #552]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	4a89      	ldr	r2, [pc, #548]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800672e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006732:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006734:	4a87      	ldr	r2, [pc, #540]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006744:	d115      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006746:	f7fb f9e1 	bl	8001b0c <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800674c:	e00b      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674e:	f7fb f9dd 	bl	8001b0c <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	f241 3288 	movw	r2, #5000	; 0x1388
 800675c:	4293      	cmp	r3, r2
 800675e:	d902      	bls.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	75fb      	strb	r3, [r7, #23]
            break;
 8006764:	e005      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006766:	4b7b      	ldr	r3, [pc, #492]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0ed      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d126      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800677e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006786:	d10d      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006788:	4b72      	ldr	r3, [pc, #456]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006796:	0919      	lsrs	r1, r3, #4
 8006798:	4b70      	ldr	r3, [pc, #448]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800679a:	400b      	ands	r3, r1
 800679c:	496d      	ldr	r1, [pc, #436]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	610b      	str	r3, [r1, #16]
 80067a2:	e005      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80067a4:	4b6b      	ldr	r3, [pc, #428]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	4a6a      	ldr	r2, [pc, #424]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067ae:	6113      	str	r3, [r2, #16]
 80067b0:	4b68      	ldr	r3, [pc, #416]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067be:	4965      	ldr	r1, [pc, #404]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	670b      	str	r3, [r1, #112]	; 0x70
 80067c4:	e004      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	75bb      	strb	r3, [r7, #22]
 80067ca:	e001      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d07e      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e0:	2b28      	cmp	r3, #40	; 0x28
 80067e2:	d867      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	080068bb 	.word	0x080068bb
 80067f0:	080068b5 	.word	0x080068b5
 80067f4:	080068b5 	.word	0x080068b5
 80067f8:	080068b5 	.word	0x080068b5
 80067fc:	080068b5 	.word	0x080068b5
 8006800:	080068b5 	.word	0x080068b5
 8006804:	080068b5 	.word	0x080068b5
 8006808:	080068b5 	.word	0x080068b5
 800680c:	08006891 	.word	0x08006891
 8006810:	080068b5 	.word	0x080068b5
 8006814:	080068b5 	.word	0x080068b5
 8006818:	080068b5 	.word	0x080068b5
 800681c:	080068b5 	.word	0x080068b5
 8006820:	080068b5 	.word	0x080068b5
 8006824:	080068b5 	.word	0x080068b5
 8006828:	080068b5 	.word	0x080068b5
 800682c:	080068a3 	.word	0x080068a3
 8006830:	080068b5 	.word	0x080068b5
 8006834:	080068b5 	.word	0x080068b5
 8006838:	080068b5 	.word	0x080068b5
 800683c:	080068b5 	.word	0x080068b5
 8006840:	080068b5 	.word	0x080068b5
 8006844:	080068b5 	.word	0x080068b5
 8006848:	080068b5 	.word	0x080068b5
 800684c:	080068bb 	.word	0x080068bb
 8006850:	080068b5 	.word	0x080068b5
 8006854:	080068b5 	.word	0x080068b5
 8006858:	080068b5 	.word	0x080068b5
 800685c:	080068b5 	.word	0x080068b5
 8006860:	080068b5 	.word	0x080068b5
 8006864:	080068b5 	.word	0x080068b5
 8006868:	080068b5 	.word	0x080068b5
 800686c:	080068bb 	.word	0x080068bb
 8006870:	080068b5 	.word	0x080068b5
 8006874:	080068b5 	.word	0x080068b5
 8006878:	080068b5 	.word	0x080068b5
 800687c:	080068b5 	.word	0x080068b5
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068b5 	.word	0x080068b5
 8006888:	080068b5 	.word	0x080068b5
 800688c:	080068bb 	.word	0x080068bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	2101      	movs	r1, #1
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fdf4 	bl	8007484 <RCCEx_PLL2_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068a0:	e00c      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3324      	adds	r3, #36	; 0x24
 80068a6:	2101      	movs	r1, #1
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fe9d 	bl	80075e8 <RCCEx_PLL3_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068b2:	e003      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	75fb      	strb	r3, [r7, #23]
      break;
 80068b8:	e000      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80068ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068c2:	4b24      	ldr	r3, [pc, #144]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ce:	4921      	ldr	r1, [pc, #132]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	654b      	str	r3, [r1, #84]	; 0x54
 80068d4:	e001      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d03e      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d820      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006937 	.word	0x08006937
 80068f8:	0800690d 	.word	0x0800690d
 80068fc:	0800691f 	.word	0x0800691f
 8006900:	08006937 	.word	0x08006937
 8006904:	08006937 	.word	0x08006937
 8006908:	08006937 	.word	0x08006937
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	2101      	movs	r1, #1
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fdb6 	bl	8007484 <RCCEx_PLL2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800691c:	e00c      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3324      	adds	r3, #36	; 0x24
 8006922:	2101      	movs	r1, #1
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fe5f 	bl	80075e8 <RCCEx_PLL3_Config>
 800692a:	4603      	mov	r3, r0
 800692c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800692e:	e003      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
      break;
 8006934:	e000      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d110      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800693e:	4b05      	ldr	r3, [pc, #20]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	f023 0207 	bic.w	r2, r3, #7
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694a:	4902      	ldr	r1, [pc, #8]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800694c:	4313      	orrs	r3, r2
 800694e:	654b      	str	r3, [r1, #84]	; 0x54
 8006950:	e008      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006952:	bf00      	nop
 8006954:	58024400 	.word	0x58024400
 8006958:	58024800 	.word	0x58024800
 800695c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d039      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006976:	2b05      	cmp	r3, #5
 8006978:	d820      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x934>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069c3 	.word	0x080069c3
 8006984:	08006999 	.word	0x08006999
 8006988:	080069ab 	.word	0x080069ab
 800698c:	080069c3 	.word	0x080069c3
 8006990:	080069c3 	.word	0x080069c3
 8006994:	080069c3 	.word	0x080069c3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	2101      	movs	r1, #1
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fd70 	bl	8007484 <RCCEx_PLL2_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069a8:	e00c      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3324      	adds	r3, #36	; 0x24
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fe19 	bl	80075e8 <RCCEx_PLL3_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069ba:	e003      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	75fb      	strb	r3, [r7, #23]
      break;
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80069c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069ca:	4bb7      	ldr	r3, [pc, #732]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ce:	f023 0207 	bic.w	r2, r3, #7
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d8:	49b3      	ldr	r1, [pc, #716]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	658b      	str	r3, [r1, #88]	; 0x58
 80069de:	e001      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d04b      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069fa:	d02e      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80069fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a00:	d828      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a06:	d02a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0c:	d822      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a12:	d026      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006a14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a18:	d81c      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a1e:	d010      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a24:	d816      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01d      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a2e:	d111      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3304      	adds	r3, #4
 8006a34:	2100      	movs	r1, #0
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fd24 	bl	8007484 <RCCEx_PLL2_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a40:	e012      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3324      	adds	r3, #36	; 0x24
 8006a46:	2102      	movs	r1, #2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fdcd 	bl	80075e8 <RCCEx_PLL3_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a52:	e009      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	75fb      	strb	r3, [r7, #23]
      break;
 8006a58:	e006      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e004      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e002      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a62:	bf00      	nop
 8006a64:	e000      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a6e:	4b8e      	ldr	r3, [pc, #568]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a7c:	498a      	ldr	r1, [pc, #552]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	654b      	str	r3, [r1, #84]	; 0x54
 8006a82:	e001      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d04b      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a9e:	d02e      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006aa0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006aa4:	d828      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aaa:	d02a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab0:	d822      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ab2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ab6:	d026      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006abc:	d81c      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac2:	d010      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac8:	d816      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01d      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad2:	d111      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fcd2 	bl	8007484 <RCCEx_PLL2_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ae4:	e012      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3324      	adds	r3, #36	; 0x24
 8006aea:	2102      	movs	r1, #2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fd7b 	bl	80075e8 <RCCEx_PLL3_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006af6:	e009      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
      break;
 8006afc:	e006      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006afe:	bf00      	nop
 8006b00:	e004      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b02:	bf00      	nop
 8006b04:	e002      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b06:	bf00      	nop
 8006b08:	e000      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b12:	4b65      	ldr	r3, [pc, #404]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b20:	4961      	ldr	r1, [pc, #388]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	658b      	str	r3, [r1, #88]	; 0x58
 8006b26:	e001      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d04b      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b42:	d02e      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006b44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b48:	d828      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4e:	d02a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b54:	d822      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b5a:	d026      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006b5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b60:	d81c      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b66:	d010      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b6c:	d816      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d01d      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b76:	d111      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fc80 	bl	8007484 <RCCEx_PLL2_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b88:	e012      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3324      	adds	r3, #36	; 0x24
 8006b8e:	2102      	movs	r1, #2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fd29 	bl	80075e8 <RCCEx_PLL3_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b9a:	e009      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba0:	e006      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e004      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e002      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bb6:	4b3c      	ldr	r3, [pc, #240]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bc4:	4938      	ldr	r1, [pc, #224]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	658b      	str	r3, [r1, #88]	; 0x58
 8006bca:	e001      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01a      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be6:	d10a      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3324      	adds	r3, #36	; 0x24
 8006bec:	2102      	movs	r1, #2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fcfa 	bl	80075e8 <RCCEx_PLL3_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c0c:	4926      	ldr	r1, [pc, #152]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01a      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c28:	d10a      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3324      	adds	r3, #36	; 0x24
 8006c2e:	2102      	movs	r1, #2
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fcd9 	bl	80075e8 <RCCEx_PLL3_Config>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c40:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c4e:	4916      	ldr	r1, [pc, #88]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d036      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c6a:	d01f      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c70:	d817      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7a:	d009      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006c7c:	e011      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3304      	adds	r3, #4
 8006c82:	2100      	movs	r1, #0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fbfd 	bl	8007484 <RCCEx_PLL2_Config>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c8e:	e00e      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3324      	adds	r3, #36	; 0x24
 8006c94:	2102      	movs	r1, #2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fca6 	bl	80075e8 <RCCEx_PLL3_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ca0:	e005      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca6:	e002      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006ca8:	58024400 	.word	0x58024400
      break;
 8006cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cb4:	4b93      	ldr	r3, [pc, #588]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006cc2:	4990      	ldr	r1, [pc, #576]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	658b      	str	r3, [r1, #88]	; 0x58
 8006cc8:	e001      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d033      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ce4:	d01c      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006ce6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cea:	d816      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf0:	d003      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cf6:	d007      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006cf8:	e00f      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cfa:	4b82      	ldr	r3, [pc, #520]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	4a81      	ldr	r2, [pc, #516]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d06:	e00c      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3324      	adds	r3, #36	; 0x24
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fc6a 	bl	80075e8 <RCCEx_PLL3_Config>
 8006d14:	4603      	mov	r3, r0
 8006d16:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d18:	e003      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d1e:	e000      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d28:	4b76      	ldr	r3, [pc, #472]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d36:	4973      	ldr	r1, [pc, #460]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	654b      	str	r3, [r1, #84]	; 0x54
 8006d3c:	e001      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d029      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5a:	d007      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006d5c:	e00f      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d5e:	4b69      	ldr	r3, [pc, #420]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	4a68      	ldr	r2, [pc, #416]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d6a:	e00b      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2102      	movs	r1, #2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fb86 	bl	8007484 <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d7c:	e002      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]
      break;
 8006d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d8a:	4b5e      	ldr	r3, [pc, #376]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d96:	495b      	ldr	r1, [pc, #364]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d9c:	e001      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3324      	adds	r3, #36	; 0x24
 8006db2:	2102      	movs	r1, #2
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fc17 	bl	80075e8 <RCCEx_PLL3_Config>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d030      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dd8:	d017      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dde:	d811      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de4:	d013      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dea:	d80b      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d010      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df4:	d106      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df6:	4b43      	ldr	r3, [pc, #268]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	4a42      	ldr	r2, [pc, #264]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e02:	e007      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	75fb      	strb	r3, [r7, #23]
      break;
 8006e08:	e004      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e0a:	bf00      	nop
 8006e0c:	e002      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e000      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d109      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e1a:	4b3a      	ldr	r3, [pc, #232]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e26:	4937      	ldr	r1, [pc, #220]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	654b      	str	r3, [r1, #84]	; 0x54
 8006e2c:	e001      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
 8006e30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e3e:	4b31      	ldr	r3, [pc, #196]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	492e      	ldr	r1, [pc, #184]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e5c:	4b29      	ldr	r3, [pc, #164]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e6a:	4926      	ldr	r1, [pc, #152]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e7c:	4b21      	ldr	r3, [pc, #132]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e88:	491e      	ldr	r1, [pc, #120]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00d      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e9a:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	4a19      	ldr	r2, [pc, #100]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ea4:	6113      	str	r3, [r2, #16]
 8006ea6:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006eb0:	4914      	ldr	r1, [pc, #80]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da08      	bge.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ebe:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eca:	490e      	ldr	r1, [pc, #56]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006edc:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eea:	4906      	ldr	r1, [pc, #24]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006ef0:	7dbb      	ldrb	r3, [r7, #22]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e000      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	58024400 	.word	0x58024400

08006f08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f0c:	f7ff f860 	bl	8005fd0 <HAL_RCC_GetHCLKFreq>
 8006f10:	4602      	mov	r2, r0
 8006f12:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	091b      	lsrs	r3, r3, #4
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	4904      	ldr	r1, [pc, #16]	; (8006f30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f1e:	5ccb      	ldrb	r3, [r1, r3]
 8006f20:	f003 031f 	and.w	r3, r3, #31
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	58024400 	.word	0x58024400
 8006f30:	08009870 	.word	0x08009870

08006f34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b089      	sub	sp, #36	; 0x24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f3c:	4ba1      	ldr	r3, [pc, #644]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006f46:	4b9f      	ldr	r3, [pc, #636]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	0b1b      	lsrs	r3, r3, #12
 8006f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f52:	4b9c      	ldr	r3, [pc, #624]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f56:	091b      	lsrs	r3, r3, #4
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006f5e:	4b99      	ldr	r3, [pc, #612]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f62:	08db      	lsrs	r3, r3, #3
 8006f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	fb02 f303 	mul.w	r3, r2, r3
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8111 	beq.w	80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	f000 8083 	beq.w	8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	f200 80a1 	bhi.w	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d056      	beq.n	800704c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f9e:	e099      	b.n	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa0:	4b88      	ldr	r3, [pc, #544]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d02d      	beq.n	8007008 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fac:	4b85      	ldr	r3, [pc, #532]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	08db      	lsrs	r3, r3, #3
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	4a84      	ldr	r2, [pc, #528]	; (80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	ee07 3a90 	vmov	s15, r3
 8006fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd6:	4b7b      	ldr	r3, [pc, #492]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007002:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007006:	e087      	b.n	8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701a:	4b6a      	ldr	r3, [pc, #424]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702a:	ed97 6a03 	vldr	s12, [r7, #12]
 800702e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800703e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007046:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800704a:	e065      	b.n	8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800705a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705e:	4b59      	ldr	r3, [pc, #356]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007072:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800708e:	e043      	b.n	8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800709e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a2:	4b48      	ldr	r3, [pc, #288]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070d2:	e021      	b.n	8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e6:	4b37      	ldr	r3, [pc, #220]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007116:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007118:	4b2a      	ldr	r3, [pc, #168]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	0a5b      	lsrs	r3, r3, #9
 800711e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800712e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007132:	edd7 6a07 	vldr	s13, [r7, #28]
 8007136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800713e:	ee17 2a90 	vmov	r2, s15
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007146:	4b1f      	ldr	r3, [pc, #124]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	0c1b      	lsrs	r3, r3, #16
 800714c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800715c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007160:	edd7 6a07 	vldr	s13, [r7, #28]
 8007164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800716c:	ee17 2a90 	vmov	r2, s15
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007174:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	0e1b      	lsrs	r3, r3, #24
 800717a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800718a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800718e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719a:	ee17 2a90 	vmov	r2, s15
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071a2:	e008      	b.n	80071b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	609a      	str	r2, [r3, #8]
}
 80071b6:	bf00      	nop
 80071b8:	3724      	adds	r7, #36	; 0x24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	58024400 	.word	0x58024400
 80071c8:	03d09000 	.word	0x03d09000
 80071cc:	46000000 	.word	0x46000000
 80071d0:	4c742400 	.word	0x4c742400
 80071d4:	4a742400 	.word	0x4a742400
 80071d8:	4afe502a 	.word	0x4afe502a

080071dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80071dc:	b480      	push	{r7}
 80071de:	b089      	sub	sp, #36	; 0x24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071e4:	4ba1      	ldr	r3, [pc, #644]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80071ee:	4b9f      	ldr	r3, [pc, #636]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	0d1b      	lsrs	r3, r3, #20
 80071f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071fa:	4b9c      	ldr	r3, [pc, #624]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	0a1b      	lsrs	r3, r3, #8
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007206:	4b99      	ldr	r3, [pc, #612]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720a:	08db      	lsrs	r3, r3, #3
 800720c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	fb02 f303 	mul.w	r3, r2, r3
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 8111 	beq.w	800744c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b02      	cmp	r3, #2
 800722e:	f000 8083 	beq.w	8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b02      	cmp	r3, #2
 8007236:	f200 80a1 	bhi.w	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d056      	beq.n	80072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007246:	e099      	b.n	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007248:	4b88      	ldr	r3, [pc, #544]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d02d      	beq.n	80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007254:	4b85      	ldr	r3, [pc, #532]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	08db      	lsrs	r3, r3, #3
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	4a84      	ldr	r2, [pc, #528]	; (8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
 8007264:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	ee07 3a90 	vmov	s15, r3
 800726c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727e:	4b7b      	ldr	r3, [pc, #492]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007292:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072ae:	e087      	b.n	80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c2:	4b6a      	ldr	r3, [pc, #424]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072f2:	e065      	b.n	80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007306:	4b59      	ldr	r3, [pc, #356]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007316:	ed97 6a03 	vldr	s12, [r7, #12]
 800731a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800731e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007336:	e043      	b.n	80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007342:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734a:	4b48      	ldr	r3, [pc, #288]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735a:	ed97 6a03 	vldr	s12, [r7, #12]
 800735e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800736e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800737a:	e021      	b.n	80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007386:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800738a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738e:	4b37      	ldr	r3, [pc, #220]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739e:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80073c0:	4b2a      	ldr	r3, [pc, #168]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	0a5b      	lsrs	r3, r3, #9
 80073c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073da:	edd7 6a07 	vldr	s13, [r7, #28]
 80073de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e6:	ee17 2a90 	vmov	r2, s15
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80073ee:	4b1f      	ldr	r3, [pc, #124]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	0c1b      	lsrs	r3, r3, #16
 80073f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007408:	edd7 6a07 	vldr	s13, [r7, #28]
 800740c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007414:	ee17 2a90 	vmov	r2, s15
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800741c:	4b13      	ldr	r3, [pc, #76]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	0e1b      	lsrs	r3, r3, #24
 8007422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007436:	edd7 6a07 	vldr	s13, [r7, #28]
 800743a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007442:	ee17 2a90 	vmov	r2, s15
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800744a:	e008      	b.n	800745e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	609a      	str	r2, [r3, #8]
}
 800745e:	bf00      	nop
 8007460:	3724      	adds	r7, #36	; 0x24
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	58024400 	.word	0x58024400
 8007470:	03d09000 	.word	0x03d09000
 8007474:	46000000 	.word	0x46000000
 8007478:	4c742400 	.word	0x4c742400
 800747c:	4a742400 	.word	0x4a742400
 8007480:	4afe502a 	.word	0x4afe502a

08007484 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007492:	4b53      	ldr	r3, [pc, #332]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b03      	cmp	r3, #3
 800749c:	d101      	bne.n	80074a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e099      	b.n	80075d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074a2:	4b4f      	ldr	r3, [pc, #316]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a4e      	ldr	r2, [pc, #312]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ae:	f7fa fb2d 	bl	8001b0c <HAL_GetTick>
 80074b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074b4:	e008      	b.n	80074c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074b6:	f7fa fb29 	bl	8001b0c <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e086      	b.n	80075d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074c8:	4b45      	ldr	r3, [pc, #276]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f0      	bne.n	80074b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074d4:	4b42      	ldr	r3, [pc, #264]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	031b      	lsls	r3, r3, #12
 80074e2:	493f      	ldr	r1, [pc, #252]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	628b      	str	r3, [r1, #40]	; 0x28
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	025b      	lsls	r3, r3, #9
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	3b01      	subs	r3, #1
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	3b01      	subs	r3, #1
 8007512:	061b      	lsls	r3, r3, #24
 8007514:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007518:	4931      	ldr	r1, [pc, #196]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800751a:	4313      	orrs	r3, r2
 800751c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800751e:	4b30      	ldr	r3, [pc, #192]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	492d      	ldr	r1, [pc, #180]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007530:	4b2b      	ldr	r3, [pc, #172]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f023 0220 	bic.w	r2, r3, #32
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	4928      	ldr	r1, [pc, #160]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007542:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	4a26      	ldr	r2, [pc, #152]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007548:	f023 0310 	bic.w	r3, r3, #16
 800754c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800754e:	4b24      	ldr	r3, [pc, #144]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007552:	4b24      	ldr	r3, [pc, #144]	; (80075e4 <RCCEx_PLL2_Config+0x160>)
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	69d2      	ldr	r2, [r2, #28]
 800755a:	00d2      	lsls	r2, r2, #3
 800755c:	4920      	ldr	r1, [pc, #128]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800755e:	4313      	orrs	r3, r2
 8007560:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007562:	4b1f      	ldr	r3, [pc, #124]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	4a1e      	ldr	r2, [pc, #120]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007568:	f043 0310 	orr.w	r3, r3, #16
 800756c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007574:	4b1a      	ldr	r3, [pc, #104]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800757a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800757e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007580:	e00f      	b.n	80075a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d106      	bne.n	8007596 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007588:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	4a14      	ldr	r2, [pc, #80]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800758e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007594:	e005      	b.n	80075a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007596:	4b12      	ldr	r3, [pc, #72]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	4a11      	ldr	r2, [pc, #68]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 800759c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075a2:	4b0f      	ldr	r3, [pc, #60]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a0e      	ldr	r2, [pc, #56]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ae:	f7fa faad 	bl	8001b0c <HAL_GetTick>
 80075b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075b4:	e008      	b.n	80075c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075b6:	f7fa faa9 	bl	8001b0c <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e006      	b.n	80075d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <RCCEx_PLL2_Config+0x15c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	58024400 	.word	0x58024400
 80075e4:	ffff0007 	.word	0xffff0007

080075e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075f6:	4b53      	ldr	r3, [pc, #332]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d101      	bne.n	8007606 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e099      	b.n	800773a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007606:	4b4f      	ldr	r3, [pc, #316]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a4e      	ldr	r2, [pc, #312]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 800760c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007612:	f7fa fa7b 	bl	8001b0c <HAL_GetTick>
 8007616:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007618:	e008      	b.n	800762c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800761a:	f7fa fa77 	bl	8001b0c <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e086      	b.n	800773a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800762c:	4b45      	ldr	r3, [pc, #276]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f0      	bne.n	800761a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007638:	4b42      	ldr	r3, [pc, #264]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 800763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	051b      	lsls	r3, r3, #20
 8007646:	493f      	ldr	r1, [pc, #252]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007648:	4313      	orrs	r3, r2
 800764a:	628b      	str	r3, [r1, #40]	; 0x28
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	3b01      	subs	r3, #1
 8007652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	3b01      	subs	r3, #1
 800765c:	025b      	lsls	r3, r3, #9
 800765e:	b29b      	uxth	r3, r3
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	3b01      	subs	r3, #1
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	3b01      	subs	r3, #1
 8007676:	061b      	lsls	r3, r3, #24
 8007678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800767c:	4931      	ldr	r1, [pc, #196]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 800767e:	4313      	orrs	r3, r2
 8007680:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007682:	4b30      	ldr	r3, [pc, #192]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	492d      	ldr	r1, [pc, #180]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007690:	4313      	orrs	r3, r2
 8007692:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007694:	4b2b      	ldr	r3, [pc, #172]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	4928      	ldr	r1, [pc, #160]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076a6:	4b27      	ldr	r3, [pc, #156]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	4a26      	ldr	r2, [pc, #152]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076b2:	4b24      	ldr	r3, [pc, #144]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076b6:	4b24      	ldr	r3, [pc, #144]	; (8007748 <RCCEx_PLL3_Config+0x160>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	69d2      	ldr	r2, [r2, #28]
 80076be:	00d2      	lsls	r2, r2, #3
 80076c0:	4920      	ldr	r1, [pc, #128]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076c6:	4b1f      	ldr	r3, [pc, #124]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076d8:	4b1a      	ldr	r3, [pc, #104]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	4a19      	ldr	r2, [pc, #100]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076e4:	e00f      	b.n	8007706 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d106      	bne.n	80076fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076ec:	4b15      	ldr	r3, [pc, #84]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	4a14      	ldr	r2, [pc, #80]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076f8:	e005      	b.n	8007706 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076fa:	4b12      	ldr	r3, [pc, #72]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	4a11      	ldr	r2, [pc, #68]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007704:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007706:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a0e      	ldr	r2, [pc, #56]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 800770c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007712:	f7fa f9fb 	bl	8001b0c <HAL_GetTick>
 8007716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007718:	e008      	b.n	800772c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800771a:	f7fa f9f7 	bl	8001b0c <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e006      	b.n	800773a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <RCCEx_PLL3_Config+0x15c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0f0      	beq.n	800771a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	58024400 	.word	0x58024400
 8007748:	ffff0007 	.word	0xffff0007

0800774c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e0eb      	b.n	800793a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a75      	ldr	r2, [pc, #468]	; (8007944 <HAL_SPI_Init+0x1f8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00f      	beq.n	8007792 <HAL_SPI_Init+0x46>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a74      	ldr	r2, [pc, #464]	; (8007948 <HAL_SPI_Init+0x1fc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00a      	beq.n	8007792 <HAL_SPI_Init+0x46>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a72      	ldr	r2, [pc, #456]	; (800794c <HAL_SPI_Init+0x200>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d005      	beq.n	8007792 <HAL_SPI_Init+0x46>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d901      	bls.n	8007792 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e0d3      	b.n	800793a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fb8a 	bl	8007eac <SPI_GetPacketSize>
 8007798:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a69      	ldr	r2, [pc, #420]	; (8007944 <HAL_SPI_Init+0x1f8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00c      	beq.n	80077be <HAL_SPI_Init+0x72>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a67      	ldr	r2, [pc, #412]	; (8007948 <HAL_SPI_Init+0x1fc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d007      	beq.n	80077be <HAL_SPI_Init+0x72>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a66      	ldr	r2, [pc, #408]	; (800794c <HAL_SPI_Init+0x200>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d002      	beq.n	80077be <HAL_SPI_Init+0x72>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b08      	cmp	r3, #8
 80077bc:	d811      	bhi.n	80077e2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80077c2:	4a60      	ldr	r2, [pc, #384]	; (8007944 <HAL_SPI_Init+0x1f8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d009      	beq.n	80077dc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a5e      	ldr	r2, [pc, #376]	; (8007948 <HAL_SPI_Init+0x1fc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_SPI_Init+0x90>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a5d      	ldr	r2, [pc, #372]	; (800794c <HAL_SPI_Init+0x200>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d104      	bne.n	80077e6 <HAL_SPI_Init+0x9a>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d901      	bls.n	80077e6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e0a9      	b.n	800793a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7f9 fba0 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0201 	bic.w	r2, r2, #1
 8007816:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007820:	d119      	bne.n	8007856 <HAL_SPI_Init+0x10a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800782a:	d103      	bne.n	8007834 <HAL_SPI_Init+0xe8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	2b00      	cmp	r3, #0
 8007832:	d008      	beq.n	8007846 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10c      	bne.n	8007856 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007844:	d107      	bne.n	8007856 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007854:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69da      	ldr	r2, [r3, #28]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	431a      	orrs	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007868:	ea42 0103 	orr.w	r1, r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b6:	ea42 0103 	orr.w	r1, r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d113      	bne.n	80078f6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40013000 	.word	0x40013000
 8007948:	40003800 	.word	0x40003800
 800794c:	40003c00 	.word	0x40003c00

08007950 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08a      	sub	sp, #40	; 0x28
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007968:	6a3a      	ldr	r2, [r7, #32]
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	4013      	ands	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007978:	2300      	movs	r3, #0
 800797a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007982:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3330      	adds	r3, #48	; 0x30
 800798a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007992:	2b00      	cmp	r3, #0
 8007994:	d113      	bne.n	80079be <HAL_SPI_IRQHandler+0x6e>
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10e      	bne.n	80079be <HAL_SPI_IRQHandler+0x6e>
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d009      	beq.n	80079be <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
    handled = 1UL;
 80079ba:	2301      	movs	r3, #1
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10f      	bne.n	80079e8 <HAL_SPI_IRQHandler+0x98>
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <HAL_SPI_IRQHandler+0x98>
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
    handled = 1UL;
 80079e4:	2301      	movs	r3, #1
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f003 0320 	and.w	r3, r3, #32
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10f      	bne.n	8007a12 <HAL_SPI_IRQHandler+0xc2>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <HAL_SPI_IRQHandler+0xc2>
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f003 0304 	and.w	r3, r3, #4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d105      	bne.n	8007a12 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
    handled = 1UL;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f040 816f 	bne.w	8007cf8 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80a0 	beq.w	8007b66 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0208 	orr.w	r2, r2, #8
 8007a34:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	699a      	ldr	r2, [r3, #24]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0210 	orr.w	r2, r2, #16
 8007a44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699a      	ldr	r2, [r3, #24]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a54:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0208 	bic.w	r2, r2, #8
 8007a64:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00f      	beq.n	8007a90 <HAL_SPI_IRQHandler+0x140>
 8007a70:	7cfb      	ldrb	r3, [r7, #19]
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d004      	beq.n	8007a80 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <HAL_SPI_IRQHandler+0x140>
 8007a80:	7cfb      	ldrb	r3, [r7, #19]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d059      	beq.n	8007b3a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d154      	bne.n	8007b3a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d13d      	bne.n	8007b1a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007a9e:	e036      	b.n	8007b0e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b0f      	cmp	r3, #15
 8007aa6:	d90b      	bls.n	8007ac0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ab2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab8:	1d1a      	adds	r2, r3, #4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	665a      	str	r2, [r3, #100]	; 0x64
 8007abe:	e01d      	b.n	8007afc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b07      	cmp	r3, #7
 8007ac6:	d90b      	bls.n	8007ae0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	8812      	ldrh	r2, [r2, #0]
 8007ad0:	b292      	uxth	r2, r2
 8007ad2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad8:	1c9a      	adds	r2, r3, #2
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	665a      	str	r2, [r3, #100]	; 0x64
 8007ade:	e00d      	b.n	8007afc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1c2      	bne.n	8007aa0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f926 	bl	8007d6c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7f9 f9b2 	bl	8000e9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007b38:	e0e3      	b.n	8007d02 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007b3a:	7cfb      	ldrb	r3, [r7, #19]
 8007b3c:	2b05      	cmp	r3, #5
 8007b3e:	d103      	bne.n	8007b48 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f8ef 	bl	8007d24 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007b46:	e0d9      	b.n	8007cfc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007b48:	7cfb      	ldrb	r3, [r7, #19]
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d103      	bne.n	8007b56 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7f9 f974 	bl	8000e3c <HAL_SPI_RxCpltCallback>
    return;
 8007b54:	e0d2      	b.n	8007cfc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007b56:	7cfb      	ldrb	r3, [r7, #19]
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	f040 80cf 	bne.w	8007cfc <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f8d6 	bl	8007d10 <HAL_SPI_TxCpltCallback>
    return;
 8007b64:	e0ca      	b.n	8007cfc <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00d      	beq.n	8007b8c <HAL_SPI_IRQHandler+0x23c>
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d008      	beq.n	8007b8c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	699a      	ldr	r2, [r3, #24]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b88:	619a      	str	r2, [r3, #24]

    return;
 8007b8a:	e0ba      	b.n	8007d02 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 80b5 	beq.w	8007d02 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00f      	beq.n	8007bc2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba8:	f043 0204 	orr.w	r2, r3, #4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699a      	ldr	r2, [r3, #24]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bc0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00f      	beq.n	8007bec <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd2:	f043 0201 	orr.w	r2, r3, #1
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00f      	beq.n	8007c16 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bfc:	f043 0208 	orr.w	r2, r3, #8
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	699a      	ldr	r2, [r3, #24]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c14:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00f      	beq.n	8007c40 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0220 	orr.w	r2, r2, #32
 8007c3e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d05a      	beq.n	8007d00 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0201 	bic.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6919      	ldr	r1, [r3, #16]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4b28      	ldr	r3, [pc, #160]	; (8007d08 <HAL_SPI_IRQHandler+0x3b8>)
 8007c66:	400b      	ands	r3, r1
 8007c68:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c74:	d138      	bne.n	8007ce8 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007c84:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d013      	beq.n	8007cb6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c92:	4a1e      	ldr	r2, [pc, #120]	; (8007d0c <HAL_SPI_IRQHandler+0x3bc>)
 8007c94:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fb fa96 	bl	80031cc <HAL_DMA_Abort_IT>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d020      	beq.n	8007d00 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc2:	4a12      	ldr	r2, [pc, #72]	; (8007d0c <HAL_SPI_IRQHandler+0x3bc>)
 8007cc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fb fa7e 	bl	80031cc <HAL_DMA_Abort_IT>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d014      	beq.n	8007d00 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ce6:	e00b      	b.n	8007d00 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7f9 f8d3 	bl	8000e9c <HAL_SPI_ErrorCallback>
    return;
 8007cf6:	e003      	b.n	8007d00 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007cf8:	bf00      	nop
 8007cfa:	e002      	b.n	8007d02 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007cfc:	bf00      	nop
 8007cfe:	e000      	b.n	8007d02 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007d00:	bf00      	nop
  }
}
 8007d02:	3728      	adds	r7, #40	; 0x28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	fffffc94 	.word	0xfffffc94
 8007d0c:	08007d39 	.word	0x08007d39

08007d10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7f9 f89c 	bl	8000e9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0208 	orr.w	r2, r2, #8
 8007d8a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0210 	orr.w	r2, r2, #16
 8007d9a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6919      	ldr	r1, [r3, #16]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4b3c      	ldr	r3, [pc, #240]	; (8007ea8 <SPI_CloseTransfer+0x13c>)
 8007db8:	400b      	ands	r3, r1
 8007dba:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689a      	ldr	r2, [r3, #8]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007dca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d014      	beq.n	8007e02 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00f      	beq.n	8007e02 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699a      	ldr	r2, [r3, #24]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f042 0220 	orr.w	r2, r2, #32
 8007e00:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d014      	beq.n	8007e38 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00f      	beq.n	8007e38 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1e:	f043 0204 	orr.w	r2, r3, #4
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e36:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00f      	beq.n	8007e62 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e48:	f043 0201 	orr.w	r2, r3, #1
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e60:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00f      	beq.n	8007e8c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e72:	f043 0208 	orr.w	r2, r3, #8
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e8a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	fffffc90 	.word	0xfffffc90

08007eac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	3307      	adds	r3, #7
 8007eca:	08db      	lsrs	r3, r3, #3
 8007ecc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	fb02 f303 	mul.w	r3, r2, r3
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e042      	b.n	8007f7a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d106      	bne.n	8007f0c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7f9 f982 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2224      	movs	r2, #36	; 0x24
 8007f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0201 	bic.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fb7d 	bl	8008624 <UART_SetConfig>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d101      	bne.n	8007f34 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e022      	b.n	8007f7a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 f8d1 	bl	80090e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f042 0201 	orr.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 f958 	bl	8009228 <UART_CheckIdleState>
 8007f78:	4603      	mov	r3, r0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d168      	bne.n	800806e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <HAL_UART_Transmit_DMA+0x24>
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e061      	b.n	8008070 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_UART_Transmit_DMA+0x36>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e05a      	b.n	8008070 <HAL_UART_Transmit_DMA+0xec>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	88fa      	ldrh	r2, [r7, #6]
 8007fcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	88fa      	ldrh	r2, [r7, #6]
 8007fd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2221      	movs	r2, #33	; 0x21
 8007fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d02c      	beq.n	800804a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ff4:	4a20      	ldr	r2, [pc, #128]	; (8008078 <HAL_UART_Transmit_DMA+0xf4>)
 8007ff6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ffc:	4a1f      	ldr	r2, [pc, #124]	; (800807c <HAL_UART_Transmit_DMA+0xf8>)
 8007ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008004:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <HAL_UART_Transmit_DMA+0xfc>)
 8008006:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800800c:	2200      	movs	r2, #0
 800800e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008018:	4619      	mov	r1, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3328      	adds	r3, #40	; 0x28
 8008020:	461a      	mov	r2, r3
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	f7fa fb4a 	bl	80026bc <HAL_DMA_Start_IT>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00d      	beq.n	800804a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2210      	movs	r2, #16
 8008032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2220      	movs	r2, #32
 8008042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e012      	b.n	8008070 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2240      	movs	r2, #64	; 0x40
 8008050:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689a      	ldr	r2, [r3, #8]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008068:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e000      	b.n	8008070 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800806e:	2302      	movs	r3, #2
  }
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	08009461 	.word	0x08009461
 800807c:	080094b1 	.word	0x080094b1
 8008080:	080094cd 	.word	0x080094cd

08008084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80080aa:	4013      	ands	r3, r2
 80080ac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d118      	bne.n	80080e6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d013      	beq.n	80080e6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d104      	bne.n	80080d2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 8282 	beq.w	80085e0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
      }
      return;
 80080e4:	e27c      	b.n	80085e0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 80ef 	beq.w	80082cc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4b73      	ldr	r3, [pc, #460]	; (80082c0 <HAL_UART_IRQHandler+0x23c>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d105      	bne.n	8008104 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	4b72      	ldr	r3, [pc, #456]	; (80082c4 <HAL_UART_IRQHandler+0x240>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 80e4 	beq.w	80082cc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d010      	beq.n	8008130 <HAL_UART_IRQHandler+0xac>
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00b      	beq.n	8008130 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2201      	movs	r2, #1
 800811e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008126:	f043 0201 	orr.w	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d010      	beq.n	800815c <HAL_UART_IRQHandler+0xd8>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2202      	movs	r2, #2
 800814a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008152:	f043 0204 	orr.w	r2, r3, #4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b00      	cmp	r3, #0
 8008164:	d010      	beq.n	8008188 <HAL_UART_IRQHandler+0x104>
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00b      	beq.n	8008188 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2204      	movs	r2, #4
 8008176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800817e:	f043 0202 	orr.w	r2, r3, #2
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d015      	beq.n	80081be <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d104      	bne.n	80081a6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	4b48      	ldr	r3, [pc, #288]	; (80082c0 <HAL_UART_IRQHandler+0x23c>)
 80081a0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00b      	beq.n	80081be <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2208      	movs	r2, #8
 80081ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b4:	f043 0208 	orr.w	r2, r3, #8
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d011      	beq.n	80081ec <HAL_UART_IRQHandler+0x168>
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00c      	beq.n	80081ec <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e2:	f043 0220 	orr.w	r2, r3, #32
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 81f6 	beq.w	80085e4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d011      	beq.n	8008226 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800822c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008238:	2b40      	cmp	r3, #64	; 0x40
 800823a:	d004      	beq.n	8008246 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008242:	2b00      	cmp	r3, #0
 8008244:	d031      	beq.n	80082aa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 f8d8 	bl	80093fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008256:	2b40      	cmp	r3, #64	; 0x40
 8008258:	d123      	bne.n	80082a2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008268:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d013      	beq.n	800829a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008276:	4a14      	ldr	r2, [pc, #80]	; (80082c8 <HAL_UART_IRQHandler+0x244>)
 8008278:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800827e:	4618      	mov	r0, r3
 8008280:	f7fa ffa4 	bl	80031cc <HAL_DMA_Abort_IT>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d017      	beq.n	80082ba <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800828e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008294:	4610      	mov	r0, r2
 8008296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008298:	e00f      	b.n	80082ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7f8 fe1e 	bl	8000edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a0:	e00b      	b.n	80082ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7f8 fe1a 	bl	8000edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a8:	e007      	b.n	80082ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7f8 fe16 	bl	8000edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80082b8:	e194      	b.n	80085e4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ba:	bf00      	nop
    return;
 80082bc:	e192      	b.n	80085e4 <HAL_UART_IRQHandler+0x560>
 80082be:	bf00      	nop
 80082c0:	10000001 	.word	0x10000001
 80082c4:	04000120 	.word	0x04000120
 80082c8:	0800954d 	.word	0x0800954d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	f040 810f 	bne.w	80084f4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	f003 0310 	and.w	r3, r3, #16
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 8109 	beq.w	80084f4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 8103 	beq.w	80084f4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2210      	movs	r2, #16
 80082f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b40      	cmp	r3, #64	; 0x40
 8008302:	f040 80bb 	bne.w	800847c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a96      	ldr	r2, [pc, #600]	; (8008568 <HAL_UART_IRQHandler+0x4e4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d059      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a94      	ldr	r2, [pc, #592]	; (800856c <HAL_UART_IRQHandler+0x4e8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d053      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a92      	ldr	r2, [pc, #584]	; (8008570 <HAL_UART_IRQHandler+0x4ec>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d04d      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a90      	ldr	r2, [pc, #576]	; (8008574 <HAL_UART_IRQHandler+0x4f0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d047      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a8e      	ldr	r2, [pc, #568]	; (8008578 <HAL_UART_IRQHandler+0x4f4>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d041      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a8c      	ldr	r2, [pc, #560]	; (800857c <HAL_UART_IRQHandler+0x4f8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d03b      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a8a      	ldr	r2, [pc, #552]	; (8008580 <HAL_UART_IRQHandler+0x4fc>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d035      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a88      	ldr	r2, [pc, #544]	; (8008584 <HAL_UART_IRQHandler+0x500>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d02f      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a86      	ldr	r2, [pc, #536]	; (8008588 <HAL_UART_IRQHandler+0x504>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d029      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a84      	ldr	r2, [pc, #528]	; (800858c <HAL_UART_IRQHandler+0x508>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d023      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a82      	ldr	r2, [pc, #520]	; (8008590 <HAL_UART_IRQHandler+0x50c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d01d      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a80      	ldr	r2, [pc, #512]	; (8008594 <HAL_UART_IRQHandler+0x510>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d017      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a7e      	ldr	r2, [pc, #504]	; (8008598 <HAL_UART_IRQHandler+0x514>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d011      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a7c      	ldr	r2, [pc, #496]	; (800859c <HAL_UART_IRQHandler+0x518>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d00b      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a7a      	ldr	r2, [pc, #488]	; (80085a0 <HAL_UART_IRQHandler+0x51c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d005      	beq.n	80083c6 <HAL_UART_IRQHandler+0x342>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a78      	ldr	r2, [pc, #480]	; (80085a4 <HAL_UART_IRQHandler+0x520>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d105      	bne.n	80083d2 <HAL_UART_IRQHandler+0x34e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	e004      	b.n	80083dc <HAL_UART_IRQHandler+0x358>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80083de:	893b      	ldrh	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 8101 	beq.w	80085e8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083ec:	893a      	ldrh	r2, [r7, #8]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	f080 80fa 	bcs.w	80085e8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	893a      	ldrh	r2, [r7, #8]
 80083f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008406:	d02b      	beq.n	8008460 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008416:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0201 	bic.w	r2, r2, #1
 8008426:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008436:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0210 	bic.w	r2, r2, #16
 8008454:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845a:	4618      	mov	r0, r3
 800845c:	f7fa fb98 	bl	8002b90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800846c:	b29b      	uxth	r3, r3
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	b29b      	uxth	r3, r3
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f8c9 	bl	800860c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800847a:	e0b5      	b.n	80085e8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008488:	b29b      	uxth	r3, r3
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008494:	b29b      	uxth	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 80a8 	beq.w	80085ec <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800849c:	897b      	ldrh	r3, [r7, #10]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 80a4 	beq.w	80085ec <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084b2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6899      	ldr	r1, [r3, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	4b3a      	ldr	r3, [pc, #232]	; (80085a8 <HAL_UART_IRQHandler+0x524>)
 80084c0:	400b      	ands	r3, r1
 80084c2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0210 	bic.w	r2, r2, #16
 80084e6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084e8:	897b      	ldrh	r3, [r7, #10]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f88d 	bl	800860c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084f2:	e07b      	b.n	80085ec <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00d      	beq.n	800851a <HAL_UART_IRQHandler+0x496>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d008      	beq.n	800851a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f001 f84a 	bl	80095ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008518:	e06b      	b.n	80085f2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008520:	2b00      	cmp	r3, #0
 8008522:	d012      	beq.n	800854a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852a:	2b00      	cmp	r3, #0
 800852c:	d104      	bne.n	8008538 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d008      	beq.n	800854a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800853c:	2b00      	cmp	r3, #0
 800853e:	d057      	beq.n	80085f0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	4798      	blx	r3
    }
    return;
 8008548:	e052      	b.n	80085f0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d02b      	beq.n	80085ac <HAL_UART_IRQHandler+0x528>
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d026      	beq.n	80085ac <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 f80a 	bl	8009578 <UART_EndTransmit_IT>
    return;
 8008564:	e045      	b.n	80085f2 <HAL_UART_IRQHandler+0x56e>
 8008566:	bf00      	nop
 8008568:	40020010 	.word	0x40020010
 800856c:	40020028 	.word	0x40020028
 8008570:	40020040 	.word	0x40020040
 8008574:	40020058 	.word	0x40020058
 8008578:	40020070 	.word	0x40020070
 800857c:	40020088 	.word	0x40020088
 8008580:	400200a0 	.word	0x400200a0
 8008584:	400200b8 	.word	0x400200b8
 8008588:	40020410 	.word	0x40020410
 800858c:	40020428 	.word	0x40020428
 8008590:	40020440 	.word	0x40020440
 8008594:	40020458 	.word	0x40020458
 8008598:	40020470 	.word	0x40020470
 800859c:	40020488 	.word	0x40020488
 80085a0:	400204a0 	.word	0x400204a0
 80085a4:	400204b8 	.word	0x400204b8
 80085a8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d008      	beq.n	80085c8 <HAL_UART_IRQHandler+0x544>
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f807 	bl	80095d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085c6:	e014      	b.n	80085f2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00f      	beq.n	80085f2 <HAL_UART_IRQHandler+0x56e>
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da0c      	bge.n	80085f2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fff1 	bl	80095c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085de:	e008      	b.n	80085f2 <HAL_UART_IRQHandler+0x56e>
      return;
 80085e0:	bf00      	nop
 80085e2:	e006      	b.n	80085f2 <HAL_UART_IRQHandler+0x56e>
    return;
 80085e4:	bf00      	nop
 80085e6:	e004      	b.n	80085f2 <HAL_UART_IRQHandler+0x56e>
      return;
 80085e8:	bf00      	nop
 80085ea:	e002      	b.n	80085f2 <HAL_UART_IRQHandler+0x56e>
      return;
 80085ec:	bf00      	nop
 80085ee:	e000      	b.n	80085f2 <HAL_UART_IRQHandler+0x56e>
    return;
 80085f0:	bf00      	nop
  }
}
 80085f2:	3720      	adds	r7, #32
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008624:	b5b0      	push	{r4, r5, r7, lr}
 8008626:	b08e      	sub	sp, #56	; 0x38
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	431a      	orrs	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	431a      	orrs	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	4313      	orrs	r3, r2
 8008648:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	4bbf      	ldr	r3, [pc, #764]	; (8008950 <UART_SetConfig+0x32c>)
 8008652:	4013      	ands	r3, r2
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800865a:	430b      	orrs	r3, r1
 800865c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4ab5      	ldr	r2, [pc, #724]	; (8008954 <UART_SetConfig+0x330>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d004      	beq.n	800868e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800868a:	4313      	orrs	r3, r2
 800868c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	4bb0      	ldr	r3, [pc, #704]	; (8008958 <UART_SetConfig+0x334>)
 8008696:	4013      	ands	r3, r2
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800869e:	430b      	orrs	r3, r1
 80086a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	f023 010f 	bic.w	r1, r3, #15
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4aa7      	ldr	r2, [pc, #668]	; (800895c <UART_SetConfig+0x338>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d176      	bne.n	80087b0 <UART_SetConfig+0x18c>
 80086c2:	4ba7      	ldr	r3, [pc, #668]	; (8008960 <UART_SetConfig+0x33c>)
 80086c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ca:	2b28      	cmp	r3, #40	; 0x28
 80086cc:	d86c      	bhi.n	80087a8 <UART_SetConfig+0x184>
 80086ce:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <UART_SetConfig+0xb0>)
 80086d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d4:	08008779 	.word	0x08008779
 80086d8:	080087a9 	.word	0x080087a9
 80086dc:	080087a9 	.word	0x080087a9
 80086e0:	080087a9 	.word	0x080087a9
 80086e4:	080087a9 	.word	0x080087a9
 80086e8:	080087a9 	.word	0x080087a9
 80086ec:	080087a9 	.word	0x080087a9
 80086f0:	080087a9 	.word	0x080087a9
 80086f4:	08008781 	.word	0x08008781
 80086f8:	080087a9 	.word	0x080087a9
 80086fc:	080087a9 	.word	0x080087a9
 8008700:	080087a9 	.word	0x080087a9
 8008704:	080087a9 	.word	0x080087a9
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087a9 	.word	0x080087a9
 8008710:	080087a9 	.word	0x080087a9
 8008714:	08008789 	.word	0x08008789
 8008718:	080087a9 	.word	0x080087a9
 800871c:	080087a9 	.word	0x080087a9
 8008720:	080087a9 	.word	0x080087a9
 8008724:	080087a9 	.word	0x080087a9
 8008728:	080087a9 	.word	0x080087a9
 800872c:	080087a9 	.word	0x080087a9
 8008730:	080087a9 	.word	0x080087a9
 8008734:	08008791 	.word	0x08008791
 8008738:	080087a9 	.word	0x080087a9
 800873c:	080087a9 	.word	0x080087a9
 8008740:	080087a9 	.word	0x080087a9
 8008744:	080087a9 	.word	0x080087a9
 8008748:	080087a9 	.word	0x080087a9
 800874c:	080087a9 	.word	0x080087a9
 8008750:	080087a9 	.word	0x080087a9
 8008754:	08008799 	.word	0x08008799
 8008758:	080087a9 	.word	0x080087a9
 800875c:	080087a9 	.word	0x080087a9
 8008760:	080087a9 	.word	0x080087a9
 8008764:	080087a9 	.word	0x080087a9
 8008768:	080087a9 	.word	0x080087a9
 800876c:	080087a9 	.word	0x080087a9
 8008770:	080087a9 	.word	0x080087a9
 8008774:	080087a1 	.word	0x080087a1
 8008778:	2301      	movs	r3, #1
 800877a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800877e:	e222      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008780:	2304      	movs	r3, #4
 8008782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008786:	e21e      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008788:	2308      	movs	r3, #8
 800878a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878e:	e21a      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008790:	2310      	movs	r3, #16
 8008792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008796:	e216      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008798:	2320      	movs	r3, #32
 800879a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800879e:	e212      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087a6:	e20e      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80087a8:	2380      	movs	r3, #128	; 0x80
 80087aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ae:	e20a      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a6b      	ldr	r2, [pc, #428]	; (8008964 <UART_SetConfig+0x340>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d130      	bne.n	800881c <UART_SetConfig+0x1f8>
 80087ba:	4b69      	ldr	r3, [pc, #420]	; (8008960 <UART_SetConfig+0x33c>)
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	2b05      	cmp	r3, #5
 80087c4:	d826      	bhi.n	8008814 <UART_SetConfig+0x1f0>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x1a8>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087e5 	.word	0x080087e5
 80087d0:	080087ed 	.word	0x080087ed
 80087d4:	080087f5 	.word	0x080087f5
 80087d8:	080087fd 	.word	0x080087fd
 80087dc:	08008805 	.word	0x08008805
 80087e0:	0800880d 	.word	0x0800880d
 80087e4:	2300      	movs	r3, #0
 80087e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ea:	e1ec      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087f2:	e1e8      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80087f4:	2308      	movs	r3, #8
 80087f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087fa:	e1e4      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008802:	e1e0      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008804:	2320      	movs	r3, #32
 8008806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800880a:	e1dc      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 800880c:	2340      	movs	r3, #64	; 0x40
 800880e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008812:	e1d8      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881a:	e1d4      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a51      	ldr	r2, [pc, #324]	; (8008968 <UART_SetConfig+0x344>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d130      	bne.n	8008888 <UART_SetConfig+0x264>
 8008826:	4b4e      	ldr	r3, [pc, #312]	; (8008960 <UART_SetConfig+0x33c>)
 8008828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882a:	f003 0307 	and.w	r3, r3, #7
 800882e:	2b05      	cmp	r3, #5
 8008830:	d826      	bhi.n	8008880 <UART_SetConfig+0x25c>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <UART_SetConfig+0x214>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	08008851 	.word	0x08008851
 800883c:	08008859 	.word	0x08008859
 8008840:	08008861 	.word	0x08008861
 8008844:	08008869 	.word	0x08008869
 8008848:	08008871 	.word	0x08008871
 800884c:	08008879 	.word	0x08008879
 8008850:	2300      	movs	r3, #0
 8008852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008856:	e1b6      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008858:	2304      	movs	r3, #4
 800885a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885e:	e1b2      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008860:	2308      	movs	r3, #8
 8008862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008866:	e1ae      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008868:	2310      	movs	r3, #16
 800886a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886e:	e1aa      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008870:	2320      	movs	r3, #32
 8008872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008876:	e1a6      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008878:	2340      	movs	r3, #64	; 0x40
 800887a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887e:	e1a2      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008880:	2380      	movs	r3, #128	; 0x80
 8008882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008886:	e19e      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a37      	ldr	r2, [pc, #220]	; (800896c <UART_SetConfig+0x348>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d130      	bne.n	80088f4 <UART_SetConfig+0x2d0>
 8008892:	4b33      	ldr	r3, [pc, #204]	; (8008960 <UART_SetConfig+0x33c>)
 8008894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008896:	f003 0307 	and.w	r3, r3, #7
 800889a:	2b05      	cmp	r3, #5
 800889c:	d826      	bhi.n	80088ec <UART_SetConfig+0x2c8>
 800889e:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <UART_SetConfig+0x280>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	080088bd 	.word	0x080088bd
 80088a8:	080088c5 	.word	0x080088c5
 80088ac:	080088cd 	.word	0x080088cd
 80088b0:	080088d5 	.word	0x080088d5
 80088b4:	080088dd 	.word	0x080088dd
 80088b8:	080088e5 	.word	0x080088e5
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c2:	e180      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80088c4:	2304      	movs	r3, #4
 80088c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ca:	e17c      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80088cc:	2308      	movs	r3, #8
 80088ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d2:	e178      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80088d4:	2310      	movs	r3, #16
 80088d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088da:	e174      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80088dc:	2320      	movs	r3, #32
 80088de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e2:	e170      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80088e4:	2340      	movs	r3, #64	; 0x40
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e16c      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80088ec:	2380      	movs	r3, #128	; 0x80
 80088ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f2:	e168      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a1d      	ldr	r2, [pc, #116]	; (8008970 <UART_SetConfig+0x34c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d142      	bne.n	8008984 <UART_SetConfig+0x360>
 80088fe:	4b18      	ldr	r3, [pc, #96]	; (8008960 <UART_SetConfig+0x33c>)
 8008900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	2b05      	cmp	r3, #5
 8008908:	d838      	bhi.n	800897c <UART_SetConfig+0x358>
 800890a:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <UART_SetConfig+0x2ec>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008929 	.word	0x08008929
 8008914:	08008931 	.word	0x08008931
 8008918:	08008939 	.word	0x08008939
 800891c:	08008941 	.word	0x08008941
 8008920:	08008949 	.word	0x08008949
 8008924:	08008975 	.word	0x08008975
 8008928:	2300      	movs	r3, #0
 800892a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892e:	e14a      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008930:	2304      	movs	r3, #4
 8008932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008936:	e146      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008938:	2308      	movs	r3, #8
 800893a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893e:	e142      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008940:	2310      	movs	r3, #16
 8008942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008946:	e13e      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008948:	2320      	movs	r3, #32
 800894a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894e:	e13a      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008950:	cfff69f3 	.word	0xcfff69f3
 8008954:	58000c00 	.word	0x58000c00
 8008958:	11fff4ff 	.word	0x11fff4ff
 800895c:	40011000 	.word	0x40011000
 8008960:	58024400 	.word	0x58024400
 8008964:	40004400 	.word	0x40004400
 8008968:	40004800 	.word	0x40004800
 800896c:	40004c00 	.word	0x40004c00
 8008970:	40005000 	.word	0x40005000
 8008974:	2340      	movs	r3, #64	; 0x40
 8008976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897a:	e124      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 800897c:	2380      	movs	r3, #128	; 0x80
 800897e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008982:	e120      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4acc      	ldr	r2, [pc, #816]	; (8008cbc <UART_SetConfig+0x698>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d176      	bne.n	8008a7c <UART_SetConfig+0x458>
 800898e:	4bcc      	ldr	r3, [pc, #816]	; (8008cc0 <UART_SetConfig+0x69c>)
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008996:	2b28      	cmp	r3, #40	; 0x28
 8008998:	d86c      	bhi.n	8008a74 <UART_SetConfig+0x450>
 800899a:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <UART_SetConfig+0x37c>)
 800899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a0:	08008a45 	.word	0x08008a45
 80089a4:	08008a75 	.word	0x08008a75
 80089a8:	08008a75 	.word	0x08008a75
 80089ac:	08008a75 	.word	0x08008a75
 80089b0:	08008a75 	.word	0x08008a75
 80089b4:	08008a75 	.word	0x08008a75
 80089b8:	08008a75 	.word	0x08008a75
 80089bc:	08008a75 	.word	0x08008a75
 80089c0:	08008a4d 	.word	0x08008a4d
 80089c4:	08008a75 	.word	0x08008a75
 80089c8:	08008a75 	.word	0x08008a75
 80089cc:	08008a75 	.word	0x08008a75
 80089d0:	08008a75 	.word	0x08008a75
 80089d4:	08008a75 	.word	0x08008a75
 80089d8:	08008a75 	.word	0x08008a75
 80089dc:	08008a75 	.word	0x08008a75
 80089e0:	08008a55 	.word	0x08008a55
 80089e4:	08008a75 	.word	0x08008a75
 80089e8:	08008a75 	.word	0x08008a75
 80089ec:	08008a75 	.word	0x08008a75
 80089f0:	08008a75 	.word	0x08008a75
 80089f4:	08008a75 	.word	0x08008a75
 80089f8:	08008a75 	.word	0x08008a75
 80089fc:	08008a75 	.word	0x08008a75
 8008a00:	08008a5d 	.word	0x08008a5d
 8008a04:	08008a75 	.word	0x08008a75
 8008a08:	08008a75 	.word	0x08008a75
 8008a0c:	08008a75 	.word	0x08008a75
 8008a10:	08008a75 	.word	0x08008a75
 8008a14:	08008a75 	.word	0x08008a75
 8008a18:	08008a75 	.word	0x08008a75
 8008a1c:	08008a75 	.word	0x08008a75
 8008a20:	08008a65 	.word	0x08008a65
 8008a24:	08008a75 	.word	0x08008a75
 8008a28:	08008a75 	.word	0x08008a75
 8008a2c:	08008a75 	.word	0x08008a75
 8008a30:	08008a75 	.word	0x08008a75
 8008a34:	08008a75 	.word	0x08008a75
 8008a38:	08008a75 	.word	0x08008a75
 8008a3c:	08008a75 	.word	0x08008a75
 8008a40:	08008a6d 	.word	0x08008a6d
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4a:	e0bc      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a52:	e0b8      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008a54:	2308      	movs	r3, #8
 8008a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5a:	e0b4      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008a5c:	2310      	movs	r3, #16
 8008a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a62:	e0b0      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008a64:	2320      	movs	r3, #32
 8008a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6a:	e0ac      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008a6c:	2340      	movs	r3, #64	; 0x40
 8008a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a72:	e0a8      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7a:	e0a4      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a90      	ldr	r2, [pc, #576]	; (8008cc4 <UART_SetConfig+0x6a0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d130      	bne.n	8008ae8 <UART_SetConfig+0x4c4>
 8008a86:	4b8e      	ldr	r3, [pc, #568]	; (8008cc0 <UART_SetConfig+0x69c>)
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	d826      	bhi.n	8008ae0 <UART_SetConfig+0x4bc>
 8008a92:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <UART_SetConfig+0x474>)
 8008a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	08008ac1 	.word	0x08008ac1
 8008aa4:	08008ac9 	.word	0x08008ac9
 8008aa8:	08008ad1 	.word	0x08008ad1
 8008aac:	08008ad9 	.word	0x08008ad9
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab6:	e086      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008ab8:	2304      	movs	r3, #4
 8008aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008abe:	e082      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac6:	e07e      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008ac8:	2310      	movs	r3, #16
 8008aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ace:	e07a      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad6:	e076      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008ad8:	2340      	movs	r3, #64	; 0x40
 8008ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ade:	e072      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008ae0:	2380      	movs	r3, #128	; 0x80
 8008ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ae6:	e06e      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a76      	ldr	r2, [pc, #472]	; (8008cc8 <UART_SetConfig+0x6a4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d130      	bne.n	8008b54 <UART_SetConfig+0x530>
 8008af2:	4b73      	ldr	r3, [pc, #460]	; (8008cc0 <UART_SetConfig+0x69c>)
 8008af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	2b05      	cmp	r3, #5
 8008afc:	d826      	bhi.n	8008b4c <UART_SetConfig+0x528>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0x4e0>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b1d 	.word	0x08008b1d
 8008b08:	08008b25 	.word	0x08008b25
 8008b0c:	08008b2d 	.word	0x08008b2d
 8008b10:	08008b35 	.word	0x08008b35
 8008b14:	08008b3d 	.word	0x08008b3d
 8008b18:	08008b45 	.word	0x08008b45
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b22:	e050      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008b24:	2304      	movs	r3, #4
 8008b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2a:	e04c      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b32:	e048      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008b34:	2310      	movs	r3, #16
 8008b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b3a:	e044      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008b3c:	2320      	movs	r3, #32
 8008b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b42:	e040      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008b44:	2340      	movs	r3, #64	; 0x40
 8008b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b4a:	e03c      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008b4c:	2380      	movs	r3, #128	; 0x80
 8008b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b52:	e038      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a5c      	ldr	r2, [pc, #368]	; (8008ccc <UART_SetConfig+0x6a8>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d130      	bne.n	8008bc0 <UART_SetConfig+0x59c>
 8008b5e:	4b58      	ldr	r3, [pc, #352]	; (8008cc0 <UART_SetConfig+0x69c>)
 8008b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	2b05      	cmp	r3, #5
 8008b68:	d826      	bhi.n	8008bb8 <UART_SetConfig+0x594>
 8008b6a:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <UART_SetConfig+0x54c>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008b89 	.word	0x08008b89
 8008b74:	08008b91 	.word	0x08008b91
 8008b78:	08008b99 	.word	0x08008b99
 8008b7c:	08008ba1 	.word	0x08008ba1
 8008b80:	08008ba9 	.word	0x08008ba9
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	2302      	movs	r3, #2
 8008b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8e:	e01a      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008b90:	2304      	movs	r3, #4
 8008b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b96:	e016      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008b98:	2308      	movs	r3, #8
 8008b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9e:	e012      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba6:	e00e      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008ba8:	2320      	movs	r3, #32
 8008baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bae:	e00a      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008bb0:	2340      	movs	r3, #64	; 0x40
 8008bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb6:	e006      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008bb8:	2380      	movs	r3, #128	; 0x80
 8008bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bbe:	e002      	b.n	8008bc6 <UART_SetConfig+0x5a2>
 8008bc0:	2380      	movs	r3, #128	; 0x80
 8008bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a40      	ldr	r2, [pc, #256]	; (8008ccc <UART_SetConfig+0x6a8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	f040 80ef 	bne.w	8008db0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	dc46      	bgt.n	8008c68 <UART_SetConfig+0x644>
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	f2c0 8081 	blt.w	8008ce2 <UART_SetConfig+0x6be>
 8008be0:	3b02      	subs	r3, #2
 8008be2:	2b1e      	cmp	r3, #30
 8008be4:	d87d      	bhi.n	8008ce2 <UART_SetConfig+0x6be>
 8008be6:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <UART_SetConfig+0x5c8>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c6f 	.word	0x08008c6f
 8008bf0:	08008ce3 	.word	0x08008ce3
 8008bf4:	08008c77 	.word	0x08008c77
 8008bf8:	08008ce3 	.word	0x08008ce3
 8008bfc:	08008ce3 	.word	0x08008ce3
 8008c00:	08008ce3 	.word	0x08008ce3
 8008c04:	08008c87 	.word	0x08008c87
 8008c08:	08008ce3 	.word	0x08008ce3
 8008c0c:	08008ce3 	.word	0x08008ce3
 8008c10:	08008ce3 	.word	0x08008ce3
 8008c14:	08008ce3 	.word	0x08008ce3
 8008c18:	08008ce3 	.word	0x08008ce3
 8008c1c:	08008ce3 	.word	0x08008ce3
 8008c20:	08008ce3 	.word	0x08008ce3
 8008c24:	08008c97 	.word	0x08008c97
 8008c28:	08008ce3 	.word	0x08008ce3
 8008c2c:	08008ce3 	.word	0x08008ce3
 8008c30:	08008ce3 	.word	0x08008ce3
 8008c34:	08008ce3 	.word	0x08008ce3
 8008c38:	08008ce3 	.word	0x08008ce3
 8008c3c:	08008ce3 	.word	0x08008ce3
 8008c40:	08008ce3 	.word	0x08008ce3
 8008c44:	08008ce3 	.word	0x08008ce3
 8008c48:	08008ce3 	.word	0x08008ce3
 8008c4c:	08008ce3 	.word	0x08008ce3
 8008c50:	08008ce3 	.word	0x08008ce3
 8008c54:	08008ce3 	.word	0x08008ce3
 8008c58:	08008ce3 	.word	0x08008ce3
 8008c5c:	08008ce3 	.word	0x08008ce3
 8008c60:	08008ce3 	.word	0x08008ce3
 8008c64:	08008cd5 	.word	0x08008cd5
 8008c68:	2b40      	cmp	r3, #64	; 0x40
 8008c6a:	d036      	beq.n	8008cda <UART_SetConfig+0x6b6>
 8008c6c:	e039      	b.n	8008ce2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c6e:	f7fe f94b 	bl	8006f08 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c72:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c74:	e03b      	b.n	8008cee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c76:	f107 0314 	add.w	r3, r7, #20
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe f95a 	bl	8006f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c84:	e033      	b.n	8008cee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c86:	f107 0308 	add.w	r3, r7, #8
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe faa6 	bl	80071dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c94:	e02b      	b.n	8008cee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c96:	4b0a      	ldr	r3, [pc, #40]	; (8008cc0 <UART_SetConfig+0x69c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d009      	beq.n	8008cb6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ca2:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <UART_SetConfig+0x69c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	08db      	lsrs	r3, r3, #3
 8008ca8:	f003 0303 	and.w	r3, r3, #3
 8008cac:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <UART_SetConfig+0x6ac>)
 8008cae:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cb4:	e01b      	b.n	8008cee <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008cb6:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <UART_SetConfig+0x6ac>)
 8008cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cba:	e018      	b.n	8008cee <UART_SetConfig+0x6ca>
 8008cbc:	40011400 	.word	0x40011400
 8008cc0:	58024400 	.word	0x58024400
 8008cc4:	40007800 	.word	0x40007800
 8008cc8:	40007c00 	.word	0x40007c00
 8008ccc:	58000c00 	.word	0x58000c00
 8008cd0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cd4:	4bc4      	ldr	r3, [pc, #784]	; (8008fe8 <UART_SetConfig+0x9c4>)
 8008cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cd8:	e009      	b.n	8008cee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ce0:	e005      	b.n	8008cee <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 81da 	beq.w	80090aa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	4abc      	ldr	r2, [pc, #752]	; (8008fec <UART_SetConfig+0x9c8>)
 8008cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d08:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	4413      	add	r3, r2
 8008d14:	6a3a      	ldr	r2, [r7, #32]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d305      	bcc.n	8008d26 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d20:	6a3a      	ldr	r2, [r7, #32]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d903      	bls.n	8008d2e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008d2c:	e1bd      	b.n	80090aa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	4618      	mov	r0, r3
 8008d32:	f04f 0100 	mov.w	r1, #0
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	4aac      	ldr	r2, [pc, #688]	; (8008fec <UART_SetConfig+0x9c8>)
 8008d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	f04f 0300 	mov.w	r3, #0
 8008d46:	f7f7 fac7 	bl	80002d8 <__aeabi_uldivmod>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4610      	mov	r0, r2
 8008d50:	4619      	mov	r1, r3
 8008d52:	f04f 0200 	mov.w	r2, #0
 8008d56:	f04f 0300 	mov.w	r3, #0
 8008d5a:	020b      	lsls	r3, r1, #8
 8008d5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d60:	0202      	lsls	r2, r0, #8
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	6849      	ldr	r1, [r1, #4]
 8008d66:	0849      	lsrs	r1, r1, #1
 8008d68:	4608      	mov	r0, r1
 8008d6a:	f04f 0100 	mov.w	r1, #0
 8008d6e:	1814      	adds	r4, r2, r0
 8008d70:	eb43 0501 	adc.w	r5, r3, r1
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f04f 0300 	mov.w	r3, #0
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 faa9 	bl	80002d8 <__aeabi_uldivmod>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d94:	d308      	bcc.n	8008da8 <UART_SetConfig+0x784>
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d9c:	d204      	bcs.n	8008da8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	e180      	b.n	80090aa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008dae:	e17c      	b.n	80090aa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db8:	f040 80bf 	bne.w	8008f3a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008dbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	dc49      	bgt.n	8008e58 <UART_SetConfig+0x834>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	db7c      	blt.n	8008ec2 <UART_SetConfig+0x89e>
 8008dc8:	2b20      	cmp	r3, #32
 8008dca:	d87a      	bhi.n	8008ec2 <UART_SetConfig+0x89e>
 8008dcc:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <UART_SetConfig+0x7b0>)
 8008dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd2:	bf00      	nop
 8008dd4:	08008e5f 	.word	0x08008e5f
 8008dd8:	08008e67 	.word	0x08008e67
 8008ddc:	08008ec3 	.word	0x08008ec3
 8008de0:	08008ec3 	.word	0x08008ec3
 8008de4:	08008e6f 	.word	0x08008e6f
 8008de8:	08008ec3 	.word	0x08008ec3
 8008dec:	08008ec3 	.word	0x08008ec3
 8008df0:	08008ec3 	.word	0x08008ec3
 8008df4:	08008e7f 	.word	0x08008e7f
 8008df8:	08008ec3 	.word	0x08008ec3
 8008dfc:	08008ec3 	.word	0x08008ec3
 8008e00:	08008ec3 	.word	0x08008ec3
 8008e04:	08008ec3 	.word	0x08008ec3
 8008e08:	08008ec3 	.word	0x08008ec3
 8008e0c:	08008ec3 	.word	0x08008ec3
 8008e10:	08008ec3 	.word	0x08008ec3
 8008e14:	08008e8f 	.word	0x08008e8f
 8008e18:	08008ec3 	.word	0x08008ec3
 8008e1c:	08008ec3 	.word	0x08008ec3
 8008e20:	08008ec3 	.word	0x08008ec3
 8008e24:	08008ec3 	.word	0x08008ec3
 8008e28:	08008ec3 	.word	0x08008ec3
 8008e2c:	08008ec3 	.word	0x08008ec3
 8008e30:	08008ec3 	.word	0x08008ec3
 8008e34:	08008ec3 	.word	0x08008ec3
 8008e38:	08008ec3 	.word	0x08008ec3
 8008e3c:	08008ec3 	.word	0x08008ec3
 8008e40:	08008ec3 	.word	0x08008ec3
 8008e44:	08008ec3 	.word	0x08008ec3
 8008e48:	08008ec3 	.word	0x08008ec3
 8008e4c:	08008ec3 	.word	0x08008ec3
 8008e50:	08008ec3 	.word	0x08008ec3
 8008e54:	08008eb5 	.word	0x08008eb5
 8008e58:	2b40      	cmp	r3, #64	; 0x40
 8008e5a:	d02e      	beq.n	8008eba <UART_SetConfig+0x896>
 8008e5c:	e031      	b.n	8008ec2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e5e:	f7fd f8e7 	bl	8006030 <HAL_RCC_GetPCLK1Freq>
 8008e62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e64:	e033      	b.n	8008ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e66:	f7fd f8f9 	bl	800605c <HAL_RCC_GetPCLK2Freq>
 8008e6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008e6c:	e02f      	b.n	8008ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e6e:	f107 0314 	add.w	r3, r7, #20
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe f85e 	bl	8006f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e7c:	e027      	b.n	8008ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e7e:	f107 0308 	add.w	r3, r7, #8
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe f9aa 	bl	80071dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e8c:	e01f      	b.n	8008ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e8e:	4b58      	ldr	r3, [pc, #352]	; (8008ff0 <UART_SetConfig+0x9cc>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d009      	beq.n	8008eae <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e9a:	4b55      	ldr	r3, [pc, #340]	; (8008ff0 <UART_SetConfig+0x9cc>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	08db      	lsrs	r3, r3, #3
 8008ea0:	f003 0303 	and.w	r3, r3, #3
 8008ea4:	4a53      	ldr	r2, [pc, #332]	; (8008ff4 <UART_SetConfig+0x9d0>)
 8008ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008eac:	e00f      	b.n	8008ece <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008eae:	4b51      	ldr	r3, [pc, #324]	; (8008ff4 <UART_SetConfig+0x9d0>)
 8008eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eb2:	e00c      	b.n	8008ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008eb4:	4b4c      	ldr	r3, [pc, #304]	; (8008fe8 <UART_SetConfig+0x9c4>)
 8008eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008eb8:	e009      	b.n	8008ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ec0:	e005      	b.n	8008ece <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008ecc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 80ea 	beq.w	80090aa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	4a44      	ldr	r2, [pc, #272]	; (8008fec <UART_SetConfig+0x9c8>)
 8008edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ee8:	005a      	lsls	r2, r3, #1
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	085b      	lsrs	r3, r3, #1
 8008ef0:	441a      	add	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	2b0f      	cmp	r3, #15
 8008f02:	d916      	bls.n	8008f32 <UART_SetConfig+0x90e>
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0a:	d212      	bcs.n	8008f32 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	f023 030f 	bic.w	r3, r3, #15
 8008f14:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	085b      	lsrs	r3, r3, #1
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f003 0307 	and.w	r3, r3, #7
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f24:	4313      	orrs	r3, r2
 8008f26:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f2e:	60da      	str	r2, [r3, #12]
 8008f30:	e0bb      	b.n	80090aa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f38:	e0b7      	b.n	80090aa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f3e:	2b20      	cmp	r3, #32
 8008f40:	dc4a      	bgt.n	8008fd8 <UART_SetConfig+0x9b4>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f2c0 8086 	blt.w	8009054 <UART_SetConfig+0xa30>
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	f200 8083 	bhi.w	8009054 <UART_SetConfig+0xa30>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <UART_SetConfig+0x930>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008fdf 	.word	0x08008fdf
 8008f58:	08008ff9 	.word	0x08008ff9
 8008f5c:	08009055 	.word	0x08009055
 8008f60:	08009055 	.word	0x08009055
 8008f64:	08009001 	.word	0x08009001
 8008f68:	08009055 	.word	0x08009055
 8008f6c:	08009055 	.word	0x08009055
 8008f70:	08009055 	.word	0x08009055
 8008f74:	08009011 	.word	0x08009011
 8008f78:	08009055 	.word	0x08009055
 8008f7c:	08009055 	.word	0x08009055
 8008f80:	08009055 	.word	0x08009055
 8008f84:	08009055 	.word	0x08009055
 8008f88:	08009055 	.word	0x08009055
 8008f8c:	08009055 	.word	0x08009055
 8008f90:	08009055 	.word	0x08009055
 8008f94:	08009021 	.word	0x08009021
 8008f98:	08009055 	.word	0x08009055
 8008f9c:	08009055 	.word	0x08009055
 8008fa0:	08009055 	.word	0x08009055
 8008fa4:	08009055 	.word	0x08009055
 8008fa8:	08009055 	.word	0x08009055
 8008fac:	08009055 	.word	0x08009055
 8008fb0:	08009055 	.word	0x08009055
 8008fb4:	08009055 	.word	0x08009055
 8008fb8:	08009055 	.word	0x08009055
 8008fbc:	08009055 	.word	0x08009055
 8008fc0:	08009055 	.word	0x08009055
 8008fc4:	08009055 	.word	0x08009055
 8008fc8:	08009055 	.word	0x08009055
 8008fcc:	08009055 	.word	0x08009055
 8008fd0:	08009055 	.word	0x08009055
 8008fd4:	08009047 	.word	0x08009047
 8008fd8:	2b40      	cmp	r3, #64	; 0x40
 8008fda:	d037      	beq.n	800904c <UART_SetConfig+0xa28>
 8008fdc:	e03a      	b.n	8009054 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fde:	f7fd f827 	bl	8006030 <HAL_RCC_GetPCLK1Freq>
 8008fe2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fe4:	e03c      	b.n	8009060 <UART_SetConfig+0xa3c>
 8008fe6:	bf00      	nop
 8008fe8:	003d0900 	.word	0x003d0900
 8008fec:	08009888 	.word	0x08009888
 8008ff0:	58024400 	.word	0x58024400
 8008ff4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ff8:	f7fd f830 	bl	800605c <HAL_RCC_GetPCLK2Freq>
 8008ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008ffe:	e02f      	b.n	8009060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009000:	f107 0314 	add.w	r3, r7, #20
 8009004:	4618      	mov	r0, r3
 8009006:	f7fd ff95 	bl	8006f34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800900e:	e027      	b.n	8009060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009010:	f107 0308 	add.w	r3, r7, #8
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe f8e1 	bl	80071dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800901e:	e01f      	b.n	8009060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009020:	4b2c      	ldr	r3, [pc, #176]	; (80090d4 <UART_SetConfig+0xab0>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b00      	cmp	r3, #0
 800902a:	d009      	beq.n	8009040 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800902c:	4b29      	ldr	r3, [pc, #164]	; (80090d4 <UART_SetConfig+0xab0>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	08db      	lsrs	r3, r3, #3
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	4a28      	ldr	r2, [pc, #160]	; (80090d8 <UART_SetConfig+0xab4>)
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
 800903c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800903e:	e00f      	b.n	8009060 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009040:	4b25      	ldr	r3, [pc, #148]	; (80090d8 <UART_SetConfig+0xab4>)
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009044:	e00c      	b.n	8009060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009046:	4b25      	ldr	r3, [pc, #148]	; (80090dc <UART_SetConfig+0xab8>)
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800904a:	e009      	b.n	8009060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800904c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009052:	e005      	b.n	8009060 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800905e:	bf00      	nop
    }

    if (pclk != 0U)
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	2b00      	cmp	r3, #0
 8009064:	d021      	beq.n	80090aa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	4a1d      	ldr	r2, [pc, #116]	; (80090e0 <UART_SetConfig+0xabc>)
 800906c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009070:	461a      	mov	r2, r3
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	fbb3 f2f2 	udiv	r2, r3, r2
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	085b      	lsrs	r3, r3, #1
 800907e:	441a      	add	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	fbb2 f3f3 	udiv	r3, r2, r3
 8009088:	b29b      	uxth	r3, r3
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	2b0f      	cmp	r3, #15
 8009090:	d908      	bls.n	80090a4 <UART_SetConfig+0xa80>
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009098:	d204      	bcs.n	80090a4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090a0:	60da      	str	r2, [r3, #12]
 80090a2:	e002      	b.n	80090aa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80090c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3738      	adds	r7, #56	; 0x38
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bdb0      	pop	{r4, r5, r7, pc}
 80090d2:	bf00      	nop
 80090d4:	58024400 	.word	0x58024400
 80090d8:	03d09000 	.word	0x03d09000
 80090dc:	003d0900 	.word	0x003d0900
 80090e0:	08009888 	.word	0x08009888

080090e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00a      	beq.n	800910e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	430a      	orrs	r2, r1
 8009150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009156:	f003 0308 	and.w	r3, r3, #8
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	430a      	orrs	r2, r1
 8009172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009178:	f003 0310 	and.w	r3, r3, #16
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00a      	beq.n	8009196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00a      	beq.n	80091b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01a      	beq.n	80091fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e2:	d10a      	bne.n	80091fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	605a      	str	r2, [r3, #4]
  }
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af02      	add	r7, sp, #8
 800922e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009238:	f7f8 fc68 	bl	8001b0c <HAL_GetTick>
 800923c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0308 	and.w	r3, r3, #8
 8009248:	2b08      	cmp	r3, #8
 800924a:	d10e      	bne.n	800926a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800924c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f82f 	bl	80092be <UART_WaitOnFlagUntilTimeout>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e025      	b.n	80092b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b04      	cmp	r3, #4
 8009276:	d10e      	bne.n	8009296 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f819 	bl	80092be <UART_WaitOnFlagUntilTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e00f      	b.n	80092b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2220      	movs	r2, #32
 800929a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	603b      	str	r3, [r7, #0]
 80092ca:	4613      	mov	r3, r2
 80092cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ce:	e062      	b.n	8009396 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d6:	d05e      	beq.n	8009396 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092d8:	f7f8 fc18 	bl	8001b0c <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d302      	bcc.n	80092ee <UART_WaitOnFlagUntilTimeout+0x30>
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d11d      	bne.n	800932a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80092fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0201 	bic.w	r2, r2, #1
 800930c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2220      	movs	r2, #32
 8009312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2220      	movs	r2, #32
 800931a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e045      	b.n	80093b6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0304 	and.w	r3, r3, #4
 8009334:	2b00      	cmp	r3, #0
 8009336:	d02e      	beq.n	8009396 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009346:	d126      	bne.n	8009396 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009350:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009360:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0201 	bic.w	r2, r2, #1
 8009370:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2220      	movs	r2, #32
 8009376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2220      	movs	r2, #32
 800937e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2220      	movs	r2, #32
 8009386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e00f      	b.n	80093b6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69da      	ldr	r2, [r3, #28]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	4013      	ands	r3, r2
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	bf0c      	ite	eq
 80093a6:	2301      	moveq	r3, #1
 80093a8:	2300      	movne	r3, #0
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	461a      	mov	r2, r3
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d08d      	beq.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80093d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80093e4:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2220      	movs	r2, #32
 80093ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
	...

080093fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009412:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6899      	ldr	r1, [r3, #8]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4b0f      	ldr	r3, [pc, #60]	; (800945c <UART_EndRxTransfer+0x60>)
 8009420:	400b      	ands	r3, r1
 8009422:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009428:	2b01      	cmp	r3, #1
 800942a:	d107      	bne.n	800943c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 0210 	bic.w	r2, r2, #16
 800943a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	effffffe 	.word	0xeffffffe

08009460 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009476:	d014      	beq.n	80094a2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800948e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800949e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094a0:	e002      	b.n	80094a8 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7f7 fd0a 	bl	8000ebc <HAL_UART_TxCpltCallback>
}
 80094a8:	bf00      	nop
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f7ff f89a 	bl	80085f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f4:	2b80      	cmp	r3, #128	; 0x80
 80094f6:	d109      	bne.n	800950c <UART_DMAError+0x40>
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b21      	cmp	r3, #33	; 0x21
 80094fc:	d106      	bne.n	800950c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2200      	movs	r2, #0
 8009502:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009506:	6978      	ldr	r0, [r7, #20]
 8009508:	f7ff ff59 	bl	80093be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009516:	2b40      	cmp	r3, #64	; 0x40
 8009518:	d109      	bne.n	800952e <UART_DMAError+0x62>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b22      	cmp	r3, #34	; 0x22
 800951e:	d106      	bne.n	800952e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	2200      	movs	r2, #0
 8009524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009528:	6978      	ldr	r0, [r7, #20]
 800952a:	f7ff ff67 	bl	80093fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009534:	f043 0210 	orr.w	r2, r3, #16
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800953e:	6978      	ldr	r0, [r7, #20]
 8009540:	f7f7 fccc 	bl	8000edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009544:	bf00      	nop
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f7f7 fcb6 	bl	8000edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009570:	bf00      	nop
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800958e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2220      	movs	r2, #32
 8009594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7f7 fc8c 	bl	8000ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <HAL_UARTEx_EnableFifoMode+0x16>
 80095fa:	2302      	movs	r3, #2
 80095fc:	e02b      	b.n	8009656 <HAL_UARTEx_EnableFifoMode+0x6e>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2224      	movs	r2, #36	; 0x24
 800960a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0201 	bic.w	r2, r2, #1
 8009624:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800962c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009634:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f88a 	bl	8009758 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009672:	2302      	movs	r3, #2
 8009674:	e02d      	b.n	80096d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2224      	movs	r2, #36	; 0x24
 8009682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0201 	bic.w	r2, r2, #1
 800969c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f850 	bl	8009758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2220      	movs	r2, #32
 80096c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e02d      	b.n	800974e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2224      	movs	r2, #36	; 0x24
 80096fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0201 	bic.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f812 	bl	8009758 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2220      	movs	r2, #32
 8009740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009764:	2b00      	cmp	r3, #0
 8009766:	d108      	bne.n	800977a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009778:	e031      	b.n	80097de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800977a:	2310      	movs	r3, #16
 800977c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800977e:	2310      	movs	r3, #16
 8009780:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	0e5b      	lsrs	r3, r3, #25
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	0f5b      	lsrs	r3, r3, #29
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 0307 	and.w	r3, r3, #7
 80097a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	7b3a      	ldrb	r2, [r7, #12]
 80097a6:	4911      	ldr	r1, [pc, #68]	; (80097ec <UARTEx_SetNbDataToProcess+0x94>)
 80097a8:	5c8a      	ldrb	r2, [r1, r2]
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097ae:	7b3a      	ldrb	r2, [r7, #12]
 80097b0:	490f      	ldr	r1, [pc, #60]	; (80097f0 <UARTEx_SetNbDataToProcess+0x98>)
 80097b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	7b7a      	ldrb	r2, [r7, #13]
 80097c4:	4909      	ldr	r1, [pc, #36]	; (80097ec <UARTEx_SetNbDataToProcess+0x94>)
 80097c6:	5c8a      	ldrb	r2, [r1, r2]
 80097c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097cc:	7b7a      	ldrb	r2, [r7, #13]
 80097ce:	4908      	ldr	r1, [pc, #32]	; (80097f0 <UARTEx_SetNbDataToProcess+0x98>)
 80097d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097de:	bf00      	nop
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	080098a0 	.word	0x080098a0
 80097f0:	080098a8 	.word	0x080098a8

080097f4 <__libc_init_array>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	4d0d      	ldr	r5, [pc, #52]	; (800982c <__libc_init_array+0x38>)
 80097f8:	4c0d      	ldr	r4, [pc, #52]	; (8009830 <__libc_init_array+0x3c>)
 80097fa:	1b64      	subs	r4, r4, r5
 80097fc:	10a4      	asrs	r4, r4, #2
 80097fe:	2600      	movs	r6, #0
 8009800:	42a6      	cmp	r6, r4
 8009802:	d109      	bne.n	8009818 <__libc_init_array+0x24>
 8009804:	4d0b      	ldr	r5, [pc, #44]	; (8009834 <__libc_init_array+0x40>)
 8009806:	4c0c      	ldr	r4, [pc, #48]	; (8009838 <__libc_init_array+0x44>)
 8009808:	f000 f820 	bl	800984c <_init>
 800980c:	1b64      	subs	r4, r4, r5
 800980e:	10a4      	asrs	r4, r4, #2
 8009810:	2600      	movs	r6, #0
 8009812:	42a6      	cmp	r6, r4
 8009814:	d105      	bne.n	8009822 <__libc_init_array+0x2e>
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	f855 3b04 	ldr.w	r3, [r5], #4
 800981c:	4798      	blx	r3
 800981e:	3601      	adds	r6, #1
 8009820:	e7ee      	b.n	8009800 <__libc_init_array+0xc>
 8009822:	f855 3b04 	ldr.w	r3, [r5], #4
 8009826:	4798      	blx	r3
 8009828:	3601      	adds	r6, #1
 800982a:	e7f2      	b.n	8009812 <__libc_init_array+0x1e>
 800982c:	080098b8 	.word	0x080098b8
 8009830:	080098b8 	.word	0x080098b8
 8009834:	080098b8 	.word	0x080098b8
 8009838:	080098bc 	.word	0x080098bc

0800983c <memset>:
 800983c:	4402      	add	r2, r0
 800983e:	4603      	mov	r3, r0
 8009840:	4293      	cmp	r3, r2
 8009842:	d100      	bne.n	8009846 <memset+0xa>
 8009844:	4770      	bx	lr
 8009846:	f803 1b01 	strb.w	r1, [r3], #1
 800984a:	e7f9      	b.n	8009840 <memset+0x4>

0800984c <_init>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	bf00      	nop
 8009850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009852:	bc08      	pop	{r3}
 8009854:	469e      	mov	lr, r3
 8009856:	4770      	bx	lr

08009858 <_fini>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	bf00      	nop
 800985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985e:	bc08      	pop	{r3}
 8009860:	469e      	mov	lr, r3
 8009862:	4770      	bx	lr
