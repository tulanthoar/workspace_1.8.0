
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009810  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  08009b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006080  24000040  08009b2c  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240060c0  08009b2c  000260c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001db1a  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fb9  00000000  00000000  0003db70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00040b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  00041900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374ed  00000000  00000000  000425f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013187  00000000  00000000  00079ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f74f  00000000  00000000  0008cc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec3bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038fc  00000000  00000000  001ec410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009a90 	.word	0x08009a90

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009a90 	.word	0x08009a90

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af02      	add	r7, sp, #8
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80005da:	81fb      	strh	r3, [r7, #14]
	unsigned short rxOffset = rxCount / 2;
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	81bb      	strh	r3, [r7, #12]
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	817b      	strh	r3, [r7, #10]
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < txCount; ++i ){
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
 80005ec:	e00f      	b.n	800060e <main+0x3e>
	  aTxBuffer[i] = i % 16384;
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4a97      	ldr	r2, [pc, #604]	; (8000860 <main+0x290>)
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060a:	3301      	adds	r3, #1
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
 800060e:	897b      	ldrh	r3, [r7, #10]
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4b93      	ldr	r3, [pc, #588]	; (8000864 <main+0x294>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b8d      	ldr	r3, [pc, #564]	; (8000864 <main+0x294>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b88      	ldr	r3, [pc, #544]	; (8000864 <main+0x294>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a87      	ldr	r2, [pc, #540]	; (8000864 <main+0x294>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 faf2 	bl	8001c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 faca 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fc40 	bl	8000ee8 <MX_GPIO_Init>
  HAL_EnableCompensationCell();
 8000668:	f001 fbae 	bl	8001dc8 <HAL_EnableCompensationCell>
  MX_DMA_Init();
 800066c:	f000 fbfc 	bl	8000e68 <MX_DMA_Init>
  //  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8000670:	f000 fba0 	bl	8000db4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000674:	f000 fb46 	bl	8000d04 <MX_SPI1_Init>
//  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */

  while(UserButtonStatus == 0)
 8000678:	e005      	b.n	8000686 <main+0xb6>
  {
    BSP_LED_Toggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f001 f97e 	bl	800197c <BSP_LED_Toggle>
    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f001 fb71 	bl	8001d68 <HAL_Delay>
  while(UserButtonStatus == 0)
 8000686:	4b78      	ldr	r3, [pc, #480]	; (8000868 <main+0x298>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <main+0xaa>
  }
  UserButtonStatus = 0;
 800068e:	4b76      	ldr	r3, [pc, #472]	; (8000868 <main+0x298>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f001 fb5c 	bl	8001d50 <HAL_GetTick>
 8000698:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
 800069e:	e030      	b.n	8000702 <main+0x132>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	486f      	ldr	r0, [pc, #444]	; (800086c <main+0x29c>)
 80006ae:	f008 ff28 	bl	8009502 <UART_WaitOnFlagUntilTimeout>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xec>
      {
        return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e26e      	b.n	8000b9a <main+0x5ca>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006bc:	4a68      	ldr	r2, [pc, #416]	; (8000860 <main+0x290>)
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b69      	ldr	r3, [pc, #420]	; (800086c <main+0x29c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4864      	ldr	r0, [pc, #400]	; (800086c <main+0x29c>)
 80006dc:	f008 ff11 	bl	8009502 <UART_WaitOnFlagUntilTimeout>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0x11a>
      {
        return HAL_TIMEOUT;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e257      	b.n	8000b9a <main+0x5ca>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006ea:	4a5d      	ldr	r2, [pc, #372]	; (8000860 <main+0x290>)
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b5d      	ldr	r3, [pc, #372]	; (800086c <main+0x29c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	3301      	adds	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000708:	d3ca      	bcc.n	80006a0 <main+0xd0>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 800070a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4855      	ldr	r0, [pc, #340]	; (800086c <main+0x29c>)
 8000718:	f008 fef3 	bl	8009502 <UART_WaitOnFlagUntilTimeout>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x156>
  {
    return HAL_TIMEOUT;
 8000722:	2303      	movs	r3, #3
 8000724:	e239      	b.n	8000b9a <main+0x5ca>
  }
  BSP_LED_Off(LED1);
 8000726:	2000      	movs	r0, #0
 8000728:	f001 f8fe 	bl	8001928 <BSP_LED_Off>
  while(UserButtonStatus == 0)
 800072c:	e005      	b.n	800073a <main+0x16a>
  {
    BSP_LED_Toggle(LED2);
 800072e:	2001      	movs	r0, #1
 8000730:	f001 f924 	bl	800197c <BSP_LED_Toggle>
    HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 fb17 	bl	8001d68 <HAL_Delay>
  while(UserButtonStatus == 0)
 800073a:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <main+0x298>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f5      	beq.n	800072e <main+0x15e>
  }
  UserButtonStatus = 0;
 8000742:	4b49      	ldr	r3, [pc, #292]	; (8000868 <main+0x298>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
  UartReady = RESET;
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <main+0x2a0>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED1);
 800074e:	2000      	movs	r0, #0
 8000750:	f001 f8ea 	bl	8001928 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000754:	2001      	movs	r0, #1
 8000756:	f001 f8e7 	bl	8001928 <BSP_LED_Off>
    /* Process Locked */
    __HAL_LOCK(&hspi1);
 800075a:	4b46      	ldr	r3, [pc, #280]	; (8000874 <main+0x2a4>)
 800075c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000760:	2b01      	cmp	r3, #1
 8000762:	d101      	bne.n	8000768 <main+0x198>
 8000764:	2302      	movs	r3, #2
 8000766:	e218      	b.n	8000b9a <main+0x5ca>
 8000768:	4b42      	ldr	r3, [pc, #264]	; (8000874 <main+0x2a4>)
 800076a:	2201      	movs	r2, #1
 800076c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Configure communication direction : 1Line */
    if (hspi1.Init.Direction == SPI_DIRECTION_1LINE)
 8000770:	4b40      	ldr	r3, [pc, #256]	; (8000874 <main+0x2a4>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000778:	d107      	bne.n	800078a <main+0x1ba>
    {
      SPI_1LINE_RX(&hspi1);
 800077a:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <main+0x2a4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <main+0x2a4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000788:	601a      	str	r2, [r3, #0]
    }

    /* Clear RXDMAEN bit */
    CLEAR_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <main+0x2a4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	4b38      	ldr	r3, [pc, #224]	; (8000874 <main+0x2a4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000798:	609a      	str	r2, [r3, #8]

    /* Set the SPI Rx DMA transfer complete callback */
    hspi1.hdmarx->XferCpltCallback = tx_complete;
 800079a:	4b36      	ldr	r3, [pc, #216]	; (8000874 <main+0x2a4>)
 800079c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800079e:	4a36      	ldr	r2, [pc, #216]	; (8000878 <main+0x2a8>)
 80007a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <main+0x2a4>)
 80007a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007a6:	4a35      	ldr	r2, [pc, #212]	; (800087c <main+0x2ac>)
 80007a8:	641a      	str	r2, [r3, #64]	; 0x40

    MODIFY_REG(((DMA_Stream_TypeDef   *)hdma_spi1_rx.Instance)->CR, (DMA_IT_TC | DMA_IT_HT), (DMA_IT_TC | DMA_IT_HT));
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <main+0x2b0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b33      	ldr	r3, [pc, #204]	; (8000880 <main+0x2b0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0218 	orr.w	r2, r2, #24
 80007b8:	601a      	str	r2, [r3, #0]
    /* Enable the Rx DMA Stream/Channel  */
    if (HAL_OK != HAL_DMA_Start(hspi1.hdmarx, (uint32_t)&hspi1.Instance->RXDR, (uint32_t)aRxBuffer, rxCount))
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <main+0x2a4>)
 80007bc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <main+0x2a4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3330      	adds	r3, #48	; 0x30
 80007c4:	4619      	mov	r1, r3
 80007c6:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <main+0x2b4>)
 80007c8:	89fb      	ldrh	r3, [r7, #14]
 80007ca:	f001 ff79 	bl	80026c0 <HAL_DMA_Start>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00d      	beq.n	80007f0 <main+0x220>
    {
      /* Update SPI error code */
      SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <main+0x2a4>)
 80007d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	4a25      	ldr	r2, [pc, #148]	; (8000874 <main+0x2a4>)
 80007e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      hspi1.State = HAL_SPI_STATE_READY;
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <main+0x2a4>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      Error_Handler();
 80007ec:	f000 fcb3 	bl	8001156 <Error_Handler>
    }

      MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <main+0x2a4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6859      	ldr	r1, [r3, #4]
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <main+0x2a4>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <main+0x2b8>)
 80007fc:	400b      	ands	r3, r1
 80007fe:	6053      	str	r3, [r2, #4]

    /* Enable Rx DMA Request */
    SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <main+0x2a4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <main+0x2a4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800080e:	609a      	str	r2, [r3, #8]

    /* Enable the SPI Error Interrupt Bit */
    __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <main+0x2a4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	691a      	ldr	r2, [r3, #16]
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <main+0x2a4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800081e:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi1);
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <main+0x2a4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <main+0x2a4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0201 	orr.w	r2, r2, #1
 800082e:	601a      	str	r2, [r3, #0]

      SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <main+0x2a4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <main+0x2a4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800083e:	601a      	str	r2, [r3, #0]

  while (wTransferState != TRANSFER_H_COMPLETE)
 8000840:	e002      	b.n	8000848 <main+0x278>
  {
	    BSP_LED_Toggle(LED3);
 8000842:	2002      	movs	r0, #2
 8000844:	f001 f89a 	bl	800197c <BSP_LED_Toggle>
  while (wTransferState != TRANSFER_H_COMPLETE)
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <main+0x2bc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d1f8      	bne.n	8000842 <main+0x272>
  }
  wTransferState = TRANSFER_WAIT;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <main+0x2bc>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
  int j = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  for( int i = 0; i < txCount; ++i, j += 5 ){
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	e025      	b.n	80008ac <main+0x2dc>
 8000860:	24000080 	.word	0x24000080
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	24000060 	.word	0x24000060
 800086c:	2400590c 	.word	0x2400590c
 8000870:	2400005c 	.word	0x2400005c
 8000874:	24005f24 	.word	0x24005f24
 8000878:	080010bd 	.word	0x080010bd
 800087c:	080010dd 	.word	0x080010dd
 8000880:	24005fac 	.word	0x24005fac
 8000884:	24000880 	.word	0x24000880
 8000888:	ffff0000 	.word	0xffff0000
 800088c:	24005880 	.word	0x24005880
	  aTxBuffer[i] = aRxBuffer[j];
 8000890:	4a63      	ldr	r2, [pc, #396]	; (8000a20 <main+0x450>)
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000898:	4a62      	ldr	r2, [pc, #392]	; (8000a24 <main+0x454>)
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i, j += 5 ){
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	3301      	adds	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3305      	adds	r3, #5
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	897b      	ldrh	r3, [r7, #10]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dbed      	blt.n	8000890 <main+0x2c0>
  }
  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 80008b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008b8:	495a      	ldr	r1, [pc, #360]	; (8000a24 <main+0x454>)
 80008ba:	485b      	ldr	r0, [pc, #364]	; (8000a28 <main+0x458>)
 80008bc:	f007 fc84 	bl	80081c8 <HAL_UART_Transmit_DMA>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <main+0x2fc>
  {
    Error_Handler();
 80008c6:	f000 fc46 	bl	8001156 <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (wTransferState != TRANSFER_COMPLETE) {}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	4b57      	ldr	r3, [pc, #348]	; (8000a2c <main+0x45c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d1fb      	bne.n	80008ce <main+0x2fe>
	  wTransferState = TRANSFER_WAIT;
 80008d6:	4b55      	ldr	r3, [pc, #340]	; (8000a2c <main+0x45c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
	  j = rxOffset;
 80008dc:	89bb      	ldrh	r3, [r7, #12]
 80008de:	61fb      	str	r3, [r7, #28]
	  for( int i = 0; i < txCount; ++i, j+=5 ){
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e00d      	b.n	8000902 <main+0x332>
		  aTxBuffer[i] = aRxBuffer[j];
 80008e6:	4a4e      	ldr	r2, [pc, #312]	; (8000a20 <main+0x450>)
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008ee:	4a4d      	ldr	r2, [pc, #308]	; (8000a24 <main+0x454>)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 0; i < txCount; ++i, j+=5 ){
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	3305      	adds	r3, #5
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	897b      	ldrh	r3, [r7, #10]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	429a      	cmp	r2, r3
 8000908:	dbed      	blt.n	80008e6 <main+0x316>
	  }
	  while ((UartReady == RESET)) {}
 800090a:	bf00      	nop
 800090c:	4b48      	ldr	r3, [pc, #288]	; (8000a30 <main+0x460>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0fa      	beq.n	800090c <main+0x33c>
	  UartReady = RESET;
 8000916:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <main+0x460>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
//	  HAL_DMA_Start_IT(huart3.hdmatx, (uint32_t)aTxBuffer, (uint32_t)&huart3.Instance->TDR, sizeof(aTxBuffer));
	  __HAL_DMA_ENABLE(&hdma_usart3_tx);
 800091c:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <main+0x464>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a45      	ldr	r2, [pc, #276]	; (8000a38 <main+0x468>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d04a      	beq.n	80009bc <main+0x3ec>
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <main+0x464>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a44      	ldr	r2, [pc, #272]	; (8000a3c <main+0x46c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d045      	beq.n	80009bc <main+0x3ec>
 8000930:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <main+0x464>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <main+0x470>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d040      	beq.n	80009bc <main+0x3ec>
 800093a:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <main+0x464>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <main+0x474>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d03b      	beq.n	80009bc <main+0x3ec>
 8000944:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <main+0x464>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <main+0x478>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d036      	beq.n	80009bc <main+0x3ec>
 800094e:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <main+0x464>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a3e      	ldr	r2, [pc, #248]	; (8000a4c <main+0x47c>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d031      	beq.n	80009bc <main+0x3ec>
 8000958:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <main+0x464>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a3c      	ldr	r2, [pc, #240]	; (8000a50 <main+0x480>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d02c      	beq.n	80009bc <main+0x3ec>
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <main+0x464>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a3b      	ldr	r2, [pc, #236]	; (8000a54 <main+0x484>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d027      	beq.n	80009bc <main+0x3ec>
 800096c:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <main+0x464>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a39      	ldr	r2, [pc, #228]	; (8000a58 <main+0x488>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d022      	beq.n	80009bc <main+0x3ec>
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <main+0x464>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <main+0x48c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d01d      	beq.n	80009bc <main+0x3ec>
 8000980:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <main+0x464>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a36      	ldr	r2, [pc, #216]	; (8000a60 <main+0x490>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d018      	beq.n	80009bc <main+0x3ec>
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <main+0x464>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a35      	ldr	r2, [pc, #212]	; (8000a64 <main+0x494>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d013      	beq.n	80009bc <main+0x3ec>
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <main+0x464>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a33      	ldr	r2, [pc, #204]	; (8000a68 <main+0x498>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d00e      	beq.n	80009bc <main+0x3ec>
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <main+0x464>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a32      	ldr	r2, [pc, #200]	; (8000a6c <main+0x49c>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d009      	beq.n	80009bc <main+0x3ec>
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <main+0x464>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a30      	ldr	r2, [pc, #192]	; (8000a70 <main+0x4a0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d004      	beq.n	80009bc <main+0x3ec>
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <main+0x464>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <main+0x4a4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d108      	bne.n	80009ce <main+0x3fe>
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <main+0x464>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <main+0x464>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0201 	orr.w	r2, r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e007      	b.n	80009de <main+0x40e>
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <main+0x464>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <main+0x464>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f042 0201 	orr.w	r2, r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
	  MODIFY_REG(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <main+0x46c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f023 031e 	bic.w	r3, r3, #30
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <main+0x46c>)
 80009e8:	f043 0316 	orr.w	r3, r3, #22
 80009ec:	6013      	str	r3, [r2, #0]
	  __HAL_UART_CLEAR_FLAG(&huart3, UART_CLEAR_TCF);
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <main+0x458>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2240      	movs	r2, #64	; 0x40
 80009f4:	621a      	str	r2, [r3, #32]
	  SET_BIT(huart3.Instance->CR3, USART_CR3_DMAT);
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <main+0x458>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <main+0x458>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a04:	609a      	str	r2, [r3, #8]
	  /*##-2- Start the transmission process #####################################*/
//	  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
//	  {
//	    Error_Handler();
//	  }
	  while (wTransferState != TRANSFER_H_COMPLETE) {}
 8000a06:	bf00      	nop
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <main+0x45c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d1fb      	bne.n	8000a08 <main+0x438>
	  wTransferState = TRANSFER_WAIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <main+0x45c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
	  j = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
	  for( int i = 0; i < txCount; ++i, j+=5 ){
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	e039      	b.n	8000a94 <main+0x4c4>
 8000a20:	24000880 	.word	0x24000880
 8000a24:	24000080 	.word	0x24000080
 8000a28:	2400590c 	.word	0x2400590c
 8000a2c:	24005880 	.word	0x24005880
 8000a30:	2400005c 	.word	0x2400005c
 8000a34:	24005da4 	.word	0x24005da4
 8000a38:	40020010 	.word	0x40020010
 8000a3c:	40020028 	.word	0x40020028
 8000a40:	40020040 	.word	0x40020040
 8000a44:	40020058 	.word	0x40020058
 8000a48:	40020070 	.word	0x40020070
 8000a4c:	40020088 	.word	0x40020088
 8000a50:	400200a0 	.word	0x400200a0
 8000a54:	400200b8 	.word	0x400200b8
 8000a58:	40020410 	.word	0x40020410
 8000a5c:	40020428 	.word	0x40020428
 8000a60:	40020440 	.word	0x40020440
 8000a64:	40020458 	.word	0x40020458
 8000a68:	40020470 	.word	0x40020470
 8000a6c:	40020488 	.word	0x40020488
 8000a70:	400204a0 	.word	0x400204a0
 8000a74:	400204b8 	.word	0x400204b8
		  aTxBuffer[i] = aRxBuffer[j];
 8000a78:	4a4a      	ldr	r2, [pc, #296]	; (8000ba4 <main+0x5d4>)
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a80:	4a49      	ldr	r2, [pc, #292]	; (8000ba8 <main+0x5d8>)
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 0; i < txCount; ++i, j+=5 ){
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3305      	adds	r3, #5
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	897b      	ldrh	r3, [r7, #10]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbed      	blt.n	8000a78 <main+0x4a8>
	  }

	  while ((UartReady == RESET)) {}
 8000a9c:	bf00      	nop
 8000a9e:	4b43      	ldr	r3, [pc, #268]	; (8000bac <main+0x5dc>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0fa      	beq.n	8000a9e <main+0x4ce>
	  UartReady = RESET;
 8000aa8:	4b40      	ldr	r3, [pc, #256]	; (8000bac <main+0x5dc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	  /*##-2- Start the transmission process #####################################*/
	  __HAL_DMA_ENABLE(&hdma_usart3_tx);
 8000aae:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <main+0x5e0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <main+0x5e4>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d04a      	beq.n	8000b4e <main+0x57e>
 8000ab8:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <main+0x5e0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a3e      	ldr	r2, [pc, #248]	; (8000bb8 <main+0x5e8>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d045      	beq.n	8000b4e <main+0x57e>
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <main+0x5e0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a3d      	ldr	r2, [pc, #244]	; (8000bbc <main+0x5ec>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d040      	beq.n	8000b4e <main+0x57e>
 8000acc:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <main+0x5e0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a3b      	ldr	r2, [pc, #236]	; (8000bc0 <main+0x5f0>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d03b      	beq.n	8000b4e <main+0x57e>
 8000ad6:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <main+0x5e0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a3a      	ldr	r2, [pc, #232]	; (8000bc4 <main+0x5f4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d036      	beq.n	8000b4e <main+0x57e>
 8000ae0:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <main+0x5e0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a38      	ldr	r2, [pc, #224]	; (8000bc8 <main+0x5f8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d031      	beq.n	8000b4e <main+0x57e>
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <main+0x5e0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a37      	ldr	r2, [pc, #220]	; (8000bcc <main+0x5fc>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d02c      	beq.n	8000b4e <main+0x57e>
 8000af4:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <main+0x5e0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a35      	ldr	r2, [pc, #212]	; (8000bd0 <main+0x600>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d027      	beq.n	8000b4e <main+0x57e>
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <main+0x5e0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <main+0x604>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d022      	beq.n	8000b4e <main+0x57e>
 8000b08:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <main+0x5e0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <main+0x608>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d01d      	beq.n	8000b4e <main+0x57e>
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <main+0x5e0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <main+0x60c>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d018      	beq.n	8000b4e <main+0x57e>
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <main+0x5e0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <main+0x610>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d013      	beq.n	8000b4e <main+0x57e>
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <main+0x5e0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <main+0x614>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d00e      	beq.n	8000b4e <main+0x57e>
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <main+0x5e0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a2c      	ldr	r2, [pc, #176]	; (8000be8 <main+0x618>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d009      	beq.n	8000b4e <main+0x57e>
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <main+0x5e0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a2b      	ldr	r2, [pc, #172]	; (8000bec <main+0x61c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d004      	beq.n	8000b4e <main+0x57e>
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <main+0x5e0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a29      	ldr	r2, [pc, #164]	; (8000bf0 <main+0x620>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d108      	bne.n	8000b60 <main+0x590>
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <main+0x5e0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <main+0x5e0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f042 0201 	orr.w	r2, r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e007      	b.n	8000b70 <main+0x5a0>
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <main+0x5e0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <main+0x5e0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f042 0201 	orr.w	r2, r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]
	  MODIFY_REG(USART3_DMA_INSTANCE->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <main+0x5e8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f023 031e 	bic.w	r3, r3, #30
 8000b78:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <main+0x5e8>)
 8000b7a:	f043 0316 	orr.w	r3, r3, #22
 8000b7e:	6013      	str	r3, [r2, #0]
	  __HAL_UART_CLEAR_FLAG(&huart3, UART_CLEAR_TCF);
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <main+0x624>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2240      	movs	r2, #64	; 0x40
 8000b86:	621a      	str	r2, [r3, #32]
	  SET_BIT(huart3.Instance->CR3, USART_CR3_DMAT);
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <main+0x624>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <main+0x624>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b96:	609a      	str	r2, [r3, #8]
	  while (wTransferState != TRANSFER_COMPLETE) {}
 8000b98:	e698      	b.n	80008cc <main+0x2fc>
  }
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24000880 	.word	0x24000880
 8000ba8:	24000080 	.word	0x24000080
 8000bac:	2400005c 	.word	0x2400005c
 8000bb0:	24005da4 	.word	0x24005da4
 8000bb4:	40020010 	.word	0x40020010
 8000bb8:	40020028 	.word	0x40020028
 8000bbc:	40020040 	.word	0x40020040
 8000bc0:	40020058 	.word	0x40020058
 8000bc4:	40020070 	.word	0x40020070
 8000bc8:	40020088 	.word	0x40020088
 8000bcc:	400200a0 	.word	0x400200a0
 8000bd0:	400200b8 	.word	0x400200b8
 8000bd4:	40020410 	.word	0x40020410
 8000bd8:	40020428 	.word	0x40020428
 8000bdc:	40020440 	.word	0x40020440
 8000be0:	40020458 	.word	0x40020458
 8000be4:	40020470 	.word	0x40020470
 8000be8:	40020488 	.word	0x40020488
 8000bec:	400204a0 	.word	0x400204a0
 8000bf0:	400204b8 	.word	0x400204b8
 8000bf4:	2400590c 	.word	0x2400590c

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09c      	sub	sp, #112	; 0x70
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	224c      	movs	r2, #76	; 0x4c
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f008 ff3a 	bl	8009a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f008 ff34 	bl	8009a80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f004 fb81 	bl	8005320 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <SystemClock_Config+0x100>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a34      	ldr	r2, [pc, #208]	; (8000cf8 <SystemClock_Config+0x100>)
 8000c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <SystemClock_Config+0x100>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <SystemClock_Config+0x104>)
 8000c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3c:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <SystemClock_Config+0x104>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <SystemClock_Config+0x104>)
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c50:	bf00      	nop
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <SystemClock_Config+0x100>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5e:	d1f8      	bne.n	8000c52 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <SystemClock_Config+0x108>)
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	f023 0303 	bic.w	r3, r3, #3
 8000c68:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <SystemClock_Config+0x108>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c70:	2321      	movs	r3, #33	; 0x21
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c74:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c82:	2302      	movs	r3, #2
 8000c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 115;
 8000c8a:	2373      	movs	r3, #115	; 0x73
 8000c8c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c92:	2304      	movs	r3, #4
 8000c94:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4618      	mov	r0, r3
 8000cac:	f004 fb72 	bl	8005394 <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cb6:	f000 fa4e 	bl	8001156 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	233f      	movs	r3, #63	; 0x3f
 8000cbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cca:	2340      	movs	r3, #64	; 0x40
 8000ccc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cce:	2340      	movs	r3, #64	; 0x40
 8000cd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cd8:	2340      	movs	r3, #64	; 0x40
 8000cda:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f004 ff67 	bl	8005bb4 <HAL_RCC_ClockConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000cec:	f000 fa33 	bl	8001156 <Error_Handler>
  }


}
 8000cf0:	bf00      	nop
 8000cf2:	3770      	adds	r7, #112	; 0x70
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	58024800 	.word	0x58024800
 8000cfc:	58000400 	.word	0x58000400
 8000d00:	58024400 	.word	0x58024400

08000d04 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d0a:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <MX_SPI1_Init+0xac>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d1c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d20:	220d      	movs	r2, #13
 8000d22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_SPI1_Init+0xa8>)
 8000d98:	f006 fdfa 	bl	8007990 <HAL_SPI_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000da2:	f000 f9d8 	bl	8001156 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24005f24 	.word	0x24005f24
 8000db0:	40013000 	.word	0x40013000

08000db4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000dba:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <MX_USART3_UART_Init+0xac>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11978688;
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000dc0:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <MX_USART3_UART_Init+0xb0>)
 8000dc2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000dd8:	220c      	movs	r2, #12
 8000dda:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000de4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000e04:	f007 f98f 	bl	8008126 <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000e0e:	f000 f9a2 	bl	8001156 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4811      	ldr	r0, [pc, #68]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000e16:	f008 fd44 	bl	80098a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000e20:	f000 f999 	bl	8001156 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000e28:	f008 fd79 	bl	800991e <HAL_UARTEx_SetRxFifoThreshold>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000e32:	f000 f990 	bl	8001156 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_USART3_UART_Init+0xa8>)
 8000e38:	f008 fcf8 	bl	800982c <HAL_UARTEx_EnableFifoMode>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000e42:	f000 f988 	bl	8001156 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2027      	movs	r0, #39	; 0x27
 8000e4c:	f001 f8a7 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e50:	2027      	movs	r0, #39	; 0x27
 8000e52:	f001 f8be 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2400590c 	.word	0x2400590c
 8000e60:	40004800 	.word	0x40004800
 8000e64:	00b6c7c0 	.word	0x00b6c7c0

08000e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_DMA_Init+0x7c>)
 8000e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <MX_DMA_Init+0x7c>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_DMA_Init+0x7c>)
 8000e80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_DMA_Init+0x7c>)
 8000e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <MX_DMA_Init+0x7c>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_DMA_Init+0x7c>)
 8000e9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2100      	movs	r1, #0
 8000eae:	200b      	movs	r0, #11
 8000eb0:	f001 f875 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb4:	200b      	movs	r0, #11
 8000eb6:	f001 f88c 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f001 f86d 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ec4:	200c      	movs	r0, #12
 8000ec6:	f001 f884 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2038      	movs	r0, #56	; 0x38
 8000ed0:	f001 f865 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ed4:	2038      	movs	r0, #56	; 0x38
 8000ed6:	f001 f87c 	bl	8001fd2 <HAL_NVIC_EnableIRQ>

}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	58024400 	.word	0x58024400

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	; 0x30
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b57      	ldr	r3, [pc, #348]	; (800105c <MX_GPIO_Init+0x174>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	4a55      	ldr	r2, [pc, #340]	; (800105c <MX_GPIO_Init+0x174>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0e:	4b53      	ldr	r3, [pc, #332]	; (800105c <MX_GPIO_Init+0x174>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1c:	4b4f      	ldr	r3, [pc, #316]	; (800105c <MX_GPIO_Init+0x174>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	4a4e      	ldr	r2, [pc, #312]	; (800105c <MX_GPIO_Init+0x174>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2c:	4b4b      	ldr	r3, [pc, #300]	; (800105c <MX_GPIO_Init+0x174>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b48      	ldr	r3, [pc, #288]	; (800105c <MX_GPIO_Init+0x174>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f40:	4a46      	ldr	r2, [pc, #280]	; (800105c <MX_GPIO_Init+0x174>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4a:	4b44      	ldr	r3, [pc, #272]	; (800105c <MX_GPIO_Init+0x174>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b40      	ldr	r3, [pc, #256]	; (800105c <MX_GPIO_Init+0x174>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5e:	4a3f      	ldr	r2, [pc, #252]	; (800105c <MX_GPIO_Init+0x174>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f68:	4b3c      	ldr	r3, [pc, #240]	; (800105c <MX_GPIO_Init+0x174>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <MX_GPIO_Init+0x174>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	4a37      	ldr	r2, [pc, #220]	; (800105c <MX_GPIO_Init+0x174>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <MX_GPIO_Init+0x174>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f94:	4b31      	ldr	r3, [pc, #196]	; (800105c <MX_GPIO_Init+0x174>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	4a30      	ldr	r2, [pc, #192]	; (800105c <MX_GPIO_Init+0x174>)
 8000f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_GPIO_Init+0x174>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <MX_GPIO_Init+0x174>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a28      	ldr	r2, [pc, #160]	; (800105c <MX_GPIO_Init+0x174>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_GPIO_Init+0x174>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <MX_GPIO_Init+0x178>)
 8000fd8:	f004 f954 	bl	8005284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4820      	ldr	r0, [pc, #128]	; (8001064 <MX_GPIO_Init+0x17c>)
 8000fe2:	f004 f94f 	bl	8005284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	481b      	ldr	r0, [pc, #108]	; (8001068 <MX_GPIO_Init+0x180>)
 8000ffc:	f003 ff92 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001000:	f244 0301 	movw	r3, #16385	; 0x4001
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4811      	ldr	r0, [pc, #68]	; (8001060 <MX_GPIO_Init+0x178>)
 800101a:	f003 ff83 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800101e:	2302      	movs	r3, #2
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <MX_GPIO_Init+0x17c>)
 8001036:	f003 ff75 	bl	8004f24 <HAL_GPIO_Init>

  BSP_LED_Init(LED1);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 fbd4 	bl	80017e8 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 fbd1 	bl	80017e8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001046:	2002      	movs	r0, #2
 8001048:	f000 fbce 	bl	80017e8 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800104c:	2101      	movs	r1, #1
 800104e:	2000      	movs	r0, #0
 8001050:	f000 fcbe 	bl	80019d0 <BSP_PB_Init>
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	; 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	58024400 	.word	0x58024400
 8001060:	58020400 	.word	0x58020400
 8001064:	58021000 	.word	0x58021000
 8001068:	58020800 	.word	0x58020800

0800106c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800107c:	d105      	bne.n	800108a <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f083 0301 	eor.w	r3, r3, #1
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001088:	6013      	str	r3, [r2, #0]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	24000060 	.word	0x24000060

0800109c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Turn LED1 on: Transfer in transmission process is complete */
  BSP_LED_On(LED1);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 fc15 	bl	80018d4 <BSP_LED_On>
  wTransferState = TRANSFER_COMPLETE;
 80010aa:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_SPI_RxCpltCallback+0x1c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	24005880 	.word	0x24005880

080010bc <tx_complete>:

void tx_complete(DMA_HandleTypeDef *hdma)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
	  BSP_LED_On(LED1);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 fc05 	bl	80018d4 <BSP_LED_On>
	  wTransferState = TRANSFER_COMPLETE;
 80010ca:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <tx_complete+0x1c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24005880 	.word	0x24005880

080010dc <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
	  BSP_LED_On(LED1);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 fbf5 	bl	80018d4 <BSP_LED_On>
	  wTransferState = TRANSFER_H_COMPLETE;
 80010ea:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <tx_h_complete+0x1c>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	24005880 	.word	0x24005880

080010fc <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_SPI_ErrorCallback+0x1c>)
 8001106:	2203      	movs	r2, #3
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	24005880 	.word	0x24005880

0800111c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <HAL_UART_TxCpltCallback+0x1c>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
  /* Turn LED2 off: Transfer in transmission process is correct */
  BSP_LED_On(LED2);
 800112a:	2001      	movs	r0, #1
 800112c:	f000 fbd2 	bl	80018d4 <BSP_LED_On>

}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2400005c 	.word	0x2400005c

0800113c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8001144:	2002      	movs	r0, #2
 8001146:	f000 fbc5 	bl	80018d4 <BSP_LED_On>
  Error_Handler();
 800114a:	f000 f804 	bl	8001156 <Error_Handler>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800115a:	b672      	cpsid	i
}
 800115c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 800115e:	2002      	movs	r0, #2
 8001160:	f000 fc0c 	bl	800197c <BSP_LED_Toggle>
	    HAL_Delay(100);
 8001164:	2064      	movs	r0, #100	; 0x64
 8001166:	f000 fdff 	bl	8001d68 <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 800116a:	e7f8      	b.n	800115e <Error_Handler+0x8>

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_MspInit+0x30>)
 8001174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_MspInit+0x30>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_MspInit+0x30>)
 8001184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	58024400 	.word	0x58024400

080011a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0bc      	sub	sp, #240	; 0xf0
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	22bc      	movs	r2, #188	; 0xbc
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f008 fc5d 	bl	8009a80 <memset>
  if(hspi->Instance==SPI1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4aa0      	ldr	r2, [pc, #640]	; (800144c <HAL_SPI_MspInit+0x2ac>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	f040 8096 	bne.w	80012fe <HAL_SPI_MspInit+0x15e>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	623b      	str	r3, [r7, #32]
      PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	67fb      	str	r3, [r7, #124]	; 0x7c
      PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 80011de:	2304      	movs	r3, #4
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
      PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 80011e2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
      PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 80011e8:	2308      	movs	r3, #8
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 80011ec:	2302      	movs	r3, #2
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
      PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 80011f0:	2302      	movs	r3, #2
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
      PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80011f4:	2340      	movs	r3, #64	; 0x40
 80011f6:	63bb      	str	r3, [r7, #56]	; 0x38
      PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4618      	mov	r0, r3
 8001206:	f005 f861 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_SPI_MspInit+0x74>
      {
        Error_Handler();
 8001210:	f7ff ffa1 	bl	8001156 <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 8001214:	4b8e      	ldr	r3, [pc, #568]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 8001216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800121a:	4a8d      	ldr	r2, [pc, #564]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 800121c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001220:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001224:	4b8a      	ldr	r3, [pc, #552]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 8001226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	69fb      	ldr	r3, [r7, #28]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b87      	ldr	r3, [pc, #540]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a85      	ldr	r2, [pc, #532]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b83      	ldr	r3, [pc, #524]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
      /**SPI1 GPIO Configuration
      PA5     ------> SPI1_SCK
      PA6     ------> SPI1_MISO
      PA15 (JTDI)     ------> SPI1_NSS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8001250:	f248 0360 	movw	r3, #32864	; 0x8060
 8001254:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800126a:	2305      	movs	r3, #5
 800126c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001274:	4619      	mov	r1, r3
 8001276:	4877      	ldr	r0, [pc, #476]	; (8001454 <HAL_SPI_MspInit+0x2b4>)
 8001278:	f003 fe54 	bl	8004f24 <HAL_GPIO_Init>

      /* SPI1 DMA Init */
      /* SPI1_RX Init */
      hdma_spi1_rx.Instance = DMA2_Stream0;
 800127c:	4b76      	ldr	r3, [pc, #472]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 800127e:	4a77      	ldr	r2, [pc, #476]	; (800145c <HAL_SPI_MspInit+0x2bc>)
 8001280:	601a      	str	r2, [r3, #0]
      hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001282:	4b75      	ldr	r3, [pc, #468]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 8001284:	2225      	movs	r2, #37	; 0x25
 8001286:	605a      	str	r2, [r3, #4]
      hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001288:	4b73      	ldr	r3, [pc, #460]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
      hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800128e:	4b72      	ldr	r3, [pc, #456]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
      hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001294:	4b70      	ldr	r3, [pc, #448]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 8001296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129a:	611a      	str	r2, [r3, #16]
      hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800129c:	4b6e      	ldr	r3, [pc, #440]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 800129e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012a2:	615a      	str	r2, [r3, #20]
      hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012a4:	4b6c      	ldr	r3, [pc, #432]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012aa:	619a      	str	r2, [r3, #24]
      hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b2:	61da      	str	r2, [r3, #28]
      hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
      hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012bc:	2204      	movs	r2, #4
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80012c0:	4b65      	ldr	r3, [pc, #404]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80012c6:	4b64      	ldr	r3, [pc, #400]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012cc:	4b62      	ldr	r3, [pc, #392]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80012d2:	4861      	ldr	r0, [pc, #388]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012d4:	f000 fe98 	bl	8002008 <HAL_DMA_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_SPI_MspInit+0x142>
      {
        Error_Handler();
 80012de:	f7ff ff3a 	bl	8001156 <Error_Handler>
      }

      __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a5c      	ldr	r2, [pc, #368]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80012e8:	4a5b      	ldr	r2, [pc, #364]	; (8001458 <HAL_SPI_MspInit+0x2b8>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6393      	str	r3, [r2, #56]	; 0x38

      /* SPI1 interrupt Init */
      HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2023      	movs	r0, #35	; 0x23
 80012f4:	f000 fe53 	bl	8001f9e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012f8:	2023      	movs	r0, #35	; 0x23
 80012fa:	f000 fe6a 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
    }
  if(hspi->Instance==SPI2)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a57      	ldr	r2, [pc, #348]	; (8001460 <HAL_SPI_MspInit+0x2c0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	f040 809d 	bne.w	8001444 <HAL_SPI_MspInit+0x2a4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800130a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001316:	2304      	movs	r3, #4
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800131a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001320:	2308      	movs	r3, #8
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001324:	2302      	movs	r3, #2
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 8001328:	2302      	movs	r3, #2
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800132c:	2340      	movs	r3, #64	; 0x40
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001330:	2300      	movs	r3, #0
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	4618      	mov	r0, r3
 800133e:	f004 ffc5 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 8001348:	f7ff ff05 	bl	8001156 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 800134e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001352:	4a3f      	ldr	r2, [pc, #252]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 800135e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	4a37      	ldr	r2, [pc, #220]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137a:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	4a30      	ldr	r2, [pc, #192]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4a28      	ldr	r2, [pc, #160]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_SPI_MspInit+0x2b0>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013c4:	230c      	movs	r3, #12
 80013c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013dc:	2305      	movs	r3, #5
 80013de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013e6:	4619      	mov	r1, r3
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <HAL_SPI_MspInit+0x2c4>)
 80013ea:	f003 fd9b 	bl	8004f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001408:	2305      	movs	r3, #5
 800140a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001412:	4619      	mov	r1, r3
 8001414:	4814      	ldr	r0, [pc, #80]	; (8001468 <HAL_SPI_MspInit+0x2c8>)
 8001416:	f003 fd85 	bl	8004f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800141a:	2308      	movs	r3, #8
 800141c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001432:	2305      	movs	r3, #5
 8001434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001438:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800143c:	4619      	mov	r1, r3
 800143e:	480b      	ldr	r0, [pc, #44]	; (800146c <HAL_SPI_MspInit+0x2cc>)
 8001440:	f003 fd70 	bl	8004f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	37f0      	adds	r7, #240	; 0xf0
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40013000 	.word	0x40013000
 8001450:	58024400 	.word	0x58024400
 8001454:	58020000 	.word	0x58020000
 8001458:	24005fac 	.word	0x24005fac
 800145c:	40020410 	.word	0x40020410
 8001460:	40003800 	.word	0x40003800
 8001464:	58020800 	.word	0x58020800
 8001468:	58020400 	.word	0x58020400
 800146c:	58020c00 	.word	0x58020c00

08001470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ba      	sub	sp, #232	; 0xe8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	22bc      	movs	r2, #188	; 0xbc
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f008 faf5 	bl	8009a80 <memset>
  if(huart->Instance==USART1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a94      	ldr	r2, [pc, #592]	; (80016ec <HAL_UART_MspInit+0x27c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	f040 8098 	bne.w	80015d2 <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80014a6:	2304      	movs	r3, #4
 80014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80014aa:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80014b0:	2309      	movs	r3, #9
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80014b4:	2308      	movs	r3, #8
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80014bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c0:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 80014ca:	2310      	movs	r3, #16
 80014cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fef9 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 80014e0:	f7ff fe39 	bl	8001156 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e4:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <HAL_UART_MspInit+0x280>)
 80014e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ea:	4a81      	ldr	r2, [pc, #516]	; (80016f0 <HAL_UART_MspInit+0x280>)
 80014ec:	f043 0310 	orr.w	r3, r3, #16
 80014f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014f4:	4b7e      	ldr	r3, [pc, #504]	; (80016f0 <HAL_UART_MspInit+0x280>)
 80014f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	4b7b      	ldr	r3, [pc, #492]	; (80016f0 <HAL_UART_MspInit+0x280>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	4a79      	ldr	r2, [pc, #484]	; (80016f0 <HAL_UART_MspInit+0x280>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001512:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <HAL_UART_MspInit+0x280>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001524:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800153a:	2304      	movs	r3, #4
 800153c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001544:	4619      	mov	r1, r3
 8001546:	486b      	ldr	r0, [pc, #428]	; (80016f4 <HAL_UART_MspInit+0x284>)
 8001548:	f003 fcec 	bl	8004f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800154c:	2340      	movs	r3, #64	; 0x40
 800154e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001564:	2307      	movs	r3, #7
 8001566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800156e:	4619      	mov	r1, r3
 8001570:	4860      	ldr	r0, [pc, #384]	; (80016f4 <HAL_UART_MspInit+0x284>)
 8001572:	f003 fcd7 	bl	8004f24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8001576:	4b60      	ldr	r3, [pc, #384]	; (80016f8 <HAL_UART_MspInit+0x288>)
 8001578:	4a60      	ldr	r2, [pc, #384]	; (80016fc <HAL_UART_MspInit+0x28c>)
 800157a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800157c:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <HAL_UART_MspInit+0x288>)
 800157e:	222a      	movs	r2, #42	; 0x2a
 8001580:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001582:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <HAL_UART_MspInit+0x288>)
 8001584:	2240      	movs	r2, #64	; 0x40
 8001586:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001588:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_UART_MspInit+0x288>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800158e:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HAL_UART_MspInit+0x288>)
 8001590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001594:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001596:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_UART_MspInit+0x288>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800159c:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <HAL_UART_MspInit+0x288>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015a2:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_UART_MspInit+0x288>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015a8:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_UART_MspInit+0x288>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ae:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <HAL_UART_MspInit+0x288>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015b4:	4850      	ldr	r0, [pc, #320]	; (80016f8 <HAL_UART_MspInit+0x288>)
 80015b6:	f000 fd27 	bl	8002008 <HAL_DMA_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 80015c0:	f7ff fdc9 	bl	8001156 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a4c      	ldr	r2, [pc, #304]	; (80016f8 <HAL_UART_MspInit+0x288>)
 80015c8:	679a      	str	r2, [r3, #120]	; 0x78
 80015ca:	4a4b      	ldr	r2, [pc, #300]	; (80016f8 <HAL_UART_MspInit+0x288>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015d0:	e088      	b.n	80016e4 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a4a      	ldr	r2, [pc, #296]	; (8001700 <HAL_UART_MspInit+0x290>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	f040 8083 	bne.w	80016e4 <HAL_UART_MspInit+0x274>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 80015e2:	2304      	movs	r3, #4
 80015e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 80015e6:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 80015ec:	2309      	movs	r3, #9
 80015ee:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 80015f0:	2308      	movs	r3, #8
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 80015f4:	2302      	movs	r3, #2
 80015f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80015f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fc:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80015fe:	2300      	movs	r3, #0
 8001600:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	65bb      	str	r3, [r7, #88]	; 0x58
	  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160c:	f107 0318 	add.w	r3, r7, #24
 8001610:	4618      	mov	r0, r3
 8001612:	f004 fe5b 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_UART_MspInit+0x1b0>
	    Error_Handler();
 800161c:	f7ff fd9b 	bl	8001156 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001620:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <HAL_UART_MspInit+0x280>)
 8001622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001626:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <HAL_UART_MspInit+0x280>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_UART_MspInit+0x280>)
 8001632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <HAL_UART_MspInit+0x280>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	4a2a      	ldr	r2, [pc, #168]	; (80016f0 <HAL_UART_MspInit+0x280>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_UART_MspInit+0x280>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800165c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001676:	2307      	movs	r3, #7
 8001678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001680:	4619      	mov	r1, r3
 8001682:	4820      	ldr	r0, [pc, #128]	; (8001704 <HAL_UART_MspInit+0x294>)
 8001684:	f003 fc4e 	bl	8004f24 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_UART_MspInit+0x298>)
 800168a:	4a20      	ldr	r2, [pc, #128]	; (800170c <HAL_UART_MspInit+0x29c>)
 800168c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_UART_MspInit+0x298>)
 8001690:	222e      	movs	r2, #46	; 0x2e
 8001692:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_UART_MspInit+0x298>)
 8001696:	2240      	movs	r2, #64	; 0x40
 8001698:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_UART_MspInit+0x298>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_UART_MspInit+0x298>)
 80016a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_UART_MspInit+0x298>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_UART_MspInit+0x298>)
 80016b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_UART_MspInit+0x298>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_UART_MspInit+0x298>)
 80016be:	2200      	movs	r2, #0
 80016c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_UART_MspInit+0x298>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80016c8:	480f      	ldr	r0, [pc, #60]	; (8001708 <HAL_UART_MspInit+0x298>)
 80016ca:	f000 fc9d 	bl	8002008 <HAL_DMA_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_UART_MspInit+0x268>
      Error_Handler();
 80016d4:	f7ff fd3f 	bl	8001156 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_UART_MspInit+0x298>)
 80016dc:	679a      	str	r2, [r3, #120]	; 0x78
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_UART_MspInit+0x298>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016e4:	bf00      	nop
 80016e6:	37e8      	adds	r7, #232	; 0xe8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40011000 	.word	0x40011000
 80016f0:	58024400 	.word	0x58024400
 80016f4:	58020400 	.word	0x58020400
 80016f8:	24005e1c 	.word	0x24005e1c
 80016fc:	40020010 	.word	0x40020010
 8001700:	40004800 	.word	0x40004800
 8001704:	58020c00 	.word	0x58020c00
 8001708:	24005da4 	.word	0x24005da4
 800170c:	40020028 	.word	0x40020028

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 fae4 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <DMA1_Stream0_IRQHandler+0x10>)
 800176a:	f002 f895 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	24005e1c 	.word	0x24005e1c

08001778 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 800177c:	2001      	movs	r0, #1
 800177e:	f000 f8a9 	bl	80018d4 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001782:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA1_Stream1_IRQHandler+0x14>)
 8001784:	f002 f888 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	24005da4 	.word	0x24005da4

08001790 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	  BSP_LED_On(LED1);
 8001794:	2000      	movs	r0, #0
 8001796:	f000 f89d 	bl	80018d4 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800179a:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA2_Stream0_IRQHandler+0x14>)
 800179c:	f002 f87c 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	24005fac 	.word	0x24005fac

080017a8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 80017ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017b0:	f003 fd9b 	bl	80052ea <HAL_GPIO_EXTI_IRQHandler>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 80017bc:	2001      	movs	r0, #1
 80017be:	f000 f889 	bl	80018d4 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 80017c2:	4802      	ldr	r0, [pc, #8]	; (80017cc <USART3_IRQHandler+0x14>)
 80017c4:	f006 fd80 	bl	80082c8 <HAL_UART_IRQHandler>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2400590c 	.word	0x2400590c

080017d0 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <SPI1_IRQHandler+0x14>)
 80017d6:	f006 f9dd 	bl	8007b94 <HAL_SPI_IRQHandler>
  BSP_LED_On(LED2);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 f87a 	bl	80018d4 <BSP_LED_On>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	24005f24 	.word	0x24005f24

080017e8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	; 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d009      	beq.n	8001810 <BSP_LED_Init+0x28>
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d006      	beq.n	8001810 <BSP_LED_Init+0x28>
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d003      	beq.n	8001810 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001808:	f06f 0301 	mvn.w	r3, #1
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180e:	e055      	b.n	80018bc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001816:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <BSP_LED_Init+0xe0>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	4a2a      	ldr	r2, [pc, #168]	; (80018c8 <BSP_LED_Init+0xe0>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <BSP_LED_Init+0xe0>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	e021      	b.n	800187a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d10f      	bne.n	800185c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <BSP_LED_Init+0xe0>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001842:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <BSP_LED_Init+0xe0>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <BSP_LED_Init+0xe0>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	e00e      	b.n	800187a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <BSP_LED_Init+0xe0>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001862:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <BSP_LED_Init+0xe0>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <BSP_LED_Init+0xe0>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4a13      	ldr	r2, [pc, #76]	; (80018cc <BSP_LED_Init+0xe4>)
 800187e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001882:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <BSP_LED_Init+0xe8>)
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	f107 0218 	add.w	r2, r7, #24
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fb40 	bl	8004f24 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <BSP_LED_Init+0xe8>)
 80018a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <BSP_LED_Init+0xe4>)
 80018b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f003 fce4 	bl	8005284 <HAL_GPIO_WritePin>
  }

  return ret;
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3730      	adds	r7, #48	; 0x30
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58024400 	.word	0x58024400
 80018cc:	08009aa8 	.word	0x08009aa8
 80018d0:	24000000 	.word	0x24000000

080018d4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <BSP_LED_On+0x28>
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d006      	beq.n	80018fc <BSP_LED_On+0x28>
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d003      	beq.n	80018fc <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018f4:	f06f 0301 	mvn.w	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	e00b      	b.n	8001914 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <BSP_LED_On+0x4c>)
 8001900:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <BSP_LED_On+0x50>)
 8001908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	f003 fcb8 	bl	8005284 <HAL_GPIO_WritePin>
  }

  return ret;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24000000 	.word	0x24000000
 8001924:	08009aa8 	.word	0x08009aa8

08001928 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <BSP_LED_Off+0x28>
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d006      	beq.n	8001950 <BSP_LED_Off+0x28>
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d003      	beq.n	8001950 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001948:	f06f 0301 	mvn.w	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e00b      	b.n	8001968 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <BSP_LED_Off+0x4c>)
 8001954:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <BSP_LED_Off+0x50>)
 800195c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	f003 fc8e 	bl	8005284 <HAL_GPIO_WritePin>
  }

  return ret;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	24000000 	.word	0x24000000
 8001978:	08009aa8 	.word	0x08009aa8

0800197c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <BSP_LED_Toggle+0x28>
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d006      	beq.n	80019a4 <BSP_LED_Toggle+0x28>
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d003      	beq.n	80019a4 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800199c:	f06f 0301 	mvn.w	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e00b      	b.n	80019bc <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <BSP_LED_Toggle+0x4c>)
 80019a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4907      	ldr	r1, [pc, #28]	; (80019cc <BSP_LED_Toggle+0x50>)
 80019b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f003 fc7d 	bl	80052b6 <HAL_GPIO_TogglePin>
  }

  return ret;
 80019bc:	68fb      	ldr	r3, [r7, #12]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	24000000 	.word	0x24000000
 80019cc:	08009aa8 	.word	0x08009aa8

080019d0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	460a      	mov	r2, r1
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	4613      	mov	r3, r2
 80019de:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <BSP_PB_Init+0xc8>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <BSP_PB_Init+0xc8>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f0:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <BSP_PB_Init+0xc8>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80019fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a02:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001a04:	2302      	movs	r3, #2
 8001a06:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <BSP_PB_Init+0xcc>)
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	f107 020c 	add.w	r2, r7, #12
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fa7d 	bl	8004f24 <HAL_GPIO_Init>
 8001a2a:	e030      	b.n	8001a8e <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <BSP_PB_Init+0xd0>)
 8001a2e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <BSP_PB_Init+0xcc>)
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	f107 020c 	add.w	r2, r7, #12
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fa70 	bl	8004f24 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <BSP_PB_Init+0xd4>)
 8001a4a:	441a      	add	r2, r3
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4916      	ldr	r1, [pc, #88]	; (8001aa8 <BSP_PB_Init+0xd8>)
 8001a50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f003 fa4f 	bl	8004efa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <BSP_PB_Init+0xd4>)
 8001a62:	1898      	adds	r0, r3, r2
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4a11      	ldr	r2, [pc, #68]	; (8001aac <BSP_PB_Init+0xdc>)
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2100      	movs	r1, #0
 8001a70:	f003 fa24 	bl	8004ebc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001a74:	2028      	movs	r0, #40	; 0x28
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <BSP_PB_Init+0xe0>)
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4619      	mov	r1, r3
 8001a82:	f000 fa8c 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a86:	2328      	movs	r3, #40	; 0x28
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 faa2 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	2400000c 	.word	0x2400000c
 8001aa0:	11110000 	.word	0x11110000
 8001aa4:	24006024 	.word	0x24006024
 8001aa8:	08009ab0 	.word	0x08009ab0
 8001aac:	24000010 	.word	0x24000010
 8001ab0:	24000014 	.word	0x24000014

08001ab4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fff0 	bl	8001ab4 <BSP_PB_Callback>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001adc:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <SystemInit+0xec>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae2:	4a38      	ldr	r2, [pc, #224]	; (8001bc4 <SystemInit+0xec>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <SystemInit+0xf0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	2b06      	cmp	r3, #6
 8001af6:	d807      	bhi.n	8001b08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <SystemInit+0xf0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 030f 	bic.w	r3, r3, #15
 8001b00:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <SystemInit+0xf0>)
 8001b02:	f043 0307 	orr.w	r3, r3, #7
 8001b06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <SystemInit+0xf4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <SystemInit+0xf4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <SystemInit+0xf4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <SystemInit+0xf4>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	492b      	ldr	r1, [pc, #172]	; (8001bcc <SystemInit+0xf4>)
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <SystemInit+0xf8>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <SystemInit+0xf0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <SystemInit+0xf0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 030f 	bic.w	r3, r3, #15
 8001b3a:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <SystemInit+0xf0>)
 8001b3c:	f043 0307 	orr.w	r3, r3, #7
 8001b40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <SystemInit+0xf4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <SystemInit+0xf4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <SystemInit+0xf4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <SystemInit+0xf4>)
 8001b56:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <SystemInit+0xfc>)
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <SystemInit+0xf4>)
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <SystemInit+0x100>)
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <SystemInit+0xf4>)
 8001b62:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <SystemInit+0x104>)
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <SystemInit+0xf4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <SystemInit+0xf4>)
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <SystemInit+0x104>)
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <SystemInit+0xf4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <SystemInit+0xf4>)
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <SystemInit+0x104>)
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <SystemInit+0xf4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <SystemInit+0xf4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <SystemInit+0xf4>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <SystemInit+0xf4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <SystemInit+0x108>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <SystemInit+0x10c>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba2:	d202      	bcs.n	8001baa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <SystemInit+0x110>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <SystemInit+0x114>)
 8001bac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bb0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SystemInit+0xec>)
 8001bb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00
 8001bc8:	52002000 	.word	0x52002000
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bd4:	02020200 	.word	0x02020200
 8001bd8:	01ff0000 	.word	0x01ff0000
 8001bdc:	01010280 	.word	0x01010280
 8001be0:	5c001000 	.word	0x5c001000
 8001be4:	ffff0000 	.word	0xffff0000
 8001be8:	51008108 	.word	0x51008108
 8001bec:	52004000 	.word	0x52004000

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bf4:	f7ff ff70 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	; (8001c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f007 ff0b 	bl	8009a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7fe fcd5 	bl	80005d0 <main>
  bx  lr
 8001c26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c30:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001c34:	08009b04 	.word	0x08009b04
  ldr r2, =_sbss
 8001c38:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001c3c:	240060c0 	.word	0x240060c0

08001c40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC3_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	f000 f99c 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c50:	f004 f966 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_Init+0x68>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4913      	ldr	r1, [pc, #76]	; (8001cb0 <HAL_Init+0x6c>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_Init+0x68>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_Init+0x6c>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_Init+0x70>)
 8001c86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_Init+0x74>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f814 	bl	8001cbc <HAL_InitTick>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e002      	b.n	8001ca4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9e:	f7ff fa65 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	08009ab4 	.word	0x08009ab4
 8001cb4:	2400001c 	.word	0x2400001c
 8001cb8:	24000018 	.word	0x24000018

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_InitTick+0x60>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e021      	b.n	8001d14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_InitTick+0x64>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_InitTick+0x60>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f981 	bl	8001fee <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 f94b 	bl	8001f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x68>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	24000024 	.word	0x24000024
 8001d20:	24000018 	.word	0x24000018
 8001d24:	24000020 	.word	0x24000020

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	24000024 	.word	0x24000024
 8001d4c:	240060bc 	.word	0x240060bc

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	240060bc 	.word	0x240060bc

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	24000024 	.word	0x24000024

08001db0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_GetREVID+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0c1b      	lsrs	r3, r3, #16
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	5c001000 	.word	0x5c001000

08001dc8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_EnableCompensationCell+0x1c>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_EnableCompensationCell+0x1c>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	58000400 	.word	0x58000400

08001de8 <__NVIC_SetPriorityGrouping>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <__NVIC_SetPriorityGrouping+0x40>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <__NVIC_SetPriorityGrouping+0x40>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	05fa0000 	.word	0x05fa0000

08001e30 <__NVIC_GetPriorityGrouping>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4907      	ldr	r1, [pc, #28]	; (8001e84 <__NVIC_EnableIRQ+0x38>)
 8001e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f7ff ff8e 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff29 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fac:	f7ff ff40 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff ff90 	bl	8001edc <NVIC_EncodePriority>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff5f 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff33 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffa4 	bl	8001f44 <SysTick_Config>
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff fe9e 	bl	8001d50 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e316      	b.n	800264e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a66      	ldr	r2, [pc, #408]	; (80021c0 <HAL_DMA_Init+0x1b8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d04a      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <HAL_DMA_Init+0x1bc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d045      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a63      	ldr	r2, [pc, #396]	; (80021c8 <HAL_DMA_Init+0x1c0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d040      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a62      	ldr	r2, [pc, #392]	; (80021cc <HAL_DMA_Init+0x1c4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d03b      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a60      	ldr	r2, [pc, #384]	; (80021d0 <HAL_DMA_Init+0x1c8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d036      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a5f      	ldr	r2, [pc, #380]	; (80021d4 <HAL_DMA_Init+0x1cc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d031      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a5d      	ldr	r2, [pc, #372]	; (80021d8 <HAL_DMA_Init+0x1d0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d02c      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a5c      	ldr	r2, [pc, #368]	; (80021dc <HAL_DMA_Init+0x1d4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d027      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5a      	ldr	r2, [pc, #360]	; (80021e0 <HAL_DMA_Init+0x1d8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d022      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a59      	ldr	r2, [pc, #356]	; (80021e4 <HAL_DMA_Init+0x1dc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d01d      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a57      	ldr	r2, [pc, #348]	; (80021e8 <HAL_DMA_Init+0x1e0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d018      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a56      	ldr	r2, [pc, #344]	; (80021ec <HAL_DMA_Init+0x1e4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a54      	ldr	r2, [pc, #336]	; (80021f0 <HAL_DMA_Init+0x1e8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00e      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a53      	ldr	r2, [pc, #332]	; (80021f4 <HAL_DMA_Init+0x1ec>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a51      	ldr	r2, [pc, #324]	; (80021f8 <HAL_DMA_Init+0x1f0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_DMA_Init+0xb8>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a50      	ldr	r2, [pc, #320]	; (80021fc <HAL_DMA_Init+0x1f4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d101      	bne.n	80020c4 <HAL_DMA_Init+0xbc>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_DMA_Init+0xbe>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 813b 	beq.w	8002342 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a37      	ldr	r2, [pc, #220]	; (80021c0 <HAL_DMA_Init+0x1b8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d04a      	beq.n	800217c <HAL_DMA_Init+0x174>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a36      	ldr	r2, [pc, #216]	; (80021c4 <HAL_DMA_Init+0x1bc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d045      	beq.n	800217c <HAL_DMA_Init+0x174>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <HAL_DMA_Init+0x1c0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d040      	beq.n	800217c <HAL_DMA_Init+0x174>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a33      	ldr	r2, [pc, #204]	; (80021cc <HAL_DMA_Init+0x1c4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d03b      	beq.n	800217c <HAL_DMA_Init+0x174>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a31      	ldr	r2, [pc, #196]	; (80021d0 <HAL_DMA_Init+0x1c8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d036      	beq.n	800217c <HAL_DMA_Init+0x174>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a30      	ldr	r2, [pc, #192]	; (80021d4 <HAL_DMA_Init+0x1cc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d031      	beq.n	800217c <HAL_DMA_Init+0x174>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <HAL_DMA_Init+0x1d0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d02c      	beq.n	800217c <HAL_DMA_Init+0x174>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2d      	ldr	r2, [pc, #180]	; (80021dc <HAL_DMA_Init+0x1d4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d027      	beq.n	800217c <HAL_DMA_Init+0x174>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_DMA_Init+0x1d8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d022      	beq.n	800217c <HAL_DMA_Init+0x174>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <HAL_DMA_Init+0x1dc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d01d      	beq.n	800217c <HAL_DMA_Init+0x174>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <HAL_DMA_Init+0x1e0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d018      	beq.n	800217c <HAL_DMA_Init+0x174>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_DMA_Init+0x1e4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <HAL_DMA_Init+0x174>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <HAL_DMA_Init+0x1e8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00e      	beq.n	800217c <HAL_DMA_Init+0x174>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <HAL_DMA_Init+0x1ec>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_DMA_Init+0x174>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <HAL_DMA_Init+0x1f0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_DMA_Init+0x174>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <HAL_DMA_Init+0x1f4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d108      	bne.n	800218e <HAL_DMA_Init+0x186>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e007      	b.n	800219e <HAL_DMA_Init+0x196>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800219e:	e02f      	b.n	8002200 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a0:	f7ff fdd6 	bl	8001d50 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d928      	bls.n	8002200 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e246      	b.n	800264e <HAL_DMA_Init+0x646>
 80021c0:	40020010 	.word	0x40020010
 80021c4:	40020028 	.word	0x40020028
 80021c8:	40020040 	.word	0x40020040
 80021cc:	40020058 	.word	0x40020058
 80021d0:	40020070 	.word	0x40020070
 80021d4:	40020088 	.word	0x40020088
 80021d8:	400200a0 	.word	0x400200a0
 80021dc:	400200b8 	.word	0x400200b8
 80021e0:	40020410 	.word	0x40020410
 80021e4:	40020428 	.word	0x40020428
 80021e8:	40020440 	.word	0x40020440
 80021ec:	40020458 	.word	0x40020458
 80021f0:	40020470 	.word	0x40020470
 80021f4:	40020488 	.word	0x40020488
 80021f8:	400204a0 	.word	0x400204a0
 80021fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1c8      	bne.n	80021a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4b83      	ldr	r3, [pc, #524]	; (8002428 <HAL_DMA_Init+0x420>)
 800221a:	4013      	ands	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002226:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002232:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	2b04      	cmp	r3, #4
 8002252:	d107      	bne.n	8002264 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	4313      	orrs	r3, r2
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002264:	4b71      	ldr	r3, [pc, #452]	; (800242c <HAL_DMA_Init+0x424>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b71      	ldr	r3, [pc, #452]	; (8002430 <HAL_DMA_Init+0x428>)
 800226a:	4013      	ands	r3, r2
 800226c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002270:	d328      	bcc.n	80022c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b28      	cmp	r3, #40	; 0x28
 8002278:	d903      	bls.n	8002282 <HAL_DMA_Init+0x27a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b2e      	cmp	r3, #46	; 0x2e
 8002280:	d917      	bls.n	80022b2 <HAL_DMA_Init+0x2aa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b3e      	cmp	r3, #62	; 0x3e
 8002288:	d903      	bls.n	8002292 <HAL_DMA_Init+0x28a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b42      	cmp	r3, #66	; 0x42
 8002290:	d90f      	bls.n	80022b2 <HAL_DMA_Init+0x2aa>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b46      	cmp	r3, #70	; 0x46
 8002298:	d903      	bls.n	80022a2 <HAL_DMA_Init+0x29a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b48      	cmp	r3, #72	; 0x48
 80022a0:	d907      	bls.n	80022b2 <HAL_DMA_Init+0x2aa>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b4e      	cmp	r3, #78	; 0x4e
 80022a8:	d905      	bls.n	80022b6 <HAL_DMA_Init+0x2ae>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b52      	cmp	r3, #82	; 0x52
 80022b0:	d801      	bhi.n	80022b6 <HAL_DMA_Init+0x2ae>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_DMA_Init+0x2b0>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f023 0307 	bic.w	r3, r3, #7
 80022da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d117      	bne.n	800231e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00e      	beq.n	800231e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f002 fc51 	bl	8004ba8 <DMA_CheckFifoParam>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e197      	b.n	800264e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f002 fb8c 	bl	8004a44 <DMA_CalcBaseAndBitshift>
 800232c:	4603      	mov	r3, r0
 800232e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	223f      	movs	r2, #63	; 0x3f
 800233a:	409a      	lsls	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	e0cd      	b.n	80024de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a3b      	ldr	r2, [pc, #236]	; (8002434 <HAL_DMA_Init+0x42c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d022      	beq.n	8002392 <HAL_DMA_Init+0x38a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a39      	ldr	r2, [pc, #228]	; (8002438 <HAL_DMA_Init+0x430>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01d      	beq.n	8002392 <HAL_DMA_Init+0x38a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a38      	ldr	r2, [pc, #224]	; (800243c <HAL_DMA_Init+0x434>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d018      	beq.n	8002392 <HAL_DMA_Init+0x38a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a36      	ldr	r2, [pc, #216]	; (8002440 <HAL_DMA_Init+0x438>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_DMA_Init+0x38a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a35      	ldr	r2, [pc, #212]	; (8002444 <HAL_DMA_Init+0x43c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00e      	beq.n	8002392 <HAL_DMA_Init+0x38a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a33      	ldr	r2, [pc, #204]	; (8002448 <HAL_DMA_Init+0x440>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d009      	beq.n	8002392 <HAL_DMA_Init+0x38a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a32      	ldr	r2, [pc, #200]	; (800244c <HAL_DMA_Init+0x444>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d004      	beq.n	8002392 <HAL_DMA_Init+0x38a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a30      	ldr	r2, [pc, #192]	; (8002450 <HAL_DMA_Init+0x448>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_DMA_Init+0x38e>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_DMA_Init+0x390>
 8002396:	2300      	movs	r3, #0
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8097 	beq.w	80024cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a24      	ldr	r2, [pc, #144]	; (8002434 <HAL_DMA_Init+0x42c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d021      	beq.n	80023ec <HAL_DMA_Init+0x3e4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a22      	ldr	r2, [pc, #136]	; (8002438 <HAL_DMA_Init+0x430>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01c      	beq.n	80023ec <HAL_DMA_Init+0x3e4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a21      	ldr	r2, [pc, #132]	; (800243c <HAL_DMA_Init+0x434>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d017      	beq.n	80023ec <HAL_DMA_Init+0x3e4>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <HAL_DMA_Init+0x438>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d012      	beq.n	80023ec <HAL_DMA_Init+0x3e4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <HAL_DMA_Init+0x43c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00d      	beq.n	80023ec <HAL_DMA_Init+0x3e4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <HAL_DMA_Init+0x440>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d008      	beq.n	80023ec <HAL_DMA_Init+0x3e4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1b      	ldr	r2, [pc, #108]	; (800244c <HAL_DMA_Init+0x444>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d003      	beq.n	80023ec <HAL_DMA_Init+0x3e4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <HAL_DMA_Init+0x448>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_DMA_Init+0x44c>)
 800240a:	4013      	ands	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d020      	beq.n	8002458 <HAL_DMA_Init+0x450>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b80      	cmp	r3, #128	; 0x80
 800241c:	d102      	bne.n	8002424 <HAL_DMA_Init+0x41c>
 800241e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002422:	e01a      	b.n	800245a <HAL_DMA_Init+0x452>
 8002424:	2300      	movs	r3, #0
 8002426:	e018      	b.n	800245a <HAL_DMA_Init+0x452>
 8002428:	fe10803f 	.word	0xfe10803f
 800242c:	5c001000 	.word	0x5c001000
 8002430:	ffff0000 	.word	0xffff0000
 8002434:	58025408 	.word	0x58025408
 8002438:	5802541c 	.word	0x5802541c
 800243c:	58025430 	.word	0x58025430
 8002440:	58025444 	.word	0x58025444
 8002444:	58025458 	.word	0x58025458
 8002448:	5802546c 	.word	0x5802546c
 800244c:	58025480 	.word	0x58025480
 8002450:	58025494 	.word	0x58025494
 8002454:	fffe000f 	.word	0xfffe000f
 8002458:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68d2      	ldr	r2, [r2, #12]
 800245e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002460:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002468:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002470:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002478:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002480:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002488:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b6e      	ldr	r3, [pc, #440]	; (8002658 <HAL_DMA_Init+0x650>)
 80024a0:	4413      	add	r3, r2
 80024a2:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_DMA_Init+0x654>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	009a      	lsls	r2, r3, #2
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f002 fac7 	bl	8004a44 <DMA_CalcBaseAndBitshift>
 80024b6:	4603      	mov	r3, r0
 80024b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2201      	movs	r2, #1
 80024c4:	409a      	lsls	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	e008      	b.n	80024de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2240      	movs	r2, #64	; 0x40
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2203      	movs	r2, #3
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0b7      	b.n	800264e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5f      	ldr	r2, [pc, #380]	; (8002660 <HAL_DMA_Init+0x658>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d072      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <HAL_DMA_Init+0x65c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d06d      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a5c      	ldr	r2, [pc, #368]	; (8002668 <HAL_DMA_Init+0x660>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d068      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a5a      	ldr	r2, [pc, #360]	; (800266c <HAL_DMA_Init+0x664>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d063      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a59      	ldr	r2, [pc, #356]	; (8002670 <HAL_DMA_Init+0x668>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d05e      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a57      	ldr	r2, [pc, #348]	; (8002674 <HAL_DMA_Init+0x66c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d059      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a56      	ldr	r2, [pc, #344]	; (8002678 <HAL_DMA_Init+0x670>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d054      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a54      	ldr	r2, [pc, #336]	; (800267c <HAL_DMA_Init+0x674>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d04f      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a53      	ldr	r2, [pc, #332]	; (8002680 <HAL_DMA_Init+0x678>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d04a      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a51      	ldr	r2, [pc, #324]	; (8002684 <HAL_DMA_Init+0x67c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d045      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a50      	ldr	r2, [pc, #320]	; (8002688 <HAL_DMA_Init+0x680>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d040      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a4e      	ldr	r2, [pc, #312]	; (800268c <HAL_DMA_Init+0x684>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d03b      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a4d      	ldr	r2, [pc, #308]	; (8002690 <HAL_DMA_Init+0x688>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d036      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a4b      	ldr	r2, [pc, #300]	; (8002694 <HAL_DMA_Init+0x68c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d031      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <HAL_DMA_Init+0x690>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d02c      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a48      	ldr	r2, [pc, #288]	; (800269c <HAL_DMA_Init+0x694>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d027      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a47      	ldr	r2, [pc, #284]	; (80026a0 <HAL_DMA_Init+0x698>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d022      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a45      	ldr	r2, [pc, #276]	; (80026a4 <HAL_DMA_Init+0x69c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01d      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a44      	ldr	r2, [pc, #272]	; (80026a8 <HAL_DMA_Init+0x6a0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d018      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a42      	ldr	r2, [pc, #264]	; (80026ac <HAL_DMA_Init+0x6a4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a41      	ldr	r2, [pc, #260]	; (80026b0 <HAL_DMA_Init+0x6a8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00e      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a3f      	ldr	r2, [pc, #252]	; (80026b4 <HAL_DMA_Init+0x6ac>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d009      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3e      	ldr	r2, [pc, #248]	; (80026b8 <HAL_DMA_Init+0x6b0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_DMA_Init+0x5c6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <HAL_DMA_Init+0x6b4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Init+0x5ca>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_DMA_Init+0x5cc>
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d032      	beq.n	800263e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f002 fb61 	bl	8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b80      	cmp	r3, #128	; 0x80
 80025e4:	d102      	bne.n	80025ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002600:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d010      	beq.n	800262c <HAL_DMA_Init+0x624>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b08      	cmp	r3, #8
 8002610:	d80c      	bhi.n	800262c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f002 fbde 	bl	8004dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e008      	b.n	800263e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	a7fdabf8 	.word	0xa7fdabf8
 800265c:	cccccccd 	.word	0xcccccccd
 8002660:	40020010 	.word	0x40020010
 8002664:	40020028 	.word	0x40020028
 8002668:	40020040 	.word	0x40020040
 800266c:	40020058 	.word	0x40020058
 8002670:	40020070 	.word	0x40020070
 8002674:	40020088 	.word	0x40020088
 8002678:	400200a0 	.word	0x400200a0
 800267c:	400200b8 	.word	0x400200b8
 8002680:	40020410 	.word	0x40020410
 8002684:	40020428 	.word	0x40020428
 8002688:	40020440 	.word	0x40020440
 800268c:	40020458 	.word	0x40020458
 8002690:	40020470 	.word	0x40020470
 8002694:	40020488 	.word	0x40020488
 8002698:	400204a0 	.word	0x400204a0
 800269c:	400204b8 	.word	0x400204b8
 80026a0:	58025408 	.word	0x58025408
 80026a4:	5802541c 	.word	0x5802541c
 80026a8:	58025430 	.word	0x58025430
 80026ac:	58025444 	.word	0x58025444
 80026b0:	58025458 	.word	0x58025458
 80026b4:	5802546c 	.word	0x5802546c
 80026b8:	58025480 	.word	0x58025480
 80026bc:	58025494 	.word	0x58025494

080026c0 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0ec      	b.n	80028b6 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Start+0x2a>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e0e5      	b.n	80028b6 <HAL_DMA_Start+0x1f6>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 80d0 	bne.w	80028a0 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6b      	ldr	r2, [pc, #428]	; (80028c0 <HAL_DMA_Start+0x200>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04a      	beq.n	80027ae <HAL_DMA_Start+0xee>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_DMA_Start+0x204>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d045      	beq.n	80027ae <HAL_DMA_Start+0xee>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a68      	ldr	r2, [pc, #416]	; (80028c8 <HAL_DMA_Start+0x208>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d040      	beq.n	80027ae <HAL_DMA_Start+0xee>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a66      	ldr	r2, [pc, #408]	; (80028cc <HAL_DMA_Start+0x20c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d03b      	beq.n	80027ae <HAL_DMA_Start+0xee>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_DMA_Start+0x210>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d036      	beq.n	80027ae <HAL_DMA_Start+0xee>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a63      	ldr	r2, [pc, #396]	; (80028d4 <HAL_DMA_Start+0x214>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_DMA_Start+0xee>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a62      	ldr	r2, [pc, #392]	; (80028d8 <HAL_DMA_Start+0x218>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d02c      	beq.n	80027ae <HAL_DMA_Start+0xee>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a60      	ldr	r2, [pc, #384]	; (80028dc <HAL_DMA_Start+0x21c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d027      	beq.n	80027ae <HAL_DMA_Start+0xee>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a5f      	ldr	r2, [pc, #380]	; (80028e0 <HAL_DMA_Start+0x220>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <HAL_DMA_Start+0xee>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a5d      	ldr	r2, [pc, #372]	; (80028e4 <HAL_DMA_Start+0x224>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01d      	beq.n	80027ae <HAL_DMA_Start+0xee>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <HAL_DMA_Start+0x228>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d018      	beq.n	80027ae <HAL_DMA_Start+0xee>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5a      	ldr	r2, [pc, #360]	; (80028ec <HAL_DMA_Start+0x22c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_DMA_Start+0xee>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a59      	ldr	r2, [pc, #356]	; (80028f0 <HAL_DMA_Start+0x230>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_DMA_Start+0xee>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <HAL_DMA_Start+0x234>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_DMA_Start+0xee>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_DMA_Start+0x238>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_DMA_Start+0xee>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a54      	ldr	r2, [pc, #336]	; (80028fc <HAL_DMA_Start+0x23c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d108      	bne.n	80027c0 <HAL_DMA_Start+0x100>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e007      	b.n	80027d0 <HAL_DMA_Start+0x110>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f001 ff88 	bl	80046ec <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a37      	ldr	r2, [pc, #220]	; (80028c0 <HAL_DMA_Start+0x200>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d04a      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a36      	ldr	r2, [pc, #216]	; (80028c4 <HAL_DMA_Start+0x204>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d045      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a34      	ldr	r2, [pc, #208]	; (80028c8 <HAL_DMA_Start+0x208>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d040      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a33      	ldr	r2, [pc, #204]	; (80028cc <HAL_DMA_Start+0x20c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d03b      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <HAL_DMA_Start+0x210>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d036      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <HAL_DMA_Start+0x214>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d031      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_DMA_Start+0x218>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02c      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <HAL_DMA_Start+0x21c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d027      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2b      	ldr	r2, [pc, #172]	; (80028e0 <HAL_DMA_Start+0x220>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_DMA_Start+0x224>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d01d      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <HAL_DMA_Start+0x228>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a27      	ldr	r2, [pc, #156]	; (80028ec <HAL_DMA_Start+0x22c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <HAL_DMA_Start+0x230>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a24      	ldr	r2, [pc, #144]	; (80028f4 <HAL_DMA_Start+0x234>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_DMA_Start+0x238>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_DMA_Start+0x1bc>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a21      	ldr	r2, [pc, #132]	; (80028fc <HAL_DMA_Start+0x23c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d108      	bne.n	800288e <HAL_DMA_Start+0x1ce>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e012      	b.n	80028b4 <HAL_DMA_Start+0x1f4>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e009      	b.n	80028b4 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40020010 	.word	0x40020010
 80028c4:	40020028 	.word	0x40020028
 80028c8:	40020040 	.word	0x40020040
 80028cc:	40020058 	.word	0x40020058
 80028d0:	40020070 	.word	0x40020070
 80028d4:	40020088 	.word	0x40020088
 80028d8:	400200a0 	.word	0x400200a0
 80028dc:	400200b8 	.word	0x400200b8
 80028e0:	40020410 	.word	0x40020410
 80028e4:	40020428 	.word	0x40020428
 80028e8:	40020440 	.word	0x40020440
 80028ec:	40020458 	.word	0x40020458
 80028f0:	40020470 	.word	0x40020470
 80028f4:	40020488 	.word	0x40020488
 80028f8:	400204a0 	.word	0x400204a0
 80028fc:	400204b8 	.word	0x400204b8

08002900 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e226      	b.n	8002d6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_DMA_Start_IT+0x2a>
 8002926:	2302      	movs	r3, #2
 8002928:	e21f      	b.n	8002d6a <HAL_DMA_Start_IT+0x46a>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	f040 820a 	bne.w	8002d54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a68      	ldr	r2, [pc, #416]	; (8002af4 <HAL_DMA_Start_IT+0x1f4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d04a      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a66      	ldr	r2, [pc, #408]	; (8002af8 <HAL_DMA_Start_IT+0x1f8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d045      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a65      	ldr	r2, [pc, #404]	; (8002afc <HAL_DMA_Start_IT+0x1fc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d040      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a63      	ldr	r2, [pc, #396]	; (8002b00 <HAL_DMA_Start_IT+0x200>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d03b      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a62      	ldr	r2, [pc, #392]	; (8002b04 <HAL_DMA_Start_IT+0x204>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d036      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a60      	ldr	r2, [pc, #384]	; (8002b08 <HAL_DMA_Start_IT+0x208>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d031      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5f      	ldr	r2, [pc, #380]	; (8002b0c <HAL_DMA_Start_IT+0x20c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d02c      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5d      	ldr	r2, [pc, #372]	; (8002b10 <HAL_DMA_Start_IT+0x210>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d027      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a5c      	ldr	r2, [pc, #368]	; (8002b14 <HAL_DMA_Start_IT+0x214>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5a      	ldr	r2, [pc, #360]	; (8002b18 <HAL_DMA_Start_IT+0x218>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01d      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a59      	ldr	r2, [pc, #356]	; (8002b1c <HAL_DMA_Start_IT+0x21c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d018      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a57      	ldr	r2, [pc, #348]	; (8002b20 <HAL_DMA_Start_IT+0x220>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a56      	ldr	r2, [pc, #344]	; (8002b24 <HAL_DMA_Start_IT+0x224>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00e      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a54      	ldr	r2, [pc, #336]	; (8002b28 <HAL_DMA_Start_IT+0x228>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d009      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a53      	ldr	r2, [pc, #332]	; (8002b2c <HAL_DMA_Start_IT+0x22c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d004      	beq.n	80029ee <HAL_DMA_Start_IT+0xee>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a51      	ldr	r2, [pc, #324]	; (8002b30 <HAL_DMA_Start_IT+0x230>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d108      	bne.n	8002a00 <HAL_DMA_Start_IT+0x100>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e007      	b.n	8002a10 <HAL_DMA_Start_IT+0x110>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f001 fe68 	bl	80046ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a34      	ldr	r2, [pc, #208]	; (8002af4 <HAL_DMA_Start_IT+0x1f4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04a      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a33      	ldr	r2, [pc, #204]	; (8002af8 <HAL_DMA_Start_IT+0x1f8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d045      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a31      	ldr	r2, [pc, #196]	; (8002afc <HAL_DMA_Start_IT+0x1fc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d040      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a30      	ldr	r2, [pc, #192]	; (8002b00 <HAL_DMA_Start_IT+0x200>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d03b      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2e      	ldr	r2, [pc, #184]	; (8002b04 <HAL_DMA_Start_IT+0x204>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d036      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <HAL_DMA_Start_IT+0x208>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d031      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <HAL_DMA_Start_IT+0x20c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02c      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2a      	ldr	r2, [pc, #168]	; (8002b10 <HAL_DMA_Start_IT+0x210>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d027      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <HAL_DMA_Start_IT+0x214>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d022      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a27      	ldr	r2, [pc, #156]	; (8002b18 <HAL_DMA_Start_IT+0x218>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d01d      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <HAL_DMA_Start_IT+0x21c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d018      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <HAL_DMA_Start_IT+0x220>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <HAL_DMA_Start_IT+0x224>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00e      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a21      	ldr	r2, [pc, #132]	; (8002b28 <HAL_DMA_Start_IT+0x228>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_DMA_Start_IT+0x22c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_DMA_Start_IT+0x1bc>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_DMA_Start_IT+0x230>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_DMA_Start_IT+0x1c0>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <HAL_DMA_Start_IT+0x1c2>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d036      	beq.n	8002b34 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 021e 	bic.w	r2, r3, #30
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0216 	orr.w	r2, r2, #22
 8002ad8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d03e      	beq.n	8002b60 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0208 	orr.w	r2, r2, #8
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e035      	b.n	8002b60 <HAL_DMA_Start_IT+0x260>
 8002af4:	40020010 	.word	0x40020010
 8002af8:	40020028 	.word	0x40020028
 8002afc:	40020040 	.word	0x40020040
 8002b00:	40020058 	.word	0x40020058
 8002b04:	40020070 	.word	0x40020070
 8002b08:	40020088 	.word	0x40020088
 8002b0c:	400200a0 	.word	0x400200a0
 8002b10:	400200b8 	.word	0x400200b8
 8002b14:	40020410 	.word	0x40020410
 8002b18:	40020428 	.word	0x40020428
 8002b1c:	40020440 	.word	0x40020440
 8002b20:	40020458 	.word	0x40020458
 8002b24:	40020470 	.word	0x40020470
 8002b28:	40020488 	.word	0x40020488
 8002b2c:	400204a0 	.word	0x400204a0
 8002b30:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 020e 	bic.w	r2, r3, #14
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 020a 	orr.w	r2, r2, #10
 8002b46:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0204 	orr.w	r2, r2, #4
 8002b5e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a83      	ldr	r2, [pc, #524]	; (8002d74 <HAL_DMA_Start_IT+0x474>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d072      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a82      	ldr	r2, [pc, #520]	; (8002d78 <HAL_DMA_Start_IT+0x478>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d06d      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a80      	ldr	r2, [pc, #512]	; (8002d7c <HAL_DMA_Start_IT+0x47c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d068      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7f      	ldr	r2, [pc, #508]	; (8002d80 <HAL_DMA_Start_IT+0x480>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d063      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7d      	ldr	r2, [pc, #500]	; (8002d84 <HAL_DMA_Start_IT+0x484>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d05e      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7c      	ldr	r2, [pc, #496]	; (8002d88 <HAL_DMA_Start_IT+0x488>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d059      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_DMA_Start_IT+0x48c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d054      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a79      	ldr	r2, [pc, #484]	; (8002d90 <HAL_DMA_Start_IT+0x490>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d04f      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a77      	ldr	r2, [pc, #476]	; (8002d94 <HAL_DMA_Start_IT+0x494>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d04a      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a76      	ldr	r2, [pc, #472]	; (8002d98 <HAL_DMA_Start_IT+0x498>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d045      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a74      	ldr	r2, [pc, #464]	; (8002d9c <HAL_DMA_Start_IT+0x49c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d040      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a73      	ldr	r2, [pc, #460]	; (8002da0 <HAL_DMA_Start_IT+0x4a0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d03b      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_DMA_Start_IT+0x4a4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d036      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a70      	ldr	r2, [pc, #448]	; (8002da8 <HAL_DMA_Start_IT+0x4a8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d031      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6e      	ldr	r2, [pc, #440]	; (8002dac <HAL_DMA_Start_IT+0x4ac>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02c      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a6d      	ldr	r2, [pc, #436]	; (8002db0 <HAL_DMA_Start_IT+0x4b0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d027      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6b      	ldr	r2, [pc, #428]	; (8002db4 <HAL_DMA_Start_IT+0x4b4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d022      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6a      	ldr	r2, [pc, #424]	; (8002db8 <HAL_DMA_Start_IT+0x4b8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d01d      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a68      	ldr	r2, [pc, #416]	; (8002dbc <HAL_DMA_Start_IT+0x4bc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d018      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a67      	ldr	r2, [pc, #412]	; (8002dc0 <HAL_DMA_Start_IT+0x4c0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a65      	ldr	r2, [pc, #404]	; (8002dc4 <HAL_DMA_Start_IT+0x4c4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00e      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a64      	ldr	r2, [pc, #400]	; (8002dc8 <HAL_DMA_Start_IT+0x4c8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a62      	ldr	r2, [pc, #392]	; (8002dcc <HAL_DMA_Start_IT+0x4cc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_DMA_Start_IT+0x350>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a61      	ldr	r2, [pc, #388]	; (8002dd0 <HAL_DMA_Start_IT+0x4d0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d101      	bne.n	8002c54 <HAL_DMA_Start_IT+0x354>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_DMA_Start_IT+0x356>
 8002c54:	2300      	movs	r3, #0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01a      	beq.n	8002c90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a37      	ldr	r2, [pc, #220]	; (8002d74 <HAL_DMA_Start_IT+0x474>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d04a      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a36      	ldr	r2, [pc, #216]	; (8002d78 <HAL_DMA_Start_IT+0x478>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d045      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <HAL_DMA_Start_IT+0x47c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d040      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a33      	ldr	r2, [pc, #204]	; (8002d80 <HAL_DMA_Start_IT+0x480>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d03b      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a31      	ldr	r2, [pc, #196]	; (8002d84 <HAL_DMA_Start_IT+0x484>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d036      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a30      	ldr	r2, [pc, #192]	; (8002d88 <HAL_DMA_Start_IT+0x488>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d031      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <HAL_DMA_Start_IT+0x48c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d02c      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2d      	ldr	r2, [pc, #180]	; (8002d90 <HAL_DMA_Start_IT+0x490>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d027      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <HAL_DMA_Start_IT+0x494>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d022      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <HAL_DMA_Start_IT+0x498>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d01d      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <HAL_DMA_Start_IT+0x49c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d018      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_DMA_Start_IT+0x4a0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <HAL_DMA_Start_IT+0x4a4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00e      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a24      	ldr	r2, [pc, #144]	; (8002da8 <HAL_DMA_Start_IT+0x4a8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d009      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a22      	ldr	r2, [pc, #136]	; (8002dac <HAL_DMA_Start_IT+0x4ac>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_DMA_Start_IT+0x430>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <HAL_DMA_Start_IT+0x4b0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d108      	bne.n	8002d42 <HAL_DMA_Start_IT+0x442>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e012      	b.n	8002d68 <HAL_DMA_Start_IT+0x468>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e009      	b.n	8002d68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40020010 	.word	0x40020010
 8002d78:	40020028 	.word	0x40020028
 8002d7c:	40020040 	.word	0x40020040
 8002d80:	40020058 	.word	0x40020058
 8002d84:	40020070 	.word	0x40020070
 8002d88:	40020088 	.word	0x40020088
 8002d8c:	400200a0 	.word	0x400200a0
 8002d90:	400200b8 	.word	0x400200b8
 8002d94:	40020410 	.word	0x40020410
 8002d98:	40020428 	.word	0x40020428
 8002d9c:	40020440 	.word	0x40020440
 8002da0:	40020458 	.word	0x40020458
 8002da4:	40020470 	.word	0x40020470
 8002da8:	40020488 	.word	0x40020488
 8002dac:	400204a0 	.word	0x400204a0
 8002db0:	400204b8 	.word	0x400204b8
 8002db4:	58025408 	.word	0x58025408
 8002db8:	5802541c 	.word	0x5802541c
 8002dbc:	58025430 	.word	0x58025430
 8002dc0:	58025444 	.word	0x58025444
 8002dc4:	58025458 	.word	0x58025458
 8002dc8:	5802546c 	.word	0x5802546c
 8002dcc:	58025480 	.word	0x58025480
 8002dd0:	58025494 	.word	0x58025494

08002dd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7fe ffb8 	bl	8001d50 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e2dc      	b.n	80033a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d008      	beq.n	8002e0a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e2cd      	b.n	80033a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a76      	ldr	r2, [pc, #472]	; (8002fe8 <HAL_DMA_Abort+0x214>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d04a      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a74      	ldr	r2, [pc, #464]	; (8002fec <HAL_DMA_Abort+0x218>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d045      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a73      	ldr	r2, [pc, #460]	; (8002ff0 <HAL_DMA_Abort+0x21c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d040      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a71      	ldr	r2, [pc, #452]	; (8002ff4 <HAL_DMA_Abort+0x220>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d03b      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a70      	ldr	r2, [pc, #448]	; (8002ff8 <HAL_DMA_Abort+0x224>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d036      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6e      	ldr	r2, [pc, #440]	; (8002ffc <HAL_DMA_Abort+0x228>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d031      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6d      	ldr	r2, [pc, #436]	; (8003000 <HAL_DMA_Abort+0x22c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d02c      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6b      	ldr	r2, [pc, #428]	; (8003004 <HAL_DMA_Abort+0x230>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d027      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6a      	ldr	r2, [pc, #424]	; (8003008 <HAL_DMA_Abort+0x234>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d022      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a68      	ldr	r2, [pc, #416]	; (800300c <HAL_DMA_Abort+0x238>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01d      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a67      	ldr	r2, [pc, #412]	; (8003010 <HAL_DMA_Abort+0x23c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d018      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a65      	ldr	r2, [pc, #404]	; (8003014 <HAL_DMA_Abort+0x240>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a64      	ldr	r2, [pc, #400]	; (8003018 <HAL_DMA_Abort+0x244>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00e      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a62      	ldr	r2, [pc, #392]	; (800301c <HAL_DMA_Abort+0x248>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a61      	ldr	r2, [pc, #388]	; (8003020 <HAL_DMA_Abort+0x24c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_DMA_Abort+0xd6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5f      	ldr	r2, [pc, #380]	; (8003024 <HAL_DMA_Abort+0x250>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_DMA_Abort+0xda>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_DMA_Abort+0xdc>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d013      	beq.n	8002edc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 021e 	bic.w	r2, r2, #30
 8002ec2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e00a      	b.n	8002ef2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 020e 	bic.w	r2, r2, #14
 8002eea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	; (8002fe8 <HAL_DMA_Abort+0x214>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d072      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a3a      	ldr	r2, [pc, #232]	; (8002fec <HAL_DMA_Abort+0x218>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d06d      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a39      	ldr	r2, [pc, #228]	; (8002ff0 <HAL_DMA_Abort+0x21c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d068      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a37      	ldr	r2, [pc, #220]	; (8002ff4 <HAL_DMA_Abort+0x220>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d063      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a36      	ldr	r2, [pc, #216]	; (8002ff8 <HAL_DMA_Abort+0x224>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d05e      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a34      	ldr	r2, [pc, #208]	; (8002ffc <HAL_DMA_Abort+0x228>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d059      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a33      	ldr	r2, [pc, #204]	; (8003000 <HAL_DMA_Abort+0x22c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d054      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a31      	ldr	r2, [pc, #196]	; (8003004 <HAL_DMA_Abort+0x230>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d04f      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a30      	ldr	r2, [pc, #192]	; (8003008 <HAL_DMA_Abort+0x234>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04a      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2e      	ldr	r2, [pc, #184]	; (800300c <HAL_DMA_Abort+0x238>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d045      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <HAL_DMA_Abort+0x23c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d040      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2b      	ldr	r2, [pc, #172]	; (8003014 <HAL_DMA_Abort+0x240>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d03b      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2a      	ldr	r2, [pc, #168]	; (8003018 <HAL_DMA_Abort+0x244>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d036      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a28      	ldr	r2, [pc, #160]	; (800301c <HAL_DMA_Abort+0x248>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d031      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a27      	ldr	r2, [pc, #156]	; (8003020 <HAL_DMA_Abort+0x24c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d02c      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a25      	ldr	r2, [pc, #148]	; (8003024 <HAL_DMA_Abort+0x250>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d027      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a24      	ldr	r2, [pc, #144]	; (8003028 <HAL_DMA_Abort+0x254>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <HAL_DMA_Abort+0x258>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a21      	ldr	r2, [pc, #132]	; (8003030 <HAL_DMA_Abort+0x25c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d018      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <HAL_DMA_Abort+0x260>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <HAL_DMA_Abort+0x264>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_DMA_Abort+0x268>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_DMA_Abort+0x26c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_DMA_Abort+0x20e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a19      	ldr	r2, [pc, #100]	; (8003044 <HAL_DMA_Abort+0x270>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d132      	bne.n	8003048 <HAL_DMA_Abort+0x274>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e031      	b.n	800304a <HAL_DMA_Abort+0x276>
 8002fe6:	bf00      	nop
 8002fe8:	40020010 	.word	0x40020010
 8002fec:	40020028 	.word	0x40020028
 8002ff0:	40020040 	.word	0x40020040
 8002ff4:	40020058 	.word	0x40020058
 8002ff8:	40020070 	.word	0x40020070
 8002ffc:	40020088 	.word	0x40020088
 8003000:	400200a0 	.word	0x400200a0
 8003004:	400200b8 	.word	0x400200b8
 8003008:	40020410 	.word	0x40020410
 800300c:	40020428 	.word	0x40020428
 8003010:	40020440 	.word	0x40020440
 8003014:	40020458 	.word	0x40020458
 8003018:	40020470 	.word	0x40020470
 800301c:	40020488 	.word	0x40020488
 8003020:	400204a0 	.word	0x400204a0
 8003024:	400204b8 	.word	0x400204b8
 8003028:	58025408 	.word	0x58025408
 800302c:	5802541c 	.word	0x5802541c
 8003030:	58025430 	.word	0x58025430
 8003034:	58025444 	.word	0x58025444
 8003038:	58025458 	.word	0x58025458
 800303c:	5802546c 	.word	0x5802546c
 8003040:	58025480 	.word	0x58025480
 8003044:	58025494 	.word	0x58025494
 8003048:	2300      	movs	r3, #0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a6d      	ldr	r2, [pc, #436]	; (8003218 <HAL_DMA_Abort+0x444>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d04a      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6b      	ldr	r2, [pc, #428]	; (800321c <HAL_DMA_Abort+0x448>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d045      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6a      	ldr	r2, [pc, #424]	; (8003220 <HAL_DMA_Abort+0x44c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d040      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a68      	ldr	r2, [pc, #416]	; (8003224 <HAL_DMA_Abort+0x450>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d03b      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a67      	ldr	r2, [pc, #412]	; (8003228 <HAL_DMA_Abort+0x454>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d036      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a65      	ldr	r2, [pc, #404]	; (800322c <HAL_DMA_Abort+0x458>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d031      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a64      	ldr	r2, [pc, #400]	; (8003230 <HAL_DMA_Abort+0x45c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d02c      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a62      	ldr	r2, [pc, #392]	; (8003234 <HAL_DMA_Abort+0x460>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d027      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a61      	ldr	r2, [pc, #388]	; (8003238 <HAL_DMA_Abort+0x464>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d022      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a5f      	ldr	r2, [pc, #380]	; (800323c <HAL_DMA_Abort+0x468>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01d      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5e      	ldr	r2, [pc, #376]	; (8003240 <HAL_DMA_Abort+0x46c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d018      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5c      	ldr	r2, [pc, #368]	; (8003244 <HAL_DMA_Abort+0x470>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a5b      	ldr	r2, [pc, #364]	; (8003248 <HAL_DMA_Abort+0x474>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a59      	ldr	r2, [pc, #356]	; (800324c <HAL_DMA_Abort+0x478>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_DMA_Abort+0x47c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_DMA_Abort+0x32a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a56      	ldr	r2, [pc, #344]	; (8003254 <HAL_DMA_Abort+0x480>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d108      	bne.n	8003110 <HAL_DMA_Abort+0x33c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e007      	b.n	8003120 <HAL_DMA_Abort+0x34c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003120:	e013      	b.n	800314a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003122:	f7fe fe15 	bl	8001d50 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b05      	cmp	r3, #5
 800312e:	d90c      	bls.n	800314a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2203      	movs	r2, #3
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e12d      	b.n	80033a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e5      	bne.n	8003122 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2f      	ldr	r2, [pc, #188]	; (8003218 <HAL_DMA_Abort+0x444>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d04a      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2d      	ldr	r2, [pc, #180]	; (800321c <HAL_DMA_Abort+0x448>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d045      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2c      	ldr	r2, [pc, #176]	; (8003220 <HAL_DMA_Abort+0x44c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d040      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2a      	ldr	r2, [pc, #168]	; (8003224 <HAL_DMA_Abort+0x450>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d03b      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a29      	ldr	r2, [pc, #164]	; (8003228 <HAL_DMA_Abort+0x454>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d036      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a27      	ldr	r2, [pc, #156]	; (800322c <HAL_DMA_Abort+0x458>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a26      	ldr	r2, [pc, #152]	; (8003230 <HAL_DMA_Abort+0x45c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d02c      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a24      	ldr	r2, [pc, #144]	; (8003234 <HAL_DMA_Abort+0x460>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d027      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a23      	ldr	r2, [pc, #140]	; (8003238 <HAL_DMA_Abort+0x464>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a21      	ldr	r2, [pc, #132]	; (800323c <HAL_DMA_Abort+0x468>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a20      	ldr	r2, [pc, #128]	; (8003240 <HAL_DMA_Abort+0x46c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d018      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_DMA_Abort+0x470>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <HAL_DMA_Abort+0x474>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1b      	ldr	r2, [pc, #108]	; (800324c <HAL_DMA_Abort+0x478>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <HAL_DMA_Abort+0x47c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_Abort+0x422>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a18      	ldr	r2, [pc, #96]	; (8003254 <HAL_DMA_Abort+0x480>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_DMA_Abort+0x426>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_DMA_Abort+0x428>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d02b      	beq.n	8003258 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	223f      	movs	r2, #63	; 0x3f
 8003210:	409a      	lsls	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	e02a      	b.n	800326e <HAL_DMA_Abort+0x49a>
 8003218:	40020010 	.word	0x40020010
 800321c:	40020028 	.word	0x40020028
 8003220:	40020040 	.word	0x40020040
 8003224:	40020058 	.word	0x40020058
 8003228:	40020070 	.word	0x40020070
 800322c:	40020088 	.word	0x40020088
 8003230:	400200a0 	.word	0x400200a0
 8003234:	400200b8 	.word	0x400200b8
 8003238:	40020410 	.word	0x40020410
 800323c:	40020428 	.word	0x40020428
 8003240:	40020440 	.word	0x40020440
 8003244:	40020458 	.word	0x40020458
 8003248:	40020470 	.word	0x40020470
 800324c:	40020488 	.word	0x40020488
 8003250:	400204a0 	.word	0x400204a0
 8003254:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2201      	movs	r2, #1
 8003268:	409a      	lsls	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a4f      	ldr	r2, [pc, #316]	; (80033b0 <HAL_DMA_Abort+0x5dc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d072      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a4d      	ldr	r2, [pc, #308]	; (80033b4 <HAL_DMA_Abort+0x5e0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d06d      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a4c      	ldr	r2, [pc, #304]	; (80033b8 <HAL_DMA_Abort+0x5e4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d068      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a4a      	ldr	r2, [pc, #296]	; (80033bc <HAL_DMA_Abort+0x5e8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d063      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a49      	ldr	r2, [pc, #292]	; (80033c0 <HAL_DMA_Abort+0x5ec>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d05e      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a47      	ldr	r2, [pc, #284]	; (80033c4 <HAL_DMA_Abort+0x5f0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d059      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a46      	ldr	r2, [pc, #280]	; (80033c8 <HAL_DMA_Abort+0x5f4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d054      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a44      	ldr	r2, [pc, #272]	; (80033cc <HAL_DMA_Abort+0x5f8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d04f      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a43      	ldr	r2, [pc, #268]	; (80033d0 <HAL_DMA_Abort+0x5fc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d04a      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a41      	ldr	r2, [pc, #260]	; (80033d4 <HAL_DMA_Abort+0x600>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d045      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a40      	ldr	r2, [pc, #256]	; (80033d8 <HAL_DMA_Abort+0x604>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d040      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3e      	ldr	r2, [pc, #248]	; (80033dc <HAL_DMA_Abort+0x608>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d03b      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a3d      	ldr	r2, [pc, #244]	; (80033e0 <HAL_DMA_Abort+0x60c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d036      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3b      	ldr	r2, [pc, #236]	; (80033e4 <HAL_DMA_Abort+0x610>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d031      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3a      	ldr	r2, [pc, #232]	; (80033e8 <HAL_DMA_Abort+0x614>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d02c      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a38      	ldr	r2, [pc, #224]	; (80033ec <HAL_DMA_Abort+0x618>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d027      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a37      	ldr	r2, [pc, #220]	; (80033f0 <HAL_DMA_Abort+0x61c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a35      	ldr	r2, [pc, #212]	; (80033f4 <HAL_DMA_Abort+0x620>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01d      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a34      	ldr	r2, [pc, #208]	; (80033f8 <HAL_DMA_Abort+0x624>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a32      	ldr	r2, [pc, #200]	; (80033fc <HAL_DMA_Abort+0x628>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a31      	ldr	r2, [pc, #196]	; (8003400 <HAL_DMA_Abort+0x62c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2f      	ldr	r2, [pc, #188]	; (8003404 <HAL_DMA_Abort+0x630>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2e      	ldr	r2, [pc, #184]	; (8003408 <HAL_DMA_Abort+0x634>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_DMA_Abort+0x58a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2c      	ldr	r2, [pc, #176]	; (800340c <HAL_DMA_Abort+0x638>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_DMA_Abort+0x58e>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_DMA_Abort+0x590>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d015      	beq.n	8003394 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003370:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003388:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003392:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
 80033f0:	58025408 	.word	0x58025408
 80033f4:	5802541c 	.word	0x5802541c
 80033f8:	58025430 	.word	0x58025430
 80033fc:	58025444 	.word	0x58025444
 8003400:	58025458 	.word	0x58025458
 8003404:	5802546c 	.word	0x5802546c
 8003408:	58025480 	.word	0x58025480
 800340c:	58025494 	.word	0x58025494

08003410 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e205      	b.n	800382e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d004      	beq.n	8003438 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2280      	movs	r2, #128	; 0x80
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e1fa      	b.n	800382e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a8c      	ldr	r2, [pc, #560]	; (8003670 <HAL_DMA_Abort_IT+0x260>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d04a      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a8b      	ldr	r2, [pc, #556]	; (8003674 <HAL_DMA_Abort_IT+0x264>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d045      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a89      	ldr	r2, [pc, #548]	; (8003678 <HAL_DMA_Abort_IT+0x268>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d040      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a88      	ldr	r2, [pc, #544]	; (800367c <HAL_DMA_Abort_IT+0x26c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d03b      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a86      	ldr	r2, [pc, #536]	; (8003680 <HAL_DMA_Abort_IT+0x270>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d036      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a85      	ldr	r2, [pc, #532]	; (8003684 <HAL_DMA_Abort_IT+0x274>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d031      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a83      	ldr	r2, [pc, #524]	; (8003688 <HAL_DMA_Abort_IT+0x278>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d02c      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a82      	ldr	r2, [pc, #520]	; (800368c <HAL_DMA_Abort_IT+0x27c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d027      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a80      	ldr	r2, [pc, #512]	; (8003690 <HAL_DMA_Abort_IT+0x280>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d022      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a7f      	ldr	r2, [pc, #508]	; (8003694 <HAL_DMA_Abort_IT+0x284>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d01d      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a7d      	ldr	r2, [pc, #500]	; (8003698 <HAL_DMA_Abort_IT+0x288>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d018      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a7c      	ldr	r2, [pc, #496]	; (800369c <HAL_DMA_Abort_IT+0x28c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a7a      	ldr	r2, [pc, #488]	; (80036a0 <HAL_DMA_Abort_IT+0x290>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a79      	ldr	r2, [pc, #484]	; (80036a4 <HAL_DMA_Abort_IT+0x294>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d009      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a77      	ldr	r2, [pc, #476]	; (80036a8 <HAL_DMA_Abort_IT+0x298>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xc8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a76      	ldr	r2, [pc, #472]	; (80036ac <HAL_DMA_Abort_IT+0x29c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_DMA_Abort_IT+0xcc>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_DMA_Abort_IT+0xce>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d065      	beq.n	80035ae <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2204      	movs	r2, #4
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a60      	ldr	r2, [pc, #384]	; (8003670 <HAL_DMA_Abort_IT+0x260>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d04a      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5e      	ldr	r2, [pc, #376]	; (8003674 <HAL_DMA_Abort_IT+0x264>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d045      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a5d      	ldr	r2, [pc, #372]	; (8003678 <HAL_DMA_Abort_IT+0x268>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d040      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a5b      	ldr	r2, [pc, #364]	; (800367c <HAL_DMA_Abort_IT+0x26c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d03b      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5a      	ldr	r2, [pc, #360]	; (8003680 <HAL_DMA_Abort_IT+0x270>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d036      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_DMA_Abort_IT+0x274>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d031      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a57      	ldr	r2, [pc, #348]	; (8003688 <HAL_DMA_Abort_IT+0x278>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d02c      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a55      	ldr	r2, [pc, #340]	; (800368c <HAL_DMA_Abort_IT+0x27c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d027      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a54      	ldr	r2, [pc, #336]	; (8003690 <HAL_DMA_Abort_IT+0x280>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_DMA_Abort_IT+0x284>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01d      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a51      	ldr	r2, [pc, #324]	; (8003698 <HAL_DMA_Abort_IT+0x288>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a4f      	ldr	r2, [pc, #316]	; (800369c <HAL_DMA_Abort_IT+0x28c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4e      	ldr	r2, [pc, #312]	; (80036a0 <HAL_DMA_Abort_IT+0x290>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a4c      	ldr	r2, [pc, #304]	; (80036a4 <HAL_DMA_Abort_IT+0x294>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <HAL_DMA_Abort_IT+0x298>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_DMA_Abort_IT+0x17a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a49      	ldr	r2, [pc, #292]	; (80036ac <HAL_DMA_Abort_IT+0x29c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d108      	bne.n	800359c <HAL_DMA_Abort_IT+0x18c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e147      	b.n	800382c <HAL_DMA_Abort_IT+0x41c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e13e      	b.n	800382c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 020e 	bic.w	r2, r2, #14
 80035bc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2b      	ldr	r2, [pc, #172]	; (8003670 <HAL_DMA_Abort_IT+0x260>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d04a      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a29      	ldr	r2, [pc, #164]	; (8003674 <HAL_DMA_Abort_IT+0x264>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d045      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a28      	ldr	r2, [pc, #160]	; (8003678 <HAL_DMA_Abort_IT+0x268>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d040      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a26      	ldr	r2, [pc, #152]	; (800367c <HAL_DMA_Abort_IT+0x26c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d03b      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a25      	ldr	r2, [pc, #148]	; (8003680 <HAL_DMA_Abort_IT+0x270>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d036      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <HAL_DMA_Abort_IT+0x274>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d031      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a22      	ldr	r2, [pc, #136]	; (8003688 <HAL_DMA_Abort_IT+0x278>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d02c      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a20      	ldr	r2, [pc, #128]	; (800368c <HAL_DMA_Abort_IT+0x27c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d027      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_DMA_Abort_IT+0x280>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <HAL_DMA_Abort_IT+0x284>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01d      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1c      	ldr	r2, [pc, #112]	; (8003698 <HAL_DMA_Abort_IT+0x288>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d018      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1a      	ldr	r2, [pc, #104]	; (800369c <HAL_DMA_Abort_IT+0x28c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_DMA_Abort_IT+0x290>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a17      	ldr	r2, [pc, #92]	; (80036a4 <HAL_DMA_Abort_IT+0x294>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <HAL_DMA_Abort_IT+0x298>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_DMA_Abort_IT+0x24e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a14      	ldr	r2, [pc, #80]	; (80036ac <HAL_DMA_Abort_IT+0x29c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d128      	bne.n	80036b0 <HAL_DMA_Abort_IT+0x2a0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e027      	b.n	80036c0 <HAL_DMA_Abort_IT+0x2b0>
 8003670:	40020010 	.word	0x40020010
 8003674:	40020028 	.word	0x40020028
 8003678:	40020040 	.word	0x40020040
 800367c:	40020058 	.word	0x40020058
 8003680:	40020070 	.word	0x40020070
 8003684:	40020088 	.word	0x40020088
 8003688:	400200a0 	.word	0x400200a0
 800368c:	400200b8 	.word	0x400200b8
 8003690:	40020410 	.word	0x40020410
 8003694:	40020428 	.word	0x40020428
 8003698:	40020440 	.word	0x40020440
 800369c:	40020458 	.word	0x40020458
 80036a0:	40020470 	.word	0x40020470
 80036a4:	40020488 	.word	0x40020488
 80036a8:	400204a0 	.word	0x400204a0
 80036ac:	400204b8 	.word	0x400204b8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5c      	ldr	r2, [pc, #368]	; (8003838 <HAL_DMA_Abort_IT+0x428>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d072      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5b      	ldr	r2, [pc, #364]	; (800383c <HAL_DMA_Abort_IT+0x42c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d06d      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a59      	ldr	r2, [pc, #356]	; (8003840 <HAL_DMA_Abort_IT+0x430>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d068      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_DMA_Abort_IT+0x434>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d063      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a56      	ldr	r2, [pc, #344]	; (8003848 <HAL_DMA_Abort_IT+0x438>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d05e      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a55      	ldr	r2, [pc, #340]	; (800384c <HAL_DMA_Abort_IT+0x43c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d059      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a53      	ldr	r2, [pc, #332]	; (8003850 <HAL_DMA_Abort_IT+0x440>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d054      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_DMA_Abort_IT+0x444>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d04f      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a50      	ldr	r2, [pc, #320]	; (8003858 <HAL_DMA_Abort_IT+0x448>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d04a      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a4f      	ldr	r2, [pc, #316]	; (800385c <HAL_DMA_Abort_IT+0x44c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d045      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a4d      	ldr	r2, [pc, #308]	; (8003860 <HAL_DMA_Abort_IT+0x450>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d040      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4c      	ldr	r2, [pc, #304]	; (8003864 <HAL_DMA_Abort_IT+0x454>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d03b      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <HAL_DMA_Abort_IT+0x458>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d036      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a49      	ldr	r2, [pc, #292]	; (800386c <HAL_DMA_Abort_IT+0x45c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d031      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a47      	ldr	r2, [pc, #284]	; (8003870 <HAL_DMA_Abort_IT+0x460>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02c      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a46      	ldr	r2, [pc, #280]	; (8003874 <HAL_DMA_Abort_IT+0x464>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d027      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a44      	ldr	r2, [pc, #272]	; (8003878 <HAL_DMA_Abort_IT+0x468>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d022      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a43      	ldr	r2, [pc, #268]	; (800387c <HAL_DMA_Abort_IT+0x46c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d01d      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a41      	ldr	r2, [pc, #260]	; (8003880 <HAL_DMA_Abort_IT+0x470>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d018      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a40      	ldr	r2, [pc, #256]	; (8003884 <HAL_DMA_Abort_IT+0x474>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3e      	ldr	r2, [pc, #248]	; (8003888 <HAL_DMA_Abort_IT+0x478>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00e      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a3d      	ldr	r2, [pc, #244]	; (800388c <HAL_DMA_Abort_IT+0x47c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a3b      	ldr	r2, [pc, #236]	; (8003890 <HAL_DMA_Abort_IT+0x480>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x3a0>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a3a      	ldr	r2, [pc, #232]	; (8003894 <HAL_DMA_Abort_IT+0x484>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Abort_IT+0x3a4>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_DMA_Abort_IT+0x3a6>
 80037b4:	2300      	movs	r3, #0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d028      	beq.n	800380c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2201      	movs	r2, #1
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003800:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800380a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	58025408 	.word	0x58025408
 800387c:	5802541c 	.word	0x5802541c
 8003880:	58025430 	.word	0x58025430
 8003884:	58025444 	.word	0x58025444
 8003888:	58025458 	.word	0x58025458
 800388c:	5802546c 	.word	0x5802546c
 8003890:	58025480 	.word	0x58025480
 8003894:	58025494 	.word	0x58025494

08003898 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038a4:	4b67      	ldr	r3, [pc, #412]	; (8003a44 <HAL_DMA_IRQHandler+0x1ac>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a67      	ldr	r2, [pc, #412]	; (8003a48 <HAL_DMA_IRQHandler+0x1b0>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5f      	ldr	r2, [pc, #380]	; (8003a4c <HAL_DMA_IRQHandler+0x1b4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04a      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5d      	ldr	r2, [pc, #372]	; (8003a50 <HAL_DMA_IRQHandler+0x1b8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d045      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5c      	ldr	r2, [pc, #368]	; (8003a54 <HAL_DMA_IRQHandler+0x1bc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d040      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5a      	ldr	r2, [pc, #360]	; (8003a58 <HAL_DMA_IRQHandler+0x1c0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d03b      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a59      	ldr	r2, [pc, #356]	; (8003a5c <HAL_DMA_IRQHandler+0x1c4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d036      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a57      	ldr	r2, [pc, #348]	; (8003a60 <HAL_DMA_IRQHandler+0x1c8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a56      	ldr	r2, [pc, #344]	; (8003a64 <HAL_DMA_IRQHandler+0x1cc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d02c      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a54      	ldr	r2, [pc, #336]	; (8003a68 <HAL_DMA_IRQHandler+0x1d0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d027      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a53      	ldr	r2, [pc, #332]	; (8003a6c <HAL_DMA_IRQHandler+0x1d4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a51      	ldr	r2, [pc, #324]	; (8003a70 <HAL_DMA_IRQHandler+0x1d8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01d      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a50      	ldr	r2, [pc, #320]	; (8003a74 <HAL_DMA_IRQHandler+0x1dc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a4e      	ldr	r2, [pc, #312]	; (8003a78 <HAL_DMA_IRQHandler+0x1e0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a4d      	ldr	r2, [pc, #308]	; (8003a7c <HAL_DMA_IRQHandler+0x1e4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a4b      	ldr	r2, [pc, #300]	; (8003a80 <HAL_DMA_IRQHandler+0x1e8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a4a      	ldr	r2, [pc, #296]	; (8003a84 <HAL_DMA_IRQHandler+0x1ec>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_DMA_IRQHandler+0xd2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a48      	ldr	r2, [pc, #288]	; (8003a88 <HAL_DMA_IRQHandler+0x1f0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <HAL_DMA_IRQHandler+0xd6>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_DMA_IRQHandler+0xd8>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 842b 	beq.w	80041cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2208      	movs	r2, #8
 8003980:	409a      	lsls	r2, r3
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80a2 	beq.w	8003ad0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2e      	ldr	r2, [pc, #184]	; (8003a4c <HAL_DMA_IRQHandler+0x1b4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d04a      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <HAL_DMA_IRQHandler+0x1b8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d045      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <HAL_DMA_IRQHandler+0x1bc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d040      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <HAL_DMA_IRQHandler+0x1c0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d03b      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <HAL_DMA_IRQHandler+0x1c4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d036      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <HAL_DMA_IRQHandler+0x1c8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d031      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a25      	ldr	r2, [pc, #148]	; (8003a64 <HAL_DMA_IRQHandler+0x1cc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02c      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a24      	ldr	r2, [pc, #144]	; (8003a68 <HAL_DMA_IRQHandler+0x1d0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d027      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <HAL_DMA_IRQHandler+0x1d4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d022      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a21      	ldr	r2, [pc, #132]	; (8003a70 <HAL_DMA_IRQHandler+0x1d8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01d      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_DMA_IRQHandler+0x1dc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <HAL_DMA_IRQHandler+0x1e0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_DMA_IRQHandler+0x1e4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <HAL_DMA_IRQHandler+0x1e8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <HAL_DMA_IRQHandler+0x1ec>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x194>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <HAL_DMA_IRQHandler+0x1f0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d12f      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x1f4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	e02e      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x208>
 8003a42:	bf00      	nop
 8003a44:	24000018 	.word	0x24000018
 8003a48:	1b4e81b5 	.word	0x1b4e81b5
 8003a4c:	40020010 	.word	0x40020010
 8003a50:	40020028 	.word	0x40020028
 8003a54:	40020040 	.word	0x40020040
 8003a58:	40020058 	.word	0x40020058
 8003a5c:	40020070 	.word	0x40020070
 8003a60:	40020088 	.word	0x40020088
 8003a64:	400200a0 	.word	0x400200a0
 8003a68:	400200b8 	.word	0x400200b8
 8003a6c:	40020410 	.word	0x40020410
 8003a70:	40020428 	.word	0x40020428
 8003a74:	40020440 	.word	0x40020440
 8003a78:	40020458 	.word	0x40020458
 8003a7c:	40020470 	.word	0x40020470
 8003a80:	40020488 	.word	0x40020488
 8003a84:	400204a0 	.word	0x400204a0
 8003a88:	400204b8 	.word	0x400204b8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d015      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0204 	bic.w	r2, r2, #4
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2208      	movs	r2, #8
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac8:	f043 0201 	orr.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	fa22 f303 	lsr.w	r3, r2, r3
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d06e      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <HAL_DMA_IRQHandler+0x3f8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d04a      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <HAL_DMA_IRQHandler+0x3fc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d045      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a66      	ldr	r2, [pc, #408]	; (8003c98 <HAL_DMA_IRQHandler+0x400>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d040      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <HAL_DMA_IRQHandler+0x404>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d03b      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a63      	ldr	r2, [pc, #396]	; (8003ca0 <HAL_DMA_IRQHandler+0x408>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d036      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a61      	ldr	r2, [pc, #388]	; (8003ca4 <HAL_DMA_IRQHandler+0x40c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d031      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a60      	ldr	r2, [pc, #384]	; (8003ca8 <HAL_DMA_IRQHandler+0x410>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d02c      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <HAL_DMA_IRQHandler+0x414>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d027      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a5d      	ldr	r2, [pc, #372]	; (8003cb0 <HAL_DMA_IRQHandler+0x418>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a5b      	ldr	r2, [pc, #364]	; (8003cb4 <HAL_DMA_IRQHandler+0x41c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01d      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5a      	ldr	r2, [pc, #360]	; (8003cb8 <HAL_DMA_IRQHandler+0x420>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_DMA_IRQHandler+0x424>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a57      	ldr	r2, [pc, #348]	; (8003cc0 <HAL_DMA_IRQHandler+0x428>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a55      	ldr	r2, [pc, #340]	; (8003cc4 <HAL_DMA_IRQHandler+0x42c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a54      	ldr	r2, [pc, #336]	; (8003cc8 <HAL_DMA_IRQHandler+0x430>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x2ee>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a52      	ldr	r2, [pc, #328]	; (8003ccc <HAL_DMA_IRQHandler+0x434>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d10a      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x304>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e003      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x30c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f043 0202 	orr.w	r2, r3, #2
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2204      	movs	r2, #4
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 808f 	beq.w	8003cf8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2c      	ldr	r2, [pc, #176]	; (8003c90 <HAL_DMA_IRQHandler+0x3f8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d04a      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2a      	ldr	r2, [pc, #168]	; (8003c94 <HAL_DMA_IRQHandler+0x3fc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d045      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a29      	ldr	r2, [pc, #164]	; (8003c98 <HAL_DMA_IRQHandler+0x400>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d040      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a27      	ldr	r2, [pc, #156]	; (8003c9c <HAL_DMA_IRQHandler+0x404>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d03b      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a26      	ldr	r2, [pc, #152]	; (8003ca0 <HAL_DMA_IRQHandler+0x408>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d036      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a24      	ldr	r2, [pc, #144]	; (8003ca4 <HAL_DMA_IRQHandler+0x40c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d031      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a23      	ldr	r2, [pc, #140]	; (8003ca8 <HAL_DMA_IRQHandler+0x410>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d02c      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a21      	ldr	r2, [pc, #132]	; (8003cac <HAL_DMA_IRQHandler+0x414>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d027      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a20      	ldr	r2, [pc, #128]	; (8003cb0 <HAL_DMA_IRQHandler+0x418>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <HAL_DMA_IRQHandler+0x41c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01d      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_DMA_IRQHandler+0x420>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <HAL_DMA_IRQHandler+0x424>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <HAL_DMA_IRQHandler+0x428>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_DMA_IRQHandler+0x42c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <HAL_DMA_IRQHandler+0x430>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x3e2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <HAL_DMA_IRQHandler+0x434>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d12a      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x438>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e023      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x440>
 8003c90:	40020010 	.word	0x40020010
 8003c94:	40020028 	.word	0x40020028
 8003c98:	40020040 	.word	0x40020040
 8003c9c:	40020058 	.word	0x40020058
 8003ca0:	40020070 	.word	0x40020070
 8003ca4:	40020088 	.word	0x40020088
 8003ca8:	400200a0 	.word	0x400200a0
 8003cac:	400200b8 	.word	0x400200b8
 8003cb0:	40020410 	.word	0x40020410
 8003cb4:	40020428 	.word	0x40020428
 8003cb8:	40020440 	.word	0x40020440
 8003cbc:	40020458 	.word	0x40020458
 8003cc0:	40020470 	.word	0x40020470
 8003cc4:	40020488 	.word	0x40020488
 8003cc8:	400204a0 	.word	0x400204a0
 8003ccc:	400204b8 	.word	0x400204b8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	f043 0204 	orr.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2210      	movs	r2, #16
 8003d02:	409a      	lsls	r2, r3
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80a6 	beq.w	8003e5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a85      	ldr	r2, [pc, #532]	; (8003f28 <HAL_DMA_IRQHandler+0x690>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04a      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a83      	ldr	r2, [pc, #524]	; (8003f2c <HAL_DMA_IRQHandler+0x694>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d045      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a82      	ldr	r2, [pc, #520]	; (8003f30 <HAL_DMA_IRQHandler+0x698>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d040      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a80      	ldr	r2, [pc, #512]	; (8003f34 <HAL_DMA_IRQHandler+0x69c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d03b      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a7f      	ldr	r2, [pc, #508]	; (8003f38 <HAL_DMA_IRQHandler+0x6a0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d036      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a7d      	ldr	r2, [pc, #500]	; (8003f3c <HAL_DMA_IRQHandler+0x6a4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d031      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7c      	ldr	r2, [pc, #496]	; (8003f40 <HAL_DMA_IRQHandler+0x6a8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d02c      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a7a      	ldr	r2, [pc, #488]	; (8003f44 <HAL_DMA_IRQHandler+0x6ac>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d027      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a79      	ldr	r2, [pc, #484]	; (8003f48 <HAL_DMA_IRQHandler+0x6b0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a77      	ldr	r2, [pc, #476]	; (8003f4c <HAL_DMA_IRQHandler+0x6b4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a76      	ldr	r2, [pc, #472]	; (8003f50 <HAL_DMA_IRQHandler+0x6b8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a74      	ldr	r2, [pc, #464]	; (8003f54 <HAL_DMA_IRQHandler+0x6bc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a73      	ldr	r2, [pc, #460]	; (8003f58 <HAL_DMA_IRQHandler+0x6c0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a71      	ldr	r2, [pc, #452]	; (8003f5c <HAL_DMA_IRQHandler+0x6c4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a70      	ldr	r2, [pc, #448]	; (8003f60 <HAL_DMA_IRQHandler+0x6c8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_IRQHandler+0x516>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6e      	ldr	r2, [pc, #440]	; (8003f64 <HAL_DMA_IRQHandler+0x6cc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10a      	bne.n	8003dc4 <HAL_DMA_IRQHandler+0x52c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e009      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x540>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d03e      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2210      	movs	r2, #16
 8003de6:	409a      	lsls	r2, r3
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d018      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d108      	bne.n	8003e1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d024      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
 8003e18:	e01f      	b.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e016      	b.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d107      	bne.n	8003e4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0208 	bic.w	r2, r2, #8
 8003e48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2220      	movs	r2, #32
 8003e64:	409a      	lsls	r2, r3
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8110 	beq.w	8004090 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2c      	ldr	r2, [pc, #176]	; (8003f28 <HAL_DMA_IRQHandler+0x690>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d04a      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2b      	ldr	r2, [pc, #172]	; (8003f2c <HAL_DMA_IRQHandler+0x694>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d045      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <HAL_DMA_IRQHandler+0x698>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d040      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a28      	ldr	r2, [pc, #160]	; (8003f34 <HAL_DMA_IRQHandler+0x69c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d03b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <HAL_DMA_IRQHandler+0x6a0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d036      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <HAL_DMA_IRQHandler+0x6a4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <HAL_DMA_IRQHandler+0x6a8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <HAL_DMA_IRQHandler+0x6ac>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d027      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <HAL_DMA_IRQHandler+0x6b0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <HAL_DMA_IRQHandler+0x6b4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01d      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <HAL_DMA_IRQHandler+0x6b8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_DMA_IRQHandler+0x6bc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <HAL_DMA_IRQHandler+0x6c0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <HAL_DMA_IRQHandler+0x6c4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <HAL_DMA_IRQHandler+0x6c8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x678>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <HAL_DMA_IRQHandler+0x6cc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d12b      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x6d0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf14      	ite	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	2300      	moveq	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e02a      	b.n	8003f7c <HAL_DMA_IRQHandler+0x6e4>
 8003f26:	bf00      	nop
 8003f28:	40020010 	.word	0x40020010
 8003f2c:	40020028 	.word	0x40020028
 8003f30:	40020040 	.word	0x40020040
 8003f34:	40020058 	.word	0x40020058
 8003f38:	40020070 	.word	0x40020070
 8003f3c:	40020088 	.word	0x40020088
 8003f40:	400200a0 	.word	0x400200a0
 8003f44:	400200b8 	.word	0x400200b8
 8003f48:	40020410 	.word	0x40020410
 8003f4c:	40020428 	.word	0x40020428
 8003f50:	40020440 	.word	0x40020440
 8003f54:	40020458 	.word	0x40020458
 8003f58:	40020470 	.word	0x40020470
 8003f5c:	40020488 	.word	0x40020488
 8003f60:	400204a0 	.word	0x400204a0
 8003f64:	400204b8 	.word	0x400204b8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8087 	beq.w	8004090 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d139      	bne.n	8004012 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0216 	bic.w	r2, r2, #22
 8003fac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_DMA_IRQHandler+0x736>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0208 	bic.w	r2, r2, #8
 8003fdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	223f      	movs	r2, #63	; 0x3f
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 834a 	beq.w	800469c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4798      	blx	r3
          }
          return;
 8004010:	e344      	b.n	800469c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d018      	beq.n	8004052 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	2b00      	cmp	r3, #0
 8004034:	d02c      	beq.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
 800403e:	e027      	b.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
 8004050:	e01e      	b.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0210 	bic.w	r2, r2, #16
 800406e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8306 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8088 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2204      	movs	r2, #4
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a7a      	ldr	r2, [pc, #488]	; (80042a0 <HAL_DMA_IRQHandler+0xa08>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04a      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a79      	ldr	r2, [pc, #484]	; (80042a4 <HAL_DMA_IRQHandler+0xa0c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d045      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a77      	ldr	r2, [pc, #476]	; (80042a8 <HAL_DMA_IRQHandler+0xa10>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d040      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a76      	ldr	r2, [pc, #472]	; (80042ac <HAL_DMA_IRQHandler+0xa14>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d03b      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a74      	ldr	r2, [pc, #464]	; (80042b0 <HAL_DMA_IRQHandler+0xa18>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d036      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a73      	ldr	r2, [pc, #460]	; (80042b4 <HAL_DMA_IRQHandler+0xa1c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d031      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a71      	ldr	r2, [pc, #452]	; (80042b8 <HAL_DMA_IRQHandler+0xa20>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02c      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a70      	ldr	r2, [pc, #448]	; (80042bc <HAL_DMA_IRQHandler+0xa24>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d027      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <HAL_DMA_IRQHandler+0xa28>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d022      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6d      	ldr	r2, [pc, #436]	; (80042c4 <HAL_DMA_IRQHandler+0xa2c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d01d      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a6b      	ldr	r2, [pc, #428]	; (80042c8 <HAL_DMA_IRQHandler+0xa30>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d018      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6a      	ldr	r2, [pc, #424]	; (80042cc <HAL_DMA_IRQHandler+0xa34>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a68      	ldr	r2, [pc, #416]	; (80042d0 <HAL_DMA_IRQHandler+0xa38>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00e      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a67      	ldr	r2, [pc, #412]	; (80042d4 <HAL_DMA_IRQHandler+0xa3c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a65      	ldr	r2, [pc, #404]	; (80042d8 <HAL_DMA_IRQHandler+0xa40>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_DMA_IRQHandler+0x8b8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a64      	ldr	r2, [pc, #400]	; (80042dc <HAL_DMA_IRQHandler+0xa44>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d108      	bne.n	8004162 <HAL_DMA_IRQHandler+0x8ca>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e007      	b.n	8004172 <HAL_DMA_IRQHandler+0x8da>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	429a      	cmp	r2, r3
 800417c:	d307      	bcc.n	800418e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f2      	bne.n	8004172 <HAL_DMA_IRQHandler+0x8da>
 800418c:	e000      	b.n	8004190 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800418e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2203      	movs	r2, #3
 80041aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80041ae:	e003      	b.n	80041b8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8272 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
 80041ca:	e26c      	b.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a43      	ldr	r2, [pc, #268]	; (80042e0 <HAL_DMA_IRQHandler+0xa48>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a42      	ldr	r2, [pc, #264]	; (80042e4 <HAL_DMA_IRQHandler+0xa4c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <HAL_DMA_IRQHandler+0xa50>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a3f      	ldr	r2, [pc, #252]	; (80042ec <HAL_DMA_IRQHandler+0xa54>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3d      	ldr	r2, [pc, #244]	; (80042f0 <HAL_DMA_IRQHandler+0xa58>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3c      	ldr	r2, [pc, #240]	; (80042f4 <HAL_DMA_IRQHandler+0xa5c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3a      	ldr	r2, [pc, #232]	; (80042f8 <HAL_DMA_IRQHandler+0xa60>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_DMA_IRQHandler+0x984>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a39      	ldr	r2, [pc, #228]	; (80042fc <HAL_DMA_IRQHandler+0xa64>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_DMA_IRQHandler+0x988>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_DMA_IRQHandler+0x98a>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 823f 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	2204      	movs	r2, #4
 800423a:	409a      	lsls	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80cd 	beq.w	80043e0 <HAL_DMA_IRQHandler+0xb48>
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80c7 	beq.w	80043e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2204      	movs	r2, #4
 800425c:	409a      	lsls	r2, r3
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d049      	beq.n	8004300 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8210 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004288:	e20a      	b.n	80046a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8206 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800429c:	e200      	b.n	80046a0 <HAL_DMA_IRQHandler+0xe08>
 800429e:	bf00      	nop
 80042a0:	40020010 	.word	0x40020010
 80042a4:	40020028 	.word	0x40020028
 80042a8:	40020040 	.word	0x40020040
 80042ac:	40020058 	.word	0x40020058
 80042b0:	40020070 	.word	0x40020070
 80042b4:	40020088 	.word	0x40020088
 80042b8:	400200a0 	.word	0x400200a0
 80042bc:	400200b8 	.word	0x400200b8
 80042c0:	40020410 	.word	0x40020410
 80042c4:	40020428 	.word	0x40020428
 80042c8:	40020440 	.word	0x40020440
 80042cc:	40020458 	.word	0x40020458
 80042d0:	40020470 	.word	0x40020470
 80042d4:	40020488 	.word	0x40020488
 80042d8:	400204a0 	.word	0x400204a0
 80042dc:	400204b8 	.word	0x400204b8
 80042e0:	58025408 	.word	0x58025408
 80042e4:	5802541c 	.word	0x5802541c
 80042e8:	58025430 	.word	0x58025430
 80042ec:	58025444 	.word	0x58025444
 80042f0:	58025458 	.word	0x58025458
 80042f4:	5802546c 	.word	0x5802546c
 80042f8:	58025480 	.word	0x58025480
 80042fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d160      	bne.n	80043cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a8c      	ldr	r2, [pc, #560]	; (8004540 <HAL_DMA_IRQHandler+0xca8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d04a      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a8a      	ldr	r2, [pc, #552]	; (8004544 <HAL_DMA_IRQHandler+0xcac>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d045      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a89      	ldr	r2, [pc, #548]	; (8004548 <HAL_DMA_IRQHandler+0xcb0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d040      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a87      	ldr	r2, [pc, #540]	; (800454c <HAL_DMA_IRQHandler+0xcb4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d03b      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a86      	ldr	r2, [pc, #536]	; (8004550 <HAL_DMA_IRQHandler+0xcb8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d036      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a84      	ldr	r2, [pc, #528]	; (8004554 <HAL_DMA_IRQHandler+0xcbc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d031      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a83      	ldr	r2, [pc, #524]	; (8004558 <HAL_DMA_IRQHandler+0xcc0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d02c      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a81      	ldr	r2, [pc, #516]	; (800455c <HAL_DMA_IRQHandler+0xcc4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d027      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a80      	ldr	r2, [pc, #512]	; (8004560 <HAL_DMA_IRQHandler+0xcc8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d022      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7e      	ldr	r2, [pc, #504]	; (8004564 <HAL_DMA_IRQHandler+0xccc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01d      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7d      	ldr	r2, [pc, #500]	; (8004568 <HAL_DMA_IRQHandler+0xcd0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d018      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a7b      	ldr	r2, [pc, #492]	; (800456c <HAL_DMA_IRQHandler+0xcd4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7a      	ldr	r2, [pc, #488]	; (8004570 <HAL_DMA_IRQHandler+0xcd8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a78      	ldr	r2, [pc, #480]	; (8004574 <HAL_DMA_IRQHandler+0xcdc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a77      	ldr	r2, [pc, #476]	; (8004578 <HAL_DMA_IRQHandler+0xce0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_DMA_IRQHandler+0xb12>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a75      	ldr	r2, [pc, #468]	; (800457c <HAL_DMA_IRQHandler+0xce4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <HAL_DMA_IRQHandler+0xb24>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0208 	bic.w	r2, r2, #8
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e007      	b.n	80043cc <HAL_DMA_IRQHandler+0xb34>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0204 	bic.w	r2, r2, #4
 80043ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8165 	beq.w	80046a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043de:	e15f      	b.n	80046a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2202      	movs	r2, #2
 80043ea:	409a      	lsls	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80c5 	beq.w	8004580 <HAL_DMA_IRQHandler+0xce8>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80bf 	beq.w	8004580 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	2202      	movs	r2, #2
 800440c:	409a      	lsls	r2, r3
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d018      	beq.n	800444e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 813a 	beq.w	80046a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004438:	e134      	b.n	80046a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8130 	beq.w	80046a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800444c:	e12a      	b.n	80046a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d168      	bne.n	800452a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a38      	ldr	r2, [pc, #224]	; (8004540 <HAL_DMA_IRQHandler+0xca8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d04a      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a37      	ldr	r2, [pc, #220]	; (8004544 <HAL_DMA_IRQHandler+0xcac>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d045      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a35      	ldr	r2, [pc, #212]	; (8004548 <HAL_DMA_IRQHandler+0xcb0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d040      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a34      	ldr	r2, [pc, #208]	; (800454c <HAL_DMA_IRQHandler+0xcb4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d03b      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a32      	ldr	r2, [pc, #200]	; (8004550 <HAL_DMA_IRQHandler+0xcb8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d036      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a31      	ldr	r2, [pc, #196]	; (8004554 <HAL_DMA_IRQHandler+0xcbc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d031      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <HAL_DMA_IRQHandler+0xcc0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d02c      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2e      	ldr	r2, [pc, #184]	; (800455c <HAL_DMA_IRQHandler+0xcc4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d027      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <HAL_DMA_IRQHandler+0xcc8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d022      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2b      	ldr	r2, [pc, #172]	; (8004564 <HAL_DMA_IRQHandler+0xccc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d01d      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a29      	ldr	r2, [pc, #164]	; (8004568 <HAL_DMA_IRQHandler+0xcd0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d018      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a28      	ldr	r2, [pc, #160]	; (800456c <HAL_DMA_IRQHandler+0xcd4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <HAL_DMA_IRQHandler+0xcd8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00e      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a25      	ldr	r2, [pc, #148]	; (8004574 <HAL_DMA_IRQHandler+0xcdc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a23      	ldr	r2, [pc, #140]	; (8004578 <HAL_DMA_IRQHandler+0xce0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xc60>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a22      	ldr	r2, [pc, #136]	; (800457c <HAL_DMA_IRQHandler+0xce4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d108      	bne.n	800450a <HAL_DMA_IRQHandler+0xc72>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0214 	bic.w	r2, r2, #20
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	e007      	b.n	800451a <HAL_DMA_IRQHandler+0xc82>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 020a 	bic.w	r2, r2, #10
 8004518:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80b8 	beq.w	80046a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800453c:	e0b2      	b.n	80046a4 <HAL_DMA_IRQHandler+0xe0c>
 800453e:	bf00      	nop
 8004540:	40020010 	.word	0x40020010
 8004544:	40020028 	.word	0x40020028
 8004548:	40020040 	.word	0x40020040
 800454c:	40020058 	.word	0x40020058
 8004550:	40020070 	.word	0x40020070
 8004554:	40020088 	.word	0x40020088
 8004558:	400200a0 	.word	0x400200a0
 800455c:	400200b8 	.word	0x400200b8
 8004560:	40020410 	.word	0x40020410
 8004564:	40020428 	.word	0x40020428
 8004568:	40020440 	.word	0x40020440
 800456c:	40020458 	.word	0x40020458
 8004570:	40020470 	.word	0x40020470
 8004574:	40020488 	.word	0x40020488
 8004578:	400204a0 	.word	0x400204a0
 800457c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2208      	movs	r2, #8
 800458a:	409a      	lsls	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8088 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8082 	beq.w	80046a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a41      	ldr	r2, [pc, #260]	; (80046ac <HAL_DMA_IRQHandler+0xe14>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d04a      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a3f      	ldr	r2, [pc, #252]	; (80046b0 <HAL_DMA_IRQHandler+0xe18>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d045      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a3e      	ldr	r2, [pc, #248]	; (80046b4 <HAL_DMA_IRQHandler+0xe1c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d040      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <HAL_DMA_IRQHandler+0xe20>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d03b      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3b      	ldr	r2, [pc, #236]	; (80046bc <HAL_DMA_IRQHandler+0xe24>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d036      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a39      	ldr	r2, [pc, #228]	; (80046c0 <HAL_DMA_IRQHandler+0xe28>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d031      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a38      	ldr	r2, [pc, #224]	; (80046c4 <HAL_DMA_IRQHandler+0xe2c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d02c      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a36      	ldr	r2, [pc, #216]	; (80046c8 <HAL_DMA_IRQHandler+0xe30>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d027      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a35      	ldr	r2, [pc, #212]	; (80046cc <HAL_DMA_IRQHandler+0xe34>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a33      	ldr	r2, [pc, #204]	; (80046d0 <HAL_DMA_IRQHandler+0xe38>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01d      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a32      	ldr	r2, [pc, #200]	; (80046d4 <HAL_DMA_IRQHandler+0xe3c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <HAL_DMA_IRQHandler+0xe40>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2f      	ldr	r2, [pc, #188]	; (80046dc <HAL_DMA_IRQHandler+0xe44>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <HAL_DMA_IRQHandler+0xe48>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <HAL_DMA_IRQHandler+0xe4c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_DMA_IRQHandler+0xdaa>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2a      	ldr	r2, [pc, #168]	; (80046e8 <HAL_DMA_IRQHandler+0xe50>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d108      	bne.n	8004654 <HAL_DMA_IRQHandler+0xdbc>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 021c 	bic.w	r2, r2, #28
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e007      	b.n	8004664 <HAL_DMA_IRQHandler+0xdcc>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 020e 	bic.w	r2, r2, #14
 8004662:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2201      	movs	r2, #1
 800466e:	409a      	lsls	r2, r3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
 800469a:	e004      	b.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800469c:	bf00      	nop
 800469e:	e002      	b.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a0:	bf00      	nop
 80046a2:	e000      	b.n	80046a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046a6:	3728      	adds	r7, #40	; 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40020010 	.word	0x40020010
 80046b0:	40020028 	.word	0x40020028
 80046b4:	40020040 	.word	0x40020040
 80046b8:	40020058 	.word	0x40020058
 80046bc:	40020070 	.word	0x40020070
 80046c0:	40020088 	.word	0x40020088
 80046c4:	400200a0 	.word	0x400200a0
 80046c8:	400200b8 	.word	0x400200b8
 80046cc:	40020410 	.word	0x40020410
 80046d0:	40020428 	.word	0x40020428
 80046d4:	40020440 	.word	0x40020440
 80046d8:	40020458 	.word	0x40020458
 80046dc:	40020470 	.word	0x40020470
 80046e0:	40020488 	.word	0x40020488
 80046e4:	400204a0 	.word	0x400204a0
 80046e8:	400204b8 	.word	0x400204b8

080046ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a84      	ldr	r2, [pc, #528]	; (800491c <DMA_SetConfig+0x230>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d072      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a82      	ldr	r2, [pc, #520]	; (8004920 <DMA_SetConfig+0x234>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d06d      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a81      	ldr	r2, [pc, #516]	; (8004924 <DMA_SetConfig+0x238>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d068      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a7f      	ldr	r2, [pc, #508]	; (8004928 <DMA_SetConfig+0x23c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d063      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7e      	ldr	r2, [pc, #504]	; (800492c <DMA_SetConfig+0x240>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d05e      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7c      	ldr	r2, [pc, #496]	; (8004930 <DMA_SetConfig+0x244>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d059      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7b      	ldr	r2, [pc, #492]	; (8004934 <DMA_SetConfig+0x248>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d054      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a79      	ldr	r2, [pc, #484]	; (8004938 <DMA_SetConfig+0x24c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d04f      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a78      	ldr	r2, [pc, #480]	; (800493c <DMA_SetConfig+0x250>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d04a      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a76      	ldr	r2, [pc, #472]	; (8004940 <DMA_SetConfig+0x254>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d045      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a75      	ldr	r2, [pc, #468]	; (8004944 <DMA_SetConfig+0x258>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d040      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a73      	ldr	r2, [pc, #460]	; (8004948 <DMA_SetConfig+0x25c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d03b      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a72      	ldr	r2, [pc, #456]	; (800494c <DMA_SetConfig+0x260>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d036      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a70      	ldr	r2, [pc, #448]	; (8004950 <DMA_SetConfig+0x264>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d031      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6f      	ldr	r2, [pc, #444]	; (8004954 <DMA_SetConfig+0x268>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d02c      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a6d      	ldr	r2, [pc, #436]	; (8004958 <DMA_SetConfig+0x26c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d027      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6c      	ldr	r2, [pc, #432]	; (800495c <DMA_SetConfig+0x270>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a6a      	ldr	r2, [pc, #424]	; (8004960 <DMA_SetConfig+0x274>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01d      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a69      	ldr	r2, [pc, #420]	; (8004964 <DMA_SetConfig+0x278>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a67      	ldr	r2, [pc, #412]	; (8004968 <DMA_SetConfig+0x27c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a66      	ldr	r2, [pc, #408]	; (800496c <DMA_SetConfig+0x280>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a64      	ldr	r2, [pc, #400]	; (8004970 <DMA_SetConfig+0x284>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a63      	ldr	r2, [pc, #396]	; (8004974 <DMA_SetConfig+0x288>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <DMA_SetConfig+0x10a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a61      	ldr	r2, [pc, #388]	; (8004978 <DMA_SetConfig+0x28c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d101      	bne.n	80047fa <DMA_SetConfig+0x10e>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <DMA_SetConfig+0x110>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004808:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800481a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a3e      	ldr	r2, [pc, #248]	; (800491c <DMA_SetConfig+0x230>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d04a      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3d      	ldr	r2, [pc, #244]	; (8004920 <DMA_SetConfig+0x234>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d045      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3b      	ldr	r2, [pc, #236]	; (8004924 <DMA_SetConfig+0x238>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d040      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3a      	ldr	r2, [pc, #232]	; (8004928 <DMA_SetConfig+0x23c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d03b      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a38      	ldr	r2, [pc, #224]	; (800492c <DMA_SetConfig+0x240>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d036      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a37      	ldr	r2, [pc, #220]	; (8004930 <DMA_SetConfig+0x244>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d031      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a35      	ldr	r2, [pc, #212]	; (8004934 <DMA_SetConfig+0x248>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d02c      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a34      	ldr	r2, [pc, #208]	; (8004938 <DMA_SetConfig+0x24c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d027      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a32      	ldr	r2, [pc, #200]	; (800493c <DMA_SetConfig+0x250>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d022      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a31      	ldr	r2, [pc, #196]	; (8004940 <DMA_SetConfig+0x254>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d01d      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a2f      	ldr	r2, [pc, #188]	; (8004944 <DMA_SetConfig+0x258>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d018      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2e      	ldr	r2, [pc, #184]	; (8004948 <DMA_SetConfig+0x25c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d013      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2c      	ldr	r2, [pc, #176]	; (800494c <DMA_SetConfig+0x260>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00e      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <DMA_SetConfig+0x264>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d009      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a29      	ldr	r2, [pc, #164]	; (8004954 <DMA_SetConfig+0x268>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d004      	beq.n	80048bc <DMA_SetConfig+0x1d0>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a28      	ldr	r2, [pc, #160]	; (8004958 <DMA_SetConfig+0x26c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d101      	bne.n	80048c0 <DMA_SetConfig+0x1d4>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <DMA_SetConfig+0x1d6>
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d05a      	beq.n	800497c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	223f      	movs	r2, #63	; 0x3f
 80048d0:	409a      	lsls	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d108      	bne.n	8004908 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004906:	e087      	b.n	8004a18 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]
}
 8004918:	e07e      	b.n	8004a18 <DMA_SetConfig+0x32c>
 800491a:	bf00      	nop
 800491c:	40020010 	.word	0x40020010
 8004920:	40020028 	.word	0x40020028
 8004924:	40020040 	.word	0x40020040
 8004928:	40020058 	.word	0x40020058
 800492c:	40020070 	.word	0x40020070
 8004930:	40020088 	.word	0x40020088
 8004934:	400200a0 	.word	0x400200a0
 8004938:	400200b8 	.word	0x400200b8
 800493c:	40020410 	.word	0x40020410
 8004940:	40020428 	.word	0x40020428
 8004944:	40020440 	.word	0x40020440
 8004948:	40020458 	.word	0x40020458
 800494c:	40020470 	.word	0x40020470
 8004950:	40020488 	.word	0x40020488
 8004954:	400204a0 	.word	0x400204a0
 8004958:	400204b8 	.word	0x400204b8
 800495c:	58025408 	.word	0x58025408
 8004960:	5802541c 	.word	0x5802541c
 8004964:	58025430 	.word	0x58025430
 8004968:	58025444 	.word	0x58025444
 800496c:	58025458 	.word	0x58025458
 8004970:	5802546c 	.word	0x5802546c
 8004974:	58025480 	.word	0x58025480
 8004978:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <DMA_SetConfig+0x338>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d022      	beq.n	80049cc <DMA_SetConfig+0x2e0>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <DMA_SetConfig+0x33c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d01d      	beq.n	80049cc <DMA_SetConfig+0x2e0>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <DMA_SetConfig+0x340>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d018      	beq.n	80049cc <DMA_SetConfig+0x2e0>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a24      	ldr	r2, [pc, #144]	; (8004a30 <DMA_SetConfig+0x344>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <DMA_SetConfig+0x2e0>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <DMA_SetConfig+0x348>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <DMA_SetConfig+0x2e0>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a21      	ldr	r2, [pc, #132]	; (8004a38 <DMA_SetConfig+0x34c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <DMA_SetConfig+0x2e0>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <DMA_SetConfig+0x350>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <DMA_SetConfig+0x2e0>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <DMA_SetConfig+0x354>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <DMA_SetConfig+0x2e4>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <DMA_SetConfig+0x2e6>
 80049d0:	2300      	movs	r3, #0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d020      	beq.n	8004a18 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	2201      	movs	r2, #1
 80049e0:	409a      	lsls	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d108      	bne.n	8004a08 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	60da      	str	r2, [r3, #12]
}
 8004a06:	e007      	b.n	8004a18 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	60da      	str	r2, [r3, #12]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	58025408 	.word	0x58025408
 8004a28:	5802541c 	.word	0x5802541c
 8004a2c:	58025430 	.word	0x58025430
 8004a30:	58025444 	.word	0x58025444
 8004a34:	58025458 	.word	0x58025458
 8004a38:	5802546c 	.word	0x5802546c
 8004a3c:	58025480 	.word	0x58025480
 8004a40:	58025494 	.word	0x58025494

08004a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a42      	ldr	r2, [pc, #264]	; (8004b5c <DMA_CalcBaseAndBitshift+0x118>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d04a      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a41      	ldr	r2, [pc, #260]	; (8004b60 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d045      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a3f      	ldr	r2, [pc, #252]	; (8004b64 <DMA_CalcBaseAndBitshift+0x120>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d040      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a3e      	ldr	r2, [pc, #248]	; (8004b68 <DMA_CalcBaseAndBitshift+0x124>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d03b      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a3c      	ldr	r2, [pc, #240]	; (8004b6c <DMA_CalcBaseAndBitshift+0x128>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d036      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d031      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a39      	ldr	r2, [pc, #228]	; (8004b74 <DMA_CalcBaseAndBitshift+0x130>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d02c      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a38      	ldr	r2, [pc, #224]	; (8004b78 <DMA_CalcBaseAndBitshift+0x134>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d027      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a36      	ldr	r2, [pc, #216]	; (8004b7c <DMA_CalcBaseAndBitshift+0x138>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d022      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a35      	ldr	r2, [pc, #212]	; (8004b80 <DMA_CalcBaseAndBitshift+0x13c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d01d      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a33      	ldr	r2, [pc, #204]	; (8004b84 <DMA_CalcBaseAndBitshift+0x140>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a32      	ldr	r2, [pc, #200]	; (8004b88 <DMA_CalcBaseAndBitshift+0x144>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <DMA_CalcBaseAndBitshift+0x148>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2f      	ldr	r2, [pc, #188]	; (8004b90 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2d      	ldr	r2, [pc, #180]	; (8004b94 <DMA_CalcBaseAndBitshift+0x150>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <DMA_CalcBaseAndBitshift+0xa8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2c      	ldr	r2, [pc, #176]	; (8004b98 <DMA_CalcBaseAndBitshift+0x154>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <DMA_CalcBaseAndBitshift+0xac>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <DMA_CalcBaseAndBitshift+0xae>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d024      	beq.n	8004b40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	3b10      	subs	r3, #16
 8004afe:	4a27      	ldr	r2, [pc, #156]	; (8004b9c <DMA_CalcBaseAndBitshift+0x158>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	4a24      	ldr	r2, [pc, #144]	; (8004ba0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b10:	5cd3      	ldrb	r3, [r2, r3]
 8004b12:	461a      	mov	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d908      	bls.n	8004b30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	4b1f      	ldr	r3, [pc, #124]	; (8004ba4 <DMA_CalcBaseAndBitshift+0x160>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	1d1a      	adds	r2, r3, #4
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	659a      	str	r2, [r3, #88]	; 0x58
 8004b2e:	e00d      	b.n	8004b4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <DMA_CalcBaseAndBitshift+0x160>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b3e:	e005      	b.n	8004b4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40020010 	.word	0x40020010
 8004b60:	40020028 	.word	0x40020028
 8004b64:	40020040 	.word	0x40020040
 8004b68:	40020058 	.word	0x40020058
 8004b6c:	40020070 	.word	0x40020070
 8004b70:	40020088 	.word	0x40020088
 8004b74:	400200a0 	.word	0x400200a0
 8004b78:	400200b8 	.word	0x400200b8
 8004b7c:	40020410 	.word	0x40020410
 8004b80:	40020428 	.word	0x40020428
 8004b84:	40020440 	.word	0x40020440
 8004b88:	40020458 	.word	0x40020458
 8004b8c:	40020470 	.word	0x40020470
 8004b90:	40020488 	.word	0x40020488
 8004b94:	400204a0 	.word	0x400204a0
 8004b98:	400204b8 	.word	0x400204b8
 8004b9c:	aaaaaaab 	.word	0xaaaaaaab
 8004ba0:	08009ac4 	.word	0x08009ac4
 8004ba4:	fffffc00 	.word	0xfffffc00

08004ba8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d120      	bne.n	8004bfe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d858      	bhi.n	8004c76 <DMA_CheckFifoParam+0xce>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <DMA_CheckFifoParam+0x24>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004bdd 	.word	0x08004bdd
 8004bd0:	08004bef 	.word	0x08004bef
 8004bd4:	08004bdd 	.word	0x08004bdd
 8004bd8:	08004c77 	.word	0x08004c77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d048      	beq.n	8004c7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bec:	e045      	b.n	8004c7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bf6:	d142      	bne.n	8004c7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bfc:	e03f      	b.n	8004c7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c06:	d123      	bne.n	8004c50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d838      	bhi.n	8004c82 <DMA_CheckFifoParam+0xda>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <DMA_CheckFifoParam+0x70>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004c2f 	.word	0x08004c2f
 8004c20:	08004c29 	.word	0x08004c29
 8004c24:	08004c41 	.word	0x08004c41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
        break;
 8004c2c:	e030      	b.n	8004c90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d025      	beq.n	8004c86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c3e:	e022      	b.n	8004c86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c48:	d11f      	bne.n	8004c8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c4e:	e01c      	b.n	8004c8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d902      	bls.n	8004c5e <DMA_CheckFifoParam+0xb6>
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d003      	beq.n	8004c64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c5c:	e018      	b.n	8004c90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
        break;
 8004c62:	e015      	b.n	8004c90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00e      	beq.n	8004c8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
    break;
 8004c74:	e00b      	b.n	8004c8e <DMA_CheckFifoParam+0xe6>
        break;
 8004c76:	bf00      	nop
 8004c78:	e00a      	b.n	8004c90 <DMA_CheckFifoParam+0xe8>
        break;
 8004c7a:	bf00      	nop
 8004c7c:	e008      	b.n	8004c90 <DMA_CheckFifoParam+0xe8>
        break;
 8004c7e:	bf00      	nop
 8004c80:	e006      	b.n	8004c90 <DMA_CheckFifoParam+0xe8>
        break;
 8004c82:	bf00      	nop
 8004c84:	e004      	b.n	8004c90 <DMA_CheckFifoParam+0xe8>
        break;
 8004c86:	bf00      	nop
 8004c88:	e002      	b.n	8004c90 <DMA_CheckFifoParam+0xe8>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e000      	b.n	8004c90 <DMA_CheckFifoParam+0xe8>
    break;
 8004c8e:	bf00      	nop
    }
  }

  return status;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop

08004ca0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a38      	ldr	r2, [pc, #224]	; (8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d022      	beq.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a36      	ldr	r2, [pc, #216]	; (8004d98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01d      	beq.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d018      	beq.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a33      	ldr	r2, [pc, #204]	; (8004da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a32      	ldr	r2, [pc, #200]	; (8004da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00e      	beq.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a30      	ldr	r2, [pc, #192]	; (8004da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d009      	beq.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2f      	ldr	r2, [pc, #188]	; (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2d      	ldr	r2, [pc, #180]	; (8004db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01a      	beq.n	8004d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	3b08      	subs	r3, #8
 8004d10:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a24      	ldr	r2, [pc, #144]	; (8004dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2201      	movs	r2, #1
 8004d36:	409a      	lsls	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d3c:	e024      	b.n	8004d88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3b10      	subs	r3, #16
 8004d46:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d806      	bhi.n	8004d66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d902      	bls.n	8004d66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3308      	adds	r3, #8
 8004d64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a16      	ldr	r2, [pc, #88]	; (8004dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2201      	movs	r2, #1
 8004d82:	409a      	lsls	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	58025408 	.word	0x58025408
 8004d98:	5802541c 	.word	0x5802541c
 8004d9c:	58025430 	.word	0x58025430
 8004da0:	58025444 	.word	0x58025444
 8004da4:	58025458 	.word	0x58025458
 8004da8:	5802546c 	.word	0x5802546c
 8004dac:	58025480 	.word	0x58025480
 8004db0:	58025494 	.word	0x58025494
 8004db4:	cccccccd 	.word	0xcccccccd
 8004db8:	16009600 	.word	0x16009600
 8004dbc:	58025880 	.word	0x58025880
 8004dc0:	aaaaaaab 	.word	0xaaaaaaab
 8004dc4:	400204b8 	.word	0x400204b8
 8004dc8:	4002040f 	.word	0x4002040f
 8004dcc:	10008200 	.word	0x10008200
 8004dd0:	40020880 	.word	0x40020880

08004dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d04a      	beq.n	8004e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d847      	bhi.n	8004e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d022      	beq.n	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a24      	ldr	r2, [pc, #144]	; (8004e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d01d      	beq.n	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a22      	ldr	r2, [pc, #136]	; (8004e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d018      	beq.n	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d013      	beq.n	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00e      	beq.n	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1c      	ldr	r2, [pc, #112]	; (8004ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d101      	bne.n	8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e44:	2300      	movs	r3, #0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4b17      	ldr	r3, [pc, #92]	; (8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	461a      	mov	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e5c:	671a      	str	r2, [r3, #112]	; 0x70
 8004e5e:	e009      	b.n	8004e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a11      	ldr	r2, [pc, #68]	; (8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	2201      	movs	r2, #1
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	58025408 	.word	0x58025408
 8004e90:	5802541c 	.word	0x5802541c
 8004e94:	58025430 	.word	0x58025430
 8004e98:	58025444 	.word	0x58025444
 8004e9c:	58025458 	.word	0x58025458
 8004ea0:	5802546c 	.word	0x5802546c
 8004ea4:	58025480 	.word	0x58025480
 8004ea8:	58025494 	.word	0x58025494
 8004eac:	1600963f 	.word	0x1600963f
 8004eb0:	58025940 	.word	0x58025940
 8004eb4:	1000823f 	.word	0x1000823f
 8004eb8:	40020940 	.word	0x40020940

08004ebc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e00a      	b.n	8004eee <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	605a      	str	r2, [r3, #4]
      break;
 8004ee4:	e002      	b.n	8004eec <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eea:	bf00      	nop
  }

  return status;
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e003      	b.n	8004f16 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004f14:	2300      	movs	r3, #0
  }
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b089      	sub	sp, #36	; 0x24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f32:	4b89      	ldr	r3, [pc, #548]	; (8005158 <HAL_GPIO_Init+0x234>)
 8004f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f36:	e194      	b.n	8005262 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	4013      	ands	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 8186 	beq.w	800525c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d00b      	beq.n	8004f70 <HAL_GPIO_Init+0x4c>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d007      	beq.n	8004f70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f64:	2b11      	cmp	r3, #17
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b12      	cmp	r3, #18
 8004f6e:	d130      	bne.n	8004fd2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4013      	ands	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 0201 	and.w	r2, r3, #1
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	2203      	movs	r2, #3
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d003      	beq.n	8005012 <HAL_GPIO_Init+0xee>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b12      	cmp	r3, #18
 8005010:	d123      	bne.n	800505a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	08da      	lsrs	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3208      	adds	r2, #8
 800501a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	220f      	movs	r2, #15
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	08da      	lsrs	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3208      	adds	r2, #8
 8005054:	69b9      	ldr	r1, [r7, #24]
 8005056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	2203      	movs	r2, #3
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4013      	ands	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0203 	and.w	r2, r3, #3
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80e0 	beq.w	800525c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509c:	4b2f      	ldr	r3, [pc, #188]	; (800515c <HAL_GPIO_Init+0x238>)
 800509e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050a2:	4a2e      	ldr	r2, [pc, #184]	; (800515c <HAL_GPIO_Init+0x238>)
 80050a4:	f043 0302 	orr.w	r3, r3, #2
 80050a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050ac:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_GPIO_Init+0x238>)
 80050ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ba:	4a29      	ldr	r2, [pc, #164]	; (8005160 <HAL_GPIO_Init+0x23c>)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	3302      	adds	r3, #2
 80050c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	220f      	movs	r2, #15
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a20      	ldr	r2, [pc, #128]	; (8005164 <HAL_GPIO_Init+0x240>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d052      	beq.n	800518c <HAL_GPIO_Init+0x268>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <HAL_GPIO_Init+0x244>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d031      	beq.n	8005152 <HAL_GPIO_Init+0x22e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1e      	ldr	r2, [pc, #120]	; (800516c <HAL_GPIO_Init+0x248>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02b      	beq.n	800514e <HAL_GPIO_Init+0x22a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <HAL_GPIO_Init+0x24c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d025      	beq.n	800514a <HAL_GPIO_Init+0x226>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_GPIO_Init+0x250>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01f      	beq.n	8005146 <HAL_GPIO_Init+0x222>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <HAL_GPIO_Init+0x254>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d019      	beq.n	8005142 <HAL_GPIO_Init+0x21e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1a      	ldr	r2, [pc, #104]	; (800517c <HAL_GPIO_Init+0x258>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_GPIO_Init+0x21a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <HAL_GPIO_Init+0x25c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00d      	beq.n	800513a <HAL_GPIO_Init+0x216>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a18      	ldr	r2, [pc, #96]	; (8005184 <HAL_GPIO_Init+0x260>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <HAL_GPIO_Init+0x212>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a17      	ldr	r2, [pc, #92]	; (8005188 <HAL_GPIO_Init+0x264>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_GPIO_Init+0x20e>
 800512e:	2309      	movs	r3, #9
 8005130:	e02d      	b.n	800518e <HAL_GPIO_Init+0x26a>
 8005132:	230a      	movs	r3, #10
 8005134:	e02b      	b.n	800518e <HAL_GPIO_Init+0x26a>
 8005136:	2308      	movs	r3, #8
 8005138:	e029      	b.n	800518e <HAL_GPIO_Init+0x26a>
 800513a:	2307      	movs	r3, #7
 800513c:	e027      	b.n	800518e <HAL_GPIO_Init+0x26a>
 800513e:	2306      	movs	r3, #6
 8005140:	e025      	b.n	800518e <HAL_GPIO_Init+0x26a>
 8005142:	2305      	movs	r3, #5
 8005144:	e023      	b.n	800518e <HAL_GPIO_Init+0x26a>
 8005146:	2304      	movs	r3, #4
 8005148:	e021      	b.n	800518e <HAL_GPIO_Init+0x26a>
 800514a:	2303      	movs	r3, #3
 800514c:	e01f      	b.n	800518e <HAL_GPIO_Init+0x26a>
 800514e:	2302      	movs	r3, #2
 8005150:	e01d      	b.n	800518e <HAL_GPIO_Init+0x26a>
 8005152:	2301      	movs	r3, #1
 8005154:	e01b      	b.n	800518e <HAL_GPIO_Init+0x26a>
 8005156:	bf00      	nop
 8005158:	58000080 	.word	0x58000080
 800515c:	58024400 	.word	0x58024400
 8005160:	58000400 	.word	0x58000400
 8005164:	58020000 	.word	0x58020000
 8005168:	58020400 	.word	0x58020400
 800516c:	58020800 	.word	0x58020800
 8005170:	58020c00 	.word	0x58020c00
 8005174:	58021000 	.word	0x58021000
 8005178:	58021400 	.word	0x58021400
 800517c:	58021800 	.word	0x58021800
 8005180:	58021c00 	.word	0x58021c00
 8005184:	58022000 	.word	0x58022000
 8005188:	58022400 	.word	0x58022400
 800518c:	2300      	movs	r3, #0
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	f002 0203 	and.w	r2, r2, #3
 8005194:	0092      	lsls	r2, r2, #2
 8005196:	4093      	lsls	r3, r2
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800519e:	4938      	ldr	r1, [pc, #224]	; (8005280 <HAL_GPIO_Init+0x35c>)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	089b      	lsrs	r3, r3, #2
 80051a4:	3302      	adds	r3, #2
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	43db      	mvns	r3, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	3301      	adds	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	f47f ae63 	bne.w	8004f38 <HAL_GPIO_Init+0x14>
  }
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	3724      	adds	r7, #36	; 0x24
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	58000400 	.word	0x58000400

08005284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	807b      	strh	r3, [r7, #2]
 8005290:	4613      	mov	r3, r2
 8005292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005294:	787b      	ldrb	r3, [r7, #1]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800529a:	887a      	ldrh	r2, [r7, #2]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052a0:	e003      	b.n	80052aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052a2:	887b      	ldrh	r3, [r7, #2]
 80052a4:	041a      	lsls	r2, r3, #16
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	619a      	str	r2, [r3, #24]
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052c8:	887a      	ldrh	r2, [r7, #2]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4013      	ands	r3, r2
 80052ce:	041a      	lsls	r2, r3, #16
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	43d9      	mvns	r1, r3
 80052d4:	887b      	ldrh	r3, [r7, #2]
 80052d6:	400b      	ands	r3, r1
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	619a      	str	r2, [r3, #24]
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	4603      	mov	r3, r0
 80052f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80052f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	4013      	ands	r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	4618      	mov	r0, r3
 8005312:	f7fb feab 	bl	800106c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005328:	4b19      	ldr	r3, [pc, #100]	; (8005390 <HAL_PWREx_ConfigSupply+0x70>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b04      	cmp	r3, #4
 8005332:	d00a      	beq.n	800534a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005334:	4b16      	ldr	r3, [pc, #88]	; (8005390 <HAL_PWREx_ConfigSupply+0x70>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	429a      	cmp	r2, r3
 8005340:	d001      	beq.n	8005346 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e01f      	b.n	8005386 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	e01d      	b.n	8005386 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <HAL_PWREx_ConfigSupply+0x70>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f023 0207 	bic.w	r2, r3, #7
 8005352:	490f      	ldr	r1, [pc, #60]	; (8005390 <HAL_PWREx_ConfigSupply+0x70>)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4313      	orrs	r3, r2
 8005358:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800535a:	f7fc fcf9 	bl	8001d50 <HAL_GetTick>
 800535e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005360:	e009      	b.n	8005376 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005362:	f7fc fcf5 	bl	8001d50 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005370:	d901      	bls.n	8005376 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e007      	b.n	8005386 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_PWREx_ConfigSupply+0x70>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800537e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005382:	d1ee      	bne.n	8005362 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	58024800 	.word	0x58024800

08005394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	; 0x30
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e3ff      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8087 	beq.w	80054c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b4:	4b99      	ldr	r3, [pc, #612]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053be:	4b97      	ldr	r3, [pc, #604]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d007      	beq.n	80053da <HAL_RCC_OscConfig+0x46>
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	2b18      	cmp	r3, #24
 80053ce:	d110      	bne.n	80053f2 <HAL_RCC_OscConfig+0x5e>
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d10b      	bne.n	80053f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053da:	4b90      	ldr	r3, [pc, #576]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d06c      	beq.n	80054c0 <HAL_RCC_OscConfig+0x12c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d168      	bne.n	80054c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e3d9      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fa:	d106      	bne.n	800540a <HAL_RCC_OscConfig+0x76>
 80053fc:	4b87      	ldr	r3, [pc, #540]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a86      	ldr	r2, [pc, #536]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e02e      	b.n	8005468 <HAL_RCC_OscConfig+0xd4>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0x98>
 8005412:	4b82      	ldr	r3, [pc, #520]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a81      	ldr	r2, [pc, #516]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b7f      	ldr	r3, [pc, #508]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a7e      	ldr	r2, [pc, #504]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e01d      	b.n	8005468 <HAL_RCC_OscConfig+0xd4>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005434:	d10c      	bne.n	8005450 <HAL_RCC_OscConfig+0xbc>
 8005436:	4b79      	ldr	r3, [pc, #484]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a78      	ldr	r2, [pc, #480]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800543c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	4b76      	ldr	r3, [pc, #472]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a75      	ldr	r2, [pc, #468]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e00b      	b.n	8005468 <HAL_RCC_OscConfig+0xd4>
 8005450:	4b72      	ldr	r3, [pc, #456]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a71      	ldr	r2, [pc, #452]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	4b6f      	ldr	r3, [pc, #444]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a6e      	ldr	r2, [pc, #440]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d013      	beq.n	8005498 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fc fc6e 	bl	8001d50 <HAL_GetTick>
 8005474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005478:	f7fc fc6a 	bl	8001d50 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b64      	cmp	r3, #100	; 0x64
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e38d      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800548a:	4b64      	ldr	r3, [pc, #400]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0xe4>
 8005496:	e014      	b.n	80054c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fc fc5a 	bl	8001d50 <HAL_GetTick>
 800549c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fc fc56 	bl	8001d50 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e379      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054b2:	4b5a      	ldr	r3, [pc, #360]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x10c>
 80054be:	e000      	b.n	80054c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80ae 	beq.w	800562c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d0:	4b52      	ldr	r3, [pc, #328]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054da:	4b50      	ldr	r3, [pc, #320]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d007      	beq.n	80054f6 <HAL_RCC_OscConfig+0x162>
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2b18      	cmp	r3, #24
 80054ea:	d13a      	bne.n	8005562 <HAL_RCC_OscConfig+0x1ce>
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d135      	bne.n	8005562 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054f6:	4b49      	ldr	r3, [pc, #292]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_RCC_OscConfig+0x17a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e34b      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	f7fc fc4f 	bl	8001db0 <HAL_GetREVID>
 8005512:	4603      	mov	r3, r0
 8005514:	f241 0203 	movw	r2, #4099	; 0x1003
 8005518:	4293      	cmp	r3, r2
 800551a:	d817      	bhi.n	800554c <HAL_RCC_OscConfig+0x1b8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d108      	bne.n	8005536 <HAL_RCC_OscConfig+0x1a2>
 8005524:	4b3d      	ldr	r3, [pc, #244]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800552c:	4a3b      	ldr	r2, [pc, #236]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800552e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005532:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005534:	e07a      	b.n	800562c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005536:	4b39      	ldr	r3, [pc, #228]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	031b      	lsls	r3, r3, #12
 8005544:	4935      	ldr	r1, [pc, #212]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005546:	4313      	orrs	r3, r2
 8005548:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800554a:	e06f      	b.n	800562c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554c:	4b33      	ldr	r3, [pc, #204]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	061b      	lsls	r3, r3, #24
 800555a:	4930      	ldr	r1, [pc, #192]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800555c:	4313      	orrs	r3, r2
 800555e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005560:	e064      	b.n	800562c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d045      	beq.n	80055f6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800556a:	4b2c      	ldr	r3, [pc, #176]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 0219 	bic.w	r2, r3, #25
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	4929      	ldr	r1, [pc, #164]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fc fbe8 	bl	8001d50 <HAL_GetTick>
 8005580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005584:	f7fc fbe4 	bl	8001d50 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e307      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a2:	f7fc fc05 	bl	8001db0 <HAL_GetREVID>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d817      	bhi.n	80055e0 <HAL_RCC_OscConfig+0x24c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d108      	bne.n	80055ca <HAL_RCC_OscConfig+0x236>
 80055b8:	4b18      	ldr	r3, [pc, #96]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055c0:	4a16      	ldr	r2, [pc, #88]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c6:	6053      	str	r3, [r2, #4]
 80055c8:	e030      	b.n	800562c <HAL_RCC_OscConfig+0x298>
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	031b      	lsls	r3, r3, #12
 80055d8:	4910      	ldr	r1, [pc, #64]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	604b      	str	r3, [r1, #4]
 80055de:	e025      	b.n	800562c <HAL_RCC_OscConfig+0x298>
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	490b      	ldr	r1, [pc, #44]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
 80055f4:	e01a      	b.n	800562c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a08      	ldr	r2, [pc, #32]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fc fba5 	bl	8001d50 <HAL_GetTick>
 8005606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005608:	e00a      	b.n	8005620 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560a:	f7fc fba1 	bl	8001d50 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d903      	bls.n	8005620 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e2c4      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
 800561c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005620:	4ba4      	ldr	r3, [pc, #656]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ee      	bne.n	800560a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a9 	beq.w	800578c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800563a:	4b9e      	ldr	r3, [pc, #632]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005642:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005644:	4b9b      	ldr	r3, [pc, #620]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b08      	cmp	r3, #8
 800564e:	d007      	beq.n	8005660 <HAL_RCC_OscConfig+0x2cc>
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b18      	cmp	r3, #24
 8005654:	d13a      	bne.n	80056cc <HAL_RCC_OscConfig+0x338>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d135      	bne.n	80056cc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005660:	4b94      	ldr	r3, [pc, #592]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_OscConfig+0x2e4>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d001      	beq.n	8005678 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e296      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005678:	f7fc fb9a 	bl	8001db0 <HAL_GetREVID>
 800567c:	4603      	mov	r3, r0
 800567e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005682:	4293      	cmp	r3, r2
 8005684:	d817      	bhi.n	80056b6 <HAL_RCC_OscConfig+0x322>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	2b20      	cmp	r3, #32
 800568c:	d108      	bne.n	80056a0 <HAL_RCC_OscConfig+0x30c>
 800568e:	4b89      	ldr	r3, [pc, #548]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005696:	4a87      	ldr	r2, [pc, #540]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800569e:	e075      	b.n	800578c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056a0:	4b84      	ldr	r3, [pc, #528]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	069b      	lsls	r3, r3, #26
 80056ae:	4981      	ldr	r1, [pc, #516]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056b4:	e06a      	b.n	800578c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056b6:	4b7f      	ldr	r3, [pc, #508]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	061b      	lsls	r3, r3, #24
 80056c4:	497b      	ldr	r1, [pc, #492]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056ca:	e05f      	b.n	800578c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d042      	beq.n	800575a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056d4:	4b77      	ldr	r3, [pc, #476]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a76      	ldr	r2, [pc, #472]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80056da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e0:	f7fc fb36 	bl	8001d50 <HAL_GetTick>
 80056e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056e8:	f7fc fb32 	bl	8001d50 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e255      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056fa:	4b6e      	ldr	r3, [pc, #440]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005706:	f7fc fb53 	bl	8001db0 <HAL_GetREVID>
 800570a:	4603      	mov	r3, r0
 800570c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005710:	4293      	cmp	r3, r2
 8005712:	d817      	bhi.n	8005744 <HAL_RCC_OscConfig+0x3b0>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	2b20      	cmp	r3, #32
 800571a:	d108      	bne.n	800572e <HAL_RCC_OscConfig+0x39a>
 800571c:	4b65      	ldr	r3, [pc, #404]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005724:	4a63      	ldr	r2, [pc, #396]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800572a:	6053      	str	r3, [r2, #4]
 800572c:	e02e      	b.n	800578c <HAL_RCC_OscConfig+0x3f8>
 800572e:	4b61      	ldr	r3, [pc, #388]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	069b      	lsls	r3, r3, #26
 800573c:	495d      	ldr	r1, [pc, #372]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 800573e:	4313      	orrs	r3, r2
 8005740:	604b      	str	r3, [r1, #4]
 8005742:	e023      	b.n	800578c <HAL_RCC_OscConfig+0x3f8>
 8005744:	4b5b      	ldr	r3, [pc, #364]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	4958      	ldr	r1, [pc, #352]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005754:	4313      	orrs	r3, r2
 8005756:	60cb      	str	r3, [r1, #12]
 8005758:	e018      	b.n	800578c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800575a:	4b56      	ldr	r3, [pc, #344]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a55      	ldr	r2, [pc, #340]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005766:	f7fc faf3 	bl	8001d50 <HAL_GetTick>
 800576a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800576e:	f7fc faef 	bl	8001d50 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e212      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005780:	4b4c      	ldr	r3, [pc, #304]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d036      	beq.n	8005806 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d019      	beq.n	80057d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a0:	4b44      	ldr	r3, [pc, #272]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80057a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a4:	4a43      	ldr	r2, [pc, #268]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fc fad0 	bl	8001d50 <HAL_GetTick>
 80057b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b4:	f7fc facc 	bl	8001d50 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e1ef      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057c6:	4b3b      	ldr	r3, [pc, #236]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80057c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0x420>
 80057d2:	e018      	b.n	8005806 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d4:	4b37      	ldr	r3, [pc, #220]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80057d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d8:	4a36      	ldr	r2, [pc, #216]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80057da:	f023 0301 	bic.w	r3, r3, #1
 80057de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fc fab6 	bl	8001d50 <HAL_GetTick>
 80057e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e8:	f7fc fab2 	bl	8001d50 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1d5      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057fa:	4b2e      	ldr	r3, [pc, #184]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 80057fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d036      	beq.n	8005880 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d019      	beq.n	800584e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800581a:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005824:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005826:	f7fc fa93 	bl	8001d50 <HAL_GetTick>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800582e:	f7fc fa8f 	bl	8001d50 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e1b2      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005840:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x49a>
 800584c:	e018      	b.n	8005880 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800584e:	4b19      	ldr	r3, [pc, #100]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a18      	ldr	r2, [pc, #96]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005858:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800585a:	f7fc fa79 	bl	8001d50 <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005862:	f7fc fa75 	bl	8001d50 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e198      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <HAL_RCC_OscConfig+0x520>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f0      	bne.n	8005862 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8085 	beq.w	8005998 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <HAL_RCC_OscConfig+0x524>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <HAL_RCC_OscConfig+0x524>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005898:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800589a:	f7fc fa59 	bl	8001d50 <HAL_GetTick>
 800589e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a0:	e00c      	b.n	80058bc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058a2:	f7fc fa55 	bl	8001d50 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b64      	cmp	r3, #100	; 0x64
 80058ae:	d905      	bls.n	80058bc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e178      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
 80058b4:	58024400 	.word	0x58024400
 80058b8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058bc:	4b96      	ldr	r3, [pc, #600]	; (8005b18 <HAL_RCC_OscConfig+0x784>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ec      	beq.n	80058a2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d106      	bne.n	80058de <HAL_RCC_OscConfig+0x54a>
 80058d0:	4b92      	ldr	r3, [pc, #584]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a91      	ldr	r2, [pc, #580]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
 80058dc:	e02d      	b.n	800593a <HAL_RCC_OscConfig+0x5a6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10c      	bne.n	8005900 <HAL_RCC_OscConfig+0x56c>
 80058e6:	4b8d      	ldr	r3, [pc, #564]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	4a8c      	ldr	r2, [pc, #560]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	6713      	str	r3, [r2, #112]	; 0x70
 80058f2:	4b8a      	ldr	r3, [pc, #552]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f6:	4a89      	ldr	r2, [pc, #548]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80058f8:	f023 0304 	bic.w	r3, r3, #4
 80058fc:	6713      	str	r3, [r2, #112]	; 0x70
 80058fe:	e01c      	b.n	800593a <HAL_RCC_OscConfig+0x5a6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b05      	cmp	r3, #5
 8005906:	d10c      	bne.n	8005922 <HAL_RCC_OscConfig+0x58e>
 8005908:	4b84      	ldr	r3, [pc, #528]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a83      	ldr	r2, [pc, #524]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 800590e:	f043 0304 	orr.w	r3, r3, #4
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
 8005914:	4b81      	ldr	r3, [pc, #516]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005918:	4a80      	ldr	r2, [pc, #512]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	6713      	str	r3, [r2, #112]	; 0x70
 8005920:	e00b      	b.n	800593a <HAL_RCC_OscConfig+0x5a6>
 8005922:	4b7e      	ldr	r3, [pc, #504]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	4a7d      	ldr	r2, [pc, #500]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	6713      	str	r3, [r2, #112]	; 0x70
 800592e:	4b7b      	ldr	r3, [pc, #492]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	4a7a      	ldr	r2, [pc, #488]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005934:	f023 0304 	bic.w	r3, r3, #4
 8005938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d015      	beq.n	800596e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005942:	f7fc fa05 	bl	8001d50 <HAL_GetTick>
 8005946:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005948:	e00a      	b.n	8005960 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fc fa01 	bl	8001d50 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f241 3288 	movw	r2, #5000	; 0x1388
 8005958:	4293      	cmp	r3, r2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e122      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005960:	4b6e      	ldr	r3, [pc, #440]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ee      	beq.n	800594a <HAL_RCC_OscConfig+0x5b6>
 800596c:	e014      	b.n	8005998 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596e:	f7fc f9ef 	bl	8001d50 <HAL_GetTick>
 8005972:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005974:	e00a      	b.n	800598c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fc f9eb 	bl	8001d50 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e10c      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800598c:	4b63      	ldr	r3, [pc, #396]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ee      	bne.n	8005976 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8101 	beq.w	8005ba4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059a2:	4b5e      	ldr	r3, [pc, #376]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059aa:	2b18      	cmp	r3, #24
 80059ac:	f000 80bc 	beq.w	8005b28 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	f040 8095 	bne.w	8005ae4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b58      	ldr	r3, [pc, #352]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a57      	ldr	r2, [pc, #348]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80059c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c6:	f7fc f9c3 	bl	8001d50 <HAL_GetTick>
 80059ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ce:	f7fc f9bf 	bl	8001d50 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e0e2      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059e0:	4b4e      	ldr	r3, [pc, #312]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f0      	bne.n	80059ce <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059ec:	4b4b      	ldr	r3, [pc, #300]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 80059ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f0:	4b4b      	ldr	r3, [pc, #300]	; (8005b20 <HAL_RCC_OscConfig+0x78c>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059fc:	0112      	lsls	r2, r2, #4
 80059fe:	430a      	orrs	r2, r1
 8005a00:	4946      	ldr	r1, [pc, #280]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	628b      	str	r3, [r1, #40]	; 0x28
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a14:	3b01      	subs	r3, #1
 8005a16:	025b      	lsls	r3, r3, #9
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	3b01      	subs	r3, #1
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a36:	4939      	ldr	r1, [pc, #228]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a3c:	4b37      	ldr	r3, [pc, #220]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	4a36      	ldr	r2, [pc, #216]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a48:	4b34      	ldr	r3, [pc, #208]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a4c:	4b35      	ldr	r3, [pc, #212]	; (8005b24 <HAL_RCC_OscConfig+0x790>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a54:	00d2      	lsls	r2, r2, #3
 8005a56:	4931      	ldr	r1, [pc, #196]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a5c:	4b2f      	ldr	r3, [pc, #188]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	f023 020c 	bic.w	r2, r3, #12
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	492c      	ldr	r1, [pc, #176]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a6e:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	f023 0202 	bic.w	r2, r3, #2
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	4928      	ldr	r1, [pc, #160]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a80:	4b26      	ldr	r3, [pc, #152]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a25      	ldr	r2, [pc, #148]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8c:	4b23      	ldr	r3, [pc, #140]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a98:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4a1f      	ldr	r2, [pc, #124]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005aa4:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	4a1c      	ldr	r2, [pc, #112]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab0:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fc f948 	bl	8001d50 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fc f944 	bl	8001d50 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e067      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x730>
 8005ae2:	e05f      	b.n	8005ba4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae4:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a0c      	ldr	r2, [pc, #48]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fc f92e 	bl	8001d50 <HAL_GetTick>
 8005af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fc f92a 	bl	8001d50 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e04d      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b0a:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <HAL_RCC_OscConfig+0x788>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x764>
 8005b16:	e045      	b.n	8005ba4 <HAL_RCC_OscConfig+0x810>
 8005b18:	58024800 	.word	0x58024800
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	fffffc0c 	.word	0xfffffc0c
 8005b24:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b28:	4b21      	ldr	r3, [pc, #132]	; (8005bb0 <HAL_RCC_OscConfig+0x81c>)
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b2e:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <HAL_RCC_OscConfig+0x81c>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d031      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f003 0203 	and.w	r2, r3, #3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d12a      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	091b      	lsrs	r3, r3, #4
 8005b4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d122      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d11a      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	0a5b      	lsrs	r3, r3, #9
 8005b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d111      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	0c1b      	lsrs	r3, r3, #16
 8005b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d108      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	0e1b      	lsrs	r3, r3, #24
 8005b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3730      	adds	r7, #48	; 0x30
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400

08005bb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e19c      	b.n	8005f02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc8:	4b8a      	ldr	r3, [pc, #552]	; (8005df4 <HAL_RCC_ClockConfig+0x240>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d910      	bls.n	8005bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd6:	4b87      	ldr	r3, [pc, #540]	; (8005df4 <HAL_RCC_ClockConfig+0x240>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f023 020f 	bic.w	r2, r3, #15
 8005bde:	4985      	ldr	r1, [pc, #532]	; (8005df4 <HAL_RCC_ClockConfig+0x240>)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be6:	4b83      	ldr	r3, [pc, #524]	; (8005df4 <HAL_RCC_ClockConfig+0x240>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d001      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e184      	b.n	8005f02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d010      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	4b7b      	ldr	r3, [pc, #492]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d908      	bls.n	8005c26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c14:	4b78      	ldr	r3, [pc, #480]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	4975      	ldr	r1, [pc, #468]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d010      	beq.n	8005c54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	4b70      	ldr	r3, [pc, #448]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d908      	bls.n	8005c54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c42:	4b6d      	ldr	r3, [pc, #436]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	496a      	ldr	r1, [pc, #424]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d010      	beq.n	8005c82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	4b64      	ldr	r3, [pc, #400]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d908      	bls.n	8005c82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c70:	4b61      	ldr	r3, [pc, #388]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	495e      	ldr	r1, [pc, #376]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d010      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	4b59      	ldr	r3, [pc, #356]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d908      	bls.n	8005cb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c9e:	4b56      	ldr	r3, [pc, #344]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	4953      	ldr	r1, [pc, #332]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d010      	beq.n	8005cde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	4b4d      	ldr	r3, [pc, #308]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d908      	bls.n	8005cde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ccc:	4b4a      	ldr	r3, [pc, #296]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f023 020f 	bic.w	r2, r3, #15
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4947      	ldr	r1, [pc, #284]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d055      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cea:	4b43      	ldr	r3, [pc, #268]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	4940      	ldr	r1, [pc, #256]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d107      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d04:	4b3c      	ldr	r3, [pc, #240]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d121      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0f6      	b.n	8005f02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d107      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d1c:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d115      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0ea      	b.n	8005f02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d107      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d34:	4b30      	ldr	r3, [pc, #192]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0de      	b.n	8005f02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d44:	4b2c      	ldr	r3, [pc, #176]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0d6      	b.n	8005f02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d54:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f023 0207 	bic.w	r2, r3, #7
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4925      	ldr	r1, [pc, #148]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d66:	f7fb fff3 	bl	8001d50 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6c:	e00a      	b.n	8005d84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6e:	f7fb ffef 	bl	8001d50 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e0be      	b.n	8005f02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d84:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d1eb      	bne.n	8005d6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d010      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	4b14      	ldr	r3, [pc, #80]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d208      	bcs.n	8005dc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db2:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f023 020f 	bic.w	r2, r3, #15
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	490e      	ldr	r1, [pc, #56]	; (8005df8 <HAL_RCC_ClockConfig+0x244>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_RCC_ClockConfig+0x240>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d214      	bcs.n	8005dfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <HAL_RCC_ClockConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f023 020f 	bic.w	r2, r3, #15
 8005dda:	4906      	ldr	r1, [pc, #24]	; (8005df4 <HAL_RCC_ClockConfig+0x240>)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de2:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <HAL_RCC_ClockConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d005      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e086      	b.n	8005f02 <HAL_RCC_ClockConfig+0x34e>
 8005df4:	52002000 	.word	0x52002000
 8005df8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d010      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d208      	bcs.n	8005e2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e18:	4b3c      	ldr	r3, [pc, #240]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	4939      	ldr	r1, [pc, #228]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	4b34      	ldr	r3, [pc, #208]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d208      	bcs.n	8005e58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e46:	4b31      	ldr	r3, [pc, #196]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	492e      	ldr	r1, [pc, #184]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0310 	and.w	r3, r3, #16
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d010      	beq.n	8005e86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	699a      	ldr	r2, [r3, #24]
 8005e68:	4b28      	ldr	r3, [pc, #160]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d208      	bcs.n	8005e86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	4922      	ldr	r1, [pc, #136]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d010      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d208      	bcs.n	8005eb4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ea2:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	4917      	ldr	r1, [pc, #92]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005eb4:	f000 f834 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	0a1b      	lsrs	r3, r3, #8
 8005ec0:	f003 030f 	and.w	r3, r3, #15
 8005ec4:	4912      	ldr	r1, [pc, #72]	; (8005f10 <HAL_RCC_ClockConfig+0x35c>)
 8005ec6:	5ccb      	ldrb	r3, [r1, r3]
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <HAL_RCC_ClockConfig+0x358>)
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	4a0d      	ldr	r2, [pc, #52]	; (8005f10 <HAL_RCC_ClockConfig+0x35c>)
 8005edc:	5cd3      	ldrb	r3, [r2, r3]
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee8:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <HAL_RCC_ClockConfig+0x360>)
 8005eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005eec:	4a0a      	ldr	r2, [pc, #40]	; (8005f18 <HAL_RCC_ClockConfig+0x364>)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <HAL_RCC_ClockConfig+0x368>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fb fee0 	bl	8001cbc <HAL_InitTick>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	08009ab4 	.word	0x08009ab4
 8005f14:	2400001c 	.word	0x2400001c
 8005f18:	24000018 	.word	0x24000018
 8005f1c:	24000020 	.word	0x24000020

08005f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b089      	sub	sp, #36	; 0x24
 8005f24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f26:	4bb3      	ldr	r3, [pc, #716]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f2e:	2b18      	cmp	r3, #24
 8005f30:	f200 8155 	bhi.w	80061de <HAL_RCC_GetSysClockFreq+0x2be>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005fa1 	.word	0x08005fa1
 8005f40:	080061df 	.word	0x080061df
 8005f44:	080061df 	.word	0x080061df
 8005f48:	080061df 	.word	0x080061df
 8005f4c:	080061df 	.word	0x080061df
 8005f50:	080061df 	.word	0x080061df
 8005f54:	080061df 	.word	0x080061df
 8005f58:	080061df 	.word	0x080061df
 8005f5c:	08005fc7 	.word	0x08005fc7
 8005f60:	080061df 	.word	0x080061df
 8005f64:	080061df 	.word	0x080061df
 8005f68:	080061df 	.word	0x080061df
 8005f6c:	080061df 	.word	0x080061df
 8005f70:	080061df 	.word	0x080061df
 8005f74:	080061df 	.word	0x080061df
 8005f78:	080061df 	.word	0x080061df
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	080061df 	.word	0x080061df
 8005f84:	080061df 	.word	0x080061df
 8005f88:	080061df 	.word	0x080061df
 8005f8c:	080061df 	.word	0x080061df
 8005f90:	080061df 	.word	0x080061df
 8005f94:	080061df 	.word	0x080061df
 8005f98:	080061df 	.word	0x080061df
 8005f9c:	08005fd3 	.word	0x08005fd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fa0:	4b94      	ldr	r3, [pc, #592]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fac:	4b91      	ldr	r3, [pc, #580]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	08db      	lsrs	r3, r3, #3
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	4a90      	ldr	r2, [pc, #576]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005fbe:	e111      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005fc0:	4b8d      	ldr	r3, [pc, #564]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fc2:	61bb      	str	r3, [r7, #24]
    break;
 8005fc4:	e10e      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005fc6:	4b8d      	ldr	r3, [pc, #564]	; (80061fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fc8:	61bb      	str	r3, [r7, #24]
    break;
 8005fca:	e10b      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005fcc:	4b8c      	ldr	r3, [pc, #560]	; (8006200 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005fce:	61bb      	str	r3, [r7, #24]
    break;
 8005fd0:	e108      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fd2:	4b88      	ldr	r3, [pc, #544]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fdc:	4b85      	ldr	r3, [pc, #532]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fe8:	4b82      	ldr	r3, [pc, #520]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ff2:	4b80      	ldr	r3, [pc, #512]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff6:	08db      	lsrs	r3, r3, #3
 8005ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80e1 	beq.w	80061d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b02      	cmp	r3, #2
 800601a:	f000 8083 	beq.w	8006124 <HAL_RCC_GetSysClockFreq+0x204>
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b02      	cmp	r3, #2
 8006022:	f200 80a1 	bhi.w	8006168 <HAL_RCC_GetSysClockFreq+0x248>
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_RCC_GetSysClockFreq+0x114>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d056      	beq.n	80060e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006032:	e099      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006034:	4b6f      	ldr	r3, [pc, #444]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d02d      	beq.n	800609c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006040:	4b6c      	ldr	r3, [pc, #432]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	08db      	lsrs	r3, r3, #3
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	4a6b      	ldr	r2, [pc, #428]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
 8006050:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b62      	ldr	r3, [pc, #392]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a02 	vldr	s12, [r7, #8]
 800607e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800609a:	e087      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006208 <HAL_RCC_GetSysClockFreq+0x2e8>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b51      	ldr	r3, [pc, #324]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060de:	e065      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800620c <HAL_RCC_GetSysClockFreq+0x2ec>
 80060ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f2:	4b40      	ldr	r3, [pc, #256]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a02 	vldr	s12, [r7, #8]
 8006106:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006122:	e043      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006210 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006136:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006146:	ed97 6a02 	vldr	s12, [r7, #8]
 800614a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800614e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800615a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006166:	e021      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006172:	eddf 6a26 	vldr	s13, [pc, #152]	; 800620c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617a:	4b1e      	ldr	r3, [pc, #120]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618a:	ed97 6a02 	vldr	s12, [r7, #8]
 800618e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800619e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061ac:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	0a5b      	lsrs	r3, r3, #9
 80061b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b6:	3301      	adds	r3, #1
 80061b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	ee07 3a90 	vmov	s15, r3
 80061c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80061c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d0:	ee17 3a90 	vmov	r3, s15
 80061d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061d6:	e005      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
    break;
 80061dc:	e002      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061e0:	61bb      	str	r3, [r7, #24]
    break;
 80061e2:	bf00      	nop
  }

  return sysclockfreq;
 80061e4:	69bb      	ldr	r3, [r7, #24]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3724      	adds	r7, #36	; 0x24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	58024400 	.word	0x58024400
 80061f8:	03d09000 	.word	0x03d09000
 80061fc:	003d0900 	.word	0x003d0900
 8006200:	007f2815 	.word	0x007f2815
 8006204:	46000000 	.word	0x46000000
 8006208:	4c742400 	.word	0x4c742400
 800620c:	4a742400 	.word	0x4a742400
 8006210:	4afe502a 	.word	0x4afe502a

08006214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800621a:	f7ff fe81 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 800621e:	4602      	mov	r2, r0
 8006220:	4b10      	ldr	r3, [pc, #64]	; (8006264 <HAL_RCC_GetHCLKFreq+0x50>)
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	490f      	ldr	r1, [pc, #60]	; (8006268 <HAL_RCC_GetHCLKFreq+0x54>)
 800622c:	5ccb      	ldrb	r3, [r1, r3]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	fa22 f303 	lsr.w	r3, r2, r3
 8006236:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006238:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <HAL_RCC_GetHCLKFreq+0x50>)
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	4a09      	ldr	r2, [pc, #36]	; (8006268 <HAL_RCC_GetHCLKFreq+0x54>)
 8006242:	5cd3      	ldrb	r3, [r2, r3]
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	fa22 f303 	lsr.w	r3, r2, r3
 800624e:	4a07      	ldr	r2, [pc, #28]	; (800626c <HAL_RCC_GetHCLKFreq+0x58>)
 8006250:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006252:	4a07      	ldr	r2, [pc, #28]	; (8006270 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006258:	4b04      	ldr	r3, [pc, #16]	; (800626c <HAL_RCC_GetHCLKFreq+0x58>)
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	58024400 	.word	0x58024400
 8006268:	08009ab4 	.word	0x08009ab4
 800626c:	2400001c 	.word	0x2400001c
 8006270:	24000018 	.word	0x24000018

08006274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006278:	f7ff ffcc 	bl	8006214 <HAL_RCC_GetHCLKFreq>
 800627c:	4602      	mov	r2, r0
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	4904      	ldr	r1, [pc, #16]	; (800629c <HAL_RCC_GetPCLK1Freq+0x28>)
 800628a:	5ccb      	ldrb	r3, [r1, r3]
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006294:	4618      	mov	r0, r3
 8006296:	bd80      	pop	{r7, pc}
 8006298:	58024400 	.word	0x58024400
 800629c:	08009ab4 	.word	0x08009ab4

080062a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80062a4:	f7ff ffb6 	bl	8006214 <HAL_RCC_GetHCLKFreq>
 80062a8:	4602      	mov	r2, r0
 80062aa:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	0a1b      	lsrs	r3, r3, #8
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	4904      	ldr	r1, [pc, #16]	; (80062c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062b6:	5ccb      	ldrb	r3, [r1, r3]
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	58024400 	.word	0x58024400
 80062c8:	08009ab4 	.word	0x08009ab4

080062cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062d4:	2300      	movs	r3, #0
 80062d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062d8:	2300      	movs	r3, #0
 80062da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d03f      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062f0:	d02a      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062f6:	d824      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062fc:	d018      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006302:	d81e      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630c:	d007      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800630e:	e018      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4bab      	ldr	r3, [pc, #684]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	4aaa      	ldr	r2, [pc, #680]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800631c:	e015      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	2102      	movs	r1, #2
 8006324:	4618      	mov	r0, r3
 8006326:	f001 f9cf 	bl	80076c8 <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800632e:	e00c      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3324      	adds	r3, #36	; 0x24
 8006334:	2102      	movs	r1, #2
 8006336:	4618      	mov	r0, r3
 8006338:	f001 fa78 	bl	800782c <RCCEx_PLL3_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006340:	e003      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
      break;
 8006346:	e000      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d109      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006350:	4b9b      	ldr	r3, [pc, #620]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800635c:	4998      	ldr	r1, [pc, #608]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800635e:	4313      	orrs	r3, r2
 8006360:	650b      	str	r3, [r1, #80]	; 0x50
 8006362:	e001      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006370:	2b00      	cmp	r3, #0
 8006372:	d03d      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	2b04      	cmp	r3, #4
 800637a:	d826      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	08006399 	.word	0x08006399
 8006388:	080063a7 	.word	0x080063a7
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063d1 	.word	0x080063d1
 8006394:	080063d1 	.word	0x080063d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006398:	4b89      	ldr	r3, [pc, #548]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	4a88      	ldr	r2, [pc, #544]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800639e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063a4:	e015      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3304      	adds	r3, #4
 80063aa:	2100      	movs	r1, #0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 f98b 	bl	80076c8 <RCCEx_PLL2_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063b6:	e00c      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3324      	adds	r3, #36	; 0x24
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 fa34 	bl	800782c <RCCEx_PLL3_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063c8:	e003      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
      break;
 80063ce:	e000      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80063d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063d8:	4b79      	ldr	r3, [pc, #484]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063dc:	f023 0207 	bic.w	r2, r3, #7
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e4:	4976      	ldr	r1, [pc, #472]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	650b      	str	r3, [r1, #80]	; 0x50
 80063ea:	e001      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
 80063ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d042      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006404:	d02b      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d825      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800640c:	2bc0      	cmp	r3, #192	; 0xc0
 800640e:	d028      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006410:	2bc0      	cmp	r3, #192	; 0xc0
 8006412:	d821      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d016      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d81d      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d007      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006424:	e018      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006426:	4b66      	ldr	r3, [pc, #408]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	4a65      	ldr	r2, [pc, #404]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800642c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006430:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006432:	e017      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f001 f944 	bl	80076c8 <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006444:	e00e      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3324      	adds	r3, #36	; 0x24
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f001 f9ed 	bl	800782c <RCCEx_PLL3_Config>
 8006452:	4603      	mov	r3, r0
 8006454:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006456:	e005      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	75fb      	strb	r3, [r7, #23]
      break;
 800645c:	e002      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800646a:	4b55      	ldr	r3, [pc, #340]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800646c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006476:	4952      	ldr	r1, [pc, #328]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006478:	4313      	orrs	r3, r2
 800647a:	650b      	str	r3, [r1, #80]	; 0x50
 800647c:	e001      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648a:	2b00      	cmp	r3, #0
 800648c:	d049      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006494:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006498:	d030      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800649a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800649e:	d82a      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064a4:	d02c      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80064a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064aa:	d824      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064b0:	d018      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80064b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064b6:	d81e      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80064bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064c0:	d007      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80064c2:	e018      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c4:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	4a3d      	ldr	r2, [pc, #244]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064d0:	e017      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 f8f5 	bl	80076c8 <RCCEx_PLL2_Config>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064e2:	e00e      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3324      	adds	r3, #36	; 0x24
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f99e 	bl	800782c <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064f4:	e005      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	75fb      	strb	r3, [r7, #23]
      break;
 80064fa:	e002      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064fc:	bf00      	nop
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006508:	4b2d      	ldr	r3, [pc, #180]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800650a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006516:	492a      	ldr	r1, [pc, #168]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006518:	4313      	orrs	r3, r2
 800651a:	658b      	str	r3, [r1, #88]	; 0x58
 800651c:	e001      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800652a:	2b00      	cmp	r3, #0
 800652c:	d04c      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006538:	d030      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800653a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800653e:	d82a      	bhi.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006540:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006544:	d02c      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006546:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800654a:	d824      	bhi.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800654c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006550:	d018      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006556:	d81e      	bhi.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800655c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006560:	d007      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006562:	e018      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006564:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800656a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006570:	e017      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3304      	adds	r3, #4
 8006576:	2100      	movs	r1, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f001 f8a5 	bl	80076c8 <RCCEx_PLL2_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006582:	e00e      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3324      	adds	r3, #36	; 0x24
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f001 f94e 	bl	800782c <RCCEx_PLL3_Config>
 8006590:	4603      	mov	r3, r0
 8006592:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006594:	e005      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	75fb      	strb	r3, [r7, #23]
      break;
 800659a:	e002      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800659c:	bf00      	nop
 800659e:	e000      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80065a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10d      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065b6:	4902      	ldr	r1, [pc, #8]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	658b      	str	r3, [r1, #88]	; 0x58
 80065bc:	e004      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80065be:	bf00      	nop
 80065c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d032      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d8:	2b30      	cmp	r3, #48	; 0x30
 80065da:	d01c      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80065dc:	2b30      	cmp	r3, #48	; 0x30
 80065de:	d817      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d00c      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d813      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d016      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d10f      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f0:	4baf      	ldr	r3, [pc, #700]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	4aae      	ldr	r2, [pc, #696]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065fc:	e00e      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3304      	adds	r3, #4
 8006602:	2102      	movs	r1, #2
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f85f 	bl	80076c8 <RCCEx_PLL2_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800660e:	e005      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
      break;
 8006614:	e002      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800661a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006622:	4ba3      	ldr	r3, [pc, #652]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006626:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662e:	49a0      	ldr	r1, [pc, #640]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006630:	4313      	orrs	r3, r2
 8006632:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006634:	e001      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d047      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800664e:	d030      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006654:	d82a      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006656:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800665a:	d02c      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800665c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006660:	d824      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006666:	d018      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d81e      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006676:	d007      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006678:	e018      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800667a:	4b8d      	ldr	r3, [pc, #564]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	4a8c      	ldr	r2, [pc, #560]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006684:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006686:	e017      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3304      	adds	r3, #4
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f001 f81a 	bl	80076c8 <RCCEx_PLL2_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006698:	e00e      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3324      	adds	r3, #36	; 0x24
 800669e:	2100      	movs	r1, #0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 f8c3 	bl	800782c <RCCEx_PLL3_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066aa:	e005      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]
      break;
 80066b0:	e002      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80066b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066be:	4b7c      	ldr	r3, [pc, #496]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ca:	4979      	ldr	r1, [pc, #484]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	650b      	str	r3, [r1, #80]	; 0x50
 80066d0:	e001      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d049      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066ea:	d02e      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80066ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066f0:	d828      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80066f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066f6:	d02a      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80066f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066fc:	d822      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80066fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006702:	d026      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006704:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006708:	d81c      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800670a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800670e:	d010      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006714:	d816      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d01d      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800671a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800671e:	d111      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3304      	adds	r3, #4
 8006724:	2101      	movs	r1, #1
 8006726:	4618      	mov	r0, r3
 8006728:	f000 ffce 	bl	80076c8 <RCCEx_PLL2_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006730:	e012      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3324      	adds	r3, #36	; 0x24
 8006736:	2101      	movs	r1, #1
 8006738:	4618      	mov	r0, r3
 800673a:	f001 f877 	bl	800782c <RCCEx_PLL3_Config>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006742:	e009      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	75fb      	strb	r3, [r7, #23]
      break;
 8006748:	e006      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800674a:	bf00      	nop
 800674c:	e004      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800674e:	bf00      	nop
 8006750:	e002      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006752:	bf00      	nop
 8006754:	e000      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800675e:	4b54      	ldr	r3, [pc, #336]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006762:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676a:	4951      	ldr	r1, [pc, #324]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800676c:	4313      	orrs	r3, r2
 800676e:	650b      	str	r3, [r1, #80]	; 0x50
 8006770:	e001      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d04b      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800678c:	d02e      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x520>
 800678e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006792:	d828      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d02a      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800679a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679e:	d822      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067a4:	d026      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80067a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067aa:	d81c      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b0:	d010      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80067b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b6:	d816      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01d      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80067bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c0:	d111      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3304      	adds	r3, #4
 80067c6:	2101      	movs	r1, #1
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 ff7d 	bl	80076c8 <RCCEx_PLL2_Config>
 80067ce:	4603      	mov	r3, r0
 80067d0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067d2:	e012      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3324      	adds	r3, #36	; 0x24
 80067d8:	2101      	movs	r1, #1
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f826 	bl	800782c <RCCEx_PLL3_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067e4:	e009      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ea:	e006      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067ec:	bf00      	nop
 80067ee:	e004      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067f0:	bf00      	nop
 80067f2:	e002      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067f4:	bf00      	nop
 80067f6:	e000      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006800:	4b2b      	ldr	r3, [pc, #172]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006804:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800680e:	4928      	ldr	r1, [pc, #160]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006810:	4313      	orrs	r3, r2
 8006812:	658b      	str	r3, [r1, #88]	; 0x58
 8006814:	e001      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d02f      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800682a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682e:	d00e      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006834:	d814      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d015      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800683a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800683e:	d10f      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	4a1a      	ldr	r2, [pc, #104]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800684a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800684c:	e00c      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3304      	adds	r3, #4
 8006852:	2101      	movs	r1, #1
 8006854:	4618      	mov	r0, r3
 8006856:	f000 ff37 	bl	80076c8 <RCCEx_PLL2_Config>
 800685a:	4603      	mov	r3, r0
 800685c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800685e:	e003      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	75fb      	strb	r3, [r7, #23]
      break;
 8006864:	e000      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006868:	7dfb      	ldrb	r3, [r7, #23]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d109      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800686e:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006872:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687a:	490d      	ldr	r1, [pc, #52]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800687c:	4313      	orrs	r3, r2
 800687e:	650b      	str	r3, [r1, #80]	; 0x50
 8006880:	e001      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d033      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	2b03      	cmp	r3, #3
 8006898:	d81c      	bhi.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800689a:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068db 	.word	0x080068db
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c3 	.word	0x080068c3
 80068ac:	080068db 	.word	0x080068db
 80068b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b4:	4bb8      	ldr	r3, [pc, #736]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	4ab7      	ldr	r2, [pc, #732]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068c0:	e00c      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3304      	adds	r3, #4
 80068c6:	2102      	movs	r1, #2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fefd 	bl	80076c8 <RCCEx_PLL2_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068d2:	e003      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	75fb      	strb	r3, [r7, #23]
      break;
 80068d8:	e000      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80068da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d109      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068e2:	4bad      	ldr	r3, [pc, #692]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e6:	f023 0203 	bic.w	r2, r3, #3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	49aa      	ldr	r1, [pc, #680]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068f4:	e001      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 8086 	beq.w	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006908:	4ba4      	ldr	r3, [pc, #656]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4aa3      	ldr	r2, [pc, #652]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800690e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006914:	f7fb fa1c 	bl	8001d50 <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800691a:	e009      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691c:	f7fb fa18 	bl	8001d50 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b64      	cmp	r3, #100	; 0x64
 8006928:	d902      	bls.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	75fb      	strb	r3, [r7, #23]
        break;
 800692e:	e005      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006930:	4b9a      	ldr	r3, [pc, #616]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0ef      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d166      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006942:	4b95      	ldr	r3, [pc, #596]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006944:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800694c:	4053      	eors	r3, r2
 800694e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006952:	2b00      	cmp	r3, #0
 8006954:	d013      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006956:	4b90      	ldr	r3, [pc, #576]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006960:	4b8d      	ldr	r3, [pc, #564]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006964:	4a8c      	ldr	r2, [pc, #560]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800696c:	4b8a      	ldr	r3, [pc, #552]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800696e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006970:	4a89      	ldr	r2, [pc, #548]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006976:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006978:	4a87      	ldr	r2, [pc, #540]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006988:	d115      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698a:	f7fb f9e1 	bl	8001d50 <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006990:	e00b      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006992:	f7fb f9dd 	bl	8001d50 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d902      	bls.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	75fb      	strb	r3, [r7, #23]
            break;
 80069a8:	e005      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069aa:	4b7b      	ldr	r3, [pc, #492]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0ed      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d126      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ca:	d10d      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80069cc:	4b72      	ldr	r3, [pc, #456]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069da:	0919      	lsrs	r1, r3, #4
 80069dc:	4b70      	ldr	r3, [pc, #448]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80069de:	400b      	ands	r3, r1
 80069e0:	496d      	ldr	r1, [pc, #436]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	610b      	str	r3, [r1, #16]
 80069e6:	e005      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80069e8:	4b6b      	ldr	r3, [pc, #428]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	4a6a      	ldr	r2, [pc, #424]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069f2:	6113      	str	r3, [r2, #16]
 80069f4:	4b68      	ldr	r3, [pc, #416]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a02:	4965      	ldr	r1, [pc, #404]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	670b      	str	r3, [r1, #112]	; 0x70
 8006a08:	e004      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	75bb      	strb	r3, [r7, #22]
 8006a0e:	e001      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d07e      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a24:	2b28      	cmp	r3, #40	; 0x28
 8006a26:	d867      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006aff 	.word	0x08006aff
 8006a34:	08006af9 	.word	0x08006af9
 8006a38:	08006af9 	.word	0x08006af9
 8006a3c:	08006af9 	.word	0x08006af9
 8006a40:	08006af9 	.word	0x08006af9
 8006a44:	08006af9 	.word	0x08006af9
 8006a48:	08006af9 	.word	0x08006af9
 8006a4c:	08006af9 	.word	0x08006af9
 8006a50:	08006ad5 	.word	0x08006ad5
 8006a54:	08006af9 	.word	0x08006af9
 8006a58:	08006af9 	.word	0x08006af9
 8006a5c:	08006af9 	.word	0x08006af9
 8006a60:	08006af9 	.word	0x08006af9
 8006a64:	08006af9 	.word	0x08006af9
 8006a68:	08006af9 	.word	0x08006af9
 8006a6c:	08006af9 	.word	0x08006af9
 8006a70:	08006ae7 	.word	0x08006ae7
 8006a74:	08006af9 	.word	0x08006af9
 8006a78:	08006af9 	.word	0x08006af9
 8006a7c:	08006af9 	.word	0x08006af9
 8006a80:	08006af9 	.word	0x08006af9
 8006a84:	08006af9 	.word	0x08006af9
 8006a88:	08006af9 	.word	0x08006af9
 8006a8c:	08006af9 	.word	0x08006af9
 8006a90:	08006aff 	.word	0x08006aff
 8006a94:	08006af9 	.word	0x08006af9
 8006a98:	08006af9 	.word	0x08006af9
 8006a9c:	08006af9 	.word	0x08006af9
 8006aa0:	08006af9 	.word	0x08006af9
 8006aa4:	08006af9 	.word	0x08006af9
 8006aa8:	08006af9 	.word	0x08006af9
 8006aac:	08006af9 	.word	0x08006af9
 8006ab0:	08006aff 	.word	0x08006aff
 8006ab4:	08006af9 	.word	0x08006af9
 8006ab8:	08006af9 	.word	0x08006af9
 8006abc:	08006af9 	.word	0x08006af9
 8006ac0:	08006af9 	.word	0x08006af9
 8006ac4:	08006af9 	.word	0x08006af9
 8006ac8:	08006af9 	.word	0x08006af9
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006aff 	.word	0x08006aff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fdf4 	bl	80076c8 <RCCEx_PLL2_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ae4:	e00c      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3324      	adds	r3, #36	; 0x24
 8006aea:	2101      	movs	r1, #1
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fe9d 	bl	800782c <RCCEx_PLL3_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006af6:	e003      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
      break;
 8006afc:	e000      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b06:	4b24      	ldr	r3, [pc, #144]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b12:	4921      	ldr	r1, [pc, #132]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	654b      	str	r3, [r1, #84]	; 0x54
 8006b18:	e001      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d03e      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d820      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b7b 	.word	0x08006b7b
 8006b3c:	08006b51 	.word	0x08006b51
 8006b40:	08006b63 	.word	0x08006b63
 8006b44:	08006b7b 	.word	0x08006b7b
 8006b48:	08006b7b 	.word	0x08006b7b
 8006b4c:	08006b7b 	.word	0x08006b7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3304      	adds	r3, #4
 8006b54:	2101      	movs	r1, #1
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fdb6 	bl	80076c8 <RCCEx_PLL2_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b60:	e00c      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3324      	adds	r3, #36	; 0x24
 8006b66:	2101      	movs	r1, #1
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fe5f 	bl	800782c <RCCEx_PLL3_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b72:	e003      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	75fb      	strb	r3, [r7, #23]
      break;
 8006b78:	e000      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d110      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b86:	f023 0207 	bic.w	r2, r3, #7
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b8e:	4902      	ldr	r1, [pc, #8]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	654b      	str	r3, [r1, #84]	; 0x54
 8006b94:	e008      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006b96:	bf00      	nop
 8006b98:	58024400 	.word	0x58024400
 8006b9c:	58024800 	.word	0x58024800
 8006ba0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d039      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	d820      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006c07 	.word	0x08006c07
 8006bc8:	08006bdd 	.word	0x08006bdd
 8006bcc:	08006bef 	.word	0x08006bef
 8006bd0:	08006c07 	.word	0x08006c07
 8006bd4:	08006c07 	.word	0x08006c07
 8006bd8:	08006c07 	.word	0x08006c07
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3304      	adds	r3, #4
 8006be0:	2101      	movs	r1, #1
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fd70 	bl	80076c8 <RCCEx_PLL2_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bec:	e00c      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3324      	adds	r3, #36	; 0x24
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fe19 	bl	800782c <RCCEx_PLL3_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bfe:	e003      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
      break;
 8006c04:	e000      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c0e:	4bb7      	ldr	r3, [pc, #732]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c12:	f023 0207 	bic.w	r2, r3, #7
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1c:	49b3      	ldr	r1, [pc, #716]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	658b      	str	r3, [r1, #88]	; 0x58
 8006c22:	e001      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d04b      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c3e:	d02e      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c44:	d828      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4a:	d02a      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c50:	d822      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c56:	d026      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c5c:	d81c      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c62:	d010      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c68:	d816      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d01d      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c72:	d111      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fd24 	bl	80076c8 <RCCEx_PLL2_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c84:	e012      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3324      	adds	r3, #36	; 0x24
 8006c8a:	2102      	movs	r1, #2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fdcd 	bl	800782c <RCCEx_PLL3_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c96:	e009      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9c:	e006      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c9e:	bf00      	nop
 8006ca0:	e004      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ca2:	bf00      	nop
 8006ca4:	e002      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ca6:	bf00      	nop
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cb2:	4b8e      	ldr	r3, [pc, #568]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc0:	498a      	ldr	r1, [pc, #552]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	654b      	str	r3, [r1, #84]	; 0x54
 8006cc6:	e001      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d04b      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ce2:	d02e      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006ce4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ce8:	d828      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cee:	d02a      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf4:	d822      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cfa:	d026      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006cfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d00:	d81c      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d06:	d010      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0c:	d816      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01d      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d16:	d111      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fcd2 	bl	80076c8 <RCCEx_PLL2_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d28:	e012      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3324      	adds	r3, #36	; 0x24
 8006d2e:	2102      	movs	r1, #2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fd7b 	bl	800782c <RCCEx_PLL3_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d3a:	e009      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d40:	e006      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d42:	bf00      	nop
 8006d44:	e004      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d56:	4b65      	ldr	r3, [pc, #404]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d64:	4961      	ldr	r1, [pc, #388]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	658b      	str	r3, [r1, #88]	; 0x58
 8006d6a:	e001      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d04b      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d86:	d02e      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006d88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d8c:	d828      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d92:	d02a      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d98:	d822      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d9e:	d026      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006da0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006da4:	d81c      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006daa:	d010      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db0:	d816      	bhi.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d01d      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dba:	d111      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fc80 	bl	80076c8 <RCCEx_PLL2_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006dcc:	e012      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3324      	adds	r3, #36	; 0x24
 8006dd2:	2102      	movs	r1, #2
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fd29 	bl	800782c <RCCEx_PLL3_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006dde:	e009      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	75fb      	strb	r3, [r7, #23]
      break;
 8006de4:	e006      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006de6:	bf00      	nop
 8006de8:	e004      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dfa:	4b3c      	ldr	r3, [pc, #240]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e08:	4938      	ldr	r1, [pc, #224]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	658b      	str	r3, [r1, #88]	; 0x58
 8006e0e:	e001      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01a      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2a:	d10a      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3324      	adds	r3, #36	; 0x24
 8006e30:	2102      	movs	r1, #2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fcfa 	bl	800782c <RCCEx_PLL3_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e42:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e50:	4926      	ldr	r1, [pc, #152]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01a      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6c:	d10a      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3324      	adds	r3, #36	; 0x24
 8006e72:	2102      	movs	r1, #2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fcd9 	bl	800782c <RCCEx_PLL3_Config>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e84:	4b19      	ldr	r3, [pc, #100]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e92:	4916      	ldr	r1, [pc, #88]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d036      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eae:	d01f      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eb4:	d817      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ebe:	d009      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006ec0:	e011      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fbfd 	bl	80076c8 <RCCEx_PLL2_Config>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ed2:	e00e      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3324      	adds	r3, #36	; 0x24
 8006ed8:	2102      	movs	r1, #2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fca6 	bl	800782c <RCCEx_PLL3_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ee4:	e005      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eea:	e002      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006eec:	58024400 	.word	0x58024400
      break;
 8006ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ef8:	4b93      	ldr	r3, [pc, #588]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f06:	4990      	ldr	r1, [pc, #576]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f0c:	e001      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d033      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f28:	d01c      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f2e:	d816      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f34:	d003      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f3a:	d007      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006f3c:	e00f      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3e:	4b82      	ldr	r3, [pc, #520]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	4a81      	ldr	r2, [pc, #516]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f4a:	e00c      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	2101      	movs	r1, #1
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fc6a 	bl	800782c <RCCEx_PLL3_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f5c:	e003      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
      break;
 8006f62:	e000      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f6c:	4b76      	ldr	r3, [pc, #472]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f7a:	4973      	ldr	r1, [pc, #460]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f80:	e001      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d029      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9e:	d007      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006fa0:	e00f      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa2:	4b69      	ldr	r3, [pc, #420]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	4a68      	ldr	r2, [pc, #416]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fae:	e00b      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fb86 	bl	80076c8 <RCCEx_PLL2_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fc0:	e002      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fce:	4b5e      	ldr	r3, [pc, #376]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	495b      	ldr	r1, [pc, #364]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fe0:	e001      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3324      	adds	r3, #36	; 0x24
 8006ff6:	2102      	movs	r1, #2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fc17 	bl	800782c <RCCEx_PLL3_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d030      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800701c:	d017      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800701e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007022:	d811      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007028:	d013      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800702a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800702e:	d80b      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d010      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007038:	d106      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703a:	4b43      	ldr	r3, [pc, #268]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	4a42      	ldr	r2, [pc, #264]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007046:	e007      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	75fb      	strb	r3, [r7, #23]
      break;
 800704c:	e004      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800704e:	bf00      	nop
 8007050:	e002      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800705e:	4b3a      	ldr	r3, [pc, #232]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800706a:	4937      	ldr	r1, [pc, #220]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800706c:	4313      	orrs	r3, r2
 800706e:	654b      	str	r3, [r1, #84]	; 0x54
 8007070:	e001      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d008      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007082:	4b31      	ldr	r3, [pc, #196]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007086:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	492e      	ldr	r1, [pc, #184]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007090:	4313      	orrs	r3, r2
 8007092:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d009      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80070a0:	4b29      	ldr	r3, [pc, #164]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070ae:	4926      	ldr	r1, [pc, #152]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070c0:	4b21      	ldr	r3, [pc, #132]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070cc:	491e      	ldr	r1, [pc, #120]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00d      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070de:	4b1a      	ldr	r3, [pc, #104]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	4a19      	ldr	r2, [pc, #100]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070e8:	6113      	str	r3, [r2, #16]
 80070ea:	4b17      	ldr	r3, [pc, #92]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070f4:	4914      	ldr	r1, [pc, #80]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	da08      	bge.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007102:	4b11      	ldr	r3, [pc, #68]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710e:	490e      	ldr	r1, [pc, #56]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007110:	4313      	orrs	r3, r2
 8007112:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007120:	4b09      	ldr	r3, [pc, #36]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007124:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712e:	4906      	ldr	r1, [pc, #24]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007130:	4313      	orrs	r3, r2
 8007132:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007134:	7dbb      	ldrb	r3, [r7, #22]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	e000      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	58024400 	.word	0x58024400

0800714c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007150:	f7ff f860 	bl	8006214 <HAL_RCC_GetHCLKFreq>
 8007154:	4602      	mov	r2, r0
 8007156:	4b06      	ldr	r3, [pc, #24]	; (8007170 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	091b      	lsrs	r3, r3, #4
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	4904      	ldr	r1, [pc, #16]	; (8007174 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007162:	5ccb      	ldrb	r3, [r1, r3]
 8007164:	f003 031f 	and.w	r3, r3, #31
 8007168:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800716c:	4618      	mov	r0, r3
 800716e:	bd80      	pop	{r7, pc}
 8007170:	58024400 	.word	0x58024400
 8007174:	08009ab4 	.word	0x08009ab4

08007178 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007178:	b480      	push	{r7}
 800717a:	b089      	sub	sp, #36	; 0x24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007180:	4ba1      	ldr	r3, [pc, #644]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800718a:	4b9f      	ldr	r3, [pc, #636]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	0b1b      	lsrs	r3, r3, #12
 8007190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007194:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007196:	4b9c      	ldr	r3, [pc, #624]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	091b      	lsrs	r3, r3, #4
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071a2:	4b99      	ldr	r3, [pc, #612]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	08db      	lsrs	r3, r3, #3
 80071a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	fb02 f303 	mul.w	r3, r2, r3
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8111 	beq.w	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	f000 8083 	beq.w	80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	f200 80a1 	bhi.w	8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d056      	beq.n	8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071e2:	e099      	b.n	8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071e4:	4b88      	ldr	r3, [pc, #544]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d02d      	beq.n	800724c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071f0:	4b85      	ldr	r3, [pc, #532]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	08db      	lsrs	r3, r3, #3
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	4a84      	ldr	r2, [pc, #528]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007200:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721a:	4b7b      	ldr	r3, [pc, #492]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722a:	ed97 6a03 	vldr	s12, [r7, #12]
 800722e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800723e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007246:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800724a:	e087      	b.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007414 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800725a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725e:	4b6a      	ldr	r3, [pc, #424]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007272:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800728e:	e065      	b.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800729e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a2:	4b59      	ldr	r3, [pc, #356]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d2:	e043      	b.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e6:	4b48      	ldr	r3, [pc, #288]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800730a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007312:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007316:	e021      	b.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732a:	4b37      	ldr	r3, [pc, #220]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733a:	ed97 6a03 	vldr	s12, [r7, #12]
 800733e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800734e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800735a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800735c:	4b2a      	ldr	r3, [pc, #168]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	0a5b      	lsrs	r3, r3, #9
 8007362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007376:	edd7 6a07 	vldr	s13, [r7, #28]
 800737a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800737e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007382:	ee17 2a90 	vmov	r2, s15
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800738a:	4b1f      	ldr	r3, [pc, #124]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	0c1b      	lsrs	r3, r3, #16
 8007390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073b0:	ee17 2a90 	vmov	r2, s15
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073b8:	4b13      	ldr	r3, [pc, #76]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	0e1b      	lsrs	r3, r3, #24
 80073be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073de:	ee17 2a90 	vmov	r2, s15
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073e6:	e008      	b.n	80073fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	609a      	str	r2, [r3, #8]
}
 80073fa:	bf00      	nop
 80073fc:	3724      	adds	r7, #36	; 0x24
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	58024400 	.word	0x58024400
 800740c:	03d09000 	.word	0x03d09000
 8007410:	46000000 	.word	0x46000000
 8007414:	4c742400 	.word	0x4c742400
 8007418:	4a742400 	.word	0x4a742400
 800741c:	4afe502a 	.word	0x4afe502a

08007420 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007420:	b480      	push	{r7}
 8007422:	b089      	sub	sp, #36	; 0x24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007428:	4ba1      	ldr	r3, [pc, #644]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	f003 0303 	and.w	r3, r3, #3
 8007430:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007432:	4b9f      	ldr	r3, [pc, #636]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	0d1b      	lsrs	r3, r3, #20
 8007438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800743c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800743e:	4b9c      	ldr	r3, [pc, #624]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007442:	0a1b      	lsrs	r3, r3, #8
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800744a:	4b99      	ldr	r3, [pc, #612]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800744c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744e:	08db      	lsrs	r3, r3, #3
 8007450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	fb02 f303 	mul.w	r3, r2, r3
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007462:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8111 	beq.w	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	2b02      	cmp	r3, #2
 8007472:	f000 8083 	beq.w	800757c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b02      	cmp	r3, #2
 800747a:	f200 80a1 	bhi.w	80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d056      	beq.n	8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800748a:	e099      	b.n	80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800748c:	4b88      	ldr	r3, [pc, #544]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b00      	cmp	r3, #0
 8007496:	d02d      	beq.n	80074f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007498:	4b85      	ldr	r3, [pc, #532]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	08db      	lsrs	r3, r3, #3
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	4a84      	ldr	r2, [pc, #528]	; (80076b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074a4:	fa22 f303 	lsr.w	r3, r2, r3
 80074a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	ee07 3a90 	vmov	s15, r3
 80074b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c2:	4b7b      	ldr	r3, [pc, #492]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074f2:	e087      	b.n	8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007506:	4b6a      	ldr	r3, [pc, #424]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007516:	ed97 6a03 	vldr	s12, [r7, #12]
 800751a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800751e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800752a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800752e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007532:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007536:	e065      	b.n	8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007542:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754a:	4b59      	ldr	r3, [pc, #356]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755a:	ed97 6a03 	vldr	s12, [r7, #12]
 800755e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800756e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007576:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800757a:	e043      	b.n	8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007586:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800758a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758e:	4b48      	ldr	r3, [pc, #288]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759e:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075be:	e021      	b.n	8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d2:	4b37      	ldr	r3, [pc, #220]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007602:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007604:	4b2a      	ldr	r3, [pc, #168]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	0a5b      	lsrs	r3, r3, #9
 800760a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800761a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800761e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800762a:	ee17 2a90 	vmov	r2, s15
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007632:	4b1f      	ldr	r3, [pc, #124]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	0c1b      	lsrs	r3, r3, #16
 8007638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763c:	ee07 3a90 	vmov	s15, r3
 8007640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800764c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007658:	ee17 2a90 	vmov	r2, s15
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007660:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	0e1b      	lsrs	r3, r3, #24
 8007666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800767a:	edd7 6a07 	vldr	s13, [r7, #28]
 800767e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007686:	ee17 2a90 	vmov	r2, s15
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800768e:	e008      	b.n	80076a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	609a      	str	r2, [r3, #8]
}
 80076a2:	bf00      	nop
 80076a4:	3724      	adds	r7, #36	; 0x24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	58024400 	.word	0x58024400
 80076b4:	03d09000 	.word	0x03d09000
 80076b8:	46000000 	.word	0x46000000
 80076bc:	4c742400 	.word	0x4c742400
 80076c0:	4a742400 	.word	0x4a742400
 80076c4:	4afe502a 	.word	0x4afe502a

080076c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076d6:	4b53      	ldr	r3, [pc, #332]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d101      	bne.n	80076e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e099      	b.n	800781a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076e6:	4b4f      	ldr	r3, [pc, #316]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a4e      	ldr	r2, [pc, #312]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80076ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f2:	f7fa fb2d 	bl	8001d50 <HAL_GetTick>
 80076f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076f8:	e008      	b.n	800770c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076fa:	f7fa fb29 	bl	8001d50 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d901      	bls.n	800770c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e086      	b.n	800781a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800770c:	4b45      	ldr	r3, [pc, #276]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f0      	bne.n	80076fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007718:	4b42      	ldr	r3, [pc, #264]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 800771a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	031b      	lsls	r3, r3, #12
 8007726:	493f      	ldr	r1, [pc, #252]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 8007728:	4313      	orrs	r3, r2
 800772a:	628b      	str	r3, [r1, #40]	; 0x28
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	3b01      	subs	r3, #1
 8007732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	3b01      	subs	r3, #1
 800773c:	025b      	lsls	r3, r3, #9
 800773e:	b29b      	uxth	r3, r3
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	3b01      	subs	r3, #1
 8007748:	041b      	lsls	r3, r3, #16
 800774a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	3b01      	subs	r3, #1
 8007756:	061b      	lsls	r3, r3, #24
 8007758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800775c:	4931      	ldr	r1, [pc, #196]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 800775e:	4313      	orrs	r3, r2
 8007760:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007762:	4b30      	ldr	r3, [pc, #192]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	492d      	ldr	r1, [pc, #180]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 8007770:	4313      	orrs	r3, r2
 8007772:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007774:	4b2b      	ldr	r3, [pc, #172]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	f023 0220 	bic.w	r2, r3, #32
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	4928      	ldr	r1, [pc, #160]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 8007782:	4313      	orrs	r3, r2
 8007784:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007786:	4b27      	ldr	r3, [pc, #156]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	4a26      	ldr	r2, [pc, #152]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 800778c:	f023 0310 	bic.w	r3, r3, #16
 8007790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007792:	4b24      	ldr	r3, [pc, #144]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 8007794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007796:	4b24      	ldr	r3, [pc, #144]	; (8007828 <RCCEx_PLL2_Config+0x160>)
 8007798:	4013      	ands	r3, r2
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	69d2      	ldr	r2, [r2, #28]
 800779e:	00d2      	lsls	r2, r2, #3
 80077a0:	4920      	ldr	r1, [pc, #128]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077a6:	4b1f      	ldr	r3, [pc, #124]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	4a1e      	ldr	r2, [pc, #120]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077ac:	f043 0310 	orr.w	r3, r3, #16
 80077b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077b8:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	4a19      	ldr	r2, [pc, #100]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077c4:	e00f      	b.n	80077e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d106      	bne.n	80077da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80077cc:	4b15      	ldr	r3, [pc, #84]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4a14      	ldr	r2, [pc, #80]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077d8:	e005      	b.n	80077e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077da:	4b12      	ldr	r3, [pc, #72]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	4a11      	ldr	r2, [pc, #68]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077e6:	4b0f      	ldr	r3, [pc, #60]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a0e      	ldr	r2, [pc, #56]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 80077ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f2:	f7fa faad 	bl	8001d50 <HAL_GetTick>
 80077f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077f8:	e008      	b.n	800780c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077fa:	f7fa faa9 	bl	8001d50 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e006      	b.n	800781a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <RCCEx_PLL2_Config+0x15c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0f0      	beq.n	80077fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	58024400 	.word	0x58024400
 8007828:	ffff0007 	.word	0xffff0007

0800782c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800783a:	4b53      	ldr	r3, [pc, #332]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b03      	cmp	r3, #3
 8007844:	d101      	bne.n	800784a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e099      	b.n	800797e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800784a:	4b4f      	ldr	r3, [pc, #316]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a4e      	ldr	r2, [pc, #312]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007856:	f7fa fa7b 	bl	8001d50 <HAL_GetTick>
 800785a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800785c:	e008      	b.n	8007870 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800785e:	f7fa fa77 	bl	8001d50 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d901      	bls.n	8007870 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e086      	b.n	800797e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007870:	4b45      	ldr	r3, [pc, #276]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f0      	bne.n	800785e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800787c:	4b42      	ldr	r3, [pc, #264]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	051b      	lsls	r3, r3, #20
 800788a:	493f      	ldr	r1, [pc, #252]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 800788c:	4313      	orrs	r3, r2
 800788e:	628b      	str	r3, [r1, #40]	; 0x28
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	3b01      	subs	r3, #1
 8007896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	3b01      	subs	r3, #1
 80078a0:	025b      	lsls	r3, r3, #9
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	061b      	lsls	r3, r3, #24
 80078bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078c0:	4931      	ldr	r1, [pc, #196]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078c6:	4b30      	ldr	r3, [pc, #192]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	492d      	ldr	r1, [pc, #180]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078d8:	4b2b      	ldr	r3, [pc, #172]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	4928      	ldr	r1, [pc, #160]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078ea:	4b27      	ldr	r3, [pc, #156]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	4a26      	ldr	r2, [pc, #152]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 80078f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078f6:	4b24      	ldr	r3, [pc, #144]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 80078f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078fa:	4b24      	ldr	r3, [pc, #144]	; (800798c <RCCEx_PLL3_Config+0x160>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	69d2      	ldr	r2, [r2, #28]
 8007902:	00d2      	lsls	r2, r2, #3
 8007904:	4920      	ldr	r1, [pc, #128]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007906:	4313      	orrs	r3, r2
 8007908:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800790a:	4b1f      	ldr	r3, [pc, #124]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 800790c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790e:	4a1e      	ldr	r2, [pc, #120]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007914:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d106      	bne.n	800792a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800791c:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 800791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007920:	4a19      	ldr	r2, [pc, #100]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007926:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007928:	e00f      	b.n	800794a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d106      	bne.n	800793e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007930:	4b15      	ldr	r3, [pc, #84]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	4a14      	ldr	r2, [pc, #80]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007936:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800793a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800793c:	e005      	b.n	800794a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800793e:	4b12      	ldr	r3, [pc, #72]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007942:	4a11      	ldr	r2, [pc, #68]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007948:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800794a:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a0e      	ldr	r2, [pc, #56]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007956:	f7fa f9fb 	bl	8001d50 <HAL_GetTick>
 800795a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800795c:	e008      	b.n	8007970 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800795e:	f7fa f9f7 	bl	8001d50 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d901      	bls.n	8007970 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e006      	b.n	800797e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007970:	4b05      	ldr	r3, [pc, #20]	; (8007988 <RCCEx_PLL3_Config+0x15c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0f0      	beq.n	800795e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	58024400 	.word	0x58024400
 800798c:	ffff0007 	.word	0xffff0007

08007990 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e0eb      	b.n	8007b7e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a75      	ldr	r2, [pc, #468]	; (8007b88 <HAL_SPI_Init+0x1f8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00f      	beq.n	80079d6 <HAL_SPI_Init+0x46>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a74      	ldr	r2, [pc, #464]	; (8007b8c <HAL_SPI_Init+0x1fc>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00a      	beq.n	80079d6 <HAL_SPI_Init+0x46>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a72      	ldr	r2, [pc, #456]	; (8007b90 <HAL_SPI_Init+0x200>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d005      	beq.n	80079d6 <HAL_SPI_Init+0x46>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2b0f      	cmp	r3, #15
 80079d0:	d901      	bls.n	80079d6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e0d3      	b.n	8007b7e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fb8a 	bl	80080f0 <SPI_GetPacketSize>
 80079dc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a69      	ldr	r2, [pc, #420]	; (8007b88 <HAL_SPI_Init+0x1f8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00c      	beq.n	8007a02 <HAL_SPI_Init+0x72>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a67      	ldr	r2, [pc, #412]	; (8007b8c <HAL_SPI_Init+0x1fc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d007      	beq.n	8007a02 <HAL_SPI_Init+0x72>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a66      	ldr	r2, [pc, #408]	; (8007b90 <HAL_SPI_Init+0x200>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d002      	beq.n	8007a02 <HAL_SPI_Init+0x72>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b08      	cmp	r3, #8
 8007a00:	d811      	bhi.n	8007a26 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a06:	4a60      	ldr	r2, [pc, #384]	; (8007b88 <HAL_SPI_Init+0x1f8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d009      	beq.n	8007a20 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a5e      	ldr	r2, [pc, #376]	; (8007b8c <HAL_SPI_Init+0x1fc>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <HAL_SPI_Init+0x90>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a5d      	ldr	r2, [pc, #372]	; (8007b90 <HAL_SPI_Init+0x200>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d104      	bne.n	8007a2a <HAL_SPI_Init+0x9a>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b10      	cmp	r3, #16
 8007a24:	d901      	bls.n	8007a2a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e0a9      	b.n	8007b7e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7f9 fbae 	bl	80011a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0201 	bic.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a64:	d119      	bne.n	8007a9a <HAL_SPI_Init+0x10a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a6e:	d103      	bne.n	8007a78 <HAL_SPI_Init+0xe8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d008      	beq.n	8007a8a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10c      	bne.n	8007a9a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a88:	d107      	bne.n	8007a9a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69da      	ldr	r2, [r3, #28]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aac:	ea42 0103 	orr.w	r1, r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007afa:	ea42 0103 	orr.w	r1, r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d113      	bne.n	8007b3a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0201 	bic.w	r2, r2, #1
 8007b48:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40013000 	.word	0x40013000
 8007b8c:	40003800 	.word	0x40003800
 8007b90:	40003c00 	.word	0x40003c00

08007b94 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08a      	sub	sp, #40	; 0x28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007bac:	6a3a      	ldr	r2, [r7, #32]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007bc6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3330      	adds	r3, #48	; 0x30
 8007bce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d113      	bne.n	8007c02 <HAL_SPI_IRQHandler+0x6e>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f003 0320 	and.w	r3, r3, #32
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10e      	bne.n	8007c02 <HAL_SPI_IRQHandler+0x6e>
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d009      	beq.n	8007c02 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
    handled = 1UL;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10f      	bne.n	8007c2c <HAL_SPI_IRQHandler+0x98>
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <HAL_SPI_IRQHandler+0x98>
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d105      	bne.n	8007c2c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
    handled = 1UL;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10f      	bne.n	8007c56 <HAL_SPI_IRQHandler+0xc2>
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <HAL_SPI_IRQHandler+0xc2>
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d105      	bne.n	8007c56 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
    handled = 1UL;
 8007c52:	2301      	movs	r3, #1
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f040 816f 	bne.w	8007f3c <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80a0 	beq.w	8007daa <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	699a      	ldr	r2, [r3, #24]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0208 	orr.w	r2, r2, #8
 8007c78:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699a      	ldr	r2, [r3, #24]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0210 	orr.w	r2, r2, #16
 8007c88:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699a      	ldr	r2, [r3, #24]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c98:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0208 	bic.w	r2, r2, #8
 8007ca8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00f      	beq.n	8007cd4 <HAL_SPI_IRQHandler+0x140>
 8007cb4:	7cfb      	ldrb	r3, [r7, #19]
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d004      	beq.n	8007cc4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <HAL_SPI_IRQHandler+0x140>
 8007cc4:	7cfb      	ldrb	r3, [r7, #19]
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d059      	beq.n	8007d7e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d154      	bne.n	8007d7e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d13d      	bne.n	8007d5e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007ce2:	e036      	b.n	8007d52 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	2b0f      	cmp	r3, #15
 8007cea:	d90b      	bls.n	8007d04 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007cf6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfc:	1d1a      	adds	r2, r3, #4
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	665a      	str	r2, [r3, #100]	; 0x64
 8007d02:	e01d      	b.n	8007d40 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	2b07      	cmp	r3, #7
 8007d0a:	d90b      	bls.n	8007d24 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	8812      	ldrh	r2, [r2, #0]
 8007d14:	b292      	uxth	r2, r2
 8007d16:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	665a      	str	r2, [r3, #100]	; 0x64
 8007d22:	e00d      	b.n	8007d40 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d30:	7812      	ldrb	r2, [r2, #0]
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1c2      	bne.n	8007ce4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f926 	bl	8007fb0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7f9 f9c0 	bl	80010fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007d7c:	e0e3      	b.n	8007f46 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007d7e:	7cfb      	ldrb	r3, [r7, #19]
 8007d80:	2b05      	cmp	r3, #5
 8007d82:	d103      	bne.n	8007d8c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f8ef 	bl	8007f68 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007d8a:	e0d9      	b.n	8007f40 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007d8c:	7cfb      	ldrb	r3, [r7, #19]
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d103      	bne.n	8007d9a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7f9 f982 	bl	800109c <HAL_SPI_RxCpltCallback>
    return;
 8007d98:	e0d2      	b.n	8007f40 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007d9a:	7cfb      	ldrb	r3, [r7, #19]
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	f040 80cf 	bne.w	8007f40 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f8d6 	bl	8007f54 <HAL_SPI_TxCpltCallback>
    return;
 8007da8:	e0ca      	b.n	8007f40 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00d      	beq.n	8007dd0 <HAL_SPI_IRQHandler+0x23c>
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699a      	ldr	r2, [r3, #24]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dcc:	619a      	str	r2, [r3, #24]

    return;
 8007dce:	e0ba      	b.n	8007f46 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 80b5 	beq.w	8007f46 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00f      	beq.n	8007e06 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dec:	f043 0204 	orr.w	r2, r3, #4
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e04:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00f      	beq.n	8007e30 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e16:	f043 0201 	orr.w	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e2e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00f      	beq.n	8007e5a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e40:	f043 0208 	orr.w	r2, r3, #8
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699a      	ldr	r2, [r3, #24]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e58:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	f003 0320 	and.w	r3, r3, #32
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00f      	beq.n	8007e84 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0220 	orr.w	r2, r2, #32
 8007e82:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d05a      	beq.n	8007f44 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0201 	bic.w	r2, r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6919      	ldr	r1, [r3, #16]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	4b28      	ldr	r3, [pc, #160]	; (8007f4c <HAL_SPI_IRQHandler+0x3b8>)
 8007eaa:	400b      	ands	r3, r1
 8007eac:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007eb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007eb8:	d138      	bne.n	8007f2c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007ec8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d013      	beq.n	8007efa <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed6:	4a1e      	ldr	r2, [pc, #120]	; (8007f50 <HAL_SPI_IRQHandler+0x3bc>)
 8007ed8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fb fa96 	bl	8003410 <HAL_DMA_Abort_IT>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d020      	beq.n	8007f44 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f06:	4a12      	ldr	r2, [pc, #72]	; (8007f50 <HAL_SPI_IRQHandler+0x3bc>)
 8007f08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fb fa7e 	bl	8003410 <HAL_DMA_Abort_IT>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d014      	beq.n	8007f44 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f2a:	e00b      	b.n	8007f44 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7f9 f8e1 	bl	80010fc <HAL_SPI_ErrorCallback>
    return;
 8007f3a:	e003      	b.n	8007f44 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007f3c:	bf00      	nop
 8007f3e:	e002      	b.n	8007f46 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007f40:	bf00      	nop
 8007f42:	e000      	b.n	8007f46 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007f44:	bf00      	nop
  }
}
 8007f46:	3728      	adds	r7, #40	; 0x28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	fffffc94 	.word	0xfffffc94
 8007f50:	08007f7d 	.word	0x08007f7d

08007f54 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7f9 f8aa 	bl	80010fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fa8:	bf00      	nop
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0208 	orr.w	r2, r2, #8
 8007fce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0210 	orr.w	r2, r2, #16
 8007fde:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0201 	bic.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6919      	ldr	r1, [r3, #16]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b3c      	ldr	r3, [pc, #240]	; (80080ec <SPI_CloseTransfer+0x13c>)
 8007ffc:	400b      	ands	r3, r1
 8007ffe:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800800e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b04      	cmp	r3, #4
 800801a:	d014      	beq.n	8008046 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00f      	beq.n	8008046 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800802c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	699a      	ldr	r2, [r3, #24]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0220 	orr.w	r2, r2, #32
 8008044:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b03      	cmp	r3, #3
 8008050:	d014      	beq.n	800807c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00f      	beq.n	800807c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008062:	f043 0204 	orr.w	r2, r3, #4
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800807a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00f      	beq.n	80080a6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800808c:	f043 0201 	orr.w	r2, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	699a      	ldr	r2, [r3, #24]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00f      	beq.n	80080d0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b6:	f043 0208 	orr.w	r2, r3, #8
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80080e0:	bf00      	nop
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	fffffc90 	.word	0xfffffc90

080080f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	3301      	adds	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	3301      	adds	r3, #1
 8008108:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	3307      	adds	r3, #7
 800810e:	08db      	lsrs	r3, r3, #3
 8008110:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	fb02 f303 	mul.w	r3, r2, r3
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e042      	b.n	80081be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7f9 f990 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2224      	movs	r2, #36	; 0x24
 8008154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0201 	bic.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fb7d 	bl	8008868 <UART_SetConfig>
 800816e:	4603      	mov	r3, r0
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e022      	b.n	80081be <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 f8d1 	bl	8009328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008194:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0201 	orr.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 f958 	bl	800946c <UART_CheckIdleState>
 80081bc:	4603      	mov	r3, r0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d168      	bne.n	80082b2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <HAL_UART_Transmit_DMA+0x24>
 80081e6:	88fb      	ldrh	r3, [r7, #6]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e061      	b.n	80082b4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_UART_Transmit_DMA+0x36>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e05a      	b.n	80082b4 <HAL_UART_Transmit_DMA+0xec>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	88fa      	ldrh	r2, [r7, #6]
 8008210:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	88fa      	ldrh	r2, [r7, #6]
 8008218:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2221      	movs	r2, #33	; 0x21
 8008228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008230:	2b00      	cmp	r3, #0
 8008232:	d02c      	beq.n	800828e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008238:	4a20      	ldr	r2, [pc, #128]	; (80082bc <HAL_UART_Transmit_DMA+0xf4>)
 800823a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008240:	4a1f      	ldr	r2, [pc, #124]	; (80082c0 <HAL_UART_Transmit_DMA+0xf8>)
 8008242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008248:	4a1e      	ldr	r2, [pc, #120]	; (80082c4 <HAL_UART_Transmit_DMA+0xfc>)
 800824a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008250:	2200      	movs	r2, #0
 8008252:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825c:	4619      	mov	r1, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3328      	adds	r3, #40	; 0x28
 8008264:	461a      	mov	r2, r3
 8008266:	88fb      	ldrh	r3, [r7, #6]
 8008268:	f7fa fb4a 	bl	8002900 <HAL_DMA_Start_IT>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00d      	beq.n	800828e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2210      	movs	r2, #16
 8008276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e012      	b.n	80082b4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2240      	movs	r2, #64	; 0x40
 8008294:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082ac:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e000      	b.n	80082b4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80082b2:	2302      	movs	r3, #2
  }
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	080096a5 	.word	0x080096a5
 80082c0:	080096f5 	.word	0x080096f5
 80082c4:	08009711 	.word	0x08009711

080082c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80082ee:	4013      	ands	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d118      	bne.n	800832a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d013      	beq.n	800832a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d104      	bne.n	8008316 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 8282 	beq.w	8008824 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	4798      	blx	r3
      }
      return;
 8008328:	e27c      	b.n	8008824 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 80ef 	beq.w	8008510 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	4b73      	ldr	r3, [pc, #460]	; (8008504 <HAL_UART_IRQHandler+0x23c>)
 8008336:	4013      	ands	r3, r2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d105      	bne.n	8008348 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	4b72      	ldr	r3, [pc, #456]	; (8008508 <HAL_UART_IRQHandler+0x240>)
 8008340:	4013      	ands	r3, r2
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 80e4 	beq.w	8008510 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d010      	beq.n	8008374 <HAL_UART_IRQHandler+0xac>
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2201      	movs	r2, #1
 8008362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800836a:	f043 0201 	orr.w	r2, r3, #1
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <HAL_UART_IRQHandler+0xd8>
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2202      	movs	r2, #2
 800838e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008396:	f043 0204 	orr.w	r2, r3, #4
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d010      	beq.n	80083cc <HAL_UART_IRQHandler+0x104>
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2204      	movs	r2, #4
 80083ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c2:	f043 0202 	orr.w	r2, r3, #2
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f003 0308 	and.w	r3, r3, #8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d015      	beq.n	8008402 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	f003 0320 	and.w	r3, r3, #32
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	4b48      	ldr	r3, [pc, #288]	; (8008504 <HAL_UART_IRQHandler+0x23c>)
 80083e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00b      	beq.n	8008402 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2208      	movs	r2, #8
 80083f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f8:	f043 0208 	orr.w	r2, r3, #8
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008408:	2b00      	cmp	r3, #0
 800840a:	d011      	beq.n	8008430 <HAL_UART_IRQHandler+0x168>
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00c      	beq.n	8008430 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800841e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008426:	f043 0220 	orr.w	r2, r3, #32
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 81f6 	beq.w	8008828 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	2b00      	cmp	r3, #0
 8008444:	d011      	beq.n	800846a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d007      	beq.n	800846a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008470:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847c:	2b40      	cmp	r3, #64	; 0x40
 800847e:	d004      	beq.n	800848a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008486:	2b00      	cmp	r3, #0
 8008488:	d031      	beq.n	80084ee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 f8d8 	bl	8009640 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849a:	2b40      	cmp	r3, #64	; 0x40
 800849c:	d123      	bne.n	80084e6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d013      	beq.n	80084de <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ba:	4a14      	ldr	r2, [pc, #80]	; (800850c <HAL_UART_IRQHandler+0x244>)
 80084bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fa ffa4 	bl	8003410 <HAL_DMA_Abort_IT>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d017      	beq.n	80084fe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80084d8:	4610      	mov	r0, r2
 80084da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	e00f      	b.n	80084fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7f8 fe2c 	bl	800113c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e4:	e00b      	b.n	80084fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7f8 fe28 	bl	800113c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ec:	e007      	b.n	80084fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7f8 fe24 	bl	800113c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80084fc:	e194      	b.n	8008828 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fe:	bf00      	nop
    return;
 8008500:	e192      	b.n	8008828 <HAL_UART_IRQHandler+0x560>
 8008502:	bf00      	nop
 8008504:	10000001 	.word	0x10000001
 8008508:	04000120 	.word	0x04000120
 800850c:	08009791 	.word	0x08009791

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008514:	2b01      	cmp	r3, #1
 8008516:	f040 810f 	bne.w	8008738 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8109 	beq.w	8008738 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	f003 0310 	and.w	r3, r3, #16
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 8103 	beq.w	8008738 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2210      	movs	r2, #16
 8008538:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008544:	2b40      	cmp	r3, #64	; 0x40
 8008546:	f040 80bb 	bne.w	80086c0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a96      	ldr	r2, [pc, #600]	; (80087ac <HAL_UART_IRQHandler+0x4e4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d059      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a94      	ldr	r2, [pc, #592]	; (80087b0 <HAL_UART_IRQHandler+0x4e8>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d053      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a92      	ldr	r2, [pc, #584]	; (80087b4 <HAL_UART_IRQHandler+0x4ec>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d04d      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a90      	ldr	r2, [pc, #576]	; (80087b8 <HAL_UART_IRQHandler+0x4f0>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d047      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a8e      	ldr	r2, [pc, #568]	; (80087bc <HAL_UART_IRQHandler+0x4f4>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d041      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a8c      	ldr	r2, [pc, #560]	; (80087c0 <HAL_UART_IRQHandler+0x4f8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d03b      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a8a      	ldr	r2, [pc, #552]	; (80087c4 <HAL_UART_IRQHandler+0x4fc>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d035      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a88      	ldr	r2, [pc, #544]	; (80087c8 <HAL_UART_IRQHandler+0x500>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d02f      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a86      	ldr	r2, [pc, #536]	; (80087cc <HAL_UART_IRQHandler+0x504>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d029      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a84      	ldr	r2, [pc, #528]	; (80087d0 <HAL_UART_IRQHandler+0x508>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d023      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a82      	ldr	r2, [pc, #520]	; (80087d4 <HAL_UART_IRQHandler+0x50c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d01d      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a80      	ldr	r2, [pc, #512]	; (80087d8 <HAL_UART_IRQHandler+0x510>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d017      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a7e      	ldr	r2, [pc, #504]	; (80087dc <HAL_UART_IRQHandler+0x514>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d011      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a7c      	ldr	r2, [pc, #496]	; (80087e0 <HAL_UART_IRQHandler+0x518>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00b      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a7a      	ldr	r2, [pc, #488]	; (80087e4 <HAL_UART_IRQHandler+0x51c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d005      	beq.n	800860a <HAL_UART_IRQHandler+0x342>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a78      	ldr	r2, [pc, #480]	; (80087e8 <HAL_UART_IRQHandler+0x520>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d105      	bne.n	8008616 <HAL_UART_IRQHandler+0x34e>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	b29b      	uxth	r3, r3
 8008614:	e004      	b.n	8008620 <HAL_UART_IRQHandler+0x358>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	b29b      	uxth	r3, r3
 8008620:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008622:	893b      	ldrh	r3, [r7, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 8101 	beq.w	800882c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008630:	893a      	ldrh	r2, [r7, #8]
 8008632:	429a      	cmp	r2, r3
 8008634:	f080 80fa 	bcs.w	800882c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	893a      	ldrh	r2, [r7, #8]
 800863c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864a:	d02b      	beq.n	80086a4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800865a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0201 	bic.w	r2, r2, #1
 800866a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800867a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2220      	movs	r2, #32
 8008680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0210 	bic.w	r2, r2, #16
 8008698:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fa fb98 	bl	8002dd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f8c9 	bl	8008850 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086be:	e0b5      	b.n	800882c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 80a8 	beq.w	8008830 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80086e0:	897b      	ldrh	r3, [r7, #10]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80a4 	beq.w	8008830 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086f6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6899      	ldr	r1, [r3, #8]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b3a      	ldr	r3, [pc, #232]	; (80087ec <HAL_UART_IRQHandler+0x524>)
 8008704:	400b      	ands	r3, r1
 8008706:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2220      	movs	r2, #32
 800870c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0210 	bic.w	r2, r2, #16
 800872a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800872c:	897b      	ldrh	r3, [r7, #10]
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f88d 	bl	8008850 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008736:	e07b      	b.n	8008830 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00d      	beq.n	800875e <HAL_UART_IRQHandler+0x496>
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 f84a 	bl	80097f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800875c:	e06b      	b.n	8008836 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008764:	2b00      	cmp	r3, #0
 8008766:	d012      	beq.n	800878e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876e:	2b00      	cmp	r3, #0
 8008770:	d104      	bne.n	800877c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d008      	beq.n	800878e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008780:	2b00      	cmp	r3, #0
 8008782:	d057      	beq.n	8008834 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	4798      	blx	r3
    }
    return;
 800878c:	e052      	b.n	8008834 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d02b      	beq.n	80087f0 <HAL_UART_IRQHandler+0x528>
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d026      	beq.n	80087f0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 f80a 	bl	80097bc <UART_EndTransmit_IT>
    return;
 80087a8:	e045      	b.n	8008836 <HAL_UART_IRQHandler+0x56e>
 80087aa:	bf00      	nop
 80087ac:	40020010 	.word	0x40020010
 80087b0:	40020028 	.word	0x40020028
 80087b4:	40020040 	.word	0x40020040
 80087b8:	40020058 	.word	0x40020058
 80087bc:	40020070 	.word	0x40020070
 80087c0:	40020088 	.word	0x40020088
 80087c4:	400200a0 	.word	0x400200a0
 80087c8:	400200b8 	.word	0x400200b8
 80087cc:	40020410 	.word	0x40020410
 80087d0:	40020428 	.word	0x40020428
 80087d4:	40020440 	.word	0x40020440
 80087d8:	40020458 	.word	0x40020458
 80087dc:	40020470 	.word	0x40020470
 80087e0:	40020488 	.word	0x40020488
 80087e4:	400204a0 	.word	0x400204a0
 80087e8:	400204b8 	.word	0x400204b8
 80087ec:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d008      	beq.n	800880c <HAL_UART_IRQHandler+0x544>
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 f807 	bl	8009818 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800880a:	e014      	b.n	8008836 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00f      	beq.n	8008836 <HAL_UART_IRQHandler+0x56e>
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	da0c      	bge.n	8008836 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fff1 	bl	8009804 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008822:	e008      	b.n	8008836 <HAL_UART_IRQHandler+0x56e>
      return;
 8008824:	bf00      	nop
 8008826:	e006      	b.n	8008836 <HAL_UART_IRQHandler+0x56e>
    return;
 8008828:	bf00      	nop
 800882a:	e004      	b.n	8008836 <HAL_UART_IRQHandler+0x56e>
      return;
 800882c:	bf00      	nop
 800882e:	e002      	b.n	8008836 <HAL_UART_IRQHandler+0x56e>
      return;
 8008830:	bf00      	nop
 8008832:	e000      	b.n	8008836 <HAL_UART_IRQHandler+0x56e>
    return;
 8008834:	bf00      	nop
  }
}
 8008836:	3720      	adds	r7, #32
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008868:	b5b0      	push	{r4, r5, r7, lr}
 800886a:	b08e      	sub	sp, #56	; 0x38
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689a      	ldr	r2, [r3, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	4313      	orrs	r3, r2
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	4bbf      	ldr	r3, [pc, #764]	; (8008b94 <UART_SetConfig+0x32c>)
 8008896:	4013      	ands	r3, r2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6812      	ldr	r2, [r2, #0]
 800889c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800889e:	430b      	orrs	r3, r1
 80088a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4ab5      	ldr	r2, [pc, #724]	; (8008b98 <UART_SetConfig+0x330>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d004      	beq.n	80088d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088ce:	4313      	orrs	r3, r2
 80088d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	4bb0      	ldr	r3, [pc, #704]	; (8008b9c <UART_SetConfig+0x334>)
 80088da:	4013      	ands	r3, r2
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6812      	ldr	r2, [r2, #0]
 80088e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088e2:	430b      	orrs	r3, r1
 80088e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	f023 010f 	bic.w	r1, r3, #15
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4aa7      	ldr	r2, [pc, #668]	; (8008ba0 <UART_SetConfig+0x338>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d176      	bne.n	80089f4 <UART_SetConfig+0x18c>
 8008906:	4ba7      	ldr	r3, [pc, #668]	; (8008ba4 <UART_SetConfig+0x33c>)
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800890e:	2b28      	cmp	r3, #40	; 0x28
 8008910:	d86c      	bhi.n	80089ec <UART_SetConfig+0x184>
 8008912:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <UART_SetConfig+0xb0>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	080089bd 	.word	0x080089bd
 800891c:	080089ed 	.word	0x080089ed
 8008920:	080089ed 	.word	0x080089ed
 8008924:	080089ed 	.word	0x080089ed
 8008928:	080089ed 	.word	0x080089ed
 800892c:	080089ed 	.word	0x080089ed
 8008930:	080089ed 	.word	0x080089ed
 8008934:	080089ed 	.word	0x080089ed
 8008938:	080089c5 	.word	0x080089c5
 800893c:	080089ed 	.word	0x080089ed
 8008940:	080089ed 	.word	0x080089ed
 8008944:	080089ed 	.word	0x080089ed
 8008948:	080089ed 	.word	0x080089ed
 800894c:	080089ed 	.word	0x080089ed
 8008950:	080089ed 	.word	0x080089ed
 8008954:	080089ed 	.word	0x080089ed
 8008958:	080089cd 	.word	0x080089cd
 800895c:	080089ed 	.word	0x080089ed
 8008960:	080089ed 	.word	0x080089ed
 8008964:	080089ed 	.word	0x080089ed
 8008968:	080089ed 	.word	0x080089ed
 800896c:	080089ed 	.word	0x080089ed
 8008970:	080089ed 	.word	0x080089ed
 8008974:	080089ed 	.word	0x080089ed
 8008978:	080089d5 	.word	0x080089d5
 800897c:	080089ed 	.word	0x080089ed
 8008980:	080089ed 	.word	0x080089ed
 8008984:	080089ed 	.word	0x080089ed
 8008988:	080089ed 	.word	0x080089ed
 800898c:	080089ed 	.word	0x080089ed
 8008990:	080089ed 	.word	0x080089ed
 8008994:	080089ed 	.word	0x080089ed
 8008998:	080089dd 	.word	0x080089dd
 800899c:	080089ed 	.word	0x080089ed
 80089a0:	080089ed 	.word	0x080089ed
 80089a4:	080089ed 	.word	0x080089ed
 80089a8:	080089ed 	.word	0x080089ed
 80089ac:	080089ed 	.word	0x080089ed
 80089b0:	080089ed 	.word	0x080089ed
 80089b4:	080089ed 	.word	0x080089ed
 80089b8:	080089e5 	.word	0x080089e5
 80089bc:	2301      	movs	r3, #1
 80089be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c2:	e222      	b.n	8008e0a <UART_SetConfig+0x5a2>
 80089c4:	2304      	movs	r3, #4
 80089c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ca:	e21e      	b.n	8008e0a <UART_SetConfig+0x5a2>
 80089cc:	2308      	movs	r3, #8
 80089ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d2:	e21a      	b.n	8008e0a <UART_SetConfig+0x5a2>
 80089d4:	2310      	movs	r3, #16
 80089d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089da:	e216      	b.n	8008e0a <UART_SetConfig+0x5a2>
 80089dc:	2320      	movs	r3, #32
 80089de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e2:	e212      	b.n	8008e0a <UART_SetConfig+0x5a2>
 80089e4:	2340      	movs	r3, #64	; 0x40
 80089e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ea:	e20e      	b.n	8008e0a <UART_SetConfig+0x5a2>
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f2:	e20a      	b.n	8008e0a <UART_SetConfig+0x5a2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a6b      	ldr	r2, [pc, #428]	; (8008ba8 <UART_SetConfig+0x340>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d130      	bne.n	8008a60 <UART_SetConfig+0x1f8>
 80089fe:	4b69      	ldr	r3, [pc, #420]	; (8008ba4 <UART_SetConfig+0x33c>)
 8008a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a02:	f003 0307 	and.w	r3, r3, #7
 8008a06:	2b05      	cmp	r3, #5
 8008a08:	d826      	bhi.n	8008a58 <UART_SetConfig+0x1f0>
 8008a0a:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <UART_SetConfig+0x1a8>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a29 	.word	0x08008a29
 8008a14:	08008a31 	.word	0x08008a31
 8008a18:	08008a39 	.word	0x08008a39
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a49 	.word	0x08008a49
 8008a24:	08008a51 	.word	0x08008a51
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2e:	e1ec      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008a30:	2304      	movs	r3, #4
 8008a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a36:	e1e8      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008a38:	2308      	movs	r3, #8
 8008a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3e:	e1e4      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008a40:	2310      	movs	r3, #16
 8008a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a46:	e1e0      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008a48:	2320      	movs	r3, #32
 8008a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4e:	e1dc      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008a50:	2340      	movs	r3, #64	; 0x40
 8008a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a56:	e1d8      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008a58:	2380      	movs	r3, #128	; 0x80
 8008a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5e:	e1d4      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a51      	ldr	r2, [pc, #324]	; (8008bac <UART_SetConfig+0x344>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d130      	bne.n	8008acc <UART_SetConfig+0x264>
 8008a6a:	4b4e      	ldr	r3, [pc, #312]	; (8008ba4 <UART_SetConfig+0x33c>)
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	2b05      	cmp	r3, #5
 8008a74:	d826      	bhi.n	8008ac4 <UART_SetConfig+0x25c>
 8008a76:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <UART_SetConfig+0x214>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008a95 	.word	0x08008a95
 8008a80:	08008a9d 	.word	0x08008a9d
 8008a84:	08008aa5 	.word	0x08008aa5
 8008a88:	08008aad 	.word	0x08008aad
 8008a8c:	08008ab5 	.word	0x08008ab5
 8008a90:	08008abd 	.word	0x08008abd
 8008a94:	2300      	movs	r3, #0
 8008a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a9a:	e1b6      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aa2:	e1b2      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008aa4:	2308      	movs	r3, #8
 8008aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aaa:	e1ae      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008aac:	2310      	movs	r3, #16
 8008aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab2:	e1aa      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aba:	e1a6      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008abc:	2340      	movs	r3, #64	; 0x40
 8008abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac2:	e1a2      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008ac4:	2380      	movs	r3, #128	; 0x80
 8008ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aca:	e19e      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a37      	ldr	r2, [pc, #220]	; (8008bb0 <UART_SetConfig+0x348>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d130      	bne.n	8008b38 <UART_SetConfig+0x2d0>
 8008ad6:	4b33      	ldr	r3, [pc, #204]	; (8008ba4 <UART_SetConfig+0x33c>)
 8008ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	2b05      	cmp	r3, #5
 8008ae0:	d826      	bhi.n	8008b30 <UART_SetConfig+0x2c8>
 8008ae2:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <UART_SetConfig+0x280>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b01 	.word	0x08008b01
 8008aec:	08008b09 	.word	0x08008b09
 8008af0:	08008b11 	.word	0x08008b11
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b21 	.word	0x08008b21
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	2300      	movs	r3, #0
 8008b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b06:	e180      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b08:	2304      	movs	r3, #4
 8008b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b0e:	e17c      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b10:	2308      	movs	r3, #8
 8008b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b16:	e178      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b1e:	e174      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b20:	2320      	movs	r3, #32
 8008b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b26:	e170      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b28:	2340      	movs	r3, #64	; 0x40
 8008b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2e:	e16c      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b30:	2380      	movs	r3, #128	; 0x80
 8008b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b36:	e168      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <UART_SetConfig+0x34c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d142      	bne.n	8008bc8 <UART_SetConfig+0x360>
 8008b42:	4b18      	ldr	r3, [pc, #96]	; (8008ba4 <UART_SetConfig+0x33c>)
 8008b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d838      	bhi.n	8008bc0 <UART_SetConfig+0x358>
 8008b4e:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <UART_SetConfig+0x2ec>)
 8008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b54:	08008b6d 	.word	0x08008b6d
 8008b58:	08008b75 	.word	0x08008b75
 8008b5c:	08008b7d 	.word	0x08008b7d
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b8d 	.word	0x08008b8d
 8008b68:	08008bb9 	.word	0x08008bb9
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b72:	e14a      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b74:	2304      	movs	r3, #4
 8008b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b7a:	e146      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b82:	e142      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b84:	2310      	movs	r3, #16
 8008b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8a:	e13e      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b8c:	2320      	movs	r3, #32
 8008b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b92:	e13a      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008b94:	cfff69f3 	.word	0xcfff69f3
 8008b98:	58000c00 	.word	0x58000c00
 8008b9c:	11fff4ff 	.word	0x11fff4ff
 8008ba0:	40011000 	.word	0x40011000
 8008ba4:	58024400 	.word	0x58024400
 8008ba8:	40004400 	.word	0x40004400
 8008bac:	40004800 	.word	0x40004800
 8008bb0:	40004c00 	.word	0x40004c00
 8008bb4:	40005000 	.word	0x40005000
 8008bb8:	2340      	movs	r3, #64	; 0x40
 8008bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bbe:	e124      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008bc0:	2380      	movs	r3, #128	; 0x80
 8008bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc6:	e120      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4acc      	ldr	r2, [pc, #816]	; (8008f00 <UART_SetConfig+0x698>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d176      	bne.n	8008cc0 <UART_SetConfig+0x458>
 8008bd2:	4bcc      	ldr	r3, [pc, #816]	; (8008f04 <UART_SetConfig+0x69c>)
 8008bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bda:	2b28      	cmp	r3, #40	; 0x28
 8008bdc:	d86c      	bhi.n	8008cb8 <UART_SetConfig+0x450>
 8008bde:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <UART_SetConfig+0x37c>)
 8008be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be4:	08008c89 	.word	0x08008c89
 8008be8:	08008cb9 	.word	0x08008cb9
 8008bec:	08008cb9 	.word	0x08008cb9
 8008bf0:	08008cb9 	.word	0x08008cb9
 8008bf4:	08008cb9 	.word	0x08008cb9
 8008bf8:	08008cb9 	.word	0x08008cb9
 8008bfc:	08008cb9 	.word	0x08008cb9
 8008c00:	08008cb9 	.word	0x08008cb9
 8008c04:	08008c91 	.word	0x08008c91
 8008c08:	08008cb9 	.word	0x08008cb9
 8008c0c:	08008cb9 	.word	0x08008cb9
 8008c10:	08008cb9 	.word	0x08008cb9
 8008c14:	08008cb9 	.word	0x08008cb9
 8008c18:	08008cb9 	.word	0x08008cb9
 8008c1c:	08008cb9 	.word	0x08008cb9
 8008c20:	08008cb9 	.word	0x08008cb9
 8008c24:	08008c99 	.word	0x08008c99
 8008c28:	08008cb9 	.word	0x08008cb9
 8008c2c:	08008cb9 	.word	0x08008cb9
 8008c30:	08008cb9 	.word	0x08008cb9
 8008c34:	08008cb9 	.word	0x08008cb9
 8008c38:	08008cb9 	.word	0x08008cb9
 8008c3c:	08008cb9 	.word	0x08008cb9
 8008c40:	08008cb9 	.word	0x08008cb9
 8008c44:	08008ca1 	.word	0x08008ca1
 8008c48:	08008cb9 	.word	0x08008cb9
 8008c4c:	08008cb9 	.word	0x08008cb9
 8008c50:	08008cb9 	.word	0x08008cb9
 8008c54:	08008cb9 	.word	0x08008cb9
 8008c58:	08008cb9 	.word	0x08008cb9
 8008c5c:	08008cb9 	.word	0x08008cb9
 8008c60:	08008cb9 	.word	0x08008cb9
 8008c64:	08008ca9 	.word	0x08008ca9
 8008c68:	08008cb9 	.word	0x08008cb9
 8008c6c:	08008cb9 	.word	0x08008cb9
 8008c70:	08008cb9 	.word	0x08008cb9
 8008c74:	08008cb9 	.word	0x08008cb9
 8008c78:	08008cb9 	.word	0x08008cb9
 8008c7c:	08008cb9 	.word	0x08008cb9
 8008c80:	08008cb9 	.word	0x08008cb9
 8008c84:	08008cb1 	.word	0x08008cb1
 8008c88:	2301      	movs	r3, #1
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e0bc      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008c90:	2304      	movs	r3, #4
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c96:	e0b8      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008c98:	2308      	movs	r3, #8
 8008c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9e:	e0b4      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008ca0:	2310      	movs	r3, #16
 8008ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca6:	e0b0      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008ca8:	2320      	movs	r3, #32
 8008caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cae:	e0ac      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008cb0:	2340      	movs	r3, #64	; 0x40
 8008cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb6:	e0a8      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008cb8:	2380      	movs	r3, #128	; 0x80
 8008cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cbe:	e0a4      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a90      	ldr	r2, [pc, #576]	; (8008f08 <UART_SetConfig+0x6a0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d130      	bne.n	8008d2c <UART_SetConfig+0x4c4>
 8008cca:	4b8e      	ldr	r3, [pc, #568]	; (8008f04 <UART_SetConfig+0x69c>)
 8008ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	2b05      	cmp	r3, #5
 8008cd4:	d826      	bhi.n	8008d24 <UART_SetConfig+0x4bc>
 8008cd6:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <UART_SetConfig+0x474>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008cf5 	.word	0x08008cf5
 8008ce0:	08008cfd 	.word	0x08008cfd
 8008ce4:	08008d05 	.word	0x08008d05
 8008ce8:	08008d0d 	.word	0x08008d0d
 8008cec:	08008d15 	.word	0x08008d15
 8008cf0:	08008d1d 	.word	0x08008d1d
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfa:	e086      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d02:	e082      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d04:	2308      	movs	r3, #8
 8008d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0a:	e07e      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d0c:	2310      	movs	r3, #16
 8008d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d12:	e07a      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d14:	2320      	movs	r3, #32
 8008d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1a:	e076      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d1c:	2340      	movs	r3, #64	; 0x40
 8008d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d22:	e072      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d24:	2380      	movs	r3, #128	; 0x80
 8008d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d2a:	e06e      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a76      	ldr	r2, [pc, #472]	; (8008f0c <UART_SetConfig+0x6a4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d130      	bne.n	8008d98 <UART_SetConfig+0x530>
 8008d36:	4b73      	ldr	r3, [pc, #460]	; (8008f04 <UART_SetConfig+0x69c>)
 8008d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	2b05      	cmp	r3, #5
 8008d40:	d826      	bhi.n	8008d90 <UART_SetConfig+0x528>
 8008d42:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <UART_SetConfig+0x4e0>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d61 	.word	0x08008d61
 8008d4c:	08008d69 	.word	0x08008d69
 8008d50:	08008d71 	.word	0x08008d71
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d81 	.word	0x08008d81
 8008d5c:	08008d89 	.word	0x08008d89
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d66:	e050      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d68:	2304      	movs	r3, #4
 8008d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d6e:	e04c      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d70:	2308      	movs	r3, #8
 8008d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d76:	e048      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d78:	2310      	movs	r3, #16
 8008d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7e:	e044      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d80:	2320      	movs	r3, #32
 8008d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d86:	e040      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d88:	2340      	movs	r3, #64	; 0x40
 8008d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d8e:	e03c      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d90:	2380      	movs	r3, #128	; 0x80
 8008d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d96:	e038      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a5c      	ldr	r2, [pc, #368]	; (8008f10 <UART_SetConfig+0x6a8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d130      	bne.n	8008e04 <UART_SetConfig+0x59c>
 8008da2:	4b58      	ldr	r3, [pc, #352]	; (8008f04 <UART_SetConfig+0x69c>)
 8008da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	2b05      	cmp	r3, #5
 8008dac:	d826      	bhi.n	8008dfc <UART_SetConfig+0x594>
 8008dae:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <UART_SetConfig+0x54c>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008dcd 	.word	0x08008dcd
 8008db8:	08008dd5 	.word	0x08008dd5
 8008dbc:	08008ddd 	.word	0x08008ddd
 8008dc0:	08008de5 	.word	0x08008de5
 8008dc4:	08008ded 	.word	0x08008ded
 8008dc8:	08008df5 	.word	0x08008df5
 8008dcc:	2302      	movs	r3, #2
 8008dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dd2:	e01a      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008dd4:	2304      	movs	r3, #4
 8008dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dda:	e016      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008ddc:	2308      	movs	r3, #8
 8008dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008de2:	e012      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008de4:	2310      	movs	r3, #16
 8008de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dea:	e00e      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008dec:	2320      	movs	r3, #32
 8008dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008df2:	e00a      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008df4:	2340      	movs	r3, #64	; 0x40
 8008df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dfa:	e006      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008dfc:	2380      	movs	r3, #128	; 0x80
 8008dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e02:	e002      	b.n	8008e0a <UART_SetConfig+0x5a2>
 8008e04:	2380      	movs	r3, #128	; 0x80
 8008e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a40      	ldr	r2, [pc, #256]	; (8008f10 <UART_SetConfig+0x6a8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	f040 80ef 	bne.w	8008ff4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e1a:	2b20      	cmp	r3, #32
 8008e1c:	dc46      	bgt.n	8008eac <UART_SetConfig+0x644>
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	f2c0 8081 	blt.w	8008f26 <UART_SetConfig+0x6be>
 8008e24:	3b02      	subs	r3, #2
 8008e26:	2b1e      	cmp	r3, #30
 8008e28:	d87d      	bhi.n	8008f26 <UART_SetConfig+0x6be>
 8008e2a:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <UART_SetConfig+0x5c8>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008eb3 	.word	0x08008eb3
 8008e34:	08008f27 	.word	0x08008f27
 8008e38:	08008ebb 	.word	0x08008ebb
 8008e3c:	08008f27 	.word	0x08008f27
 8008e40:	08008f27 	.word	0x08008f27
 8008e44:	08008f27 	.word	0x08008f27
 8008e48:	08008ecb 	.word	0x08008ecb
 8008e4c:	08008f27 	.word	0x08008f27
 8008e50:	08008f27 	.word	0x08008f27
 8008e54:	08008f27 	.word	0x08008f27
 8008e58:	08008f27 	.word	0x08008f27
 8008e5c:	08008f27 	.word	0x08008f27
 8008e60:	08008f27 	.word	0x08008f27
 8008e64:	08008f27 	.word	0x08008f27
 8008e68:	08008edb 	.word	0x08008edb
 8008e6c:	08008f27 	.word	0x08008f27
 8008e70:	08008f27 	.word	0x08008f27
 8008e74:	08008f27 	.word	0x08008f27
 8008e78:	08008f27 	.word	0x08008f27
 8008e7c:	08008f27 	.word	0x08008f27
 8008e80:	08008f27 	.word	0x08008f27
 8008e84:	08008f27 	.word	0x08008f27
 8008e88:	08008f27 	.word	0x08008f27
 8008e8c:	08008f27 	.word	0x08008f27
 8008e90:	08008f27 	.word	0x08008f27
 8008e94:	08008f27 	.word	0x08008f27
 8008e98:	08008f27 	.word	0x08008f27
 8008e9c:	08008f27 	.word	0x08008f27
 8008ea0:	08008f27 	.word	0x08008f27
 8008ea4:	08008f27 	.word	0x08008f27
 8008ea8:	08008f19 	.word	0x08008f19
 8008eac:	2b40      	cmp	r3, #64	; 0x40
 8008eae:	d036      	beq.n	8008f1e <UART_SetConfig+0x6b6>
 8008eb0:	e039      	b.n	8008f26 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008eb2:	f7fe f94b 	bl	800714c <HAL_RCCEx_GetD3PCLK1Freq>
 8008eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008eb8:	e03b      	b.n	8008f32 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eba:	f107 0314 	add.w	r3, r7, #20
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe f95a 	bl	8007178 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ec8:	e033      	b.n	8008f32 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eca:	f107 0308 	add.w	r3, r7, #8
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe faa6 	bl	8007420 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ed8:	e02b      	b.n	8008f32 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eda:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <UART_SetConfig+0x69c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <UART_SetConfig+0x69c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	08db      	lsrs	r3, r3, #3
 8008eec:	f003 0303 	and.w	r3, r3, #3
 8008ef0:	4a08      	ldr	r2, [pc, #32]	; (8008f14 <UART_SetConfig+0x6ac>)
 8008ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ef8:	e01b      	b.n	8008f32 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008efa:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <UART_SetConfig+0x6ac>)
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008efe:	e018      	b.n	8008f32 <UART_SetConfig+0x6ca>
 8008f00:	40011400 	.word	0x40011400
 8008f04:	58024400 	.word	0x58024400
 8008f08:	40007800 	.word	0x40007800
 8008f0c:	40007c00 	.word	0x40007c00
 8008f10:	58000c00 	.word	0x58000c00
 8008f14:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f18:	4bc4      	ldr	r3, [pc, #784]	; (800922c <UART_SetConfig+0x9c4>)
 8008f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f1c:	e009      	b.n	8008f32 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f24:	e005      	b.n	8008f32 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008f30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 81da 	beq.w	80092ee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	4abc      	ldr	r2, [pc, #752]	; (8009230 <UART_SetConfig+0x9c8>)
 8008f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f4c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	4613      	mov	r3, r2
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4413      	add	r3, r2
 8008f58:	6a3a      	ldr	r2, [r7, #32]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d305      	bcc.n	8008f6a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f64:	6a3a      	ldr	r2, [r7, #32]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d903      	bls.n	8008f72 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f70:	e1bd      	b.n	80092ee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f74:	4618      	mov	r0, r3
 8008f76:	f04f 0100 	mov.w	r1, #0
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	4aac      	ldr	r2, [pc, #688]	; (8009230 <UART_SetConfig+0x9c8>)
 8008f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	f04f 0300 	mov.w	r3, #0
 8008f8a:	f7f7 f9a5 	bl	80002d8 <__aeabi_uldivmod>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4610      	mov	r0, r2
 8008f94:	4619      	mov	r1, r3
 8008f96:	f04f 0200 	mov.w	r2, #0
 8008f9a:	f04f 0300 	mov.w	r3, #0
 8008f9e:	020b      	lsls	r3, r1, #8
 8008fa0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fa4:	0202      	lsls	r2, r0, #8
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	6849      	ldr	r1, [r1, #4]
 8008faa:	0849      	lsrs	r1, r1, #1
 8008fac:	4608      	mov	r0, r1
 8008fae:	f04f 0100 	mov.w	r1, #0
 8008fb2:	1814      	adds	r4, r2, r0
 8008fb4:	eb43 0501 	adc.w	r5, r3, r1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	f7f7 f987 	bl	80002d8 <__aeabi_uldivmod>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4613      	mov	r3, r2
 8008fd0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fd8:	d308      	bcc.n	8008fec <UART_SetConfig+0x784>
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fe0:	d204      	bcs.n	8008fec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fe8:	60da      	str	r2, [r3, #12]
 8008fea:	e180      	b.n	80092ee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ff2:	e17c      	b.n	80092ee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ffc:	f040 80bf 	bne.w	800917e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009000:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009004:	2b20      	cmp	r3, #32
 8009006:	dc49      	bgt.n	800909c <UART_SetConfig+0x834>
 8009008:	2b00      	cmp	r3, #0
 800900a:	db7c      	blt.n	8009106 <UART_SetConfig+0x89e>
 800900c:	2b20      	cmp	r3, #32
 800900e:	d87a      	bhi.n	8009106 <UART_SetConfig+0x89e>
 8009010:	a201      	add	r2, pc, #4	; (adr r2, 8009018 <UART_SetConfig+0x7b0>)
 8009012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009016:	bf00      	nop
 8009018:	080090a3 	.word	0x080090a3
 800901c:	080090ab 	.word	0x080090ab
 8009020:	08009107 	.word	0x08009107
 8009024:	08009107 	.word	0x08009107
 8009028:	080090b3 	.word	0x080090b3
 800902c:	08009107 	.word	0x08009107
 8009030:	08009107 	.word	0x08009107
 8009034:	08009107 	.word	0x08009107
 8009038:	080090c3 	.word	0x080090c3
 800903c:	08009107 	.word	0x08009107
 8009040:	08009107 	.word	0x08009107
 8009044:	08009107 	.word	0x08009107
 8009048:	08009107 	.word	0x08009107
 800904c:	08009107 	.word	0x08009107
 8009050:	08009107 	.word	0x08009107
 8009054:	08009107 	.word	0x08009107
 8009058:	080090d3 	.word	0x080090d3
 800905c:	08009107 	.word	0x08009107
 8009060:	08009107 	.word	0x08009107
 8009064:	08009107 	.word	0x08009107
 8009068:	08009107 	.word	0x08009107
 800906c:	08009107 	.word	0x08009107
 8009070:	08009107 	.word	0x08009107
 8009074:	08009107 	.word	0x08009107
 8009078:	08009107 	.word	0x08009107
 800907c:	08009107 	.word	0x08009107
 8009080:	08009107 	.word	0x08009107
 8009084:	08009107 	.word	0x08009107
 8009088:	08009107 	.word	0x08009107
 800908c:	08009107 	.word	0x08009107
 8009090:	08009107 	.word	0x08009107
 8009094:	08009107 	.word	0x08009107
 8009098:	080090f9 	.word	0x080090f9
 800909c:	2b40      	cmp	r3, #64	; 0x40
 800909e:	d02e      	beq.n	80090fe <UART_SetConfig+0x896>
 80090a0:	e031      	b.n	8009106 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090a2:	f7fd f8e7 	bl	8006274 <HAL_RCC_GetPCLK1Freq>
 80090a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090a8:	e033      	b.n	8009112 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090aa:	f7fd f8f9 	bl	80062a0 <HAL_RCC_GetPCLK2Freq>
 80090ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80090b0:	e02f      	b.n	8009112 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090b2:	f107 0314 	add.w	r3, r7, #20
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe f85e 	bl	8007178 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090c0:	e027      	b.n	8009112 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090c2:	f107 0308 	add.w	r3, r7, #8
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe f9aa 	bl	8007420 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090d0:	e01f      	b.n	8009112 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090d2:	4b58      	ldr	r3, [pc, #352]	; (8009234 <UART_SetConfig+0x9cc>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d009      	beq.n	80090f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090de:	4b55      	ldr	r3, [pc, #340]	; (8009234 <UART_SetConfig+0x9cc>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	08db      	lsrs	r3, r3, #3
 80090e4:	f003 0303 	and.w	r3, r3, #3
 80090e8:	4a53      	ldr	r2, [pc, #332]	; (8009238 <UART_SetConfig+0x9d0>)
 80090ea:	fa22 f303 	lsr.w	r3, r2, r3
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090f0:	e00f      	b.n	8009112 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80090f2:	4b51      	ldr	r3, [pc, #324]	; (8009238 <UART_SetConfig+0x9d0>)
 80090f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090f6:	e00c      	b.n	8009112 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090f8:	4b4c      	ldr	r3, [pc, #304]	; (800922c <UART_SetConfig+0x9c4>)
 80090fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090fc:	e009      	b.n	8009112 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009102:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009104:	e005      	b.n	8009112 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009110:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 80ea 	beq.w	80092ee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911e:	4a44      	ldr	r2, [pc, #272]	; (8009230 <UART_SetConfig+0x9c8>)
 8009120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009124:	461a      	mov	r2, r3
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	fbb3 f3f2 	udiv	r3, r3, r2
 800912c:	005a      	lsls	r2, r3, #1
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	085b      	lsrs	r3, r3, #1
 8009134:	441a      	add	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	fbb2 f3f3 	udiv	r3, r2, r3
 800913e:	b29b      	uxth	r3, r3
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	2b0f      	cmp	r3, #15
 8009146:	d916      	bls.n	8009176 <UART_SetConfig+0x90e>
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800914e:	d212      	bcs.n	8009176 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	b29b      	uxth	r3, r3
 8009154:	f023 030f 	bic.w	r3, r3, #15
 8009158:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	b29b      	uxth	r3, r3
 8009160:	f003 0307 	and.w	r3, r3, #7
 8009164:	b29a      	uxth	r2, r3
 8009166:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009168:	4313      	orrs	r3, r2
 800916a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009172:	60da      	str	r2, [r3, #12]
 8009174:	e0bb      	b.n	80092ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800917c:	e0b7      	b.n	80092ee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800917e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009182:	2b20      	cmp	r3, #32
 8009184:	dc4a      	bgt.n	800921c <UART_SetConfig+0x9b4>
 8009186:	2b00      	cmp	r3, #0
 8009188:	f2c0 8086 	blt.w	8009298 <UART_SetConfig+0xa30>
 800918c:	2b20      	cmp	r3, #32
 800918e:	f200 8083 	bhi.w	8009298 <UART_SetConfig+0xa30>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <UART_SetConfig+0x930>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	08009223 	.word	0x08009223
 800919c:	0800923d 	.word	0x0800923d
 80091a0:	08009299 	.word	0x08009299
 80091a4:	08009299 	.word	0x08009299
 80091a8:	08009245 	.word	0x08009245
 80091ac:	08009299 	.word	0x08009299
 80091b0:	08009299 	.word	0x08009299
 80091b4:	08009299 	.word	0x08009299
 80091b8:	08009255 	.word	0x08009255
 80091bc:	08009299 	.word	0x08009299
 80091c0:	08009299 	.word	0x08009299
 80091c4:	08009299 	.word	0x08009299
 80091c8:	08009299 	.word	0x08009299
 80091cc:	08009299 	.word	0x08009299
 80091d0:	08009299 	.word	0x08009299
 80091d4:	08009299 	.word	0x08009299
 80091d8:	08009265 	.word	0x08009265
 80091dc:	08009299 	.word	0x08009299
 80091e0:	08009299 	.word	0x08009299
 80091e4:	08009299 	.word	0x08009299
 80091e8:	08009299 	.word	0x08009299
 80091ec:	08009299 	.word	0x08009299
 80091f0:	08009299 	.word	0x08009299
 80091f4:	08009299 	.word	0x08009299
 80091f8:	08009299 	.word	0x08009299
 80091fc:	08009299 	.word	0x08009299
 8009200:	08009299 	.word	0x08009299
 8009204:	08009299 	.word	0x08009299
 8009208:	08009299 	.word	0x08009299
 800920c:	08009299 	.word	0x08009299
 8009210:	08009299 	.word	0x08009299
 8009214:	08009299 	.word	0x08009299
 8009218:	0800928b 	.word	0x0800928b
 800921c:	2b40      	cmp	r3, #64	; 0x40
 800921e:	d037      	beq.n	8009290 <UART_SetConfig+0xa28>
 8009220:	e03a      	b.n	8009298 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009222:	f7fd f827 	bl	8006274 <HAL_RCC_GetPCLK1Freq>
 8009226:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009228:	e03c      	b.n	80092a4 <UART_SetConfig+0xa3c>
 800922a:	bf00      	nop
 800922c:	003d0900 	.word	0x003d0900
 8009230:	08009acc 	.word	0x08009acc
 8009234:	58024400 	.word	0x58024400
 8009238:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800923c:	f7fd f830 	bl	80062a0 <HAL_RCC_GetPCLK2Freq>
 8009240:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009242:	e02f      	b.n	80092a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009244:	f107 0314 	add.w	r3, r7, #20
 8009248:	4618      	mov	r0, r3
 800924a:	f7fd ff95 	bl	8007178 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009252:	e027      	b.n	80092a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009254:	f107 0308 	add.w	r3, r7, #8
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe f8e1 	bl	8007420 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009262:	e01f      	b.n	80092a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009264:	4b2c      	ldr	r3, [pc, #176]	; (8009318 <UART_SetConfig+0xab0>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b00      	cmp	r3, #0
 800926e:	d009      	beq.n	8009284 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009270:	4b29      	ldr	r3, [pc, #164]	; (8009318 <UART_SetConfig+0xab0>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	08db      	lsrs	r3, r3, #3
 8009276:	f003 0303 	and.w	r3, r3, #3
 800927a:	4a28      	ldr	r2, [pc, #160]	; (800931c <UART_SetConfig+0xab4>)
 800927c:	fa22 f303 	lsr.w	r3, r2, r3
 8009280:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009282:	e00f      	b.n	80092a4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009284:	4b25      	ldr	r3, [pc, #148]	; (800931c <UART_SetConfig+0xab4>)
 8009286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009288:	e00c      	b.n	80092a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800928a:	4b25      	ldr	r3, [pc, #148]	; (8009320 <UART_SetConfig+0xab8>)
 800928c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800928e:	e009      	b.n	80092a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009294:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009296:	e005      	b.n	80092a4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80092a2:	bf00      	nop
    }

    if (pclk != 0U)
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d021      	beq.n	80092ee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	4a1d      	ldr	r2, [pc, #116]	; (8009324 <UART_SetConfig+0xabc>)
 80092b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	085b      	lsrs	r3, r3, #1
 80092c2:	441a      	add	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	2b0f      	cmp	r3, #15
 80092d4:	d908      	bls.n	80092e8 <UART_SetConfig+0xa80>
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092dc:	d204      	bcs.n	80092e8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092e4:	60da      	str	r2, [r3, #12]
 80092e6:	e002      	b.n	80092ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800930a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800930e:	4618      	mov	r0, r3
 8009310:	3738      	adds	r7, #56	; 0x38
 8009312:	46bd      	mov	sp, r7
 8009314:	bdb0      	pop	{r4, r5, r7, pc}
 8009316:	bf00      	nop
 8009318:	58024400 	.word	0x58024400
 800931c:	03d09000 	.word	0x03d09000
 8009320:	003d0900 	.word	0x003d0900
 8009324:	08009acc 	.word	0x08009acc

08009328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00a      	beq.n	8009352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	430a      	orrs	r2, r1
 8009372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939a:	f003 0308 	and.w	r3, r3, #8
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00a      	beq.n	80093da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093de:	f003 0320 	and.w	r3, r3, #32
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009404:	2b00      	cmp	r3, #0
 8009406:	d01a      	beq.n	800943e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009426:	d10a      	bne.n	800943e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	605a      	str	r2, [r3, #4]
  }
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af02      	add	r7, sp, #8
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800947c:	f7f8 fc68 	bl	8001d50 <HAL_GetTick>
 8009480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0308 	and.w	r3, r3, #8
 800948c:	2b08      	cmp	r3, #8
 800948e:	d10e      	bne.n	80094ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f82f 	bl	8009502 <UART_WaitOnFlagUntilTimeout>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e025      	b.n	80094fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d10e      	bne.n	80094da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f819 	bl	8009502 <UART_WaitOnFlagUntilTimeout>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e00f      	b.n	80094fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2220      	movs	r2, #32
 80094de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	603b      	str	r3, [r7, #0]
 800950e:	4613      	mov	r3, r2
 8009510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009512:	e062      	b.n	80095da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d05e      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951c:	f7f8 fc18 	bl	8001d50 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	429a      	cmp	r2, r3
 800952a:	d302      	bcc.n	8009532 <UART_WaitOnFlagUntilTimeout+0x30>
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d11d      	bne.n	800956e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0201 	bic.w	r2, r2, #1
 8009550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2220      	movs	r2, #32
 8009556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2220      	movs	r2, #32
 800955e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e045      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d02e      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800958a:	d126      	bne.n	80095da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 0201 	bic.w	r2, r2, #1
 80095b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e00f      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69da      	ldr	r2, [r3, #28]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4013      	ands	r3, r2
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	bf0c      	ite	eq
 80095ea:	2301      	moveq	r3, #1
 80095ec:	2300      	movne	r3, #0
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	461a      	mov	r2, r3
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d08d      	beq.n	8009514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009628:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2220      	movs	r2, #32
 800962e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009632:	bf00      	nop
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
	...

08009640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009656:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6899      	ldr	r1, [r3, #8]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <UART_EndRxTransfer+0x60>)
 8009664:	400b      	ands	r3, r1
 8009666:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966c:	2b01      	cmp	r3, #1
 800966e:	d107      	bne.n	8009680 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0210 	bic.w	r2, r2, #16
 800967e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2220      	movs	r2, #32
 8009684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	effffffe 	.word	0xeffffffe

080096a4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ba:	d014      	beq.n	80096e6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096d2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096e2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096e4:	e002      	b.n	80096ec <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7f7 fd18 	bl	800111c <HAL_UART_TxCpltCallback>
}
 80096ec:	bf00      	nop
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7ff f89a 	bl	800883c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009708:	bf00      	nop
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009724:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009738:	2b80      	cmp	r3, #128	; 0x80
 800973a:	d109      	bne.n	8009750 <UART_DMAError+0x40>
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	2b21      	cmp	r3, #33	; 0x21
 8009740:	d106      	bne.n	8009750 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2200      	movs	r2, #0
 8009746:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800974a:	6978      	ldr	r0, [r7, #20]
 800974c:	f7ff ff59 	bl	8009602 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975a:	2b40      	cmp	r3, #64	; 0x40
 800975c:	d109      	bne.n	8009772 <UART_DMAError+0x62>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b22      	cmp	r3, #34	; 0x22
 8009762:	d106      	bne.n	8009772 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	2200      	movs	r2, #0
 8009768:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800976c:	6978      	ldr	r0, [r7, #20]
 800976e:	f7ff ff67 	bl	8009640 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009778:	f043 0210 	orr.w	r2, r3, #16
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009782:	6978      	ldr	r0, [r7, #20]
 8009784:	f7f7 fcda 	bl	800113c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009788:	bf00      	nop
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f7f7 fcc4 	bl	800113c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097d2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7f7 fc9a 	bl	800111c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800983a:	2b01      	cmp	r3, #1
 800983c:	d101      	bne.n	8009842 <HAL_UARTEx_EnableFifoMode+0x16>
 800983e:	2302      	movs	r3, #2
 8009840:	e02b      	b.n	800989a <HAL_UARTEx_EnableFifoMode+0x6e>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2224      	movs	r2, #36	; 0x24
 800984e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0201 	bic.w	r2, r2, #1
 8009868:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009870:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009878:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f88a 	bl	800999c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2220      	movs	r2, #32
 800988c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d101      	bne.n	80098ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098b6:	2302      	movs	r3, #2
 80098b8:	e02d      	b.n	8009916 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2224      	movs	r2, #36	; 0x24
 80098c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f022 0201 	bic.w	r2, r2, #1
 80098e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f850 	bl	800999c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2220      	movs	r2, #32
 8009908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800992e:	2b01      	cmp	r3, #1
 8009930:	d101      	bne.n	8009936 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009932:	2302      	movs	r3, #2
 8009934:	e02d      	b.n	8009992 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2224      	movs	r2, #36	; 0x24
 8009942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f022 0201 	bic.w	r2, r2, #1
 800995c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f812 	bl	800999c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2220      	movs	r2, #32
 8009984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d108      	bne.n	80099be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099bc:	e031      	b.n	8009a22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099be:	2310      	movs	r3, #16
 80099c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099c2:	2310      	movs	r3, #16
 80099c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	0e5b      	lsrs	r3, r3, #25
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 0307 	and.w	r3, r3, #7
 80099d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	0f5b      	lsrs	r3, r3, #29
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 0307 	and.w	r3, r3, #7
 80099e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099e6:	7bbb      	ldrb	r3, [r7, #14]
 80099e8:	7b3a      	ldrb	r2, [r7, #12]
 80099ea:	4911      	ldr	r1, [pc, #68]	; (8009a30 <UARTEx_SetNbDataToProcess+0x94>)
 80099ec:	5c8a      	ldrb	r2, [r1, r2]
 80099ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099f2:	7b3a      	ldrb	r2, [r7, #12]
 80099f4:	490f      	ldr	r1, [pc, #60]	; (8009a34 <UARTEx_SetNbDataToProcess+0x98>)
 80099f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	7b7a      	ldrb	r2, [r7, #13]
 8009a08:	4909      	ldr	r1, [pc, #36]	; (8009a30 <UARTEx_SetNbDataToProcess+0x94>)
 8009a0a:	5c8a      	ldrb	r2, [r1, r2]
 8009a0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a10:	7b7a      	ldrb	r2, [r7, #13]
 8009a12:	4908      	ldr	r1, [pc, #32]	; (8009a34 <UARTEx_SetNbDataToProcess+0x98>)
 8009a14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a16:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a22:	bf00      	nop
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	08009ae4 	.word	0x08009ae4
 8009a34:	08009aec 	.word	0x08009aec

08009a38 <__libc_init_array>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4d0d      	ldr	r5, [pc, #52]	; (8009a70 <__libc_init_array+0x38>)
 8009a3c:	4c0d      	ldr	r4, [pc, #52]	; (8009a74 <__libc_init_array+0x3c>)
 8009a3e:	1b64      	subs	r4, r4, r5
 8009a40:	10a4      	asrs	r4, r4, #2
 8009a42:	2600      	movs	r6, #0
 8009a44:	42a6      	cmp	r6, r4
 8009a46:	d109      	bne.n	8009a5c <__libc_init_array+0x24>
 8009a48:	4d0b      	ldr	r5, [pc, #44]	; (8009a78 <__libc_init_array+0x40>)
 8009a4a:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <__libc_init_array+0x44>)
 8009a4c:	f000 f820 	bl	8009a90 <_init>
 8009a50:	1b64      	subs	r4, r4, r5
 8009a52:	10a4      	asrs	r4, r4, #2
 8009a54:	2600      	movs	r6, #0
 8009a56:	42a6      	cmp	r6, r4
 8009a58:	d105      	bne.n	8009a66 <__libc_init_array+0x2e>
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a60:	4798      	blx	r3
 8009a62:	3601      	adds	r6, #1
 8009a64:	e7ee      	b.n	8009a44 <__libc_init_array+0xc>
 8009a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a6a:	4798      	blx	r3
 8009a6c:	3601      	adds	r6, #1
 8009a6e:	e7f2      	b.n	8009a56 <__libc_init_array+0x1e>
 8009a70:	08009afc 	.word	0x08009afc
 8009a74:	08009afc 	.word	0x08009afc
 8009a78:	08009afc 	.word	0x08009afc
 8009a7c:	08009b00 	.word	0x08009b00

08009a80 <memset>:
 8009a80:	4402      	add	r2, r0
 8009a82:	4603      	mov	r3, r0
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d100      	bne.n	8009a8a <memset+0xa>
 8009a88:	4770      	bx	lr
 8009a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a8e:	e7f9      	b.n	8009a84 <memset+0x4>

08009a90 <_init>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr

08009a9c <_fini>:
 8009a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9e:	bf00      	nop
 8009aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa2:	bc08      	pop	{r3}
 8009aa4:	469e      	mov	lr, r3
 8009aa6:	4770      	bx	lr
