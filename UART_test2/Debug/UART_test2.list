
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008600  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080088e4  080088e4  000188e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c8  24000000  080088f4  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000081c  240000c8  080089bc  000200c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008e4  080089bc  000208e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001becb  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002caf  00000000  00000000  0003bfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bf8  00000000  00000000  0003ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b30  00000000  00000000  0003f868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000371f3  00000000  00000000  00040398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010bc3  00000000  00000000  0007758b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f925  00000000  00000000  0008814e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e7a73  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003090  00000000  00000000  001e7ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000c8 	.word	0x240000c8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008880 	.word	0x08008880

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000cc 	.word	0x240000cc
 80002d4:	08008880 	.word	0x08008880

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005d4:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <main+0xf4>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d11b      	bne.n	8000618 <main+0x48>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e6:	f3bf 8f6f 	isb	sy
}
 80005ea:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005ec:	4b35      	ldr	r3, [pc, #212]	; (80006c4 <main+0xf4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000600:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <main+0xf4>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a2f      	ldr	r2, [pc, #188]	; (80006c4 <main+0xf4>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	e000      	b.n	800061a <main+0x4a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000618:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fe71 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f85b 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f95d 	bl	80008e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000626:	f000 f933 	bl	8000890 <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 800062a:	f000 f8db 	bl	80007e4 <MX_USART3_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
//  MX_SPI2_Init();
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */
  BSP_LED_Init(LED1);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fc38 	bl	8000ea4 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000634:	2001      	movs	r0, #1
 8000636:	f000 fc35 	bl	8000ea4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800063a:	2002      	movs	r0, #2
 800063c:	f000 fc32 	bl	8000ea4 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000640:	2101      	movs	r1, #1
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fd22 	bl	800108c <BSP_PB_Init>
  while(UserButtonStatus == 0)
 8000648:	e005      	b.n	8000656 <main+0x86>
  {
    /* Toggle LED1*/
    BSP_LED_Toggle(LED1);
 800064a:	2000      	movs	r0, #0
 800064c:	f000 fcf4 	bl	8001038 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000650:	2064      	movs	r0, #100	; 0x64
 8000652:	f000 fee7 	bl	8001424 <HAL_Delay>
  while(UserButtonStatus == 0)
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <main+0xf8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f5      	beq.n	800064a <main+0x7a>
  }
  UserButtonStatus = 0;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <main+0xf8>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
  if(HAL_UART_Transmit(&huart3, (uint8_t*)aTxBuffer, TXBUFFERSIZE, 5000)!= HAL_OK)
 8000664:	f241 3388 	movw	r3, #5000	; 0x1388
 8000668:	229f      	movs	r2, #159	; 0x9f
 800066a:	4918      	ldr	r1, [pc, #96]	; (80006cc <main+0xfc>)
 800066c:	4818      	ldr	r0, [pc, #96]	; (80006d0 <main+0x100>)
 800066e:	f006 fc0d 	bl	8006e8c <HAL_UART_Transmit>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <main+0xac>
  {
    Error_Handler();
 8000678:	f000 fa18 	bl	8000aac <Error_Handler>
  }
  BSP_LED_Off(LED1);
 800067c:	2000      	movs	r0, #0
 800067e:	f000 fcb1 	bl	8000fe4 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UartReady = RESET;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <main+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
//	  BSP_LED_On(LED2);
    /* USER CODE END WHILE */
	  /*##-2- Start the transmission process #####################################*/
	  /* While the UART in reception process, user can transmit data through
	     "aTxBuffer" buffer */
	  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 8000688:	229f      	movs	r2, #159	; 0x9f
 800068a:	4910      	ldr	r1, [pc, #64]	; (80006cc <main+0xfc>)
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <main+0x100>)
 800068e:	f006 fc93 	bl	8006fb8 <HAL_UART_Transmit_DMA>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d008      	beq.n	80006aa <main+0xda>
	  {
	    Error_Handler();
 8000698:	f000 fa08 	bl	8000aac <Error_Handler>
	  }
	  /*##-3- Wait for the end of the transfer ###################################*/
	  while ((UartReady == RESET) && (UserButtonStatus == 0))
 800069c:	e005      	b.n	80006aa <main+0xda>
	  {
		    BSP_LED_Toggle(LED1);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 fcca 	bl	8001038 <BSP_LED_Toggle>
		    HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f000 febd 	bl	8001424 <HAL_Delay>
	  while ((UartReady == RESET) && (UserButtonStatus == 0))
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <main+0x104>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d103      	bne.n	80006bc <main+0xec>
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <main+0xf8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0f0      	beq.n	800069e <main+0xce>
	  }
	  UserButtonStatus = 0;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <main+0xf8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
	  UartReady = RESET;
 80006c2:	e7de      	b.n	8000682 <main+0xb2>
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	240000e8 	.word	0x240000e8
 80006cc:	24000000 	.word	0x24000000
 80006d0:	24000174 	.word	0x24000174
 80006d4:	240000e4 	.word	0x240000e4

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09c      	sub	sp, #112	; 0x70
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	224c      	movs	r2, #76	; 0x4c
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f008 f8c2 	bl	8008870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2220      	movs	r2, #32
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f008 f8bc 	bl	8008870 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006f8:	2002      	movs	r0, #2
 80006fa:	f004 f83f 	bl	800477c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <SystemClock_Config+0x100>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a34      	ldr	r2, [pc, #208]	; (80007d8 <SystemClock_Config+0x100>)
 8000708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <SystemClock_Config+0x100>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	4b30      	ldr	r3, [pc, #192]	; (80007dc <SystemClock_Config+0x104>)
 800071a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071c:	4a2f      	ldr	r2, [pc, #188]	; (80007dc <SystemClock_Config+0x104>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000724:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <SystemClock_Config+0x104>)
 8000726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000730:	bf00      	nop
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <SystemClock_Config+0x100>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800073e:	d1f8      	bne.n	8000732 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <SystemClock_Config+0x108>)
 8000742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000744:	f023 0303 	bic.w	r3, r3, #3
 8000748:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <SystemClock_Config+0x108>)
 800074a:	f043 0302 	orr.w	r3, r3, #2
 800074e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000750:	2321      	movs	r3, #33	; 0x21
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000754:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800075a:	2301      	movs	r3, #1
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	2302      	movs	r3, #2
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800076a:	2378      	movs	r3, #120	; 0x78
 800076c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000772:	2304      	movs	r3, #4
 8000774:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800077a:	230c      	movs	r3, #12
 800077c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	2300      	movs	r3, #0
 8000780:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4618      	mov	r0, r3
 800078c:	f004 f830 	bl	80047f0 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 f989 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	233f      	movs	r3, #63	; 0x3f
 800079c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2303      	movs	r3, #3
 80007a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007a6:	2308      	movs	r3, #8
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ae:	2340      	movs	r3, #64	; 0x40
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b8:	2340      	movs	r3, #64	; 0x40
 80007ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2104      	movs	r1, #4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 fc25 	bl	8005010 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80007cc:	f000 f96e 	bl	8000aac <Error_Handler>
  }


}
 80007d0:	bf00      	nop
 80007d2:	3770      	adds	r7, #112	; 0x70
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	58024800 	.word	0x58024800
 80007dc:	58000400 	.word	0x58000400
 80007e0:	58024400 	.word	0x58024400

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 80007ea:	4a27      	ldr	r2, [pc, #156]	; (8000888 <MX_USART3_UART_Init+0xa4>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 80007f0:	4a26      	ldr	r2, [pc, #152]	; (800088c <MX_USART3_UART_Init+0xa8>)
 80007f2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 8000808:	220c      	movs	r2, #12
 800080a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082a:	4816      	ldr	r0, [pc, #88]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 800082c:	f006 fade 	bl	8006dec <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000836:	f000 f939 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 800083e:	f007 ff28 	bl	8008692 <HAL_UARTEx_SetTxFifoThreshold>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000848:	f000 f930 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 8000850:	f007 ff5d 	bl	800870e <HAL_UARTEx_SetRxFifoThreshold>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800085a:	f000 f927 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800085e:	4809      	ldr	r0, [pc, #36]	; (8000884 <MX_USART3_UART_Init+0xa0>)
 8000860:	f007 fedc 	bl	800861c <HAL_UARTEx_EnableFifoMode>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800086a:	f000 f91f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	2100      	movs	r1, #0
 8000872:	2027      	movs	r0, #39	; 0x27
 8000874:	f000 fee1 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000878:	2027      	movs	r0, #39	; 0x27
 800087a:	f000 fef8 	bl	800166e <HAL_NVIC_EnableIRQ>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	24000174 	.word	0x24000174
 8000888:	40004800 	.word	0x40004800
 800088c:	001e8480 	.word	0x001e8480

08000890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_DMA_Init+0x4c>)
 8000898:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800089c:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <MX_DMA_Init+0x4c>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_DMA_Init+0x4c>)
 80008a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2100      	movs	r1, #0
 80008b8:	200b      	movs	r0, #11
 80008ba:	f000 febe 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008be:	200b      	movs	r0, #11
 80008c0:	f000 fed5 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2100      	movs	r1, #0
 80008c8:	200c      	movs	r0, #12
 80008ca:	f000 feb6 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008ce:	200c      	movs	r0, #12
 80008d0:	f000 fecd 	bl	800166e <HAL_NVIC_EnableIRQ>

}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58024400 	.word	0x58024400

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b51      	ldr	r3, [pc, #324]	; (8000a3c <MX_GPIO_Init+0x15c>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	4a4f      	ldr	r2, [pc, #316]	; (8000a3c <MX_GPIO_Init+0x15c>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000914:	4b49      	ldr	r3, [pc, #292]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	4a48      	ldr	r2, [pc, #288]	; (8000a3c <MX_GPIO_Init+0x15c>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000924:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <MX_GPIO_Init+0x15c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000950:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	4a39      	ldr	r2, [pc, #228]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000960:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	4a31      	ldr	r2, [pc, #196]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098c:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <MX_GPIO_Init+0x15c>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	4a2a      	ldr	r2, [pc, #168]	; (8000a3c <MX_GPIO_Init+0x15c>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <MX_GPIO_Init+0x15c>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_GPIO_Init+0x15c>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <MX_GPIO_Init+0x15c>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_GPIO_Init+0x15c>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	f003 0310 	and.w	r3, r3, #16
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f244 0101 	movw	r1, #16385	; 0x4001
 80009ce:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_GPIO_Init+0x160>)
 80009d0:	f003 fe86 	bl	80046e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2102      	movs	r1, #2
 80009d8:	481a      	ldr	r0, [pc, #104]	; (8000a44 <MX_GPIO_Init+0x164>)
 80009da:	f003 fe81 	bl	80046e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_GPIO_Init+0x168>)
 80009f4:	f003 fcc4 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009f8:	f244 0301 	movw	r3, #16385	; 0x4001
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <MX_GPIO_Init+0x160>)
 8000a12:	f003 fcb5 	bl	8004380 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_GPIO_Init+0x164>)
 8000a2e:	f003 fca7 	bl	8004380 <HAL_GPIO_Init>

}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	58020400 	.word	0x58020400
 8000a44:	58021000 	.word	0x58021000
 8000a48:	58020800 	.word	0x58020800

08000a4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a5c:	d105      	bne.n	8000a6a <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f083 0301 	eor.w	r3, r3, #1
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a68:	6013      	str	r3, [r2, #0]
//    BSP_LED_Toggle(LED2);
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	240000e8 	.word	0x240000e8

08000a7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
//  UartReady = SET;
  /* Turn LED2 off: Transfer in transmission process is correct */
  BSP_LED_On(LED2);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fa83 	bl	8000f90 <BSP_LED_On>

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f000 fa78 	bl	8000f90 <BSP_LED_On>
  Error_Handler();
 8000aa0:	f000 f804 	bl	8000aac <Error_Handler>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f000 fabf 	bl	8001038 <BSP_LED_Toggle>
	    HAL_Delay(100);
 8000aba:	2064      	movs	r0, #100	; 0x64
 8000abc:	f000 fcb2 	bl	8001424 <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8000ac0:	e7f8      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_MspInit+0x30>)
 8000acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ad0:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x30>)
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x30>)
 8000adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	58024400 	.word	0x58024400

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0ea      	sub	sp, #424	; 0x1a8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b12:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000b16:	22bc      	movs	r2, #188	; 0xbc
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f007 fea8 	bl	8008870 <memset>
  if(huart->Instance==USART1)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4aac      	ldr	r2, [pc, #688]	; (8000dd8 <HAL_UART_MspInit+0x2e0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	f040 80a6 	bne.w	8000c7a <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000b3a:	2318      	movs	r3, #24
 8000b3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    PeriphClkInitStruct.PLL3.PLL3P = 6;
 8000b40:	2306      	movs	r3, #6
 8000b42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    PeriphClkInitStruct.PLL3.PLL3Q = 6;
 8000b46:	2306      	movs	r3, #6
 8000b48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    PeriphClkInitStruct.PLL3.PLL3R = 6;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8000b66:	2310      	movs	r3, #16
 8000b68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 fdd9 	bl	8005728 <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_UART_MspInit+0x88>
    {
      Error_Handler();
 8000b7c:	f7ff ff96 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b80:	4b96      	ldr	r3, [pc, #600]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b86:	4a95      	ldr	r2, [pc, #596]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b90:	4b92      	ldr	r3, [pc, #584]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b96:	f003 0310 	and.w	r3, r3, #16
 8000b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b8e      	ldr	r3, [pc, #568]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	4a8c      	ldr	r2, [pc, #560]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb2:	4b8a      	ldr	r3, [pc, #552]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000bc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bc8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000bde:	2304      	movs	r3, #4
 8000be0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000be8:	4619      	mov	r1, r3
 8000bea:	487d      	ldr	r0, [pc, #500]	; (8000de0 <HAL_UART_MspInit+0x2e8>)
 8000bec:	f003 fbc8 	bl	8004380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000c12:	4619      	mov	r1, r3
 8000c14:	4872      	ldr	r0, [pc, #456]	; (8000de0 <HAL_UART_MspInit+0x2e8>)
 8000c16:	f003 fbb3 	bl	8004380 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8000c1a:	4b72      	ldr	r3, [pc, #456]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c1c:	4a72      	ldr	r2, [pc, #456]	; (8000de8 <HAL_UART_MspInit+0x2f0>)
 8000c1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000c20:	4b70      	ldr	r3, [pc, #448]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c22:	222a      	movs	r2, #42	; 0x2a
 8000c24:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c26:	4b6f      	ldr	r3, [pc, #444]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c28:	2240      	movs	r2, #64	; 0x40
 8000c2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	4b6d      	ldr	r3, [pc, #436]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c32:	4b6c      	ldr	r3, [pc, #432]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c38:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c3a:	4b6a      	ldr	r3, [pc, #424]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c40:	4b68      	ldr	r3, [pc, #416]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c46:	4b67      	ldr	r3, [pc, #412]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4c:	4b65      	ldr	r3, [pc, #404]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c52:	4b64      	ldr	r3, [pc, #400]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c58:	4862      	ldr	r0, [pc, #392]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c5a:	f000 fd23 	bl	80016a4 <HAL_DMA_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8000c64:	f7ff ff22 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a5d      	ldr	r2, [pc, #372]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c6e:	679a      	str	r2, [r3, #120]	; 0x78
 8000c70:	4a5c      	ldr	r2, [pc, #368]	; (8000de4 <HAL_UART_MspInit+0x2ec>)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c78:	e0a8      	b.n	8000dcc <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a5a      	ldr	r2, [pc, #360]	; (8000dec <HAL_UART_MspInit+0x2f4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	f040 80a2 	bne.w	8000dcc <HAL_UART_MspInit+0x2d4>
	  RCC_PeriphCLKInitTypeDef usart3ClkInitStr = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	23bc      	movs	r3, #188	; 0xbc
 8000c90:	461a      	mov	r2, r3
 8000c92:	2100      	movs	r1, #0
 8000c94:	f007 fdec 	bl	8008870 <memset>
	  usart3ClkInitStr.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	601a      	str	r2, [r3, #0]
	  usart3ClkInitStr.PLL3.PLL3M = 1;
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
	  usart3ClkInitStr.PLL3.PLL3N = 24;
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2218      	movs	r2, #24
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
	  usart3ClkInitStr.PLL3.PLL3P = 6;
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2206      	movs	r2, #6
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
	  usart3ClkInitStr.PLL3.PLL3Q = 6;
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2206      	movs	r2, #6
 8000cbe:	631a      	str	r2, [r3, #48]	; 0x30
	  usart3ClkInitStr.PLL3.PLL3R = 6;
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2206      	movs	r2, #6
 8000cc6:	635a      	str	r2, [r3, #52]	; 0x34
	  usart3ClkInitStr.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
	  usart3ClkInitStr.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	63da      	str	r2, [r3, #60]	; 0x3c
	  usart3ClkInitStr.PLL3.PLL3FRACN = 0;
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2200      	movs	r2, #0
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40
	  usart3ClkInitStr.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	675a      	str	r2, [r3, #116]	; 0x74
	  if (HAL_RCCEx_PeriphCLKConfig(&usart3ClkInitStr) != HAL_OK)
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f004 fd1a 	bl	8005728 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_UART_MspInit+0x206>
	    Error_Handler();
 8000cfa:	f7ff fed7 	bl	8000aac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfe:	4b37      	ldr	r3, [pc, #220]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d04:	4a35      	ldr	r2, [pc, #212]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d0e:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	4a2d      	ldr	r2, [pc, #180]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_UART_MspInit+0x2e4>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d46:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d62:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000d66:	4619      	mov	r1, r3
 8000d68:	4821      	ldr	r0, [pc, #132]	; (8000df0 <HAL_UART_MspInit+0x2f8>)
 8000d6a:	f003 fb09 	bl	8004380 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <HAL_UART_MspInit+0x300>)
 8000d72:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000d76:	222e      	movs	r2, #46	; 0x2e
 8000d78:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000d7c:	2240      	movs	r2, #64	; 0x40
 8000d7e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000dae:	f000 fc79 	bl	80016a4 <HAL_DMA_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8000db8:	f7ff fe78 	bl	8000aac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000dc2:	679a      	str	r2, [r3, #120]	; 0x78
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_UART_MspInit+0x2fc>)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000dcc:	bf00      	nop
 8000dce:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020400 	.word	0x58020400
 8000de4:	24000684 	.word	0x24000684
 8000de8:	40020010 	.word	0x40020010
 8000dec:	40004800 	.word	0x40004800
 8000df0:	58020c00 	.word	0x58020c00
 8000df4:	2400060c 	.word	0x2400060c
 8000df8:	40020028 	.word	0x40020028

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e48:	f000 facc 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <DMA1_Stream0_IRQHandler+0x10>)
 8000e56:	f001 ff4d 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	24000684 	.word	0x24000684

08000e64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 f891 	bl	8000f90 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000e6e:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DMA1_Stream1_IRQHandler+0x14>)
 8000e70:	f001 ff40 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2400060c 	.word	0x2400060c

08000e7c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8000e80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e84:	f003 fc5f 	bl	8004746 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 f87d 	bl	8000f90 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 8000e96:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <USART3_IRQHandler+0x14>)
 8000e98:	f006 f90e 	bl	80070b8 <HAL_UART_IRQHandler>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	24000174 	.word	0x24000174

08000ea4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d009      	beq.n	8000ecc <BSP_LED_Init+0x28>
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d006      	beq.n	8000ecc <BSP_LED_Init+0x28>
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d003      	beq.n	8000ecc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ec4:	f06f 0301 	mvn.w	r3, #1
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eca:	e055      	b.n	8000f78 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10f      	bne.n	8000ef2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000ed2:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <BSP_LED_Init+0xe0>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <BSP_LED_Init+0xe0>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <BSP_LED_Init+0xe0>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	e021      	b.n	8000f36 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10f      	bne.n	8000f18 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <BSP_LED_Init+0xe0>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <BSP_LED_Init+0xe0>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <BSP_LED_Init+0xe0>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	e00e      	b.n	8000f36 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <BSP_LED_Init+0xe0>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <BSP_LED_Init+0xe0>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <BSP_LED_Init+0xe0>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <BSP_LED_Init+0xe4>)
 8000f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f3e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <BSP_LED_Init+0xe8>)
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	f107 0218 	add.w	r2, r7, #24
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fa10 	bl	8004380 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <BSP_LED_Init+0xe8>)
 8000f64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <BSP_LED_Init+0xe4>)
 8000f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	f003 fbb4 	bl	80046e0 <HAL_GPIO_WritePin>
  }

  return ret;
 8000f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3730      	adds	r7, #48	; 0x30
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	58024400 	.word	0x58024400
 8000f88:	08008898 	.word	0x08008898
 8000f8c:	240000a0 	.word	0x240000a0

08000f90 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d009      	beq.n	8000fb8 <BSP_LED_On+0x28>
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d006      	beq.n	8000fb8 <BSP_LED_On+0x28>
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d003      	beq.n	8000fb8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fb0:	f06f 0301 	mvn.w	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e00b      	b.n	8000fd0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <BSP_LED_On+0x4c>)
 8000fbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <BSP_LED_On+0x50>)
 8000fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f003 fb88 	bl	80046e0 <HAL_GPIO_WritePin>
  }

  return ret;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	240000a0 	.word	0x240000a0
 8000fe0:	08008898 	.word	0x08008898

08000fe4 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d009      	beq.n	800100c <BSP_LED_Off+0x28>
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d006      	beq.n	800100c <BSP_LED_Off+0x28>
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d003      	beq.n	800100c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001004:	f06f 0301 	mvn.w	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e00b      	b.n	8001024 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <BSP_LED_Off+0x4c>)
 8001010:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <BSP_LED_Off+0x50>)
 8001018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800101c:	2200      	movs	r2, #0
 800101e:	4619      	mov	r1, r3
 8001020:	f003 fb5e 	bl	80046e0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001024:	68fb      	ldr	r3, [r7, #12]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	240000a0 	.word	0x240000a0
 8001034:	08008898 	.word	0x08008898

08001038 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d009      	beq.n	8001060 <BSP_LED_Toggle+0x28>
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d006      	beq.n	8001060 <BSP_LED_Toggle+0x28>
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d003      	beq.n	8001060 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001058:	f06f 0301 	mvn.w	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e00b      	b.n	8001078 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <BSP_LED_Toggle+0x4c>)
 8001064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4907      	ldr	r1, [pc, #28]	; (8001088 <BSP_LED_Toggle+0x50>)
 800106c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001070:	4619      	mov	r1, r3
 8001072:	4610      	mov	r0, r2
 8001074:	f003 fb4d 	bl	8004712 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001078:	68fb      	ldr	r3, [r7, #12]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	240000a0 	.word	0x240000a0
 8001088:	08008898 	.word	0x08008898

0800108c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	460a      	mov	r2, r1
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <BSP_PB_Init+0xc8>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <BSP_PB_Init+0xc8>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <BSP_PB_Init+0xc8>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80010ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010be:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80010c0:	2302      	movs	r3, #2
 80010c2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10c      	bne.n	80010e8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <BSP_PB_Init+0xcc>)
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	f107 020c 	add.w	r2, r7, #12
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 f94d 	bl	8004380 <HAL_GPIO_Init>
 80010e6:	e030      	b.n	800114a <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <BSP_PB_Init+0xd0>)
 80010ea:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <BSP_PB_Init+0xcc>)
 80010f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f4:	f107 020c 	add.w	r2, r7, #12
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 f940 	bl	8004380 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4a16      	ldr	r2, [pc, #88]	; (8001160 <BSP_PB_Init+0xd4>)
 8001106:	441a      	add	r2, r3
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4916      	ldr	r1, [pc, #88]	; (8001164 <BSP_PB_Init+0xd8>)
 800110c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001110:	4619      	mov	r1, r3
 8001112:	4610      	mov	r0, r2
 8001114:	f003 f91f 	bl	8004356 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4a10      	ldr	r2, [pc, #64]	; (8001160 <BSP_PB_Init+0xd4>)
 800111e:	1898      	adds	r0, r3, r2
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <BSP_PB_Init+0xdc>)
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	461a      	mov	r2, r3
 800112a:	2100      	movs	r1, #0
 800112c:	f003 f8f4 	bl	8004318 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001130:	2028      	movs	r0, #40	; 0x28
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <BSP_PB_Init+0xe0>)
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	f000 fa7c 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001142:	2328      	movs	r3, #40	; 0x28
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fa92 	bl	800166e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	58024400 	.word	0x58024400
 8001158:	240000ac 	.word	0x240000ac
 800115c:	11110000 	.word	0x11110000
 8001160:	24000848 	.word	0x24000848
 8001164:	080088a0 	.word	0x080088a0
 8001168:	240000b0 	.word	0x240000b0
 800116c:	240000b4 	.word	0x240000b4

08001170 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fff0 	bl	8001170 <BSP_PB_Callback>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001198:	4b39      	ldr	r3, [pc, #228]	; (8001280 <SystemInit+0xec>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a38      	ldr	r2, [pc, #224]	; (8001280 <SystemInit+0xec>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <SystemInit+0xf0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	d807      	bhi.n	80011c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <SystemInit+0xf0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 030f 	bic.w	r3, r3, #15
 80011bc:	4a31      	ldr	r2, [pc, #196]	; (8001284 <SystemInit+0xf0>)
 80011be:	f043 0307 	orr.w	r3, r3, #7
 80011c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011c4:	4b30      	ldr	r3, [pc, #192]	; (8001288 <SystemInit+0xf4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a2f      	ldr	r2, [pc, #188]	; (8001288 <SystemInit+0xf4>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <SystemInit+0xf4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <SystemInit+0xf4>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	492b      	ldr	r1, [pc, #172]	; (8001288 <SystemInit+0xf4>)
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <SystemInit+0xf8>)
 80011de:	4013      	ands	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e2:	4b28      	ldr	r3, [pc, #160]	; (8001284 <SystemInit+0xf0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <SystemInit+0xf0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 030f 	bic.w	r3, r3, #15
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <SystemInit+0xf0>)
 80011f8:	f043 0307 	orr.w	r3, r3, #7
 80011fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <SystemInit+0xf4>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <SystemInit+0xf4>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <SystemInit+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <SystemInit+0xf4>)
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <SystemInit+0xfc>)
 8001214:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <SystemInit+0xf4>)
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <SystemInit+0x100>)
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <SystemInit+0xf4>)
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <SystemInit+0x104>)
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <SystemInit+0xf4>)
 8001224:	2200      	movs	r2, #0
 8001226:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <SystemInit+0xf4>)
 800122a:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <SystemInit+0x104>)
 800122c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <SystemInit+0xf4>)
 8001230:	2200      	movs	r2, #0
 8001232:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <SystemInit+0xf4>)
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <SystemInit+0x104>)
 8001238:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <SystemInit+0xf4>)
 800123c:	2200      	movs	r2, #0
 800123e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <SystemInit+0xf4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a10      	ldr	r2, [pc, #64]	; (8001288 <SystemInit+0xf4>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <SystemInit+0xf4>)
 800124e:	2200      	movs	r2, #0
 8001250:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <SystemInit+0x108>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <SystemInit+0x10c>)
 8001258:	4013      	ands	r3, r2
 800125a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800125e:	d202      	bcs.n	8001266 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <SystemInit+0x110>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <SystemInit+0x114>)
 8001268:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800126c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SystemInit+0xec>)
 8001270:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001274:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	52002000 	.word	0x52002000
 8001288:	58024400 	.word	0x58024400
 800128c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001290:	02020200 	.word	0x02020200
 8001294:	01ff0000 	.word	0x01ff0000
 8001298:	01010280 	.word	0x01010280
 800129c:	5c001000 	.word	0x5c001000
 80012a0:	ffff0000 	.word	0xffff0000
 80012a4:	51008108 	.word	0x51008108
 80012a8:	52004000 	.word	0x52004000

080012ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b0:	f7ff ff70 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	; (80012ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	; (80012f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f007 faa5 	bl	8008828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012de:	f7ff f977 	bl	80005d0 <main>
  bx  lr
 80012e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012ec:	240000c8 	.word	0x240000c8
  ldr r2, =_sidata
 80012f0:	080088f4 	.word	0x080088f4
  ldr r2, =_sbss
 80012f4:	240000c8 	.word	0x240000c8
  ldr r4, =_ebss
 80012f8:	240008e4 	.word	0x240008e4

080012fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC3_IRQHandler>
	...

08001300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001306:	2003      	movs	r0, #3
 8001308:	f000 f98c 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800130c:	f004 f836 	bl	800537c <HAL_RCC_GetSysClockFreq>
 8001310:	4602      	mov	r2, r0
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_Init+0x68>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	4913      	ldr	r1, [pc, #76]	; (800136c <HAL_Init+0x6c>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_Init+0x68>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_Init+0x6c>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <HAL_Init+0x70>)
 8001342:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_Init+0x74>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800134a:	2000      	movs	r0, #0
 800134c:	f000 f814 	bl	8001378 <HAL_InitTick>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e002      	b.n	8001360 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800135a:	f7ff fbb3 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	58024400 	.word	0x58024400
 800136c:	080088a4 	.word	0x080088a4
 8001370:	240000bc 	.word	0x240000bc
 8001374:	240000b8 	.word	0x240000b8

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_InitTick+0x60>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e021      	b.n	80013d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_InitTick+0x64>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_InitTick+0x60>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f971 	bl	800168a <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f93b 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x68>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	240000c4 	.word	0x240000c4
 80013dc:	240000b8 	.word	0x240000b8
 80013e0:	240000c0 	.word	0x240000c0

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	240000c4 	.word	0x240000c4
 8001408:	240008e0 	.word	0x240008e0

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	240008e0 	.word	0x240008e0

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff ffee 	bl	800140c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_Delay+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffde 	bl	800140c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	240000c4 	.word	0x240000c4

0800146c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_GetREVID+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0c1b      	lsrs	r3, r3, #16
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	5c001000 	.word	0x5c001000

08001484 <__NVIC_SetPriorityGrouping>:
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <__NVIC_SetPriorityGrouping+0x40>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00
 80014c8:	05fa0000 	.word	0x05fa0000

080014cc <__NVIC_GetPriorityGrouping>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	; (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff8e 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff29 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff40 	bl	80014cc <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff90 	bl	8001578 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5f 	bl	8001524 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff33 	bl	80014e8 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa4 	bl	80015e0 <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff feae 	bl	800140c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e316      	b.n	8001cea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a66      	ldr	r2, [pc, #408]	; (800185c <HAL_DMA_Init+0x1b8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d04a      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a65      	ldr	r2, [pc, #404]	; (8001860 <HAL_DMA_Init+0x1bc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d045      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a63      	ldr	r2, [pc, #396]	; (8001864 <HAL_DMA_Init+0x1c0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d040      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a62      	ldr	r2, [pc, #392]	; (8001868 <HAL_DMA_Init+0x1c4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d03b      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a60      	ldr	r2, [pc, #384]	; (800186c <HAL_DMA_Init+0x1c8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d036      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a5f      	ldr	r2, [pc, #380]	; (8001870 <HAL_DMA_Init+0x1cc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d031      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a5d      	ldr	r2, [pc, #372]	; (8001874 <HAL_DMA_Init+0x1d0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d02c      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a5c      	ldr	r2, [pc, #368]	; (8001878 <HAL_DMA_Init+0x1d4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d027      	beq.n	800175c <HAL_DMA_Init+0xb8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a5a      	ldr	r2, [pc, #360]	; (800187c <HAL_DMA_Init+0x1d8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d022      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a59      	ldr	r2, [pc, #356]	; (8001880 <HAL_DMA_Init+0x1dc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d01d      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a57      	ldr	r2, [pc, #348]	; (8001884 <HAL_DMA_Init+0x1e0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d018      	beq.n	800175c <HAL_DMA_Init+0xb8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a56      	ldr	r2, [pc, #344]	; (8001888 <HAL_DMA_Init+0x1e4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d013      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_DMA_Init+0x1e8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00e      	beq.n	800175c <HAL_DMA_Init+0xb8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a53      	ldr	r2, [pc, #332]	; (8001890 <HAL_DMA_Init+0x1ec>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d009      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a51      	ldr	r2, [pc, #324]	; (8001894 <HAL_DMA_Init+0x1f0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d004      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a50      	ldr	r2, [pc, #320]	; (8001898 <HAL_DMA_Init+0x1f4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_DMA_Init+0xbc>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_DMA_Init+0xbe>
 8001760:	2300      	movs	r3, #0
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 813b 	beq.w	80019de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a37      	ldr	r2, [pc, #220]	; (800185c <HAL_DMA_Init+0x1b8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d04a      	beq.n	8001818 <HAL_DMA_Init+0x174>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a36      	ldr	r2, [pc, #216]	; (8001860 <HAL_DMA_Init+0x1bc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d045      	beq.n	8001818 <HAL_DMA_Init+0x174>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <HAL_DMA_Init+0x1c0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d040      	beq.n	8001818 <HAL_DMA_Init+0x174>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a33      	ldr	r2, [pc, #204]	; (8001868 <HAL_DMA_Init+0x1c4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d03b      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a31      	ldr	r2, [pc, #196]	; (800186c <HAL_DMA_Init+0x1c8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d036      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a30      	ldr	r2, [pc, #192]	; (8001870 <HAL_DMA_Init+0x1cc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d031      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2e      	ldr	r2, [pc, #184]	; (8001874 <HAL_DMA_Init+0x1d0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d02c      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a2d      	ldr	r2, [pc, #180]	; (8001878 <HAL_DMA_Init+0x1d4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d027      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2b      	ldr	r2, [pc, #172]	; (800187c <HAL_DMA_Init+0x1d8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d022      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <HAL_DMA_Init+0x1dc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d01d      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a28      	ldr	r2, [pc, #160]	; (8001884 <HAL_DMA_Init+0x1e0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d018      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a27      	ldr	r2, [pc, #156]	; (8001888 <HAL_DMA_Init+0x1e4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d013      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a25      	ldr	r2, [pc, #148]	; (800188c <HAL_DMA_Init+0x1e8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00e      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_DMA_Init+0x1ec>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d009      	beq.n	8001818 <HAL_DMA_Init+0x174>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_DMA_Init+0x1f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d004      	beq.n	8001818 <HAL_DMA_Init+0x174>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <HAL_DMA_Init+0x1f4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d108      	bne.n	800182a <HAL_DMA_Init+0x186>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e007      	b.n	800183a <HAL_DMA_Init+0x196>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800183a:	e02f      	b.n	800189c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183c:	f7ff fde6 	bl	800140c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b05      	cmp	r3, #5
 8001848:	d928      	bls.n	800189c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2220      	movs	r2, #32
 800184e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e246      	b.n	8001cea <HAL_DMA_Init+0x646>
 800185c:	40020010 	.word	0x40020010
 8001860:	40020028 	.word	0x40020028
 8001864:	40020040 	.word	0x40020040
 8001868:	40020058 	.word	0x40020058
 800186c:	40020070 	.word	0x40020070
 8001870:	40020088 	.word	0x40020088
 8001874:	400200a0 	.word	0x400200a0
 8001878:	400200b8 	.word	0x400200b8
 800187c:	40020410 	.word	0x40020410
 8001880:	40020428 	.word	0x40020428
 8001884:	40020440 	.word	0x40020440
 8001888:	40020458 	.word	0x40020458
 800188c:	40020470 	.word	0x40020470
 8001890:	40020488 	.word	0x40020488
 8001894:	400204a0 	.word	0x400204a0
 8001898:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1c8      	bne.n	800183c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <HAL_DMA_Init+0x420>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80018c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d107      	bne.n	8001900 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4313      	orrs	r3, r2
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001900:	4b71      	ldr	r3, [pc, #452]	; (8001ac8 <HAL_DMA_Init+0x424>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b71      	ldr	r3, [pc, #452]	; (8001acc <HAL_DMA_Init+0x428>)
 8001906:	4013      	ands	r3, r2
 8001908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800190c:	d328      	bcc.n	8001960 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b28      	cmp	r3, #40	; 0x28
 8001914:	d903      	bls.n	800191e <HAL_DMA_Init+0x27a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b2e      	cmp	r3, #46	; 0x2e
 800191c:	d917      	bls.n	800194e <HAL_DMA_Init+0x2aa>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b3e      	cmp	r3, #62	; 0x3e
 8001924:	d903      	bls.n	800192e <HAL_DMA_Init+0x28a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b42      	cmp	r3, #66	; 0x42
 800192c:	d90f      	bls.n	800194e <HAL_DMA_Init+0x2aa>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b46      	cmp	r3, #70	; 0x46
 8001934:	d903      	bls.n	800193e <HAL_DMA_Init+0x29a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b48      	cmp	r3, #72	; 0x48
 800193c:	d907      	bls.n	800194e <HAL_DMA_Init+0x2aa>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b4e      	cmp	r3, #78	; 0x4e
 8001944:	d905      	bls.n	8001952 <HAL_DMA_Init+0x2ae>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b52      	cmp	r3, #82	; 0x52
 800194c:	d801      	bhi.n	8001952 <HAL_DMA_Init+0x2ae>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_DMA_Init+0x2b0>
 8001952:	2300      	movs	r3, #0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800195e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0307 	bic.w	r3, r3, #7
 8001976:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b04      	cmp	r3, #4
 8001988:	d117      	bne.n	80019ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f002 fb31 	bl	8004004 <DMA_CheckFifoParam>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e197      	b.n	8001cea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f002 fa6c 	bl	8003ea0 <DMA_CalcBaseAndBitshift>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	223f      	movs	r2, #63	; 0x3f
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	e0cd      	b.n	8001b7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a3b      	ldr	r2, [pc, #236]	; (8001ad0 <HAL_DMA_Init+0x42c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d022      	beq.n	8001a2e <HAL_DMA_Init+0x38a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a39      	ldr	r2, [pc, #228]	; (8001ad4 <HAL_DMA_Init+0x430>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01d      	beq.n	8001a2e <HAL_DMA_Init+0x38a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a38      	ldr	r2, [pc, #224]	; (8001ad8 <HAL_DMA_Init+0x434>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d018      	beq.n	8001a2e <HAL_DMA_Init+0x38a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a36      	ldr	r2, [pc, #216]	; (8001adc <HAL_DMA_Init+0x438>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_DMA_Init+0x38a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a35      	ldr	r2, [pc, #212]	; (8001ae0 <HAL_DMA_Init+0x43c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00e      	beq.n	8001a2e <HAL_DMA_Init+0x38a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <HAL_DMA_Init+0x440>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d009      	beq.n	8001a2e <HAL_DMA_Init+0x38a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <HAL_DMA_Init+0x444>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_DMA_Init+0x38a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a30      	ldr	r2, [pc, #192]	; (8001aec <HAL_DMA_Init+0x448>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_DMA_Init+0x38e>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_DMA_Init+0x390>
 8001a32:	2300      	movs	r3, #0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8097 	beq.w	8001b68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_DMA_Init+0x42c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d021      	beq.n	8001a88 <HAL_DMA_Init+0x3e4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_DMA_Init+0x430>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01c      	beq.n	8001a88 <HAL_DMA_Init+0x3e4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <HAL_DMA_Init+0x434>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d017      	beq.n	8001a88 <HAL_DMA_Init+0x3e4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <HAL_DMA_Init+0x438>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d012      	beq.n	8001a88 <HAL_DMA_Init+0x3e4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_DMA_Init+0x43c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00d      	beq.n	8001a88 <HAL_DMA_Init+0x3e4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <HAL_DMA_Init+0x440>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d008      	beq.n	8001a88 <HAL_DMA_Init+0x3e4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_DMA_Init+0x444>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d003      	beq.n	8001a88 <HAL_DMA_Init+0x3e4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_DMA_Init+0x448>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_DMA_Init+0x44c>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b40      	cmp	r3, #64	; 0x40
 8001ab0:	d020      	beq.n	8001af4 <HAL_DMA_Init+0x450>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b80      	cmp	r3, #128	; 0x80
 8001ab8:	d102      	bne.n	8001ac0 <HAL_DMA_Init+0x41c>
 8001aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001abe:	e01a      	b.n	8001af6 <HAL_DMA_Init+0x452>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e018      	b.n	8001af6 <HAL_DMA_Init+0x452>
 8001ac4:	fe10803f 	.word	0xfe10803f
 8001ac8:	5c001000 	.word	0x5c001000
 8001acc:	ffff0000 	.word	0xffff0000
 8001ad0:	58025408 	.word	0x58025408
 8001ad4:	5802541c 	.word	0x5802541c
 8001ad8:	58025430 	.word	0x58025430
 8001adc:	58025444 	.word	0x58025444
 8001ae0:	58025458 	.word	0x58025458
 8001ae4:	5802546c 	.word	0x5802546c
 8001ae8:	58025480 	.word	0x58025480
 8001aec:	58025494 	.word	0x58025494
 8001af0:	fffe000f 	.word	0xfffe000f
 8001af4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68d2      	ldr	r2, [r2, #12]
 8001afa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b6e      	ldr	r3, [pc, #440]	; (8001cf4 <HAL_DMA_Init+0x650>)
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a6e      	ldr	r2, [pc, #440]	; (8001cf8 <HAL_DMA_Init+0x654>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	009a      	lsls	r2, r3, #2
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f002 f9a7 	bl	8003ea0 <DMA_CalcBaseAndBitshift>
 8001b52:	4603      	mov	r3, r0
 8001b54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	2201      	movs	r2, #1
 8001b60:	409a      	lsls	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	e008      	b.n	8001b7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2240      	movs	r2, #64	; 0x40
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0b7      	b.n	8001cea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a5f      	ldr	r2, [pc, #380]	; (8001cfc <HAL_DMA_Init+0x658>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d072      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5d      	ldr	r2, [pc, #372]	; (8001d00 <HAL_DMA_Init+0x65c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d06d      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <HAL_DMA_Init+0x660>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d068      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a5a      	ldr	r2, [pc, #360]	; (8001d08 <HAL_DMA_Init+0x664>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d063      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a59      	ldr	r2, [pc, #356]	; (8001d0c <HAL_DMA_Init+0x668>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d05e      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a57      	ldr	r2, [pc, #348]	; (8001d10 <HAL_DMA_Init+0x66c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d059      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a56      	ldr	r2, [pc, #344]	; (8001d14 <HAL_DMA_Init+0x670>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d054      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a54      	ldr	r2, [pc, #336]	; (8001d18 <HAL_DMA_Init+0x674>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d04f      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a53      	ldr	r2, [pc, #332]	; (8001d1c <HAL_DMA_Init+0x678>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d04a      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a51      	ldr	r2, [pc, #324]	; (8001d20 <HAL_DMA_Init+0x67c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d045      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a50      	ldr	r2, [pc, #320]	; (8001d24 <HAL_DMA_Init+0x680>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d040      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <HAL_DMA_Init+0x684>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d03b      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a4d      	ldr	r2, [pc, #308]	; (8001d2c <HAL_DMA_Init+0x688>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d036      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <HAL_DMA_Init+0x68c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d031      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4a      	ldr	r2, [pc, #296]	; (8001d34 <HAL_DMA_Init+0x690>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d02c      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a48      	ldr	r2, [pc, #288]	; (8001d38 <HAL_DMA_Init+0x694>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d027      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a47      	ldr	r2, [pc, #284]	; (8001d3c <HAL_DMA_Init+0x698>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d022      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a45      	ldr	r2, [pc, #276]	; (8001d40 <HAL_DMA_Init+0x69c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01d      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a44      	ldr	r2, [pc, #272]	; (8001d44 <HAL_DMA_Init+0x6a0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d018      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a42      	ldr	r2, [pc, #264]	; (8001d48 <HAL_DMA_Init+0x6a4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a41      	ldr	r2, [pc, #260]	; (8001d4c <HAL_DMA_Init+0x6a8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00e      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a3f      	ldr	r2, [pc, #252]	; (8001d50 <HAL_DMA_Init+0x6ac>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d009      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a3e      	ldr	r2, [pc, #248]	; (8001d54 <HAL_DMA_Init+0x6b0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d004      	beq.n	8001c6a <HAL_DMA_Init+0x5c6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a3c      	ldr	r2, [pc, #240]	; (8001d58 <HAL_DMA_Init+0x6b4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_DMA_Init+0x5ca>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_DMA_Init+0x5cc>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d032      	beq.n	8001cda <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f002 fa41 	bl	80040fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b80      	cmp	r3, #128	; 0x80
 8001c80:	d102      	bne.n	8001c88 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d010      	beq.n	8001cc8 <HAL_DMA_Init+0x624>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d80c      	bhi.n	8001cc8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f002 fabe 	bl	8004230 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	e008      	b.n	8001cda <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	a7fdabf8 	.word	0xa7fdabf8
 8001cf8:	cccccccd 	.word	0xcccccccd
 8001cfc:	40020010 	.word	0x40020010
 8001d00:	40020028 	.word	0x40020028
 8001d04:	40020040 	.word	0x40020040
 8001d08:	40020058 	.word	0x40020058
 8001d0c:	40020070 	.word	0x40020070
 8001d10:	40020088 	.word	0x40020088
 8001d14:	400200a0 	.word	0x400200a0
 8001d18:	400200b8 	.word	0x400200b8
 8001d1c:	40020410 	.word	0x40020410
 8001d20:	40020428 	.word	0x40020428
 8001d24:	40020440 	.word	0x40020440
 8001d28:	40020458 	.word	0x40020458
 8001d2c:	40020470 	.word	0x40020470
 8001d30:	40020488 	.word	0x40020488
 8001d34:	400204a0 	.word	0x400204a0
 8001d38:	400204b8 	.word	0x400204b8
 8001d3c:	58025408 	.word	0x58025408
 8001d40:	5802541c 	.word	0x5802541c
 8001d44:	58025430 	.word	0x58025430
 8001d48:	58025444 	.word	0x58025444
 8001d4c:	58025458 	.word	0x58025458
 8001d50:	5802546c 	.word	0x5802546c
 8001d54:	58025480 	.word	0x58025480
 8001d58:	58025494 	.word	0x58025494

08001d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e226      	b.n	80021c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_DMA_Start_IT+0x2a>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e21f      	b.n	80021c6 <HAL_DMA_Start_IT+0x46a>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	f040 820a 	bne.w	80021b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a68      	ldr	r2, [pc, #416]	; (8001f50 <HAL_DMA_Start_IT+0x1f4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d04a      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a66      	ldr	r2, [pc, #408]	; (8001f54 <HAL_DMA_Start_IT+0x1f8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d045      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a65      	ldr	r2, [pc, #404]	; (8001f58 <HAL_DMA_Start_IT+0x1fc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d040      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <HAL_DMA_Start_IT+0x200>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d03b      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a62      	ldr	r2, [pc, #392]	; (8001f60 <HAL_DMA_Start_IT+0x204>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d036      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a60      	ldr	r2, [pc, #384]	; (8001f64 <HAL_DMA_Start_IT+0x208>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d031      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a5f      	ldr	r2, [pc, #380]	; (8001f68 <HAL_DMA_Start_IT+0x20c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d02c      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5d      	ldr	r2, [pc, #372]	; (8001f6c <HAL_DMA_Start_IT+0x210>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d027      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5c      	ldr	r2, [pc, #368]	; (8001f70 <HAL_DMA_Start_IT+0x214>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <HAL_DMA_Start_IT+0x218>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01d      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a59      	ldr	r2, [pc, #356]	; (8001f78 <HAL_DMA_Start_IT+0x21c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d018      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a57      	ldr	r2, [pc, #348]	; (8001f7c <HAL_DMA_Start_IT+0x220>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a56      	ldr	r2, [pc, #344]	; (8001f80 <HAL_DMA_Start_IT+0x224>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a54      	ldr	r2, [pc, #336]	; (8001f84 <HAL_DMA_Start_IT+0x228>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a53      	ldr	r2, [pc, #332]	; (8001f88 <HAL_DMA_Start_IT+0x22c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_DMA_Start_IT+0xee>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a51      	ldr	r2, [pc, #324]	; (8001f8c <HAL_DMA_Start_IT+0x230>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d108      	bne.n	8001e5c <HAL_DMA_Start_IT+0x100>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0201 	bic.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e007      	b.n	8001e6c <HAL_DMA_Start_IT+0x110>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f001 fe68 	bl	8003b48 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a34      	ldr	r2, [pc, #208]	; (8001f50 <HAL_DMA_Start_IT+0x1f4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d04a      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a33      	ldr	r2, [pc, #204]	; (8001f54 <HAL_DMA_Start_IT+0x1f8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d045      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a31      	ldr	r2, [pc, #196]	; (8001f58 <HAL_DMA_Start_IT+0x1fc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d040      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_DMA_Start_IT+0x200>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d03b      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <HAL_DMA_Start_IT+0x204>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d036      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2d      	ldr	r2, [pc, #180]	; (8001f64 <HAL_DMA_Start_IT+0x208>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d031      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <HAL_DMA_Start_IT+0x20c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02c      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <HAL_DMA_Start_IT+0x210>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d027      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <HAL_DMA_Start_IT+0x214>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d022      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_DMA_Start_IT+0x218>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d01d      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <HAL_DMA_Start_IT+0x21c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d018      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a24      	ldr	r2, [pc, #144]	; (8001f7c <HAL_DMA_Start_IT+0x220>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <HAL_DMA_Start_IT+0x224>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00e      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <HAL_DMA_Start_IT+0x228>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d009      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_DMA_Start_IT+0x22c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d004      	beq.n	8001f18 <HAL_DMA_Start_IT+0x1bc>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_DMA_Start_IT+0x230>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d101      	bne.n	8001f1c <HAL_DMA_Start_IT+0x1c0>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_DMA_Start_IT+0x1c2>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d036      	beq.n	8001f90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 021e 	bic.w	r2, r3, #30
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0216 	orr.w	r2, r2, #22
 8001f34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d03e      	beq.n	8001fbc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0208 	orr.w	r2, r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e035      	b.n	8001fbc <HAL_DMA_Start_IT+0x260>
 8001f50:	40020010 	.word	0x40020010
 8001f54:	40020028 	.word	0x40020028
 8001f58:	40020040 	.word	0x40020040
 8001f5c:	40020058 	.word	0x40020058
 8001f60:	40020070 	.word	0x40020070
 8001f64:	40020088 	.word	0x40020088
 8001f68:	400200a0 	.word	0x400200a0
 8001f6c:	400200b8 	.word	0x400200b8
 8001f70:	40020410 	.word	0x40020410
 8001f74:	40020428 	.word	0x40020428
 8001f78:	40020440 	.word	0x40020440
 8001f7c:	40020458 	.word	0x40020458
 8001f80:	40020470 	.word	0x40020470
 8001f84:	40020488 	.word	0x40020488
 8001f88:	400204a0 	.word	0x400204a0
 8001f8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 020e 	bic.w	r2, r3, #14
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 020a 	orr.w	r2, r2, #10
 8001fa2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0204 	orr.w	r2, r2, #4
 8001fba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a83      	ldr	r2, [pc, #524]	; (80021d0 <HAL_DMA_Start_IT+0x474>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d072      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a82      	ldr	r2, [pc, #520]	; (80021d4 <HAL_DMA_Start_IT+0x478>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d06d      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a80      	ldr	r2, [pc, #512]	; (80021d8 <HAL_DMA_Start_IT+0x47c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d068      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7f      	ldr	r2, [pc, #508]	; (80021dc <HAL_DMA_Start_IT+0x480>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d063      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a7d      	ldr	r2, [pc, #500]	; (80021e0 <HAL_DMA_Start_IT+0x484>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d05e      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_DMA_Start_IT+0x488>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d059      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a7a      	ldr	r2, [pc, #488]	; (80021e8 <HAL_DMA_Start_IT+0x48c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d054      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a79      	ldr	r2, [pc, #484]	; (80021ec <HAL_DMA_Start_IT+0x490>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d04f      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a77      	ldr	r2, [pc, #476]	; (80021f0 <HAL_DMA_Start_IT+0x494>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d04a      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a76      	ldr	r2, [pc, #472]	; (80021f4 <HAL_DMA_Start_IT+0x498>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d045      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a74      	ldr	r2, [pc, #464]	; (80021f8 <HAL_DMA_Start_IT+0x49c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d040      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a73      	ldr	r2, [pc, #460]	; (80021fc <HAL_DMA_Start_IT+0x4a0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d03b      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a71      	ldr	r2, [pc, #452]	; (8002200 <HAL_DMA_Start_IT+0x4a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d036      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a70      	ldr	r2, [pc, #448]	; (8002204 <HAL_DMA_Start_IT+0x4a8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d031      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6e      	ldr	r2, [pc, #440]	; (8002208 <HAL_DMA_Start_IT+0x4ac>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d02c      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6d      	ldr	r2, [pc, #436]	; (800220c <HAL_DMA_Start_IT+0x4b0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d027      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6b      	ldr	r2, [pc, #428]	; (8002210 <HAL_DMA_Start_IT+0x4b4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d022      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6a      	ldr	r2, [pc, #424]	; (8002214 <HAL_DMA_Start_IT+0x4b8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d01d      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a68      	ldr	r2, [pc, #416]	; (8002218 <HAL_DMA_Start_IT+0x4bc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d018      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a67      	ldr	r2, [pc, #412]	; (800221c <HAL_DMA_Start_IT+0x4c0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a65      	ldr	r2, [pc, #404]	; (8002220 <HAL_DMA_Start_IT+0x4c4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00e      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a64      	ldr	r2, [pc, #400]	; (8002224 <HAL_DMA_Start_IT+0x4c8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a62      	ldr	r2, [pc, #392]	; (8002228 <HAL_DMA_Start_IT+0x4cc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_DMA_Start_IT+0x350>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a61      	ldr	r2, [pc, #388]	; (800222c <HAL_DMA_Start_IT+0x4d0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_DMA_Start_IT+0x354>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_DMA_Start_IT+0x356>
 80020b0:	2300      	movs	r3, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01a      	beq.n	80020ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a37      	ldr	r2, [pc, #220]	; (80021d0 <HAL_DMA_Start_IT+0x474>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d04a      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a36      	ldr	r2, [pc, #216]	; (80021d4 <HAL_DMA_Start_IT+0x478>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d045      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a34      	ldr	r2, [pc, #208]	; (80021d8 <HAL_DMA_Start_IT+0x47c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d040      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a33      	ldr	r2, [pc, #204]	; (80021dc <HAL_DMA_Start_IT+0x480>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d03b      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a31      	ldr	r2, [pc, #196]	; (80021e0 <HAL_DMA_Start_IT+0x484>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d036      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a30      	ldr	r2, [pc, #192]	; (80021e4 <HAL_DMA_Start_IT+0x488>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d031      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2e      	ldr	r2, [pc, #184]	; (80021e8 <HAL_DMA_Start_IT+0x48c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d02c      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <HAL_DMA_Start_IT+0x490>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d027      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <HAL_DMA_Start_IT+0x494>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d022      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <HAL_DMA_Start_IT+0x498>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d01d      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <HAL_DMA_Start_IT+0x49c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d018      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_DMA_Start_IT+0x4a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a25      	ldr	r2, [pc, #148]	; (8002200 <HAL_DMA_Start_IT+0x4a4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00e      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a24      	ldr	r2, [pc, #144]	; (8002204 <HAL_DMA_Start_IT+0x4a8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a22      	ldr	r2, [pc, #136]	; (8002208 <HAL_DMA_Start_IT+0x4ac>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d004      	beq.n	800218c <HAL_DMA_Start_IT+0x430>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a21      	ldr	r2, [pc, #132]	; (800220c <HAL_DMA_Start_IT+0x4b0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d108      	bne.n	800219e <HAL_DMA_Start_IT+0x442>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e012      	b.n	80021c4 <HAL_DMA_Start_IT+0x468>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e009      	b.n	80021c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40020010 	.word	0x40020010
 80021d4:	40020028 	.word	0x40020028
 80021d8:	40020040 	.word	0x40020040
 80021dc:	40020058 	.word	0x40020058
 80021e0:	40020070 	.word	0x40020070
 80021e4:	40020088 	.word	0x40020088
 80021e8:	400200a0 	.word	0x400200a0
 80021ec:	400200b8 	.word	0x400200b8
 80021f0:	40020410 	.word	0x40020410
 80021f4:	40020428 	.word	0x40020428
 80021f8:	40020440 	.word	0x40020440
 80021fc:	40020458 	.word	0x40020458
 8002200:	40020470 	.word	0x40020470
 8002204:	40020488 	.word	0x40020488
 8002208:	400204a0 	.word	0x400204a0
 800220c:	400204b8 	.word	0x400204b8
 8002210:	58025408 	.word	0x58025408
 8002214:	5802541c 	.word	0x5802541c
 8002218:	58025430 	.word	0x58025430
 800221c:	58025444 	.word	0x58025444
 8002220:	58025458 	.word	0x58025458
 8002224:	5802546c 	.word	0x5802546c
 8002228:	58025480 	.word	0x58025480
 800222c:	58025494 	.word	0x58025494

08002230 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff f8e8 	bl	800140c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e2dc      	b.n	8002802 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d008      	beq.n	8002266 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e2cd      	b.n	8002802 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a76      	ldr	r2, [pc, #472]	; (8002444 <HAL_DMA_Abort+0x214>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d04a      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a74      	ldr	r2, [pc, #464]	; (8002448 <HAL_DMA_Abort+0x218>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d045      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a73      	ldr	r2, [pc, #460]	; (800244c <HAL_DMA_Abort+0x21c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d040      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a71      	ldr	r2, [pc, #452]	; (8002450 <HAL_DMA_Abort+0x220>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d03b      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a70      	ldr	r2, [pc, #448]	; (8002454 <HAL_DMA_Abort+0x224>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d036      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a6e      	ldr	r2, [pc, #440]	; (8002458 <HAL_DMA_Abort+0x228>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d031      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a6d      	ldr	r2, [pc, #436]	; (800245c <HAL_DMA_Abort+0x22c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d02c      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6b      	ldr	r2, [pc, #428]	; (8002460 <HAL_DMA_Abort+0x230>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d027      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_DMA_Abort+0x234>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a68      	ldr	r2, [pc, #416]	; (8002468 <HAL_DMA_Abort+0x238>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01d      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a67      	ldr	r2, [pc, #412]	; (800246c <HAL_DMA_Abort+0x23c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d018      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a65      	ldr	r2, [pc, #404]	; (8002470 <HAL_DMA_Abort+0x240>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a64      	ldr	r2, [pc, #400]	; (8002474 <HAL_DMA_Abort+0x244>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00e      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a62      	ldr	r2, [pc, #392]	; (8002478 <HAL_DMA_Abort+0x248>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a61      	ldr	r2, [pc, #388]	; (800247c <HAL_DMA_Abort+0x24c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d004      	beq.n	8002306 <HAL_DMA_Abort+0xd6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a5f      	ldr	r2, [pc, #380]	; (8002480 <HAL_DMA_Abort+0x250>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_DMA_Abort+0xda>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_DMA_Abort+0xdc>
 800230a:	2300      	movs	r3, #0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 021e 	bic.w	r2, r2, #30
 800231e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800232e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e00a      	b.n	800234e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 020e 	bic.w	r2, r2, #14
 8002346:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a3c      	ldr	r2, [pc, #240]	; (8002444 <HAL_DMA_Abort+0x214>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d072      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <HAL_DMA_Abort+0x218>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d06d      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a39      	ldr	r2, [pc, #228]	; (800244c <HAL_DMA_Abort+0x21c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d068      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a37      	ldr	r2, [pc, #220]	; (8002450 <HAL_DMA_Abort+0x220>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d063      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a36      	ldr	r2, [pc, #216]	; (8002454 <HAL_DMA_Abort+0x224>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d05e      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a34      	ldr	r2, [pc, #208]	; (8002458 <HAL_DMA_Abort+0x228>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d059      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a33      	ldr	r2, [pc, #204]	; (800245c <HAL_DMA_Abort+0x22c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d054      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a31      	ldr	r2, [pc, #196]	; (8002460 <HAL_DMA_Abort+0x230>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d04f      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a30      	ldr	r2, [pc, #192]	; (8002464 <HAL_DMA_Abort+0x234>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d04a      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <HAL_DMA_Abort+0x238>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d045      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2d      	ldr	r2, [pc, #180]	; (800246c <HAL_DMA_Abort+0x23c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d040      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <HAL_DMA_Abort+0x240>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d03b      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <HAL_DMA_Abort+0x244>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d036      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a28      	ldr	r2, [pc, #160]	; (8002478 <HAL_DMA_Abort+0x248>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d031      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_DMA_Abort+0x24c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d02c      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a25      	ldr	r2, [pc, #148]	; (8002480 <HAL_DMA_Abort+0x250>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d027      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a24      	ldr	r2, [pc, #144]	; (8002484 <HAL_DMA_Abort+0x254>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d022      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_DMA_Abort+0x258>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01d      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a21      	ldr	r2, [pc, #132]	; (800248c <HAL_DMA_Abort+0x25c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d018      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <HAL_DMA_Abort+0x260>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <HAL_DMA_Abort+0x264>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00e      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_DMA_Abort+0x268>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d009      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_DMA_Abort+0x26c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d004      	beq.n	800243e <HAL_DMA_Abort+0x20e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_DMA_Abort+0x270>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d132      	bne.n	80024a4 <HAL_DMA_Abort+0x274>
 800243e:	2301      	movs	r3, #1
 8002440:	e031      	b.n	80024a6 <HAL_DMA_Abort+0x276>
 8002442:	bf00      	nop
 8002444:	40020010 	.word	0x40020010
 8002448:	40020028 	.word	0x40020028
 800244c:	40020040 	.word	0x40020040
 8002450:	40020058 	.word	0x40020058
 8002454:	40020070 	.word	0x40020070
 8002458:	40020088 	.word	0x40020088
 800245c:	400200a0 	.word	0x400200a0
 8002460:	400200b8 	.word	0x400200b8
 8002464:	40020410 	.word	0x40020410
 8002468:	40020428 	.word	0x40020428
 800246c:	40020440 	.word	0x40020440
 8002470:	40020458 	.word	0x40020458
 8002474:	40020470 	.word	0x40020470
 8002478:	40020488 	.word	0x40020488
 800247c:	400204a0 	.word	0x400204a0
 8002480:	400204b8 	.word	0x400204b8
 8002484:	58025408 	.word	0x58025408
 8002488:	5802541c 	.word	0x5802541c
 800248c:	58025430 	.word	0x58025430
 8002490:	58025444 	.word	0x58025444
 8002494:	58025458 	.word	0x58025458
 8002498:	5802546c 	.word	0x5802546c
 800249c:	58025480 	.word	0x58025480
 80024a0:	58025494 	.word	0x58025494
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6d      	ldr	r2, [pc, #436]	; (8002674 <HAL_DMA_Abort+0x444>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d04a      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a6b      	ldr	r2, [pc, #428]	; (8002678 <HAL_DMA_Abort+0x448>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d045      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6a      	ldr	r2, [pc, #424]	; (800267c <HAL_DMA_Abort+0x44c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d040      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a68      	ldr	r2, [pc, #416]	; (8002680 <HAL_DMA_Abort+0x450>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d03b      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a67      	ldr	r2, [pc, #412]	; (8002684 <HAL_DMA_Abort+0x454>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d036      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_DMA_Abort+0x458>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d031      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a64      	ldr	r2, [pc, #400]	; (800268c <HAL_DMA_Abort+0x45c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d02c      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a62      	ldr	r2, [pc, #392]	; (8002690 <HAL_DMA_Abort+0x460>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d027      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a61      	ldr	r2, [pc, #388]	; (8002694 <HAL_DMA_Abort+0x464>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d022      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a5f      	ldr	r2, [pc, #380]	; (8002698 <HAL_DMA_Abort+0x468>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01d      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a5e      	ldr	r2, [pc, #376]	; (800269c <HAL_DMA_Abort+0x46c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d018      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a5c      	ldr	r2, [pc, #368]	; (80026a0 <HAL_DMA_Abort+0x470>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a5b      	ldr	r2, [pc, #364]	; (80026a4 <HAL_DMA_Abort+0x474>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00e      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a59      	ldr	r2, [pc, #356]	; (80026a8 <HAL_DMA_Abort+0x478>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d009      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_DMA_Abort+0x47c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d004      	beq.n	800255a <HAL_DMA_Abort+0x32a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <HAL_DMA_Abort+0x480>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d108      	bne.n	800256c <HAL_DMA_Abort+0x33c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e007      	b.n	800257c <HAL_DMA_Abort+0x34c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800257c:	e013      	b.n	80025a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800257e:	f7fe ff45 	bl	800140c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b05      	cmp	r3, #5
 800258a:	d90c      	bls.n	80025a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e12d      	b.n	8002802 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1e5      	bne.n	800257e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <HAL_DMA_Abort+0x444>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04a      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <HAL_DMA_Abort+0x448>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d045      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2c      	ldr	r2, [pc, #176]	; (800267c <HAL_DMA_Abort+0x44c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d040      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2a      	ldr	r2, [pc, #168]	; (8002680 <HAL_DMA_Abort+0x450>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d03b      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a29      	ldr	r2, [pc, #164]	; (8002684 <HAL_DMA_Abort+0x454>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d036      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a27      	ldr	r2, [pc, #156]	; (8002688 <HAL_DMA_Abort+0x458>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d031      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a26      	ldr	r2, [pc, #152]	; (800268c <HAL_DMA_Abort+0x45c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d02c      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a24      	ldr	r2, [pc, #144]	; (8002690 <HAL_DMA_Abort+0x460>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d027      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a23      	ldr	r2, [pc, #140]	; (8002694 <HAL_DMA_Abort+0x464>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <HAL_DMA_Abort+0x468>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01d      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a20      	ldr	r2, [pc, #128]	; (800269c <HAL_DMA_Abort+0x46c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <HAL_DMA_Abort+0x470>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_DMA_Abort+0x474>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <HAL_DMA_Abort+0x478>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <HAL_DMA_Abort+0x47c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_DMA_Abort+0x422>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <HAL_DMA_Abort+0x480>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_DMA_Abort+0x426>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_DMA_Abort+0x428>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d02b      	beq.n	80026b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	223f      	movs	r2, #63	; 0x3f
 800266c:	409a      	lsls	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	e02a      	b.n	80026ca <HAL_DMA_Abort+0x49a>
 8002674:	40020010 	.word	0x40020010
 8002678:	40020028 	.word	0x40020028
 800267c:	40020040 	.word	0x40020040
 8002680:	40020058 	.word	0x40020058
 8002684:	40020070 	.word	0x40020070
 8002688:	40020088 	.word	0x40020088
 800268c:	400200a0 	.word	0x400200a0
 8002690:	400200b8 	.word	0x400200b8
 8002694:	40020410 	.word	0x40020410
 8002698:	40020428 	.word	0x40020428
 800269c:	40020440 	.word	0x40020440
 80026a0:	40020458 	.word	0x40020458
 80026a4:	40020470 	.word	0x40020470
 80026a8:	40020488 	.word	0x40020488
 80026ac:	400204a0 	.word	0x400204a0
 80026b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2201      	movs	r2, #1
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_DMA_Abort+0x5dc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d072      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a4d      	ldr	r2, [pc, #308]	; (8002810 <HAL_DMA_Abort+0x5e0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d06d      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <HAL_DMA_Abort+0x5e4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d068      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a4a      	ldr	r2, [pc, #296]	; (8002818 <HAL_DMA_Abort+0x5e8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d063      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a49      	ldr	r2, [pc, #292]	; (800281c <HAL_DMA_Abort+0x5ec>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d05e      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a47      	ldr	r2, [pc, #284]	; (8002820 <HAL_DMA_Abort+0x5f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d059      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a46      	ldr	r2, [pc, #280]	; (8002824 <HAL_DMA_Abort+0x5f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d054      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a44      	ldr	r2, [pc, #272]	; (8002828 <HAL_DMA_Abort+0x5f8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d04f      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a43      	ldr	r2, [pc, #268]	; (800282c <HAL_DMA_Abort+0x5fc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d04a      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a41      	ldr	r2, [pc, #260]	; (8002830 <HAL_DMA_Abort+0x600>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d045      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a40      	ldr	r2, [pc, #256]	; (8002834 <HAL_DMA_Abort+0x604>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d040      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a3e      	ldr	r2, [pc, #248]	; (8002838 <HAL_DMA_Abort+0x608>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d03b      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a3d      	ldr	r2, [pc, #244]	; (800283c <HAL_DMA_Abort+0x60c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d036      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a3b      	ldr	r2, [pc, #236]	; (8002840 <HAL_DMA_Abort+0x610>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d031      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3a      	ldr	r2, [pc, #232]	; (8002844 <HAL_DMA_Abort+0x614>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d02c      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a38      	ldr	r2, [pc, #224]	; (8002848 <HAL_DMA_Abort+0x618>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d027      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a37      	ldr	r2, [pc, #220]	; (800284c <HAL_DMA_Abort+0x61c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d022      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a35      	ldr	r2, [pc, #212]	; (8002850 <HAL_DMA_Abort+0x620>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01d      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_DMA_Abort+0x624>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d018      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a32      	ldr	r2, [pc, #200]	; (8002858 <HAL_DMA_Abort+0x628>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a31      	ldr	r2, [pc, #196]	; (800285c <HAL_DMA_Abort+0x62c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00e      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2f      	ldr	r2, [pc, #188]	; (8002860 <HAL_DMA_Abort+0x630>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d009      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a2e      	ldr	r2, [pc, #184]	; (8002864 <HAL_DMA_Abort+0x634>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_DMA_Abort+0x58a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a2c      	ldr	r2, [pc, #176]	; (8002868 <HAL_DMA_Abort+0x638>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_DMA_Abort+0x58e>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_DMA_Abort+0x590>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00c      	beq.n	80027f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40020010 	.word	0x40020010
 8002810:	40020028 	.word	0x40020028
 8002814:	40020040 	.word	0x40020040
 8002818:	40020058 	.word	0x40020058
 800281c:	40020070 	.word	0x40020070
 8002820:	40020088 	.word	0x40020088
 8002824:	400200a0 	.word	0x400200a0
 8002828:	400200b8 	.word	0x400200b8
 800282c:	40020410 	.word	0x40020410
 8002830:	40020428 	.word	0x40020428
 8002834:	40020440 	.word	0x40020440
 8002838:	40020458 	.word	0x40020458
 800283c:	40020470 	.word	0x40020470
 8002840:	40020488 	.word	0x40020488
 8002844:	400204a0 	.word	0x400204a0
 8002848:	400204b8 	.word	0x400204b8
 800284c:	58025408 	.word	0x58025408
 8002850:	5802541c 	.word	0x5802541c
 8002854:	58025430 	.word	0x58025430
 8002858:	58025444 	.word	0x58025444
 800285c:	58025458 	.word	0x58025458
 8002860:	5802546c 	.word	0x5802546c
 8002864:	58025480 	.word	0x58025480
 8002868:	58025494 	.word	0x58025494

0800286c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e205      	b.n	8002c8a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d004      	beq.n	8002894 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e1fa      	b.n	8002c8a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a8c      	ldr	r2, [pc, #560]	; (8002acc <HAL_DMA_Abort_IT+0x260>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d04a      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a8b      	ldr	r2, [pc, #556]	; (8002ad0 <HAL_DMA_Abort_IT+0x264>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d045      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a89      	ldr	r2, [pc, #548]	; (8002ad4 <HAL_DMA_Abort_IT+0x268>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d040      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a88      	ldr	r2, [pc, #544]	; (8002ad8 <HAL_DMA_Abort_IT+0x26c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d03b      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a86      	ldr	r2, [pc, #536]	; (8002adc <HAL_DMA_Abort_IT+0x270>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d036      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a85      	ldr	r2, [pc, #532]	; (8002ae0 <HAL_DMA_Abort_IT+0x274>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d031      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a83      	ldr	r2, [pc, #524]	; (8002ae4 <HAL_DMA_Abort_IT+0x278>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d02c      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a82      	ldr	r2, [pc, #520]	; (8002ae8 <HAL_DMA_Abort_IT+0x27c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d027      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a80      	ldr	r2, [pc, #512]	; (8002aec <HAL_DMA_Abort_IT+0x280>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d022      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a7f      	ldr	r2, [pc, #508]	; (8002af0 <HAL_DMA_Abort_IT+0x284>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d01d      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a7d      	ldr	r2, [pc, #500]	; (8002af4 <HAL_DMA_Abort_IT+0x288>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d018      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7c      	ldr	r2, [pc, #496]	; (8002af8 <HAL_DMA_Abort_IT+0x28c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d013      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a7a      	ldr	r2, [pc, #488]	; (8002afc <HAL_DMA_Abort_IT+0x290>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00e      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a79      	ldr	r2, [pc, #484]	; (8002b00 <HAL_DMA_Abort_IT+0x294>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d009      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a77      	ldr	r2, [pc, #476]	; (8002b04 <HAL_DMA_Abort_IT+0x298>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_DMA_Abort_IT+0xc8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a76      	ldr	r2, [pc, #472]	; (8002b08 <HAL_DMA_Abort_IT+0x29c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d101      	bne.n	8002938 <HAL_DMA_Abort_IT+0xcc>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_DMA_Abort_IT+0xce>
 8002938:	2300      	movs	r3, #0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d065      	beq.n	8002a0a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2204      	movs	r2, #4
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a60      	ldr	r2, [pc, #384]	; (8002acc <HAL_DMA_Abort_IT+0x260>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04a      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5e      	ldr	r2, [pc, #376]	; (8002ad0 <HAL_DMA_Abort_IT+0x264>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d045      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <HAL_DMA_Abort_IT+0x268>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d040      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a5b      	ldr	r2, [pc, #364]	; (8002ad8 <HAL_DMA_Abort_IT+0x26c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d03b      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a5a      	ldr	r2, [pc, #360]	; (8002adc <HAL_DMA_Abort_IT+0x270>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d036      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_DMA_Abort_IT+0x274>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d031      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <HAL_DMA_Abort_IT+0x278>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d02c      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a55      	ldr	r2, [pc, #340]	; (8002ae8 <HAL_DMA_Abort_IT+0x27c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d027      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a54      	ldr	r2, [pc, #336]	; (8002aec <HAL_DMA_Abort_IT+0x280>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_DMA_Abort_IT+0x284>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01d      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <HAL_DMA_Abort_IT+0x288>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d018      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <HAL_DMA_Abort_IT+0x28c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <HAL_DMA_Abort_IT+0x290>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00e      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4c      	ldr	r2, [pc, #304]	; (8002b00 <HAL_DMA_Abort_IT+0x294>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4b      	ldr	r2, [pc, #300]	; (8002b04 <HAL_DMA_Abort_IT+0x298>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x17a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a49      	ldr	r2, [pc, #292]	; (8002b08 <HAL_DMA_Abort_IT+0x29c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d108      	bne.n	80029f8 <HAL_DMA_Abort_IT+0x18c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e147      	b.n	8002c88 <HAL_DMA_Abort_IT+0x41c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e13e      	b.n	8002c88 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 020e 	bic.w	r2, r2, #14
 8002a18:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <HAL_DMA_Abort_IT+0x260>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d04a      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a29      	ldr	r2, [pc, #164]	; (8002ad0 <HAL_DMA_Abort_IT+0x264>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d045      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <HAL_DMA_Abort_IT+0x268>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d040      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <HAL_DMA_Abort_IT+0x26c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d03b      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a25      	ldr	r2, [pc, #148]	; (8002adc <HAL_DMA_Abort_IT+0x270>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d036      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_DMA_Abort_IT+0x274>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d031      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <HAL_DMA_Abort_IT+0x278>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d02c      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <HAL_DMA_Abort_IT+0x27c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d027      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_DMA_Abort_IT+0x280>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <HAL_DMA_Abort_IT+0x284>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01d      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <HAL_DMA_Abort_IT+0x288>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d018      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_DMA_Abort_IT+0x28c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a19      	ldr	r2, [pc, #100]	; (8002afc <HAL_DMA_Abort_IT+0x290>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <HAL_DMA_Abort_IT+0x294>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_DMA_Abort_IT+0x298>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_DMA_Abort_IT+0x24e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_DMA_Abort_IT+0x29c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d128      	bne.n	8002b0c <HAL_DMA_Abort_IT+0x2a0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e027      	b.n	8002b1c <HAL_DMA_Abort_IT+0x2b0>
 8002acc:	40020010 	.word	0x40020010
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020040 	.word	0x40020040
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	40020070 	.word	0x40020070
 8002ae0:	40020088 	.word	0x40020088
 8002ae4:	400200a0 	.word	0x400200a0
 8002ae8:	400200b8 	.word	0x400200b8
 8002aec:	40020410 	.word	0x40020410
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40020440 	.word	0x40020440
 8002af8:	40020458 	.word	0x40020458
 8002afc:	40020470 	.word	0x40020470
 8002b00:	40020488 	.word	0x40020488
 8002b04:	400204a0 	.word	0x400204a0
 8002b08:	400204b8 	.word	0x400204b8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5c      	ldr	r2, [pc, #368]	; (8002c94 <HAL_DMA_Abort_IT+0x428>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d072      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <HAL_DMA_Abort_IT+0x42c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d06d      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a59      	ldr	r2, [pc, #356]	; (8002c9c <HAL_DMA_Abort_IT+0x430>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d068      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_DMA_Abort_IT+0x434>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d063      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <HAL_DMA_Abort_IT+0x438>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d05e      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <HAL_DMA_Abort_IT+0x43c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d059      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a53      	ldr	r2, [pc, #332]	; (8002cac <HAL_DMA_Abort_IT+0x440>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d054      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_DMA_Abort_IT+0x444>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04f      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a50      	ldr	r2, [pc, #320]	; (8002cb4 <HAL_DMA_Abort_IT+0x448>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d04a      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4f      	ldr	r2, [pc, #316]	; (8002cb8 <HAL_DMA_Abort_IT+0x44c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d045      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <HAL_DMA_Abort_IT+0x450>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d040      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4c      	ldr	r2, [pc, #304]	; (8002cc0 <HAL_DMA_Abort_IT+0x454>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d03b      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a4a      	ldr	r2, [pc, #296]	; (8002cc4 <HAL_DMA_Abort_IT+0x458>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d036      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a49      	ldr	r2, [pc, #292]	; (8002cc8 <HAL_DMA_Abort_IT+0x45c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d031      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a47      	ldr	r2, [pc, #284]	; (8002ccc <HAL_DMA_Abort_IT+0x460>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02c      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a46      	ldr	r2, [pc, #280]	; (8002cd0 <HAL_DMA_Abort_IT+0x464>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d027      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a44      	ldr	r2, [pc, #272]	; (8002cd4 <HAL_DMA_Abort_IT+0x468>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a43      	ldr	r2, [pc, #268]	; (8002cd8 <HAL_DMA_Abort_IT+0x46c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01d      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a41      	ldr	r2, [pc, #260]	; (8002cdc <HAL_DMA_Abort_IT+0x470>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d018      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a40      	ldr	r2, [pc, #256]	; (8002ce0 <HAL_DMA_Abort_IT+0x474>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a3e      	ldr	r2, [pc, #248]	; (8002ce4 <HAL_DMA_Abort_IT+0x478>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a3d      	ldr	r2, [pc, #244]	; (8002ce8 <HAL_DMA_Abort_IT+0x47c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3b      	ldr	r2, [pc, #236]	; (8002cec <HAL_DMA_Abort_IT+0x480>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x3a0>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a3a      	ldr	r2, [pc, #232]	; (8002cf0 <HAL_DMA_Abort_IT+0x484>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_DMA_Abort_IT+0x3a4>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_Abort_IT+0x3a6>
 8002c10:	2300      	movs	r3, #0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d028      	beq.n	8002c68 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c24:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2201      	movs	r2, #1
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c44:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c5c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40020010 	.word	0x40020010
 8002c98:	40020028 	.word	0x40020028
 8002c9c:	40020040 	.word	0x40020040
 8002ca0:	40020058 	.word	0x40020058
 8002ca4:	40020070 	.word	0x40020070
 8002ca8:	40020088 	.word	0x40020088
 8002cac:	400200a0 	.word	0x400200a0
 8002cb0:	400200b8 	.word	0x400200b8
 8002cb4:	40020410 	.word	0x40020410
 8002cb8:	40020428 	.word	0x40020428
 8002cbc:	40020440 	.word	0x40020440
 8002cc0:	40020458 	.word	0x40020458
 8002cc4:	40020470 	.word	0x40020470
 8002cc8:	40020488 	.word	0x40020488
 8002ccc:	400204a0 	.word	0x400204a0
 8002cd0:	400204b8 	.word	0x400204b8
 8002cd4:	58025408 	.word	0x58025408
 8002cd8:	5802541c 	.word	0x5802541c
 8002cdc:	58025430 	.word	0x58025430
 8002ce0:	58025444 	.word	0x58025444
 8002ce4:	58025458 	.word	0x58025458
 8002ce8:	5802546c 	.word	0x5802546c
 8002cec:	58025480 	.word	0x58025480
 8002cf0:	58025494 	.word	0x58025494

08002cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d00:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_DMA_IRQHandler+0x1ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a67      	ldr	r2, [pc, #412]	; (8002ea4 <HAL_DMA_IRQHandler+0x1b0>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	0a9b      	lsrs	r3, r3, #10
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a5f      	ldr	r2, [pc, #380]	; (8002ea8 <HAL_DMA_IRQHandler+0x1b4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d04a      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5d      	ldr	r2, [pc, #372]	; (8002eac <HAL_DMA_IRQHandler+0x1b8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d045      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5c      	ldr	r2, [pc, #368]	; (8002eb0 <HAL_DMA_IRQHandler+0x1bc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d040      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a5a      	ldr	r2, [pc, #360]	; (8002eb4 <HAL_DMA_IRQHandler+0x1c0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d03b      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a59      	ldr	r2, [pc, #356]	; (8002eb8 <HAL_DMA_IRQHandler+0x1c4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d036      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a57      	ldr	r2, [pc, #348]	; (8002ebc <HAL_DMA_IRQHandler+0x1c8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d031      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a56      	ldr	r2, [pc, #344]	; (8002ec0 <HAL_DMA_IRQHandler+0x1cc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d02c      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a54      	ldr	r2, [pc, #336]	; (8002ec4 <HAL_DMA_IRQHandler+0x1d0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d027      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a53      	ldr	r2, [pc, #332]	; (8002ec8 <HAL_DMA_IRQHandler+0x1d4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a51      	ldr	r2, [pc, #324]	; (8002ecc <HAL_DMA_IRQHandler+0x1d8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a50      	ldr	r2, [pc, #320]	; (8002ed0 <HAL_DMA_IRQHandler+0x1dc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <HAL_DMA_IRQHandler+0x1e0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a4d      	ldr	r2, [pc, #308]	; (8002ed8 <HAL_DMA_IRQHandler+0x1e4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <HAL_DMA_IRQHandler+0x1e8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a4a      	ldr	r2, [pc, #296]	; (8002ee0 <HAL_DMA_IRQHandler+0x1ec>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xd2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a48      	ldr	r2, [pc, #288]	; (8002ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_DMA_IRQHandler+0xd6>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_IRQHandler+0xd8>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 842b 	beq.w	8003628 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2208      	movs	r2, #8
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80a2 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2e      	ldr	r2, [pc, #184]	; (8002ea8 <HAL_DMA_IRQHandler+0x1b4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d04a      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2d      	ldr	r2, [pc, #180]	; (8002eac <HAL_DMA_IRQHandler+0x1b8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d045      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <HAL_DMA_IRQHandler+0x1bc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d040      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_DMA_IRQHandler+0x1c0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d03b      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_DMA_IRQHandler+0x1c4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d036      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_DMA_IRQHandler+0x1c8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d031      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <HAL_DMA_IRQHandler+0x1cc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d02c      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <HAL_DMA_IRQHandler+0x1d0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d027      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_DMA_IRQHandler+0x1d4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d022      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <HAL_DMA_IRQHandler+0x1d8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d01d      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <HAL_DMA_IRQHandler+0x1dc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d018      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_DMA_IRQHandler+0x1e0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_DMA_IRQHandler+0x1e4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00e      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <HAL_DMA_IRQHandler+0x1e8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_DMA_IRQHandler+0x1ec>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x194>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d12f      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x1f4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	2300      	moveq	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e02e      	b.n	8002efc <HAL_DMA_IRQHandler+0x208>
 8002e9e:	bf00      	nop
 8002ea0:	240000b8 	.word	0x240000b8
 8002ea4:	1b4e81b5 	.word	0x1b4e81b5
 8002ea8:	40020010 	.word	0x40020010
 8002eac:	40020028 	.word	0x40020028
 8002eb0:	40020040 	.word	0x40020040
 8002eb4:	40020058 	.word	0x40020058
 8002eb8:	40020070 	.word	0x40020070
 8002ebc:	40020088 	.word	0x40020088
 8002ec0:	400200a0 	.word	0x400200a0
 8002ec4:	400200b8 	.word	0x400200b8
 8002ec8:	40020410 	.word	0x40020410
 8002ecc:	40020428 	.word	0x40020428
 8002ed0:	40020440 	.word	0x40020440
 8002ed4:	40020458 	.word	0x40020458
 8002ed8:	40020470 	.word	0x40020470
 8002edc:	40020488 	.word	0x40020488
 8002ee0:	400204a0 	.word	0x400204a0
 8002ee4:	400204b8 	.word	0x400204b8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2208      	movs	r2, #8
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d06e      	beq.n	8003020 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a69      	ldr	r2, [pc, #420]	; (80030ec <HAL_DMA_IRQHandler+0x3f8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04a      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a67      	ldr	r2, [pc, #412]	; (80030f0 <HAL_DMA_IRQHandler+0x3fc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d045      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a66      	ldr	r2, [pc, #408]	; (80030f4 <HAL_DMA_IRQHandler+0x400>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d040      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a64      	ldr	r2, [pc, #400]	; (80030f8 <HAL_DMA_IRQHandler+0x404>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d03b      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a63      	ldr	r2, [pc, #396]	; (80030fc <HAL_DMA_IRQHandler+0x408>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d036      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a61      	ldr	r2, [pc, #388]	; (8003100 <HAL_DMA_IRQHandler+0x40c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d031      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a60      	ldr	r2, [pc, #384]	; (8003104 <HAL_DMA_IRQHandler+0x410>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d02c      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <HAL_DMA_IRQHandler+0x414>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d027      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5d      	ldr	r2, [pc, #372]	; (800310c <HAL_DMA_IRQHandler+0x418>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5b      	ldr	r2, [pc, #364]	; (8003110 <HAL_DMA_IRQHandler+0x41c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5a      	ldr	r2, [pc, #360]	; (8003114 <HAL_DMA_IRQHandler+0x420>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d018      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a58      	ldr	r2, [pc, #352]	; (8003118 <HAL_DMA_IRQHandler+0x424>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a57      	ldr	r2, [pc, #348]	; (800311c <HAL_DMA_IRQHandler+0x428>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a55      	ldr	r2, [pc, #340]	; (8003120 <HAL_DMA_IRQHandler+0x42c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a54      	ldr	r2, [pc, #336]	; (8003124 <HAL_DMA_IRQHandler+0x430>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x2ee>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_DMA_IRQHandler+0x434>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x304>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e003      	b.n	8003000 <HAL_DMA_IRQHandler+0x30c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2300      	movs	r3, #0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2201      	movs	r2, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f043 0202 	orr.w	r2, r3, #2
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2204      	movs	r2, #4
 800302a:	409a      	lsls	r2, r3
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 808f 	beq.w	8003154 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2c      	ldr	r2, [pc, #176]	; (80030ec <HAL_DMA_IRQHandler+0x3f8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04a      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <HAL_DMA_IRQHandler+0x3fc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d045      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a29      	ldr	r2, [pc, #164]	; (80030f4 <HAL_DMA_IRQHandler+0x400>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_DMA_IRQHandler+0x404>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03b      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_DMA_IRQHandler+0x408>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <HAL_DMA_IRQHandler+0x40c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a23      	ldr	r2, [pc, #140]	; (8003104 <HAL_DMA_IRQHandler+0x410>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d02c      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_DMA_IRQHandler+0x414>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d027      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a20      	ldr	r2, [pc, #128]	; (800310c <HAL_DMA_IRQHandler+0x418>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_DMA_IRQHandler+0x41c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <HAL_DMA_IRQHandler+0x420>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_DMA_IRQHandler+0x424>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1a      	ldr	r2, [pc, #104]	; (800311c <HAL_DMA_IRQHandler+0x428>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_DMA_IRQHandler+0x42c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a17      	ldr	r2, [pc, #92]	; (8003124 <HAL_DMA_IRQHandler+0x430>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x3e2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <HAL_DMA_IRQHandler+0x434>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d12a      	bne.n	800312c <HAL_DMA_IRQHandler+0x438>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e023      	b.n	8003134 <HAL_DMA_IRQHandler+0x440>
 80030ec:	40020010 	.word	0x40020010
 80030f0:	40020028 	.word	0x40020028
 80030f4:	40020040 	.word	0x40020040
 80030f8:	40020058 	.word	0x40020058
 80030fc:	40020070 	.word	0x40020070
 8003100:	40020088 	.word	0x40020088
 8003104:	400200a0 	.word	0x400200a0
 8003108:	400200b8 	.word	0x400200b8
 800310c:	40020410 	.word	0x40020410
 8003110:	40020428 	.word	0x40020428
 8003114:	40020440 	.word	0x40020440
 8003118:	40020458 	.word	0x40020458
 800311c:	40020470 	.word	0x40020470
 8003120:	40020488 	.word	0x40020488
 8003124:	400204a0 	.word	0x400204a0
 8003128:	400204b8 	.word	0x400204b8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2300      	movs	r3, #0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00d      	beq.n	8003154 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2204      	movs	r2, #4
 8003142:	409a      	lsls	r2, r3
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2210      	movs	r2, #16
 800315e:	409a      	lsls	r2, r3
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80a6 	beq.w	80032b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a85      	ldr	r2, [pc, #532]	; (8003384 <HAL_DMA_IRQHandler+0x690>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d04a      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a83      	ldr	r2, [pc, #524]	; (8003388 <HAL_DMA_IRQHandler+0x694>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d045      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a82      	ldr	r2, [pc, #520]	; (800338c <HAL_DMA_IRQHandler+0x698>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d040      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a80      	ldr	r2, [pc, #512]	; (8003390 <HAL_DMA_IRQHandler+0x69c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d03b      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7f      	ldr	r2, [pc, #508]	; (8003394 <HAL_DMA_IRQHandler+0x6a0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d036      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a7d      	ldr	r2, [pc, #500]	; (8003398 <HAL_DMA_IRQHandler+0x6a4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d031      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7c      	ldr	r2, [pc, #496]	; (800339c <HAL_DMA_IRQHandler+0x6a8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d02c      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a7a      	ldr	r2, [pc, #488]	; (80033a0 <HAL_DMA_IRQHandler+0x6ac>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d027      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a79      	ldr	r2, [pc, #484]	; (80033a4 <HAL_DMA_IRQHandler+0x6b0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d022      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a77      	ldr	r2, [pc, #476]	; (80033a8 <HAL_DMA_IRQHandler+0x6b4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01d      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a76      	ldr	r2, [pc, #472]	; (80033ac <HAL_DMA_IRQHandler+0x6b8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d018      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a74      	ldr	r2, [pc, #464]	; (80033b0 <HAL_DMA_IRQHandler+0x6bc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a73      	ldr	r2, [pc, #460]	; (80033b4 <HAL_DMA_IRQHandler+0x6c0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00e      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a71      	ldr	r2, [pc, #452]	; (80033b8 <HAL_DMA_IRQHandler+0x6c4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d009      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a70      	ldr	r2, [pc, #448]	; (80033bc <HAL_DMA_IRQHandler+0x6c8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_DMA_IRQHandler+0x516>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6e      	ldr	r2, [pc, #440]	; (80033c0 <HAL_DMA_IRQHandler+0x6cc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10a      	bne.n	8003220 <HAL_DMA_IRQHandler+0x52c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e009      	b.n	8003234 <HAL_DMA_IRQHandler+0x540>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	bf14      	ite	ne
 800322e:	2301      	movne	r3, #1
 8003230:	2300      	moveq	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d03e      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	2210      	movs	r2, #16
 8003242:	409a      	lsls	r2, r3
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d018      	beq.n	8003288 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d108      	bne.n	8003276 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d024      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e01f      	b.n	80032b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01b      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
 8003286:	e016      	b.n	80032b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0208 	bic.w	r2, r2, #8
 80032a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2220      	movs	r2, #32
 80032c0:	409a      	lsls	r2, r3
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8110 	beq.w	80034ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <HAL_DMA_IRQHandler+0x690>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d04a      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <HAL_DMA_IRQHandler+0x694>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d045      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a29      	ldr	r2, [pc, #164]	; (800338c <HAL_DMA_IRQHandler+0x698>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d040      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a28      	ldr	r2, [pc, #160]	; (8003390 <HAL_DMA_IRQHandler+0x69c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d03b      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a26      	ldr	r2, [pc, #152]	; (8003394 <HAL_DMA_IRQHandler+0x6a0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d036      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a25      	ldr	r2, [pc, #148]	; (8003398 <HAL_DMA_IRQHandler+0x6a4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d031      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a23      	ldr	r2, [pc, #140]	; (800339c <HAL_DMA_IRQHandler+0x6a8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02c      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <HAL_DMA_IRQHandler+0x6ac>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d027      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a20      	ldr	r2, [pc, #128]	; (80033a4 <HAL_DMA_IRQHandler+0x6b0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d022      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <HAL_DMA_IRQHandler+0x6b4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d01d      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_DMA_IRQHandler+0x6b8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <HAL_DMA_IRQHandler+0x6bc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_DMA_IRQHandler+0x6c0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_DMA_IRQHandler+0x6c4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_DMA_IRQHandler+0x6c8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_DMA_IRQHandler+0x678>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <HAL_DMA_IRQHandler+0x6cc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d12b      	bne.n	80033c4 <HAL_DMA_IRQHandler+0x6d0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	e02a      	b.n	80033d8 <HAL_DMA_IRQHandler+0x6e4>
 8003382:	bf00      	nop
 8003384:	40020010 	.word	0x40020010
 8003388:	40020028 	.word	0x40020028
 800338c:	40020040 	.word	0x40020040
 8003390:	40020058 	.word	0x40020058
 8003394:	40020070 	.word	0x40020070
 8003398:	40020088 	.word	0x40020088
 800339c:	400200a0 	.word	0x400200a0
 80033a0:	400200b8 	.word	0x400200b8
 80033a4:	40020410 	.word	0x40020410
 80033a8:	40020428 	.word	0x40020428
 80033ac:	40020440 	.word	0x40020440
 80033b0:	40020458 	.word	0x40020458
 80033b4:	40020470 	.word	0x40020470
 80033b8:	40020488 	.word	0x40020488
 80033bc:	400204a0 	.word	0x400204a0
 80033c0:	400204b8 	.word	0x400204b8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bf14      	ite	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	2300      	moveq	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8087 	beq.w	80034ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2220      	movs	r2, #32
 80033e8:	409a      	lsls	r2, r3
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d139      	bne.n	800346e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0216 	bic.w	r2, r2, #22
 8003408:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003418:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d103      	bne.n	800342a <HAL_DMA_IRQHandler+0x736>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0208 	bic.w	r2, r2, #8
 8003438:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	223f      	movs	r2, #63	; 0x3f
 8003444:	409a      	lsls	r2, r3
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 834a 	beq.w	8003af8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
          }
          return;
 800346c:	e344      	b.n	8003af8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d018      	beq.n	80034ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	2b00      	cmp	r3, #0
 8003490:	d02c      	beq.n	80034ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
 800349a:	e027      	b.n	80034ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d023      	beq.n	80034ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
 80034ac:	e01e      	b.n	80034ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10f      	bne.n	80034dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0210 	bic.w	r2, r2, #16
 80034ca:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8306 	beq.w	8003b02 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8088 	beq.w	8003614 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2204      	movs	r2, #4
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a7a      	ldr	r2, [pc, #488]	; (80036fc <HAL_DMA_IRQHandler+0xa08>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d04a      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a79      	ldr	r2, [pc, #484]	; (8003700 <HAL_DMA_IRQHandler+0xa0c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d045      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a77      	ldr	r2, [pc, #476]	; (8003704 <HAL_DMA_IRQHandler+0xa10>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d040      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a76      	ldr	r2, [pc, #472]	; (8003708 <HAL_DMA_IRQHandler+0xa14>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d03b      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a74      	ldr	r2, [pc, #464]	; (800370c <HAL_DMA_IRQHandler+0xa18>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d036      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a73      	ldr	r2, [pc, #460]	; (8003710 <HAL_DMA_IRQHandler+0xa1c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d031      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a71      	ldr	r2, [pc, #452]	; (8003714 <HAL_DMA_IRQHandler+0xa20>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02c      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a70      	ldr	r2, [pc, #448]	; (8003718 <HAL_DMA_IRQHandler+0xa24>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d027      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a6e      	ldr	r2, [pc, #440]	; (800371c <HAL_DMA_IRQHandler+0xa28>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d022      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6d      	ldr	r2, [pc, #436]	; (8003720 <HAL_DMA_IRQHandler+0xa2c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d01d      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6b      	ldr	r2, [pc, #428]	; (8003724 <HAL_DMA_IRQHandler+0xa30>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d018      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6a      	ldr	r2, [pc, #424]	; (8003728 <HAL_DMA_IRQHandler+0xa34>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a68      	ldr	r2, [pc, #416]	; (800372c <HAL_DMA_IRQHandler+0xa38>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00e      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a67      	ldr	r2, [pc, #412]	; (8003730 <HAL_DMA_IRQHandler+0xa3c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a65      	ldr	r2, [pc, #404]	; (8003734 <HAL_DMA_IRQHandler+0xa40>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_DMA_IRQHandler+0x8b8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a64      	ldr	r2, [pc, #400]	; (8003738 <HAL_DMA_IRQHandler+0xa44>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d108      	bne.n	80035be <HAL_DMA_IRQHandler+0x8ca>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e007      	b.n	80035ce <HAL_DMA_IRQHandler+0x8da>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3301      	adds	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d307      	bcc.n	80035ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f2      	bne.n	80035ce <HAL_DMA_IRQHandler+0x8da>
 80035e8:	e000      	b.n	80035ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035ea:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2203      	movs	r2, #3
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800360a:	e003      	b.n	8003614 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8272 	beq.w	8003b02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
 8003626:	e26c      	b.n	8003b02 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a43      	ldr	r2, [pc, #268]	; (800373c <HAL_DMA_IRQHandler+0xa48>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_IRQHandler+0x984>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a42      	ldr	r2, [pc, #264]	; (8003740 <HAL_DMA_IRQHandler+0xa4c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_IRQHandler+0x984>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a40      	ldr	r2, [pc, #256]	; (8003744 <HAL_DMA_IRQHandler+0xa50>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_IRQHandler+0x984>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3f      	ldr	r2, [pc, #252]	; (8003748 <HAL_DMA_IRQHandler+0xa54>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_IRQHandler+0x984>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a3d      	ldr	r2, [pc, #244]	; (800374c <HAL_DMA_IRQHandler+0xa58>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_IRQHandler+0x984>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3c      	ldr	r2, [pc, #240]	; (8003750 <HAL_DMA_IRQHandler+0xa5c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_IRQHandler+0x984>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a3a      	ldr	r2, [pc, #232]	; (8003754 <HAL_DMA_IRQHandler+0xa60>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_IRQHandler+0x984>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a39      	ldr	r2, [pc, #228]	; (8003758 <HAL_DMA_IRQHandler+0xa64>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_DMA_IRQHandler+0x988>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_DMA_IRQHandler+0x98a>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 823f 	beq.w	8003b02 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	2204      	movs	r2, #4
 8003696:	409a      	lsls	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80cd 	beq.w	800383c <HAL_DMA_IRQHandler+0xb48>
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80c7 	beq.w	800383c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2204      	movs	r2, #4
 80036b8:	409a      	lsls	r2, r3
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d049      	beq.n	800375c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8210 	beq.w	8003afc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036e4:	e20a      	b.n	8003afc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8206 	beq.w	8003afc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036f8:	e200      	b.n	8003afc <HAL_DMA_IRQHandler+0xe08>
 80036fa:	bf00      	nop
 80036fc:	40020010 	.word	0x40020010
 8003700:	40020028 	.word	0x40020028
 8003704:	40020040 	.word	0x40020040
 8003708:	40020058 	.word	0x40020058
 800370c:	40020070 	.word	0x40020070
 8003710:	40020088 	.word	0x40020088
 8003714:	400200a0 	.word	0x400200a0
 8003718:	400200b8 	.word	0x400200b8
 800371c:	40020410 	.word	0x40020410
 8003720:	40020428 	.word	0x40020428
 8003724:	40020440 	.word	0x40020440
 8003728:	40020458 	.word	0x40020458
 800372c:	40020470 	.word	0x40020470
 8003730:	40020488 	.word	0x40020488
 8003734:	400204a0 	.word	0x400204a0
 8003738:	400204b8 	.word	0x400204b8
 800373c:	58025408 	.word	0x58025408
 8003740:	5802541c 	.word	0x5802541c
 8003744:	58025430 	.word	0x58025430
 8003748:	58025444 	.word	0x58025444
 800374c:	58025458 	.word	0x58025458
 8003750:	5802546c 	.word	0x5802546c
 8003754:	58025480 	.word	0x58025480
 8003758:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d160      	bne.n	8003828 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a8c      	ldr	r2, [pc, #560]	; (800399c <HAL_DMA_IRQHandler+0xca8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d04a      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a8a      	ldr	r2, [pc, #552]	; (80039a0 <HAL_DMA_IRQHandler+0xcac>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d045      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a89      	ldr	r2, [pc, #548]	; (80039a4 <HAL_DMA_IRQHandler+0xcb0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d040      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a87      	ldr	r2, [pc, #540]	; (80039a8 <HAL_DMA_IRQHandler+0xcb4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d03b      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a86      	ldr	r2, [pc, #536]	; (80039ac <HAL_DMA_IRQHandler+0xcb8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d036      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a84      	ldr	r2, [pc, #528]	; (80039b0 <HAL_DMA_IRQHandler+0xcbc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d031      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a83      	ldr	r2, [pc, #524]	; (80039b4 <HAL_DMA_IRQHandler+0xcc0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d02c      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a81      	ldr	r2, [pc, #516]	; (80039b8 <HAL_DMA_IRQHandler+0xcc4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d027      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a80      	ldr	r2, [pc, #512]	; (80039bc <HAL_DMA_IRQHandler+0xcc8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d022      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a7e      	ldr	r2, [pc, #504]	; (80039c0 <HAL_DMA_IRQHandler+0xccc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01d      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a7d      	ldr	r2, [pc, #500]	; (80039c4 <HAL_DMA_IRQHandler+0xcd0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d018      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a7b      	ldr	r2, [pc, #492]	; (80039c8 <HAL_DMA_IRQHandler+0xcd4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7a      	ldr	r2, [pc, #488]	; (80039cc <HAL_DMA_IRQHandler+0xcd8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a78      	ldr	r2, [pc, #480]	; (80039d0 <HAL_DMA_IRQHandler+0xcdc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a77      	ldr	r2, [pc, #476]	; (80039d4 <HAL_DMA_IRQHandler+0xce0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_DMA_IRQHandler+0xb12>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a75      	ldr	r2, [pc, #468]	; (80039d8 <HAL_DMA_IRQHandler+0xce4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d108      	bne.n	8003818 <HAL_DMA_IRQHandler+0xb24>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0208 	bic.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e007      	b.n	8003828 <HAL_DMA_IRQHandler+0xb34>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0204 	bic.w	r2, r2, #4
 8003826:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8165 	beq.w	8003afc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800383a:	e15f      	b.n	8003afc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2202      	movs	r2, #2
 8003846:	409a      	lsls	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80c5 	beq.w	80039dc <HAL_DMA_IRQHandler+0xce8>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80bf 	beq.w	80039dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2202      	movs	r2, #2
 8003868:	409a      	lsls	r2, r3
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d018      	beq.n	80038aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 813a 	beq.w	8003b00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003894:	e134      	b.n	8003b00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8130 	beq.w	8003b00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038a8:	e12a      	b.n	8003b00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d168      	bne.n	8003986 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a38      	ldr	r2, [pc, #224]	; (800399c <HAL_DMA_IRQHandler+0xca8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d04a      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a37      	ldr	r2, [pc, #220]	; (80039a0 <HAL_DMA_IRQHandler+0xcac>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d045      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a35      	ldr	r2, [pc, #212]	; (80039a4 <HAL_DMA_IRQHandler+0xcb0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d040      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a34      	ldr	r2, [pc, #208]	; (80039a8 <HAL_DMA_IRQHandler+0xcb4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d03b      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a32      	ldr	r2, [pc, #200]	; (80039ac <HAL_DMA_IRQHandler+0xcb8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d036      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a31      	ldr	r2, [pc, #196]	; (80039b0 <HAL_DMA_IRQHandler+0xcbc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d031      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2f      	ldr	r2, [pc, #188]	; (80039b4 <HAL_DMA_IRQHandler+0xcc0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d02c      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2e      	ldr	r2, [pc, #184]	; (80039b8 <HAL_DMA_IRQHandler+0xcc4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d027      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <HAL_DMA_IRQHandler+0xcc8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d022      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <HAL_DMA_IRQHandler+0xccc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d01d      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a29      	ldr	r2, [pc, #164]	; (80039c4 <HAL_DMA_IRQHandler+0xcd0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d018      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <HAL_DMA_IRQHandler+0xcd4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d013      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a26      	ldr	r2, [pc, #152]	; (80039cc <HAL_DMA_IRQHandler+0xcd8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00e      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a25      	ldr	r2, [pc, #148]	; (80039d0 <HAL_DMA_IRQHandler+0xcdc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <HAL_DMA_IRQHandler+0xce0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d004      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc60>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <HAL_DMA_IRQHandler+0xce4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d108      	bne.n	8003966 <HAL_DMA_IRQHandler+0xc72>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0214 	bic.w	r2, r2, #20
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e007      	b.n	8003976 <HAL_DMA_IRQHandler+0xc82>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 020a 	bic.w	r2, r2, #10
 8003974:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80b8 	beq.w	8003b00 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003998:	e0b2      	b.n	8003b00 <HAL_DMA_IRQHandler+0xe0c>
 800399a:	bf00      	nop
 800399c:	40020010 	.word	0x40020010
 80039a0:	40020028 	.word	0x40020028
 80039a4:	40020040 	.word	0x40020040
 80039a8:	40020058 	.word	0x40020058
 80039ac:	40020070 	.word	0x40020070
 80039b0:	40020088 	.word	0x40020088
 80039b4:	400200a0 	.word	0x400200a0
 80039b8:	400200b8 	.word	0x400200b8
 80039bc:	40020410 	.word	0x40020410
 80039c0:	40020428 	.word	0x40020428
 80039c4:	40020440 	.word	0x40020440
 80039c8:	40020458 	.word	0x40020458
 80039cc:	40020470 	.word	0x40020470
 80039d0:	40020488 	.word	0x40020488
 80039d4:	400204a0 	.word	0x400204a0
 80039d8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2208      	movs	r2, #8
 80039e6:	409a      	lsls	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8088 	beq.w	8003b02 <HAL_DMA_IRQHandler+0xe0e>
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8082 	beq.w	8003b02 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a41      	ldr	r2, [pc, #260]	; (8003b08 <HAL_DMA_IRQHandler+0xe14>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d04a      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3f      	ldr	r2, [pc, #252]	; (8003b0c <HAL_DMA_IRQHandler+0xe18>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d045      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a3e      	ldr	r2, [pc, #248]	; (8003b10 <HAL_DMA_IRQHandler+0xe1c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d040      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <HAL_DMA_IRQHandler+0xe20>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d03b      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a3b      	ldr	r2, [pc, #236]	; (8003b18 <HAL_DMA_IRQHandler+0xe24>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d036      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a39      	ldr	r2, [pc, #228]	; (8003b1c <HAL_DMA_IRQHandler+0xe28>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d031      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a38      	ldr	r2, [pc, #224]	; (8003b20 <HAL_DMA_IRQHandler+0xe2c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d02c      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a36      	ldr	r2, [pc, #216]	; (8003b24 <HAL_DMA_IRQHandler+0xe30>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d027      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a35      	ldr	r2, [pc, #212]	; (8003b28 <HAL_DMA_IRQHandler+0xe34>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a33      	ldr	r2, [pc, #204]	; (8003b2c <HAL_DMA_IRQHandler+0xe38>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a32      	ldr	r2, [pc, #200]	; (8003b30 <HAL_DMA_IRQHandler+0xe3c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a30      	ldr	r2, [pc, #192]	; (8003b34 <HAL_DMA_IRQHandler+0xe40>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2f      	ldr	r2, [pc, #188]	; (8003b38 <HAL_DMA_IRQHandler+0xe44>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2d      	ldr	r2, [pc, #180]	; (8003b3c <HAL_DMA_IRQHandler+0xe48>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2c      	ldr	r2, [pc, #176]	; (8003b40 <HAL_DMA_IRQHandler+0xe4c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdaa>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <HAL_DMA_IRQHandler+0xe50>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0xdbc>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 021c 	bic.w	r2, r2, #28
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e007      	b.n	8003ac0 <HAL_DMA_IRQHandler+0xdcc>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020e 	bic.w	r2, r2, #14
 8003abe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	2201      	movs	r2, #1
 8003aca:	409a      	lsls	r2, r3
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4798      	blx	r3
 8003af6:	e004      	b.n	8003b02 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003af8:	bf00      	nop
 8003afa:	e002      	b.n	8003b02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003afc:	bf00      	nop
 8003afe:	e000      	b.n	8003b02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b02:	3728      	adds	r7, #40	; 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40020010 	.word	0x40020010
 8003b0c:	40020028 	.word	0x40020028
 8003b10:	40020040 	.word	0x40020040
 8003b14:	40020058 	.word	0x40020058
 8003b18:	40020070 	.word	0x40020070
 8003b1c:	40020088 	.word	0x40020088
 8003b20:	400200a0 	.word	0x400200a0
 8003b24:	400200b8 	.word	0x400200b8
 8003b28:	40020410 	.word	0x40020410
 8003b2c:	40020428 	.word	0x40020428
 8003b30:	40020440 	.word	0x40020440
 8003b34:	40020458 	.word	0x40020458
 8003b38:	40020470 	.word	0x40020470
 8003b3c:	40020488 	.word	0x40020488
 8003b40:	400204a0 	.word	0x400204a0
 8003b44:	400204b8 	.word	0x400204b8

08003b48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a84      	ldr	r2, [pc, #528]	; (8003d78 <DMA_SetConfig+0x230>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d072      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a82      	ldr	r2, [pc, #520]	; (8003d7c <DMA_SetConfig+0x234>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d06d      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a81      	ldr	r2, [pc, #516]	; (8003d80 <DMA_SetConfig+0x238>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d068      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a7f      	ldr	r2, [pc, #508]	; (8003d84 <DMA_SetConfig+0x23c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d063      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	; (8003d88 <DMA_SetConfig+0x240>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d05e      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a7c      	ldr	r2, [pc, #496]	; (8003d8c <DMA_SetConfig+0x244>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d059      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a7b      	ldr	r2, [pc, #492]	; (8003d90 <DMA_SetConfig+0x248>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d054      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a79      	ldr	r2, [pc, #484]	; (8003d94 <DMA_SetConfig+0x24c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d04f      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a78      	ldr	r2, [pc, #480]	; (8003d98 <DMA_SetConfig+0x250>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a76      	ldr	r2, [pc, #472]	; (8003d9c <DMA_SetConfig+0x254>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a75      	ldr	r2, [pc, #468]	; (8003da0 <DMA_SetConfig+0x258>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a73      	ldr	r2, [pc, #460]	; (8003da4 <DMA_SetConfig+0x25c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a72      	ldr	r2, [pc, #456]	; (8003da8 <DMA_SetConfig+0x260>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a70      	ldr	r2, [pc, #448]	; (8003dac <DMA_SetConfig+0x264>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6f      	ldr	r2, [pc, #444]	; (8003db0 <DMA_SetConfig+0x268>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6d      	ldr	r2, [pc, #436]	; (8003db4 <DMA_SetConfig+0x26c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6c      	ldr	r2, [pc, #432]	; (8003db8 <DMA_SetConfig+0x270>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a6a      	ldr	r2, [pc, #424]	; (8003dbc <DMA_SetConfig+0x274>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a69      	ldr	r2, [pc, #420]	; (8003dc0 <DMA_SetConfig+0x278>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a67      	ldr	r2, [pc, #412]	; (8003dc4 <DMA_SetConfig+0x27c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a66      	ldr	r2, [pc, #408]	; (8003dc8 <DMA_SetConfig+0x280>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a64      	ldr	r2, [pc, #400]	; (8003dcc <DMA_SetConfig+0x284>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a63      	ldr	r2, [pc, #396]	; (8003dd0 <DMA_SetConfig+0x288>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <DMA_SetConfig+0x10a>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a61      	ldr	r2, [pc, #388]	; (8003dd4 <DMA_SetConfig+0x28c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <DMA_SetConfig+0x10e>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <DMA_SetConfig+0x110>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3e      	ldr	r2, [pc, #248]	; (8003d78 <DMA_SetConfig+0x230>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d04a      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3d      	ldr	r2, [pc, #244]	; (8003d7c <DMA_SetConfig+0x234>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d045      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3b      	ldr	r2, [pc, #236]	; (8003d80 <DMA_SetConfig+0x238>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d040      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3a      	ldr	r2, [pc, #232]	; (8003d84 <DMA_SetConfig+0x23c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d03b      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a38      	ldr	r2, [pc, #224]	; (8003d88 <DMA_SetConfig+0x240>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d036      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a37      	ldr	r2, [pc, #220]	; (8003d8c <DMA_SetConfig+0x244>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d031      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a35      	ldr	r2, [pc, #212]	; (8003d90 <DMA_SetConfig+0x248>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d02c      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a34      	ldr	r2, [pc, #208]	; (8003d94 <DMA_SetConfig+0x24c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d027      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a32      	ldr	r2, [pc, #200]	; (8003d98 <DMA_SetConfig+0x250>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d022      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a31      	ldr	r2, [pc, #196]	; (8003d9c <DMA_SetConfig+0x254>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d01d      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <DMA_SetConfig+0x258>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d018      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2e      	ldr	r2, [pc, #184]	; (8003da4 <DMA_SetConfig+0x25c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	; (8003da8 <DMA_SetConfig+0x260>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00e      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2b      	ldr	r2, [pc, #172]	; (8003dac <DMA_SetConfig+0x264>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d009      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <DMA_SetConfig+0x268>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <DMA_SetConfig+0x1d0>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <DMA_SetConfig+0x26c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d101      	bne.n	8003d1c <DMA_SetConfig+0x1d4>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <DMA_SetConfig+0x1d6>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d05a      	beq.n	8003dd8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	223f      	movs	r2, #63	; 0x3f
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d40:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d108      	bne.n	8003d64 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d62:	e087      	b.n	8003e74 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	60da      	str	r2, [r3, #12]
}
 8003d74:	e07e      	b.n	8003e74 <DMA_SetConfig+0x32c>
 8003d76:	bf00      	nop
 8003d78:	40020010 	.word	0x40020010
 8003d7c:	40020028 	.word	0x40020028
 8003d80:	40020040 	.word	0x40020040
 8003d84:	40020058 	.word	0x40020058
 8003d88:	40020070 	.word	0x40020070
 8003d8c:	40020088 	.word	0x40020088
 8003d90:	400200a0 	.word	0x400200a0
 8003d94:	400200b8 	.word	0x400200b8
 8003d98:	40020410 	.word	0x40020410
 8003d9c:	40020428 	.word	0x40020428
 8003da0:	40020440 	.word	0x40020440
 8003da4:	40020458 	.word	0x40020458
 8003da8:	40020470 	.word	0x40020470
 8003dac:	40020488 	.word	0x40020488
 8003db0:	400204a0 	.word	0x400204a0
 8003db4:	400204b8 	.word	0x400204b8
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a28      	ldr	r2, [pc, #160]	; (8003e80 <DMA_SetConfig+0x338>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <DMA_SetConfig+0x2e0>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <DMA_SetConfig+0x33c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d01d      	beq.n	8003e28 <DMA_SetConfig+0x2e0>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <DMA_SetConfig+0x340>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <DMA_SetConfig+0x2e0>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <DMA_SetConfig+0x344>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <DMA_SetConfig+0x2e0>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <DMA_SetConfig+0x348>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <DMA_SetConfig+0x2e0>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <DMA_SetConfig+0x34c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <DMA_SetConfig+0x2e0>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <DMA_SetConfig+0x350>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <DMA_SetConfig+0x2e0>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <DMA_SetConfig+0x354>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <DMA_SetConfig+0x2e4>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <DMA_SetConfig+0x2e6>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d020      	beq.n	8003e74 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	d108      	bne.n	8003e64 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	60da      	str	r2, [r3, #12]
}
 8003e62:	e007      	b.n	8003e74 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	58025408 	.word	0x58025408
 8003e84:	5802541c 	.word	0x5802541c
 8003e88:	58025430 	.word	0x58025430
 8003e8c:	58025444 	.word	0x58025444
 8003e90:	58025458 	.word	0x58025458
 8003e94:	5802546c 	.word	0x5802546c
 8003e98:	58025480 	.word	0x58025480
 8003e9c:	58025494 	.word	0x58025494

08003ea0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a42      	ldr	r2, [pc, #264]	; (8003fb8 <DMA_CalcBaseAndBitshift+0x118>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d04a      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a41      	ldr	r2, [pc, #260]	; (8003fbc <DMA_CalcBaseAndBitshift+0x11c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d045      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a3f      	ldr	r2, [pc, #252]	; (8003fc0 <DMA_CalcBaseAndBitshift+0x120>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d040      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a3e      	ldr	r2, [pc, #248]	; (8003fc4 <DMA_CalcBaseAndBitshift+0x124>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d03b      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3c      	ldr	r2, [pc, #240]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x128>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d036      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3b      	ldr	r2, [pc, #236]	; (8003fcc <DMA_CalcBaseAndBitshift+0x12c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d031      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a39      	ldr	r2, [pc, #228]	; (8003fd0 <DMA_CalcBaseAndBitshift+0x130>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02c      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a38      	ldr	r2, [pc, #224]	; (8003fd4 <DMA_CalcBaseAndBitshift+0x134>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d027      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <DMA_CalcBaseAndBitshift+0x138>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d022      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a35      	ldr	r2, [pc, #212]	; (8003fdc <DMA_CalcBaseAndBitshift+0x13c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d01d      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a33      	ldr	r2, [pc, #204]	; (8003fe0 <DMA_CalcBaseAndBitshift+0x140>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d018      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a32      	ldr	r2, [pc, #200]	; (8003fe4 <DMA_CalcBaseAndBitshift+0x144>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a30      	ldr	r2, [pc, #192]	; (8003fe8 <DMA_CalcBaseAndBitshift+0x148>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a2f      	ldr	r2, [pc, #188]	; (8003fec <DMA_CalcBaseAndBitshift+0x14c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2d      	ldr	r2, [pc, #180]	; (8003ff0 <DMA_CalcBaseAndBitshift+0x150>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <DMA_CalcBaseAndBitshift+0x154>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d101      	bne.n	8003f4c <DMA_CalcBaseAndBitshift+0xac>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <DMA_CalcBaseAndBitshift+0xae>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d024      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	3b10      	subs	r3, #16
 8003f5a:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <DMA_CalcBaseAndBitshift+0x158>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	4a24      	ldr	r2, [pc, #144]	; (8003ffc <DMA_CalcBaseAndBitshift+0x15c>)
 8003f6c:	5cd3      	ldrb	r3, [r2, r3]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d908      	bls.n	8003f8c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b1f      	ldr	r3, [pc, #124]	; (8004000 <DMA_CalcBaseAndBitshift+0x160>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	1d1a      	adds	r2, r3, #4
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	659a      	str	r2, [r3, #88]	; 0x58
 8003f8a:	e00d      	b.n	8003fa8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <DMA_CalcBaseAndBitshift+0x160>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6593      	str	r3, [r2, #88]	; 0x58
 8003f9a:	e005      	b.n	8003fa8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	40020010 	.word	0x40020010
 8003fbc:	40020028 	.word	0x40020028
 8003fc0:	40020040 	.word	0x40020040
 8003fc4:	40020058 	.word	0x40020058
 8003fc8:	40020070 	.word	0x40020070
 8003fcc:	40020088 	.word	0x40020088
 8003fd0:	400200a0 	.word	0x400200a0
 8003fd4:	400200b8 	.word	0x400200b8
 8003fd8:	40020410 	.word	0x40020410
 8003fdc:	40020428 	.word	0x40020428
 8003fe0:	40020440 	.word	0x40020440
 8003fe4:	40020458 	.word	0x40020458
 8003fe8:	40020470 	.word	0x40020470
 8003fec:	40020488 	.word	0x40020488
 8003ff0:	400204a0 	.word	0x400204a0
 8003ff4:	400204b8 	.word	0x400204b8
 8003ff8:	aaaaaaab 	.word	0xaaaaaaab
 8003ffc:	080088b4 	.word	0x080088b4
 8004000:	fffffc00 	.word	0xfffffc00

08004004 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d120      	bne.n	800405a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	2b03      	cmp	r3, #3
 800401e:	d858      	bhi.n	80040d2 <DMA_CheckFifoParam+0xce>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <DMA_CheckFifoParam+0x24>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004039 	.word	0x08004039
 800402c:	0800404b 	.word	0x0800404b
 8004030:	08004039 	.word	0x08004039
 8004034:	080040d3 	.word	0x080040d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d048      	beq.n	80040d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004048:	e045      	b.n	80040d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004052:	d142      	bne.n	80040da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004058:	e03f      	b.n	80040da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004062:	d123      	bne.n	80040ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	2b03      	cmp	r3, #3
 800406a:	d838      	bhi.n	80040de <DMA_CheckFifoParam+0xda>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <DMA_CheckFifoParam+0x70>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004085 	.word	0x08004085
 8004078:	0800408b 	.word	0x0800408b
 800407c:	08004085 	.word	0x08004085
 8004080:	0800409d 	.word	0x0800409d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
        break;
 8004088:	e030      	b.n	80040ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d025      	beq.n	80040e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800409a:	e022      	b.n	80040e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040a4:	d11f      	bne.n	80040e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040aa:	e01c      	b.n	80040e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d902      	bls.n	80040ba <DMA_CheckFifoParam+0xb6>
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d003      	beq.n	80040c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040b8:	e018      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
        break;
 80040be:	e015      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
    break;
 80040d0:	e00b      	b.n	80040ea <DMA_CheckFifoParam+0xe6>
        break;
 80040d2:	bf00      	nop
 80040d4:	e00a      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
        break;
 80040d6:	bf00      	nop
 80040d8:	e008      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
        break;
 80040da:	bf00      	nop
 80040dc:	e006      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
        break;
 80040de:	bf00      	nop
 80040e0:	e004      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
        break;
 80040e2:	bf00      	nop
 80040e4:	e002      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
        break;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <DMA_CheckFifoParam+0xe8>
    break;
 80040ea:	bf00      	nop
    }
  }

  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop

080040fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a38      	ldr	r2, [pc, #224]	; (80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a36      	ldr	r2, [pc, #216]	; (80041f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01d      	beq.n	800415a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a35      	ldr	r2, [pc, #212]	; (80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a33      	ldr	r2, [pc, #204]	; (80041fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a32      	ldr	r2, [pc, #200]	; (8004200 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a30      	ldr	r2, [pc, #192]	; (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2f      	ldr	r2, [pc, #188]	; (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2d      	ldr	r2, [pc, #180]	; (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	3b08      	subs	r3, #8
 800416c:	4a28      	ldr	r2, [pc, #160]	; (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4b26      	ldr	r3, [pc, #152]	; (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	461a      	mov	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a24      	ldr	r2, [pc, #144]	; (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004188:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	2201      	movs	r2, #1
 8004192:	409a      	lsls	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004198:	e024      	b.n	80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	3b10      	subs	r3, #16
 80041a2:	4a1e      	ldr	r2, [pc, #120]	; (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4a1c      	ldr	r2, [pc, #112]	; (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d806      	bhi.n	80041c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a1b      	ldr	r2, [pc, #108]	; (8004224 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d902      	bls.n	80041c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3308      	adds	r3, #8
 80041c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a16      	ldr	r2, [pc, #88]	; (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2201      	movs	r2, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	58025408 	.word	0x58025408
 80041f4:	5802541c 	.word	0x5802541c
 80041f8:	58025430 	.word	0x58025430
 80041fc:	58025444 	.word	0x58025444
 8004200:	58025458 	.word	0x58025458
 8004204:	5802546c 	.word	0x5802546c
 8004208:	58025480 	.word	0x58025480
 800420c:	58025494 	.word	0x58025494
 8004210:	cccccccd 	.word	0xcccccccd
 8004214:	16009600 	.word	0x16009600
 8004218:	58025880 	.word	0x58025880
 800421c:	aaaaaaab 	.word	0xaaaaaaab
 8004220:	400204b8 	.word	0x400204b8
 8004224:	4002040f 	.word	0x4002040f
 8004228:	10008200 	.word	0x10008200
 800422c:	40020880 	.word	0x40020880

08004230 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04a      	beq.n	80042dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d847      	bhi.n	80042dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d022      	beq.n	800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a24      	ldr	r2, [pc, #144]	; (80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d01d      	beq.n	800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d018      	beq.n	800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a21      	ldr	r2, [pc, #132]	; (80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4b17      	ldr	r3, [pc, #92]	; (8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a15      	ldr	r2, [pc, #84]	; (800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042b8:	671a      	str	r2, [r3, #112]	; 0x70
 80042ba:	e009      	b.n	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a11      	ldr	r2, [pc, #68]	; (8004314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	58025408 	.word	0x58025408
 80042ec:	5802541c 	.word	0x5802541c
 80042f0:	58025430 	.word	0x58025430
 80042f4:	58025444 	.word	0x58025444
 80042f8:	58025458 	.word	0x58025458
 80042fc:	5802546c 	.word	0x5802546c
 8004300:	58025480 	.word	0x58025480
 8004304:	58025494 	.word	0x58025494
 8004308:	1600963f 	.word	0x1600963f
 800430c:	58025940 	.word	0x58025940
 8004310:	1000823f 	.word	0x1000823f
 8004314:	40020940 	.word	0x40020940

08004318 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	460b      	mov	r3, r1
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e00a      	b.n	800434a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004334:	7afb      	ldrb	r3, [r7, #11]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	605a      	str	r2, [r3, #4]
      break;
 8004340:	e002      	b.n	8004348 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
      break;
 8004346:	bf00      	nop
  }

  return status;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e003      	b.n	8004372 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004370:	2300      	movs	r3, #0
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800438e:	4b89      	ldr	r3, [pc, #548]	; (80045b4 <HAL_GPIO_Init+0x234>)
 8004390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004392:	e194      	b.n	80046be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8186 	beq.w	80046b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d00b      	beq.n	80043cc <HAL_GPIO_Init+0x4c>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d007      	beq.n	80043cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043c0:	2b11      	cmp	r3, #17
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b12      	cmp	r3, #18
 80043ca:	d130      	bne.n	800442e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004402:	2201      	movs	r2, #1
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	f003 0201 	and.w	r2, r3, #1
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2203      	movs	r2, #3
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0xee>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b12      	cmp	r3, #18
 800446c:	d123      	bne.n	80044b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	08da      	lsrs	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3208      	adds	r2, #8
 8004476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	220f      	movs	r2, #15
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	08da      	lsrs	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3208      	adds	r2, #8
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	2203      	movs	r2, #3
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0203 	and.w	r2, r3, #3
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80e0 	beq.w	80046b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f8:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <HAL_GPIO_Init+0x238>)
 80044fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044fe:	4a2e      	ldr	r2, [pc, #184]	; (80045b8 <HAL_GPIO_Init+0x238>)
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004508:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <HAL_GPIO_Init+0x238>)
 800450a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004516:	4a29      	ldr	r2, [pc, #164]	; (80045bc <HAL_GPIO_Init+0x23c>)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3302      	adds	r3, #2
 800451e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	220f      	movs	r2, #15
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <HAL_GPIO_Init+0x240>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d052      	beq.n	80045e8 <HAL_GPIO_Init+0x268>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <HAL_GPIO_Init+0x244>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d031      	beq.n	80045ae <HAL_GPIO_Init+0x22e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <HAL_GPIO_Init+0x248>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d02b      	beq.n	80045aa <HAL_GPIO_Init+0x22a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_GPIO_Init+0x24c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d025      	beq.n	80045a6 <HAL_GPIO_Init+0x226>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <HAL_GPIO_Init+0x250>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01f      	beq.n	80045a2 <HAL_GPIO_Init+0x222>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1b      	ldr	r2, [pc, #108]	; (80045d4 <HAL_GPIO_Init+0x254>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d019      	beq.n	800459e <HAL_GPIO_Init+0x21e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <HAL_GPIO_Init+0x258>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <HAL_GPIO_Init+0x21a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a19      	ldr	r2, [pc, #100]	; (80045dc <HAL_GPIO_Init+0x25c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00d      	beq.n	8004596 <HAL_GPIO_Init+0x216>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_GPIO_Init+0x260>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <HAL_GPIO_Init+0x212>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a17      	ldr	r2, [pc, #92]	; (80045e4 <HAL_GPIO_Init+0x264>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <HAL_GPIO_Init+0x20e>
 800458a:	2309      	movs	r3, #9
 800458c:	e02d      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 800458e:	230a      	movs	r3, #10
 8004590:	e02b      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 8004592:	2308      	movs	r3, #8
 8004594:	e029      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 8004596:	2307      	movs	r3, #7
 8004598:	e027      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 800459a:	2306      	movs	r3, #6
 800459c:	e025      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 800459e:	2305      	movs	r3, #5
 80045a0:	e023      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045a2:	2304      	movs	r3, #4
 80045a4:	e021      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045a6:	2303      	movs	r3, #3
 80045a8:	e01f      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e01d      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e01b      	b.n	80045ea <HAL_GPIO_Init+0x26a>
 80045b2:	bf00      	nop
 80045b4:	58000080 	.word	0x58000080
 80045b8:	58024400 	.word	0x58024400
 80045bc:	58000400 	.word	0x58000400
 80045c0:	58020000 	.word	0x58020000
 80045c4:	58020400 	.word	0x58020400
 80045c8:	58020800 	.word	0x58020800
 80045cc:	58020c00 	.word	0x58020c00
 80045d0:	58021000 	.word	0x58021000
 80045d4:	58021400 	.word	0x58021400
 80045d8:	58021800 	.word	0x58021800
 80045dc:	58021c00 	.word	0x58021c00
 80045e0:	58022000 	.word	0x58022000
 80045e4:	58022400 	.word	0x58022400
 80045e8:	2300      	movs	r3, #0
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	f002 0203 	and.w	r2, r2, #3
 80045f0:	0092      	lsls	r2, r2, #2
 80045f2:	4093      	lsls	r3, r2
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045fa:	4938      	ldr	r1, [pc, #224]	; (80046dc <HAL_GPIO_Init+0x35c>)
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	3302      	adds	r3, #2
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800465c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800468a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f47f ae63 	bne.w	8004394 <HAL_GPIO_Init+0x14>
  }
}
 80046ce:	bf00      	nop
 80046d0:	bf00      	nop
 80046d2:	3724      	adds	r7, #36	; 0x24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	58000400 	.word	0x58000400

080046e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
 80046ec:	4613      	mov	r3, r2
 80046ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046f0:	787b      	ldrb	r3, [r7, #1]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046f6:	887a      	ldrh	r2, [r7, #2]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80046fc:	e003      	b.n	8004706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046fe:	887b      	ldrh	r3, [r7, #2]
 8004700:	041a      	lsls	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	619a      	str	r2, [r3, #24]
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004712:	b480      	push	{r7}
 8004714:	b085      	sub	sp, #20
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004724:	887a      	ldrh	r2, [r7, #2]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4013      	ands	r3, r2
 800472a:	041a      	lsls	r2, r3, #16
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	43d9      	mvns	r1, r3
 8004730:	887b      	ldrh	r3, [r7, #2]
 8004732:	400b      	ands	r3, r1
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	619a      	str	r2, [r3, #24]
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004754:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	4618      	mov	r0, r3
 800476e:	f7fc f96d 	bl	8000a4c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004784:	4b19      	ldr	r3, [pc, #100]	; (80047ec <HAL_PWREx_ConfigSupply+0x70>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b04      	cmp	r3, #4
 800478e:	d00a      	beq.n	80047a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004790:	4b16      	ldr	r3, [pc, #88]	; (80047ec <HAL_PWREx_ConfigSupply+0x70>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d001      	beq.n	80047a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e01f      	b.n	80047e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e01d      	b.n	80047e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80047a6:	4b11      	ldr	r3, [pc, #68]	; (80047ec <HAL_PWREx_ConfigSupply+0x70>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f023 0207 	bic.w	r2, r3, #7
 80047ae:	490f      	ldr	r1, [pc, #60]	; (80047ec <HAL_PWREx_ConfigSupply+0x70>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80047b6:	f7fc fe29 	bl	800140c <HAL_GetTick>
 80047ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047bc:	e009      	b.n	80047d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80047be:	f7fc fe25 	bl	800140c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047cc:	d901      	bls.n	80047d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e007      	b.n	80047e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_PWREx_ConfigSupply+0x70>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047de:	d1ee      	bne.n	80047be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	58024800 	.word	0x58024800

080047f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08c      	sub	sp, #48	; 0x30
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e3ff      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8087 	beq.w	800491e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004810:	4b99      	ldr	r3, [pc, #612]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800481a:	4b97      	ldr	r3, [pc, #604]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	2b10      	cmp	r3, #16
 8004824:	d007      	beq.n	8004836 <HAL_RCC_OscConfig+0x46>
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	2b18      	cmp	r3, #24
 800482a:	d110      	bne.n	800484e <HAL_RCC_OscConfig+0x5e>
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d10b      	bne.n	800484e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004836:	4b90      	ldr	r3, [pc, #576]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d06c      	beq.n	800491c <HAL_RCC_OscConfig+0x12c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d168      	bne.n	800491c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e3d9      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004856:	d106      	bne.n	8004866 <HAL_RCC_OscConfig+0x76>
 8004858:	4b87      	ldr	r3, [pc, #540]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a86      	ldr	r2, [pc, #536]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 800485e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	e02e      	b.n	80048c4 <HAL_RCC_OscConfig+0xd4>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x98>
 800486e:	4b82      	ldr	r3, [pc, #520]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a81      	ldr	r2, [pc, #516]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	4b7f      	ldr	r3, [pc, #508]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7e      	ldr	r2, [pc, #504]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e01d      	b.n	80048c4 <HAL_RCC_OscConfig+0xd4>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004890:	d10c      	bne.n	80048ac <HAL_RCC_OscConfig+0xbc>
 8004892:	4b79      	ldr	r3, [pc, #484]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a78      	ldr	r2, [pc, #480]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b76      	ldr	r3, [pc, #472]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a75      	ldr	r2, [pc, #468]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e00b      	b.n	80048c4 <HAL_RCC_OscConfig+0xd4>
 80048ac:	4b72      	ldr	r3, [pc, #456]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a71      	ldr	r2, [pc, #452]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80048b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	4b6f      	ldr	r3, [pc, #444]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a6e      	ldr	r2, [pc, #440]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80048be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d013      	beq.n	80048f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fc fd9e 	bl	800140c <HAL_GetTick>
 80048d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d4:	f7fc fd9a 	bl	800140c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b64      	cmp	r3, #100	; 0x64
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e38d      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048e6:	4b64      	ldr	r3, [pc, #400]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0xe4>
 80048f2:	e014      	b.n	800491e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f4:	f7fc fd8a 	bl	800140c <HAL_GetTick>
 80048f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048fc:	f7fc fd86 	bl	800140c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	; 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e379      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800490e:	4b5a      	ldr	r3, [pc, #360]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x10c>
 800491a:	e000      	b.n	800491e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80ae 	beq.w	8004a88 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492c:	4b52      	ldr	r3, [pc, #328]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004934:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004936:	4b50      	ldr	r3, [pc, #320]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_RCC_OscConfig+0x162>
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	2b18      	cmp	r3, #24
 8004946:	d13a      	bne.n	80049be <HAL_RCC_OscConfig+0x1ce>
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d135      	bne.n	80049be <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004952:	4b49      	ldr	r3, [pc, #292]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_RCC_OscConfig+0x17a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e34b      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496a:	f7fc fd7f 	bl	800146c <HAL_GetREVID>
 800496e:	4603      	mov	r3, r0
 8004970:	f241 0203 	movw	r2, #4099	; 0x1003
 8004974:	4293      	cmp	r3, r2
 8004976:	d817      	bhi.n	80049a8 <HAL_RCC_OscConfig+0x1b8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d108      	bne.n	8004992 <HAL_RCC_OscConfig+0x1a2>
 8004980:	4b3d      	ldr	r3, [pc, #244]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004988:	4a3b      	ldr	r2, [pc, #236]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 800498a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800498e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004990:	e07a      	b.n	8004a88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004992:	4b39      	ldr	r3, [pc, #228]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	031b      	lsls	r3, r3, #12
 80049a0:	4935      	ldr	r1, [pc, #212]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a6:	e06f      	b.n	8004a88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a8:	4b33      	ldr	r3, [pc, #204]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	4930      	ldr	r1, [pc, #192]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049bc:	e064      	b.n	8004a88 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d045      	beq.n	8004a52 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049c6:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 0219 	bic.w	r2, r3, #25
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	4929      	ldr	r1, [pc, #164]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fc fd18 	bl	800140c <HAL_GetTick>
 80049dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e0:	f7fc fd14 	bl	800140c <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e307      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049f2:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fe:	f7fc fd35 	bl	800146c <HAL_GetREVID>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d817      	bhi.n	8004a3c <HAL_RCC_OscConfig+0x24c>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d108      	bne.n	8004a26 <HAL_RCC_OscConfig+0x236>
 8004a14:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a1c:	4a16      	ldr	r2, [pc, #88]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a22:	6053      	str	r3, [r2, #4]
 8004a24:	e030      	b.n	8004a88 <HAL_RCC_OscConfig+0x298>
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	031b      	lsls	r3, r3, #12
 8004a34:	4910      	ldr	r1, [pc, #64]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
 8004a3a:	e025      	b.n	8004a88 <HAL_RCC_OscConfig+0x298>
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	061b      	lsls	r3, r3, #24
 8004a4a:	490b      	ldr	r1, [pc, #44]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	604b      	str	r3, [r1, #4]
 8004a50:	e01a      	b.n	8004a88 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <HAL_RCC_OscConfig+0x288>)
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fc fcd5 	bl	800140c <HAL_GetTick>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a66:	f7fc fcd1 	bl	800140c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d903      	bls.n	8004a7c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e2c4      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
 8004a78:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a7c:	4ba4      	ldr	r3, [pc, #656]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ee      	bne.n	8004a66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80a9 	beq.w	8004be8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a96:	4b9e      	ldr	r3, [pc, #632]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aa0:	4b9b      	ldr	r3, [pc, #620]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d007      	beq.n	8004abc <HAL_RCC_OscConfig+0x2cc>
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b18      	cmp	r3, #24
 8004ab0:	d13a      	bne.n	8004b28 <HAL_RCC_OscConfig+0x338>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d135      	bne.n	8004b28 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004abc:	4b94      	ldr	r3, [pc, #592]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x2e4>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b80      	cmp	r3, #128	; 0x80
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e296      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ad4:	f7fc fcca 	bl	800146c <HAL_GetREVID>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d817      	bhi.n	8004b12 <HAL_RCC_OscConfig+0x322>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d108      	bne.n	8004afc <HAL_RCC_OscConfig+0x30c>
 8004aea:	4b89      	ldr	r3, [pc, #548]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004af2:	4a87      	ldr	r2, [pc, #540]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004af8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004afa:	e075      	b.n	8004be8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004afc:	4b84      	ldr	r3, [pc, #528]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	069b      	lsls	r3, r3, #26
 8004b0a:	4981      	ldr	r1, [pc, #516]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b10:	e06a      	b.n	8004be8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b12:	4b7f      	ldr	r3, [pc, #508]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	061b      	lsls	r3, r3, #24
 8004b20:	497b      	ldr	r1, [pc, #492]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b26:	e05f      	b.n	8004be8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d042      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b30:	4b77      	ldr	r3, [pc, #476]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a76      	ldr	r2, [pc, #472]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fc fc66 	bl	800140c <HAL_GetTick>
 8004b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004b44:	f7fc fc62 	bl	800140c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e255      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b56:	4b6e      	ldr	r3, [pc, #440]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b62:	f7fc fc83 	bl	800146c <HAL_GetREVID>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d817      	bhi.n	8004ba0 <HAL_RCC_OscConfig+0x3b0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d108      	bne.n	8004b8a <HAL_RCC_OscConfig+0x39a>
 8004b78:	4b65      	ldr	r3, [pc, #404]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b80:	4a63      	ldr	r2, [pc, #396]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b86:	6053      	str	r3, [r2, #4]
 8004b88:	e02e      	b.n	8004be8 <HAL_RCC_OscConfig+0x3f8>
 8004b8a:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	069b      	lsls	r3, r3, #26
 8004b98:	495d      	ldr	r1, [pc, #372]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]
 8004b9e:	e023      	b.n	8004be8 <HAL_RCC_OscConfig+0x3f8>
 8004ba0:	4b5b      	ldr	r3, [pc, #364]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	061b      	lsls	r3, r3, #24
 8004bae:	4958      	ldr	r1, [pc, #352]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60cb      	str	r3, [r1, #12]
 8004bb4:	e018      	b.n	8004be8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004bb6:	4b56      	ldr	r3, [pc, #344]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a55      	ldr	r2, [pc, #340]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fc fc23 	bl	800140c <HAL_GetTick>
 8004bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004bca:	f7fc fc1f 	bl	800140c <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e212      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bdc:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d036      	beq.n	8004c62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d019      	beq.n	8004c30 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfc:	4b44      	ldr	r3, [pc, #272]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c00:	4a43      	ldr	r2, [pc, #268]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fc fc00 	bl	800140c <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fc fbfc 	bl	800140c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e1ef      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c22:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x420>
 8004c2e:	e018      	b.n	8004c62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c30:	4b37      	ldr	r3, [pc, #220]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c34:	4a36      	ldr	r2, [pc, #216]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fc fbe6 	bl	800140c <HAL_GetTick>
 8004c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c44:	f7fc fbe2 	bl	800140c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e1d5      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c56:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d036      	beq.n	8004cdc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d019      	beq.n	8004caa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c76:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c82:	f7fc fbc3 	bl	800140c <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004c8a:	f7fc fbbf 	bl	800140c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1b2      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x49a>
 8004ca8:	e018      	b.n	8004cdc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004caa:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cb6:	f7fc fba9 	bl	800140c <HAL_GetTick>
 8004cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004cbe:	f7fc fba5 	bl	800140c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e198      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <HAL_RCC_OscConfig+0x520>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8085 	beq.w	8004df4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_RCC_OscConfig+0x524>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <HAL_RCC_OscConfig+0x524>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cf6:	f7fc fb89 	bl	800140c <HAL_GetTick>
 8004cfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cfc:	e00c      	b.n	8004d18 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fc fb85 	bl	800140c <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b64      	cmp	r3, #100	; 0x64
 8004d0a:	d905      	bls.n	8004d18 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e178      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
 8004d10:	58024400 	.word	0x58024400
 8004d14:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d18:	4b96      	ldr	r3, [pc, #600]	; (8004f74 <HAL_RCC_OscConfig+0x784>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ec      	beq.n	8004cfe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x54a>
 8004d2c:	4b92      	ldr	r3, [pc, #584]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	4a91      	ldr	r2, [pc, #580]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	; 0x70
 8004d38:	e02d      	b.n	8004d96 <HAL_RCC_OscConfig+0x5a6>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x56c>
 8004d42:	4b8d      	ldr	r3, [pc, #564]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a8c      	ldr	r2, [pc, #560]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4e:	4b8a      	ldr	r3, [pc, #552]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	4a89      	ldr	r2, [pc, #548]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5a:	e01c      	b.n	8004d96 <HAL_RCC_OscConfig+0x5a6>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b05      	cmp	r3, #5
 8004d62:	d10c      	bne.n	8004d7e <HAL_RCC_OscConfig+0x58e>
 8004d64:	4b84      	ldr	r3, [pc, #528]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	4a83      	ldr	r2, [pc, #524]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d6a:	f043 0304 	orr.w	r3, r3, #4
 8004d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d70:	4b81      	ldr	r3, [pc, #516]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	4a80      	ldr	r2, [pc, #512]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7c:	e00b      	b.n	8004d96 <HAL_RCC_OscConfig+0x5a6>
 8004d7e:	4b7e      	ldr	r3, [pc, #504]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a7d      	ldr	r2, [pc, #500]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8a:	4b7b      	ldr	r3, [pc, #492]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a7a      	ldr	r2, [pc, #488]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004d90:	f023 0304 	bic.w	r3, r3, #4
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d015      	beq.n	8004dca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fc fb35 	bl	800140c <HAL_GetTick>
 8004da2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fc fb31 	bl	800140c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e122      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dbc:	4b6e      	ldr	r3, [pc, #440]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ee      	beq.n	8004da6 <HAL_RCC_OscConfig+0x5b6>
 8004dc8:	e014      	b.n	8004df4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dca:	f7fc fb1f 	bl	800140c <HAL_GetTick>
 8004dce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fc fb1b 	bl	800140c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e10c      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004de8:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ee      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8101 	beq.w	8005000 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004dfe:	4b5e      	ldr	r3, [pc, #376]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e06:	2b18      	cmp	r3, #24
 8004e08:	f000 80bc 	beq.w	8004f84 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	f040 8095 	bne.w	8004f40 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e16:	4b58      	ldr	r3, [pc, #352]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a57      	ldr	r2, [pc, #348]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fc faf3 	bl	800140c <HAL_GetTick>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fc faef 	bl	800140c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0e2      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e3c:	4b4e      	ldr	r3, [pc, #312]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f0      	bne.n	8004e2a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e48:	4b4b      	ldr	r3, [pc, #300]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e4c:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <HAL_RCC_OscConfig+0x78c>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e58:	0112      	lsls	r2, r2, #4
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	4946      	ldr	r1, [pc, #280]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	628b      	str	r3, [r1, #40]	; 0x28
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	3b01      	subs	r3, #1
 8004e68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	3b01      	subs	r3, #1
 8004e72:	025b      	lsls	r3, r3, #9
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e92:	4939      	ldr	r1, [pc, #228]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004e98:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a36      	ldr	r2, [pc, #216]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ea4:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea8:	4b35      	ldr	r3, [pc, #212]	; (8004f80 <HAL_RCC_OscConfig+0x790>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004eb0:	00d2      	lsls	r2, r2, #3
 8004eb2:	4931      	ldr	r1, [pc, #196]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004eb8:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	f023 020c 	bic.w	r2, r3, #12
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	492c      	ldr	r1, [pc, #176]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004eca:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	f023 0202 	bic.w	r2, r3, #2
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	4928      	ldr	r1, [pc, #160]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004edc:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee8:	4b23      	ldr	r3, [pc, #140]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ef4:	4b20      	ldr	r3, [pc, #128]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f00:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fc fa78 	bl	800140c <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fc fa74 	bl	800140c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e067      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f32:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x730>
 8004f3e:	e05f      	b.n	8005000 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f40:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a0c      	ldr	r2, [pc, #48]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fc fa5e 	bl	800140c <HAL_GetTick>
 8004f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fc fa5a 	bl	800140c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e04d      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_RCC_OscConfig+0x788>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x764>
 8004f72:	e045      	b.n	8005000 <HAL_RCC_OscConfig+0x810>
 8004f74:	58024800 	.word	0x58024800
 8004f78:	58024400 	.word	0x58024400
 8004f7c:	fffffc0c 	.word	0xfffffc0c
 8004f80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f84:	4b21      	ldr	r3, [pc, #132]	; (800500c <HAL_RCC_OscConfig+0x81c>)
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f8a:	4b20      	ldr	r3, [pc, #128]	; (800500c <HAL_RCC_OscConfig+0x81c>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d031      	beq.n	8004ffc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f003 0203 	and.w	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d12a      	bne.n	8004ffc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d122      	bne.n	8004ffc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d11a      	bne.n	8004ffc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	0a5b      	lsrs	r3, r3, #9
 8004fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d111      	bne.n	8004ffc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d108      	bne.n	8004ffc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	0e1b      	lsrs	r3, r3, #24
 8004fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3730      	adds	r7, #48	; 0x30
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	58024400 	.word	0x58024400

08005010 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e19c      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005024:	4b8a      	ldr	r3, [pc, #552]	; (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d910      	bls.n	8005054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b87      	ldr	r3, [pc, #540]	; (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 020f 	bic.w	r2, r3, #15
 800503a:	4985      	ldr	r1, [pc, #532]	; (8005250 <HAL_RCC_ClockConfig+0x240>)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005042:	4b83      	ldr	r3, [pc, #524]	; (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e184      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	4b7b      	ldr	r3, [pc, #492]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800506c:	429a      	cmp	r2, r3
 800506e:	d908      	bls.n	8005082 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005070:	4b78      	ldr	r3, [pc, #480]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	4975      	ldr	r1, [pc, #468]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 800507e:	4313      	orrs	r3, r2
 8005080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d010      	beq.n	80050b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	4b70      	ldr	r3, [pc, #448]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800509a:	429a      	cmp	r2, r3
 800509c:	d908      	bls.n	80050b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800509e:	4b6d      	ldr	r3, [pc, #436]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	496a      	ldr	r1, [pc, #424]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d010      	beq.n	80050de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	4b64      	ldr	r3, [pc, #400]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d908      	bls.n	80050de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050cc:	4b61      	ldr	r3, [pc, #388]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	495e      	ldr	r1, [pc, #376]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	4b59      	ldr	r3, [pc, #356]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d908      	bls.n	800510c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80050fa:	4b56      	ldr	r3, [pc, #344]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	4953      	ldr	r1, [pc, #332]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005108:	4313      	orrs	r3, r2
 800510a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d010      	beq.n	800513a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	4b4d      	ldr	r3, [pc, #308]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	429a      	cmp	r2, r3
 8005126:	d908      	bls.n	800513a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005128:	4b4a      	ldr	r3, [pc, #296]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f023 020f 	bic.w	r2, r3, #15
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4947      	ldr	r1, [pc, #284]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005136:	4313      	orrs	r3, r2
 8005138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d055      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005146:	4b43      	ldr	r3, [pc, #268]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4940      	ldr	r1, [pc, #256]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005154:	4313      	orrs	r3, r2
 8005156:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d107      	bne.n	8005170 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005160:	4b3c      	ldr	r3, [pc, #240]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d121      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0f6      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d107      	bne.n	8005188 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005178:	4b36      	ldr	r3, [pc, #216]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d115      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0ea      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d107      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005190:	4b30      	ldr	r3, [pc, #192]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0de      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051a0:	4b2c      	ldr	r3, [pc, #176]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0d6      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051b0:	4b28      	ldr	r3, [pc, #160]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f023 0207 	bic.w	r2, r3, #7
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4925      	ldr	r1, [pc, #148]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c2:	f7fc f923 	bl	800140c <HAL_GetTick>
 80051c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c8:	e00a      	b.n	80051e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ca:	f7fc f91f 	bl	800140c <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e0be      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e0:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d1eb      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	4b14      	ldr	r3, [pc, #80]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	429a      	cmp	r2, r3
 800520c:	d208      	bcs.n	8005220 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520e:	4b11      	ldr	r3, [pc, #68]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f023 020f 	bic.w	r2, r3, #15
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	490e      	ldr	r1, [pc, #56]	; (8005254 <HAL_RCC_ClockConfig+0x244>)
 800521c:	4313      	orrs	r3, r2
 800521e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d214      	bcs.n	8005258 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522e:	4b08      	ldr	r3, [pc, #32]	; (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 020f 	bic.w	r2, r3, #15
 8005236:	4906      	ldr	r1, [pc, #24]	; (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e086      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
 8005250:	52002000 	.word	0x52002000
 8005254:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d010      	beq.n	8005286 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	4b3f      	ldr	r3, [pc, #252]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005270:	429a      	cmp	r2, r3
 8005272:	d208      	bcs.n	8005286 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005274:	4b3c      	ldr	r3, [pc, #240]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	4939      	ldr	r1, [pc, #228]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005282:	4313      	orrs	r3, r2
 8005284:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	4b34      	ldr	r3, [pc, #208]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800529e:	429a      	cmp	r2, r3
 80052a0:	d208      	bcs.n	80052b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052a2:	4b31      	ldr	r3, [pc, #196]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	492e      	ldr	r1, [pc, #184]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d010      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	4b28      	ldr	r3, [pc, #160]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d208      	bcs.n	80052e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052d0:	4b25      	ldr	r3, [pc, #148]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	4922      	ldr	r1, [pc, #136]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d010      	beq.n	8005310 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d208      	bcs.n	8005310 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80052fe:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	4917      	ldr	r1, [pc, #92]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 800530c:	4313      	orrs	r3, r2
 800530e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005310:	f000 f834 	bl	800537c <HAL_RCC_GetSysClockFreq>
 8005314:	4602      	mov	r2, r0
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	0a1b      	lsrs	r3, r3, #8
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	4912      	ldr	r1, [pc, #72]	; (800536c <HAL_RCC_ClockConfig+0x35c>)
 8005322:	5ccb      	ldrb	r3, [r1, r3]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800532e:	4b0e      	ldr	r3, [pc, #56]	; (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	4a0d      	ldr	r2, [pc, #52]	; (800536c <HAL_RCC_ClockConfig+0x35c>)
 8005338:	5cd3      	ldrb	r3, [r2, r3]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <HAL_RCC_ClockConfig+0x360>)
 8005346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005348:	4a0a      	ldr	r2, [pc, #40]	; (8005374 <HAL_RCC_ClockConfig+0x364>)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <HAL_RCC_ClockConfig+0x368>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fc f810 	bl	8001378 <HAL_InitTick>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800535c:	7bfb      	ldrb	r3, [r7, #15]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	58024400 	.word	0x58024400
 800536c:	080088a4 	.word	0x080088a4
 8005370:	240000bc 	.word	0x240000bc
 8005374:	240000b8 	.word	0x240000b8
 8005378:	240000c0 	.word	0x240000c0

0800537c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800537c:	b480      	push	{r7}
 800537e:	b089      	sub	sp, #36	; 0x24
 8005380:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005382:	4bb3      	ldr	r3, [pc, #716]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800538a:	2b18      	cmp	r3, #24
 800538c:	f200 8155 	bhi.w	800563a <HAL_RCC_GetSysClockFreq+0x2be>
 8005390:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053fd 	.word	0x080053fd
 800539c:	0800563b 	.word	0x0800563b
 80053a0:	0800563b 	.word	0x0800563b
 80053a4:	0800563b 	.word	0x0800563b
 80053a8:	0800563b 	.word	0x0800563b
 80053ac:	0800563b 	.word	0x0800563b
 80053b0:	0800563b 	.word	0x0800563b
 80053b4:	0800563b 	.word	0x0800563b
 80053b8:	08005423 	.word	0x08005423
 80053bc:	0800563b 	.word	0x0800563b
 80053c0:	0800563b 	.word	0x0800563b
 80053c4:	0800563b 	.word	0x0800563b
 80053c8:	0800563b 	.word	0x0800563b
 80053cc:	0800563b 	.word	0x0800563b
 80053d0:	0800563b 	.word	0x0800563b
 80053d4:	0800563b 	.word	0x0800563b
 80053d8:	08005429 	.word	0x08005429
 80053dc:	0800563b 	.word	0x0800563b
 80053e0:	0800563b 	.word	0x0800563b
 80053e4:	0800563b 	.word	0x0800563b
 80053e8:	0800563b 	.word	0x0800563b
 80053ec:	0800563b 	.word	0x0800563b
 80053f0:	0800563b 	.word	0x0800563b
 80053f4:	0800563b 	.word	0x0800563b
 80053f8:	0800542f 	.word	0x0800542f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053fc:	4b94      	ldr	r3, [pc, #592]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d009      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005408:	4b91      	ldr	r3, [pc, #580]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	08db      	lsrs	r3, r3, #3
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	4a90      	ldr	r2, [pc, #576]	; (8005654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800541a:	e111      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800541c:	4b8d      	ldr	r3, [pc, #564]	; (8005654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800541e:	61bb      	str	r3, [r7, #24]
    break;
 8005420:	e10e      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005422:	4b8d      	ldr	r3, [pc, #564]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005424:	61bb      	str	r3, [r7, #24]
    break;
 8005426:	e10b      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005428:	4b8c      	ldr	r3, [pc, #560]	; (800565c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800542a:	61bb      	str	r3, [r7, #24]
    break;
 800542c:	e108      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800542e:	4b88      	ldr	r3, [pc, #544]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005438:	4b85      	ldr	r3, [pc, #532]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005442:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005444:	4b82      	ldr	r3, [pc, #520]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800544e:	4b80      	ldr	r3, [pc, #512]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005452:	08db      	lsrs	r3, r3, #3
 8005454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80e1 	beq.w	8005634 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b02      	cmp	r3, #2
 8005476:	f000 8083 	beq.w	8005580 <HAL_RCC_GetSysClockFreq+0x204>
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b02      	cmp	r3, #2
 800547e:	f200 80a1 	bhi.w	80055c4 <HAL_RCC_GetSysClockFreq+0x248>
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x114>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d056      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x1c0>
 800548e:	e099      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005490:	4b6f      	ldr	r3, [pc, #444]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d02d      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800549c:	4b6c      	ldr	r3, [pc, #432]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	08db      	lsrs	r3, r3, #3
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	4a6b      	ldr	r2, [pc, #428]	; (8005654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c6:	4b62      	ldr	r3, [pc, #392]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80054f6:	e087      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005664 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550a:	4b51      	ldr	r3, [pc, #324]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551a:	ed97 6a02 	vldr	s12, [r7, #8]
 800551e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005660 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800553a:	e065      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005546:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005668 <HAL_RCC_GetSysClockFreq+0x2ec>
 800554a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554e:	4b40      	ldr	r3, [pc, #256]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005562:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005660 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800557e:	e043      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800566c <HAL_RCC_GetSysClockFreq+0x2f0>
 800558e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005592:	4b2f      	ldr	r3, [pc, #188]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c2:	e021      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005668 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d6:	4b1e      	ldr	r3, [pc, #120]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005606:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	0a5b      	lsrs	r3, r3, #9
 800560e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005612:	3301      	adds	r3, #1
 8005614:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005620:	edd7 6a07 	vldr	s13, [r7, #28]
 8005624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562c:	ee17 3a90 	vmov	r3, s15
 8005630:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005632:	e005      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	61bb      	str	r3, [r7, #24]
    break;
 8005638:	e002      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800563c:	61bb      	str	r3, [r7, #24]
    break;
 800563e:	bf00      	nop
  }

  return sysclockfreq;
 8005640:	69bb      	ldr	r3, [r7, #24]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3724      	adds	r7, #36	; 0x24
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	58024400 	.word	0x58024400
 8005654:	03d09000 	.word	0x03d09000
 8005658:	003d0900 	.word	0x003d0900
 800565c:	007a1200 	.word	0x007a1200
 8005660:	46000000 	.word	0x46000000
 8005664:	4c742400 	.word	0x4c742400
 8005668:	4a742400 	.word	0x4a742400
 800566c:	4af42400 	.word	0x4af42400

08005670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005676:	f7ff fe81 	bl	800537c <HAL_RCC_GetSysClockFreq>
 800567a:	4602      	mov	r2, r0
 800567c:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	490f      	ldr	r1, [pc, #60]	; (80056c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005688:	5ccb      	ldrb	r3, [r1, r3]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	fa22 f303 	lsr.w	r3, r2, r3
 8005692:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800569e:	5cd3      	ldrb	r3, [r2, r3]
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	fa22 f303 	lsr.w	r3, r2, r3
 80056aa:	4a07      	ldr	r2, [pc, #28]	; (80056c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80056ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056ae:	4a07      	ldr	r2, [pc, #28]	; (80056cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80056b4:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	58024400 	.word	0x58024400
 80056c4:	080088a4 	.word	0x080088a4
 80056c8:	240000bc 	.word	0x240000bc
 80056cc:	240000b8 	.word	0x240000b8

080056d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80056d4:	f7ff ffcc 	bl	8005670 <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4904      	ldr	r1, [pc, #16]	; (80056f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	58024400 	.word	0x58024400
 80056f8:	080088a4 	.word	0x080088a4

080056fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005700:	f7ff ffb6 	bl	8005670 <HAL_RCC_GetHCLKFreq>
 8005704:	4602      	mov	r2, r0
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	4904      	ldr	r1, [pc, #16]	; (8005724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005712:	5ccb      	ldrb	r3, [r1, r3]
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800571c:	4618      	mov	r0, r3
 800571e:	bd80      	pop	{r7, pc}
 8005720:	58024400 	.word	0x58024400
 8005724:	080088a4 	.word	0x080088a4

08005728 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005730:	2300      	movs	r3, #0
 8005732:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005734:	2300      	movs	r3, #0
 8005736:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d03f      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005748:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800574c:	d02a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800574e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005752:	d824      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005758:	d018      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800575a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800575e:	d81e      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005768:	d007      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800576a:	e018      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576c:	4bab      	ldr	r3, [pc, #684]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4aaa      	ldr	r2, [pc, #680]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005778:	e015      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3304      	adds	r3, #4
 800577e:	2102      	movs	r1, #2
 8005780:	4618      	mov	r0, r3
 8005782:	f001 f9cf 	bl	8006b24 <RCCEx_PLL2_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800578a:	e00c      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3324      	adds	r3, #36	; 0x24
 8005790:	2102      	movs	r1, #2
 8005792:	4618      	mov	r0, r3
 8005794:	f001 fa78 	bl	8006c88 <RCCEx_PLL3_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800579c:	e003      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	75fb      	strb	r3, [r7, #23]
      break;
 80057a2:	e000      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d109      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057ac:	4b9b      	ldr	r3, [pc, #620]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b8:	4998      	ldr	r1, [pc, #608]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	650b      	str	r3, [r1, #80]	; 0x50
 80057be:	e001      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d03d      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d826      	bhi.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f5 	.word	0x080057f5
 80057e4:	08005803 	.word	0x08005803
 80057e8:	08005815 	.word	0x08005815
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	0800582d 	.word	0x0800582d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f4:	4b89      	ldr	r3, [pc, #548]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	4a88      	ldr	r2, [pc, #544]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005800:	e015      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3304      	adds	r3, #4
 8005806:	2100      	movs	r1, #0
 8005808:	4618      	mov	r0, r3
 800580a:	f001 f98b 	bl	8006b24 <RCCEx_PLL2_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005812:	e00c      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3324      	adds	r3, #36	; 0x24
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f001 fa34 	bl	8006c88 <RCCEx_PLL3_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005824:	e003      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
      break;
 800582a:	e000      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800582c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005834:	4b79      	ldr	r3, [pc, #484]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005838:	f023 0207 	bic.w	r2, r3, #7
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	4976      	ldr	r1, [pc, #472]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005842:	4313      	orrs	r3, r2
 8005844:	650b      	str	r3, [r1, #80]	; 0x50
 8005846:	e001      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005854:	2b00      	cmp	r3, #0
 8005856:	d042      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005860:	d02b      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005866:	d825      	bhi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005868:	2bc0      	cmp	r3, #192	; 0xc0
 800586a:	d028      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800586c:	2bc0      	cmp	r3, #192	; 0xc0
 800586e:	d821      	bhi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005870:	2b80      	cmp	r3, #128	; 0x80
 8005872:	d016      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	d81d      	bhi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d007      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005880:	e018      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005882:	4b66      	ldr	r3, [pc, #408]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	4a65      	ldr	r2, [pc, #404]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800588e:	e017      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3304      	adds	r3, #4
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f001 f944 	bl	8006b24 <RCCEx_PLL2_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80058a0:	e00e      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3324      	adds	r3, #36	; 0x24
 80058a6:	2100      	movs	r1, #0
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 f9ed 	bl	8006c88 <RCCEx_PLL3_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80058b2:	e005      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	75fb      	strb	r3, [r7, #23]
      break;
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80058be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80058c6:	4b55      	ldr	r3, [pc, #340]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d2:	4952      	ldr	r1, [pc, #328]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	650b      	str	r3, [r1, #80]	; 0x50
 80058d8:	e001      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d049      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058f4:	d030      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80058f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058fa:	d82a      	bhi.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80058fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005900:	d02c      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005902:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005906:	d824      	bhi.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590c:	d018      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800590e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005912:	d81e      	bhi.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800591c:	d007      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800591e:	e018      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005920:	4b3e      	ldr	r3, [pc, #248]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a3d      	ldr	r2, [pc, #244]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800592c:	e017      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3304      	adds	r3, #4
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f8f5 	bl	8006b24 <RCCEx_PLL2_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800593e:	e00e      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3324      	adds	r3, #36	; 0x24
 8005944:	2100      	movs	r1, #0
 8005946:	4618      	mov	r0, r3
 8005948:	f001 f99e 	bl	8006c88 <RCCEx_PLL3_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005950:	e005      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	75fb      	strb	r3, [r7, #23]
      break;
 8005956:	e002      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005958:	bf00      	nop
 800595a:	e000      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800595c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005964:	4b2d      	ldr	r3, [pc, #180]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005968:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005972:	492a      	ldr	r1, [pc, #168]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005974:	4313      	orrs	r3, r2
 8005976:	658b      	str	r3, [r1, #88]	; 0x58
 8005978:	e001      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005986:	2b00      	cmp	r3, #0
 8005988:	d04c      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005994:	d030      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800599a:	d82a      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800599c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059a0:	d02c      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80059a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059a6:	d824      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80059a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ac:	d018      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80059ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059b2:	d81e      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80059b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059bc:	d007      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80059be:	e018      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c0:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059cc:	e017      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3304      	adds	r3, #4
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 f8a5 	bl	8006b24 <RCCEx_PLL2_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059de:	e00e      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 f94e 	bl	8006c88 <RCCEx_PLL3_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059f0:	e005      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
      break;
 80059f6:	e002      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80059fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10d      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a08:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a12:	4902      	ldr	r1, [pc, #8]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	658b      	str	r3, [r1, #88]	; 0x58
 8005a18:	e004      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005a1a:	bf00      	nop
 8005a1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d032      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a34:	2b30      	cmp	r3, #48	; 0x30
 8005a36:	d01c      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a38:	2b30      	cmp	r3, #48	; 0x30
 8005a3a:	d817      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d00c      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d813      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d10f      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4c:	4baf      	ldr	r3, [pc, #700]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	4aae      	ldr	r2, [pc, #696]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005a58:	e00e      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2102      	movs	r1, #2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 f85f 	bl	8006b24 <RCCEx_PLL2_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005a6a:	e005      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a70:	e002      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a7e:	4ba3      	ldr	r3, [pc, #652]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a8a:	49a0      	ldr	r1, [pc, #640]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a90:	e001      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d047      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aaa:	d030      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ab0:	d82a      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005ab2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ab6:	d02c      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005ab8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005abc:	d824      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac2:	d018      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac8:	d81e      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d007      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005ad4:	e018      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad6:	4b8d      	ldr	r3, [pc, #564]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	4a8c      	ldr	r2, [pc, #560]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ae2:	e017      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 f81a 	bl	8006b24 <RCCEx_PLL2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005af4:	e00e      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3324      	adds	r3, #36	; 0x24
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 f8c3 	bl	8006c88 <RCCEx_PLL3_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b06:	e005      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0c:	e002      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e000      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b1a:	4b7c      	ldr	r3, [pc, #496]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b26:	4979      	ldr	r1, [pc, #484]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	650b      	str	r3, [r1, #80]	; 0x50
 8005b2c:	e001      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d049      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b46:	d02e      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b4c:	d828      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b52:	d02a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005b54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b58:	d822      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b5e:	d026      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005b60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b64:	d81c      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b6a:	d010      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b70:	d816      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01d      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7a:	d111      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	2101      	movs	r1, #1
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 ffce 	bl	8006b24 <RCCEx_PLL2_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005b8c:	e012      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3324      	adds	r3, #36	; 0x24
 8005b92:	2101      	movs	r1, #1
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 f877 	bl	8006c88 <RCCEx_PLL3_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005b9e:	e009      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba4:	e006      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e004      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005baa:	bf00      	nop
 8005bac:	e002      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005bae:	bf00      	nop
 8005bb0:	e000      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bba:	4b54      	ldr	r3, [pc, #336]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc6:	4951      	ldr	r1, [pc, #324]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	650b      	str	r3, [r1, #80]	; 0x50
 8005bcc:	e001      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d04b      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005be8:	d02e      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bee:	d828      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d02a      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfa:	d822      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005bfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c00:	d026      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005c02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c06:	d81c      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c0c:	d010      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c12:	d816      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01d      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c1c:	d111      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3304      	adds	r3, #4
 8005c22:	2101      	movs	r1, #1
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 ff7d 	bl	8006b24 <RCCEx_PLL2_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c2e:	e012      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3324      	adds	r3, #36	; 0x24
 8005c34:	2101      	movs	r1, #1
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 f826 	bl	8006c88 <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c40:	e009      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	75fb      	strb	r3, [r7, #23]
      break;
 8005c46:	e006      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c48:	bf00      	nop
 8005c4a:	e004      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c5c:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c6a:	4928      	ldr	r1, [pc, #160]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	658b      	str	r3, [r1, #88]	; 0x58
 8005c70:	e001      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d02f      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c8a:	d00e      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c90:	d814      	bhi.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d015      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c9a:	d10f      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	4a1a      	ldr	r2, [pc, #104]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ca8:	e00c      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 ff37 	bl	8006b24 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005cba:	e003      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc0:	e000      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd6:	490d      	ldr	r1, [pc, #52]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	650b      	str	r3, [r1, #80]	; 0x50
 8005cdc:	e001      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d033      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d81c      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d37 	.word	0x08005d37
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d1f 	.word	0x08005d1f
 8005d08:	08005d37 	.word	0x08005d37
 8005d0c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d10:	4bb8      	ldr	r3, [pc, #736]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	4ab7      	ldr	r2, [pc, #732]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d1c:	e00c      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2102      	movs	r1, #2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fefd 	bl	8006b24 <RCCEx_PLL2_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d2e:	e003      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
      break;
 8005d34:	e000      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d3e:	4bad      	ldr	r3, [pc, #692]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d42:	f023 0203 	bic.w	r2, r3, #3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	49aa      	ldr	r1, [pc, #680]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d50:	e001      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8086 	beq.w	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d64:	4ba4      	ldr	r3, [pc, #656]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4aa3      	ldr	r2, [pc, #652]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d70:	f7fb fb4c 	bl	800140c <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d76:	e009      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d78:	f7fb fb48 	bl	800140c <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d902      	bls.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	75fb      	strb	r3, [r7, #23]
        break;
 8005d8a:	e005      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d8c:	4b9a      	ldr	r3, [pc, #616]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0ef      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d166      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d9e:	4b95      	ldr	r3, [pc, #596]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005da8:	4053      	eors	r3, r2
 8005daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d013      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db2:	4b90      	ldr	r3, [pc, #576]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dbc:	4b8d      	ldr	r3, [pc, #564]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	4a8c      	ldr	r2, [pc, #560]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc8:	4b8a      	ldr	r3, [pc, #552]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dcc:	4a89      	ldr	r2, [pc, #548]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005dd4:	4a87      	ldr	r2, [pc, #540]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de4:	d115      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de6:	f7fb fb11 	bl	800140c <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dec:	e00b      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dee:	f7fb fb0d 	bl	800140c <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d902      	bls.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	75fb      	strb	r3, [r7, #23]
            break;
 8005e04:	e005      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e06:	4b7b      	ldr	r3, [pc, #492]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ed      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d126      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e26:	d10d      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005e28:	4b72      	ldr	r3, [pc, #456]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e36:	0919      	lsrs	r1, r3, #4
 8005e38:	4b70      	ldr	r3, [pc, #448]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005e3a:	400b      	ands	r3, r1
 8005e3c:	496d      	ldr	r1, [pc, #436]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	610b      	str	r3, [r1, #16]
 8005e42:	e005      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005e44:	4b6b      	ldr	r3, [pc, #428]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	4a6a      	ldr	r2, [pc, #424]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e4e:	6113      	str	r3, [r2, #16]
 8005e50:	4b68      	ldr	r3, [pc, #416]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e5e:	4965      	ldr	r1, [pc, #404]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	670b      	str	r3, [r1, #112]	; 0x70
 8005e64:	e004      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	75bb      	strb	r3, [r7, #22]
 8005e6a:	e001      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d07e      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e80:	2b28      	cmp	r3, #40	; 0x28
 8005e82:	d867      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005e84:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8a:	bf00      	nop
 8005e8c:	08005f5b 	.word	0x08005f5b
 8005e90:	08005f55 	.word	0x08005f55
 8005e94:	08005f55 	.word	0x08005f55
 8005e98:	08005f55 	.word	0x08005f55
 8005e9c:	08005f55 	.word	0x08005f55
 8005ea0:	08005f55 	.word	0x08005f55
 8005ea4:	08005f55 	.word	0x08005f55
 8005ea8:	08005f55 	.word	0x08005f55
 8005eac:	08005f31 	.word	0x08005f31
 8005eb0:	08005f55 	.word	0x08005f55
 8005eb4:	08005f55 	.word	0x08005f55
 8005eb8:	08005f55 	.word	0x08005f55
 8005ebc:	08005f55 	.word	0x08005f55
 8005ec0:	08005f55 	.word	0x08005f55
 8005ec4:	08005f55 	.word	0x08005f55
 8005ec8:	08005f55 	.word	0x08005f55
 8005ecc:	08005f43 	.word	0x08005f43
 8005ed0:	08005f55 	.word	0x08005f55
 8005ed4:	08005f55 	.word	0x08005f55
 8005ed8:	08005f55 	.word	0x08005f55
 8005edc:	08005f55 	.word	0x08005f55
 8005ee0:	08005f55 	.word	0x08005f55
 8005ee4:	08005f55 	.word	0x08005f55
 8005ee8:	08005f55 	.word	0x08005f55
 8005eec:	08005f5b 	.word	0x08005f5b
 8005ef0:	08005f55 	.word	0x08005f55
 8005ef4:	08005f55 	.word	0x08005f55
 8005ef8:	08005f55 	.word	0x08005f55
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005f55 	.word	0x08005f55
 8005f08:	08005f55 	.word	0x08005f55
 8005f0c:	08005f5b 	.word	0x08005f5b
 8005f10:	08005f55 	.word	0x08005f55
 8005f14:	08005f55 	.word	0x08005f55
 8005f18:	08005f55 	.word	0x08005f55
 8005f1c:	08005f55 	.word	0x08005f55
 8005f20:	08005f55 	.word	0x08005f55
 8005f24:	08005f55 	.word	0x08005f55
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	08005f5b 	.word	0x08005f5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	2101      	movs	r1, #1
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fdf4 	bl	8006b24 <RCCEx_PLL2_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f40:	e00c      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3324      	adds	r3, #36	; 0x24
 8005f46:	2101      	movs	r1, #1
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fe9d 	bl	8006c88 <RCCEx_PLL3_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f52:	e003      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	75fb      	strb	r3, [r7, #23]
      break;
 8005f58:	e000      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f62:	4b24      	ldr	r3, [pc, #144]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f6e:	4921      	ldr	r1, [pc, #132]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	654b      	str	r3, [r1, #84]	; 0x54
 8005f74:	e001      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
 8005f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d03e      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8a:	2b05      	cmp	r3, #5
 8005f8c:	d820      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005f8e:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005fd7 	.word	0x08005fd7
 8005f98:	08005fad 	.word	0x08005fad
 8005f9c:	08005fbf 	.word	0x08005fbf
 8005fa0:	08005fd7 	.word	0x08005fd7
 8005fa4:	08005fd7 	.word	0x08005fd7
 8005fa8:	08005fd7 	.word	0x08005fd7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fdb6 	bl	8006b24 <RCCEx_PLL2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005fbc:	e00c      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3324      	adds	r3, #36	; 0x24
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fe5f 	bl	8006c88 <RCCEx_PLL3_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005fce:	e003      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd4:	e000      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d110      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005fde:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	f023 0207 	bic.w	r2, r3, #7
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fea:	4902      	ldr	r1, [pc, #8]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	654b      	str	r3, [r1, #84]	; 0x54
 8005ff0:	e008      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005ff2:	bf00      	nop
 8005ff4:	58024400 	.word	0x58024400
 8005ff8:	58024800 	.word	0x58024800
 8005ffc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d039      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006016:	2b05      	cmp	r3, #5
 8006018:	d820      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006063 	.word	0x08006063
 8006024:	08006039 	.word	0x08006039
 8006028:	0800604b 	.word	0x0800604b
 800602c:	08006063 	.word	0x08006063
 8006030:	08006063 	.word	0x08006063
 8006034:	08006063 	.word	0x08006063
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3304      	adds	r3, #4
 800603c:	2101      	movs	r1, #1
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fd70 	bl	8006b24 <RCCEx_PLL2_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006048:	e00c      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3324      	adds	r3, #36	; 0x24
 800604e:	2101      	movs	r1, #1
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fe19 	bl	8006c88 <RCCEx_PLL3_Config>
 8006056:	4603      	mov	r3, r0
 8006058:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800605a:	e003      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
      break;
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800606a:	4bb7      	ldr	r3, [pc, #732]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	f023 0207 	bic.w	r2, r3, #7
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006078:	49b3      	ldr	r1, [pc, #716]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800607a:	4313      	orrs	r3, r2
 800607c:	658b      	str	r3, [r1, #88]	; 0x58
 800607e:	e001      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d04b      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800609a:	d02e      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800609c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060a0:	d828      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a6:	d02a      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ac:	d822      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80060ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060b2:	d026      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80060b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060b8:	d81c      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80060ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060be:	d010      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80060c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c4:	d816      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01d      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80060ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ce:	d111      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	2100      	movs	r1, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fd24 	bl	8006b24 <RCCEx_PLL2_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80060e0:	e012      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3324      	adds	r3, #36	; 0x24
 80060e6:	2102      	movs	r1, #2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fdcd 	bl	8006c88 <RCCEx_PLL3_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80060f2:	e009      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	75fb      	strb	r3, [r7, #23]
      break;
 80060f8:	e006      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80060fa:	bf00      	nop
 80060fc:	e004      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80060fe:	bf00      	nop
 8006100:	e002      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006102:	bf00      	nop
 8006104:	e000      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800610e:	4b8e      	ldr	r3, [pc, #568]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006112:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800611c:	498a      	ldr	r1, [pc, #552]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800611e:	4313      	orrs	r3, r2
 8006120:	654b      	str	r3, [r1, #84]	; 0x54
 8006122:	e001      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d04b      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800613a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800613e:	d02e      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006140:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006144:	d828      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	d02a      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800614c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006150:	d822      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006156:	d026      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800615c:	d81c      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800615e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006162:	d010      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006168:	d816      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01d      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800616e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006172:	d111      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fcd2 	bl	8006b24 <RCCEx_PLL2_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006184:	e012      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3324      	adds	r3, #36	; 0x24
 800618a:	2102      	movs	r1, #2
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fd7b 	bl	8006c88 <RCCEx_PLL3_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006196:	e009      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	75fb      	strb	r3, [r7, #23]
      break;
 800619c:	e006      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800619e:	bf00      	nop
 80061a0:	e004      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80061a2:	bf00      	nop
 80061a4:	e002      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80061aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061b2:	4b65      	ldr	r3, [pc, #404]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061c0:	4961      	ldr	r1, [pc, #388]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	658b      	str	r3, [r1, #88]	; 0x58
 80061c6:	e001      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d04b      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061e2:	d02e      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80061e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061e8:	d828      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80061ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ee:	d02a      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f4:	d822      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80061f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061fa:	d026      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80061fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006200:	d81c      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006206:	d010      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800620c:	d816      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01d      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006216:	d111      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	2100      	movs	r1, #0
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fc80 	bl	8006b24 <RCCEx_PLL2_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006228:	e012      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3324      	adds	r3, #36	; 0x24
 800622e:	2102      	movs	r1, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fd29 	bl	8006c88 <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800623a:	e009      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	75fb      	strb	r3, [r7, #23]
      break;
 8006240:	e006      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006242:	bf00      	nop
 8006244:	e004      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006246:	bf00      	nop
 8006248:	e002      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800624a:	bf00      	nop
 800624c:	e000      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800624e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006256:	4b3c      	ldr	r3, [pc, #240]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006264:	4938      	ldr	r1, [pc, #224]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006266:	4313      	orrs	r3, r2
 8006268:	658b      	str	r3, [r1, #88]	; 0x58
 800626a:	e001      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006286:	d10a      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3324      	adds	r3, #36	; 0x24
 800628c:	2102      	movs	r1, #2
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fcfa 	bl	8006c88 <RCCEx_PLL3_Config>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800629e:	4b2a      	ldr	r3, [pc, #168]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ac:	4926      	ldr	r1, [pc, #152]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c8:	d10a      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3324      	adds	r3, #36	; 0x24
 80062ce:	2102      	movs	r1, #2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fcd9 	bl	8006c88 <RCCEx_PLL3_Config>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062e0:	4b19      	ldr	r3, [pc, #100]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ee:	4916      	ldr	r1, [pc, #88]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d036      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800630a:	d01f      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800630c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006310:	d817      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631a:	d009      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800631c:	e011      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fbfd 	bl	8006b24 <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800632e:	e00e      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3324      	adds	r3, #36	; 0x24
 8006334:	2102      	movs	r1, #2
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fca6 	bl	8006c88 <RCCEx_PLL3_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006340:	e005      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
      break;
 8006346:	e002      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006348:	58024400 	.word	0x58024400
      break;
 800634c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006354:	4b93      	ldr	r3, [pc, #588]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006362:	4990      	ldr	r1, [pc, #576]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006364:	4313      	orrs	r3, r2
 8006366:	658b      	str	r3, [r1, #88]	; 0x58
 8006368:	e001      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d033      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006380:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006384:	d01c      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800638a:	d816      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800638c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006390:	d003      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006396:	d007      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006398:	e00f      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800639a:	4b82      	ldr	r3, [pc, #520]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	4a81      	ldr	r2, [pc, #516]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80063a6:	e00c      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3324      	adds	r3, #36	; 0x24
 80063ac:	2101      	movs	r1, #1
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fc6a 	bl	8006c88 <RCCEx_PLL3_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80063b8:	e003      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	75fb      	strb	r3, [r7, #23]
      break;
 80063be:	e000      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80063c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063c8:	4b76      	ldr	r3, [pc, #472]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d6:	4973      	ldr	r1, [pc, #460]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	654b      	str	r3, [r1, #84]	; 0x54
 80063dc:	e001      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d029      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80063f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fa:	d007      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80063fc:	e00f      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fe:	4b69      	ldr	r3, [pc, #420]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	4a68      	ldr	r2, [pc, #416]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800640a:	e00b      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	2102      	movs	r1, #2
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fb86 	bl	8006b24 <RCCEx_PLL2_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800641c:	e002      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	75fb      	strb	r3, [r7, #23]
      break;
 8006422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800642a:	4b5e      	ldr	r3, [pc, #376]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800642c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006436:	495b      	ldr	r1, [pc, #364]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006438:	4313      	orrs	r3, r2
 800643a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800643c:	e001      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643e:	7dfb      	ldrb	r3, [r7, #23]
 8006440:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3324      	adds	r3, #36	; 0x24
 8006452:	2102      	movs	r1, #2
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fc17 	bl	8006c88 <RCCEx_PLL3_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d030      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006478:	d017      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800647a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800647e:	d811      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d013      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800648a:	d80b      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d010      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006494:	d106      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006496:	4b43      	ldr	r3, [pc, #268]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	4a42      	ldr	r2, [pc, #264]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800649c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80064a2:	e007      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	75fb      	strb	r3, [r7, #23]
      break;
 80064a8:	e004      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80064aa:	bf00      	nop
 80064ac:	e002      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80064ae:	bf00      	nop
 80064b0:	e000      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80064b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ba:	4b3a      	ldr	r3, [pc, #232]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c6:	4937      	ldr	r1, [pc, #220]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	654b      	str	r3, [r1, #84]	; 0x54
 80064cc:	e001      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	492e      	ldr	r1, [pc, #184]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064fc:	4b29      	ldr	r3, [pc, #164]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800650a:	4926      	ldr	r1, [pc, #152]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800650c:	4313      	orrs	r3, r2
 800650e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800651c:	4b21      	ldr	r3, [pc, #132]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006520:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006528:	491e      	ldr	r1, [pc, #120]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00d      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800653a:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006540:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006544:	6113      	str	r3, [r2, #16]
 8006546:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006550:	4914      	ldr	r1, [pc, #80]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006552:	4313      	orrs	r3, r2
 8006554:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	da08      	bge.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800655e:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006562:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656a:	490e      	ldr	r1, [pc, #56]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800656c:	4313      	orrs	r3, r2
 800656e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800657c:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800657e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006580:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	4906      	ldr	r1, [pc, #24]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800658c:	4313      	orrs	r3, r2
 800658e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006590:	7dbb      	ldrb	r3, [r7, #22]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	e000      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	58024400 	.word	0x58024400

080065a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80065ac:	f7ff f860 	bl	8005670 <HAL_RCC_GetHCLKFreq>
 80065b0:	4602      	mov	r2, r0
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	4904      	ldr	r1, [pc, #16]	; (80065d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80065be:	5ccb      	ldrb	r3, [r1, r3]
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	58024400 	.word	0x58024400
 80065d0:	080088a4 	.word	0x080088a4

080065d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b089      	sub	sp, #36	; 0x24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065dc:	4ba1      	ldr	r3, [pc, #644]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80065e6:	4b9f      	ldr	r3, [pc, #636]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	0b1b      	lsrs	r3, r3, #12
 80065ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80065f2:	4b9c      	ldr	r3, [pc, #624]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	091b      	lsrs	r3, r3, #4
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80065fe:	4b99      	ldr	r3, [pc, #612]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	08db      	lsrs	r3, r3, #3
 8006604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8111 	beq.w	8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b02      	cmp	r3, #2
 8006626:	f000 8083 	beq.w	8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	2b02      	cmp	r3, #2
 800662e:	f200 80a1 	bhi.w	8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d056      	beq.n	80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800663e:	e099      	b.n	8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006640:	4b88      	ldr	r3, [pc, #544]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d02d      	beq.n	80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800664c:	4b85      	ldr	r3, [pc, #532]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	4a84      	ldr	r2, [pc, #528]	; (8006868 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
 800665c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006676:	4b7b      	ldr	r3, [pc, #492]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006686:	ed97 6a03 	vldr	s12, [r7, #12]
 800668a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800686c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800668e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800669a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80066a6:	e087      	b.n	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006870 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80066b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ba:	4b6a      	ldr	r3, [pc, #424]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800686c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066ea:	e065      	b.n	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fe:	4b59      	ldr	r3, [pc, #356]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006712:	eddf 5a56 	vldr	s11, [pc, #344]	; 800686c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800672e:	e043      	b.n	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800673e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006742:	4b48      	ldr	r3, [pc, #288]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006752:	ed97 6a03 	vldr	s12, [r7, #12]
 8006756:	eddf 5a45 	vldr	s11, [pc, #276]	; 800686c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800675a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006772:	e021      	b.n	80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006786:	4b37      	ldr	r3, [pc, #220]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006796:	ed97 6a03 	vldr	s12, [r7, #12]
 800679a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800686c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800679e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80067b8:	4b2a      	ldr	r3, [pc, #168]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	0a5b      	lsrs	r3, r3, #9
 80067be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067de:	ee17 2a90 	vmov	r2, s15
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80067e6:	4b1f      	ldr	r3, [pc, #124]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006800:	edd7 6a07 	vldr	s13, [r7, #28]
 8006804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800680c:	ee17 2a90 	vmov	r2, s15
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006814:	4b13      	ldr	r3, [pc, #76]	; (8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800682a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800682e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800683a:	ee17 2a90 	vmov	r2, s15
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006842:	e008      	b.n	8006856 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	609a      	str	r2, [r3, #8]
}
 8006856:	bf00      	nop
 8006858:	3724      	adds	r7, #36	; 0x24
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	58024400 	.word	0x58024400
 8006868:	03d09000 	.word	0x03d09000
 800686c:	46000000 	.word	0x46000000
 8006870:	4c742400 	.word	0x4c742400
 8006874:	4a742400 	.word	0x4a742400
 8006878:	4af42400 	.word	0x4af42400

0800687c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800687c:	b480      	push	{r7}
 800687e:	b089      	sub	sp, #36	; 0x24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006884:	4ba1      	ldr	r3, [pc, #644]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800688e:	4b9f      	ldr	r3, [pc, #636]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	0d1b      	lsrs	r3, r3, #20
 8006894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006898:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800689a:	4b9c      	ldr	r3, [pc, #624]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	0a1b      	lsrs	r3, r3, #8
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80068a6:	4b99      	ldr	r3, [pc, #612]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	08db      	lsrs	r3, r3, #3
 80068ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8111 	beq.w	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	f000 8083 	beq.w	80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	f200 80a1 	bhi.w	8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d056      	beq.n	8006994 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80068e6:	e099      	b.n	8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e8:	4b88      	ldr	r3, [pc, #544]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d02d      	beq.n	8006950 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068f4:	4b85      	ldr	r3, [pc, #532]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	08db      	lsrs	r3, r3, #3
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	4a84      	ldr	r2, [pc, #528]	; (8006b10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691e:	4b7b      	ldr	r3, [pc, #492]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006932:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800694e:	e087      	b.n	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800695e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006962:	4b6a      	ldr	r3, [pc, #424]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006972:	ed97 6a03 	vldr	s12, [r7, #12]
 8006976:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800697a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006992:	e065      	b.n	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a6:	4b59      	ldr	r3, [pc, #356]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069d6:	e043      	b.n	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ea:	4b48      	ldr	r3, [pc, #288]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80069fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a1a:	e021      	b.n	8006a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2e:	4b37      	ldr	r3, [pc, #220]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006a60:	4b2a      	ldr	r3, [pc, #168]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	0a5b      	lsrs	r3, r3, #9
 8006a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a86:	ee17 2a90 	vmov	r2, s15
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006a8e:	4b1f      	ldr	r3, [pc, #124]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	0c1b      	lsrs	r3, r3, #16
 8006a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a98:	ee07 3a90 	vmov	s15, r3
 8006a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab4:	ee17 2a90 	vmov	r2, s15
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006abc:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae2:	ee17 2a90 	vmov	r2, s15
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006aea:	e008      	b.n	8006afe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	609a      	str	r2, [r3, #8]
}
 8006afe:	bf00      	nop
 8006b00:	3724      	adds	r7, #36	; 0x24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	03d09000 	.word	0x03d09000
 8006b14:	46000000 	.word	0x46000000
 8006b18:	4c742400 	.word	0x4c742400
 8006b1c:	4a742400 	.word	0x4a742400
 8006b20:	4af42400 	.word	0x4af42400

08006b24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b32:	4b53      	ldr	r3, [pc, #332]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d101      	bne.n	8006b42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e099      	b.n	8006c76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b42:	4b4f      	ldr	r3, [pc, #316]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a4e      	ldr	r2, [pc, #312]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006b48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b4e:	f7fa fc5d 	bl	800140c <HAL_GetTick>
 8006b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b54:	e008      	b.n	8006b68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b56:	f7fa fc59 	bl	800140c <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d901      	bls.n	8006b68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e086      	b.n	8006c76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b68:	4b45      	ldr	r3, [pc, #276]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f0      	bne.n	8006b56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b74:	4b42      	ldr	r3, [pc, #264]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	031b      	lsls	r3, r3, #12
 8006b82:	493f      	ldr	r1, [pc, #252]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	628b      	str	r3, [r1, #40]	; 0x28
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	025b      	lsls	r3, r3, #9
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	041b      	lsls	r3, r3, #16
 8006ba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	061b      	lsls	r3, r3, #24
 8006bb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006bb8:	4931      	ldr	r1, [pc, #196]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006bbe:	4b30      	ldr	r3, [pc, #192]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	492d      	ldr	r1, [pc, #180]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006bd0:	4b2b      	ldr	r3, [pc, #172]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	f023 0220 	bic.w	r2, r3, #32
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	4928      	ldr	r1, [pc, #160]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006be2:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	4a26      	ldr	r2, [pc, #152]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006be8:	f023 0310 	bic.w	r3, r3, #16
 8006bec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006bee:	4b24      	ldr	r3, [pc, #144]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bf2:	4b24      	ldr	r3, [pc, #144]	; (8006c84 <RCCEx_PLL2_Config+0x160>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	69d2      	ldr	r2, [r2, #28]
 8006bfa:	00d2      	lsls	r2, r2, #3
 8006bfc:	4920      	ldr	r1, [pc, #128]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c02:	4b1f      	ldr	r3, [pc, #124]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	4a1e      	ldr	r2, [pc, #120]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c08:	f043 0310 	orr.w	r3, r3, #16
 8006c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d106      	bne.n	8006c22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c14:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c20:	e00f      	b.n	8006c42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d106      	bne.n	8006c36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	4a14      	ldr	r2, [pc, #80]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c34:	e005      	b.n	8006c42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c36:	4b12      	ldr	r3, [pc, #72]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3a:	4a11      	ldr	r2, [pc, #68]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006c42:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a0e      	ldr	r2, [pc, #56]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c4e:	f7fa fbdd 	bl	800140c <HAL_GetTick>
 8006c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c54:	e008      	b.n	8006c68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c56:	f7fa fbd9 	bl	800140c <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e006      	b.n	8006c76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <RCCEx_PLL2_Config+0x15c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0f0      	beq.n	8006c56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	58024400 	.word	0x58024400
 8006c84:	ffff0007 	.word	0xffff0007

08006c88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c96:	4b53      	ldr	r3, [pc, #332]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d101      	bne.n	8006ca6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e099      	b.n	8006dda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ca6:	4b4f      	ldr	r3, [pc, #316]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a4e      	ldr	r2, [pc, #312]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cb2:	f7fa fbab 	bl	800140c <HAL_GetTick>
 8006cb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006cb8:	e008      	b.n	8006ccc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006cba:	f7fa fba7 	bl	800140c <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e086      	b.n	8006dda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ccc:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f0      	bne.n	8006cba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006cd8:	4b42      	ldr	r3, [pc, #264]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	051b      	lsls	r3, r3, #20
 8006ce6:	493f      	ldr	r1, [pc, #252]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	628b      	str	r3, [r1, #40]	; 0x28
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	025b      	lsls	r3, r3, #9
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	041b      	lsls	r3, r3, #16
 8006d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	061b      	lsls	r3, r3, #24
 8006d18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d1c:	4931      	ldr	r1, [pc, #196]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d22:	4b30      	ldr	r3, [pc, #192]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	492d      	ldr	r1, [pc, #180]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d34:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	4928      	ldr	r1, [pc, #160]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d46:	4b27      	ldr	r3, [pc, #156]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	4a26      	ldr	r2, [pc, #152]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d56:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <RCCEx_PLL3_Config+0x160>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	69d2      	ldr	r2, [r2, #28]
 8006d5e:	00d2      	lsls	r2, r2, #3
 8006d60:	4920      	ldr	r1, [pc, #128]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d66:	4b1f      	ldr	r3, [pc, #124]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d78:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d84:	e00f      	b.n	8006da6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d106      	bne.n	8006d9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006d8c:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d98:	e005      	b.n	8006da6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006da6:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a0e      	ldr	r2, [pc, #56]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db2:	f7fa fb2b 	bl	800140c <HAL_GetTick>
 8006db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006db8:	e008      	b.n	8006dcc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006dba:	f7fa fb27 	bl	800140c <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e006      	b.n	8006dda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <RCCEx_PLL3_Config+0x15c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	58024400 	.word	0x58024400
 8006de8:	ffff0007 	.word	0xffff0007

08006dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e042      	b.n	8006e84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d106      	bne.n	8006e16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7f9 fe71 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2224      	movs	r2, #36	; 0x24
 8006e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0201 	bic.w	r2, r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fc12 	bl	8007658 <UART_SetConfig>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e022      	b.n	8006e84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 f966 	bl	8008118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0201 	orr.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f9ed 	bl	800825c <UART_CheckIdleState>
 8006e82:	4603      	mov	r3, r0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	; 0x28
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	f040 8083 	bne.w	8006fae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_UART_Transmit+0x28>
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e07b      	b.n	8006fb0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Transmit+0x3a>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e074      	b.n	8006fb0 <HAL_UART_Transmit+0x124>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2221      	movs	r2, #33	; 0x21
 8006eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ede:	f7fa fa95 	bl	800140c <HAL_GetTick>
 8006ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	88fa      	ldrh	r2, [r7, #6]
 8006ee8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	88fa      	ldrh	r2, [r7, #6]
 8006ef0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efc:	d108      	bne.n	8006f10 <HAL_UART_Transmit+0x84>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	e003      	b.n	8006f18 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006f20:	e02c      	b.n	8006f7c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f001 f9e0 	bl	80082f2 <UART_WaitOnFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e039      	b.n	8006fb0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10b      	bne.n	8006f5a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	3302      	adds	r3, #2
 8006f56:	61bb      	str	r3, [r7, #24]
 8006f58:	e007      	b.n	8006f6a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	781a      	ldrb	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	3301      	adds	r3, #1
 8006f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1cc      	bne.n	8006f22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2140      	movs	r1, #64	; 0x40
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f001 f9ad 	bl	80082f2 <UART_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e006      	b.n	8006fb0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e000      	b.n	8006fb0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d168      	bne.n	80070a2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_UART_Transmit_DMA+0x24>
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e061      	b.n	80070a4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d101      	bne.n	8006fee <HAL_UART_Transmit_DMA+0x36>
 8006fea:	2302      	movs	r3, #2
 8006fec:	e05a      	b.n	80070a4 <HAL_UART_Transmit_DMA+0xec>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	88fa      	ldrh	r2, [r7, #6]
 8007000:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2221      	movs	r2, #33	; 0x21
 8007018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007020:	2b00      	cmp	r3, #0
 8007022:	d02c      	beq.n	800707e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007028:	4a20      	ldr	r2, [pc, #128]	; (80070ac <HAL_UART_Transmit_DMA+0xf4>)
 800702a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007030:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <HAL_UART_Transmit_DMA+0xf8>)
 8007032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007038:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <HAL_UART_Transmit_DMA+0xfc>)
 800703a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007040:	2200      	movs	r2, #0
 8007042:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	4619      	mov	r1, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3328      	adds	r3, #40	; 0x28
 8007054:	461a      	mov	r2, r3
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	f7fa fe80 	bl	8001d5c <HAL_DMA_Start_IT>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00d      	beq.n	800707e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2210      	movs	r2, #16
 8007066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e012      	b.n	80070a4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2240      	movs	r2, #64	; 0x40
 8007084:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800709c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	e000      	b.n	80070a4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80070a2:	2302      	movs	r3, #2
  }
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	08008495 	.word	0x08008495
 80070b0:	080084e5 	.word	0x080084e5
 80070b4:	08008501 	.word	0x08008501

080070b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	f640 030f 	movw	r3, #2063	; 0x80f
 80070de:	4013      	ands	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d118      	bne.n	800711a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d013      	beq.n	800711a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 8282 	beq.w	8007614 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
      }
      return;
 8007118:	e27c      	b.n	8007614 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 80ef 	beq.w	8007300 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4b73      	ldr	r3, [pc, #460]	; (80072f4 <HAL_UART_IRQHandler+0x23c>)
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d105      	bne.n	8007138 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	4b72      	ldr	r3, [pc, #456]	; (80072f8 <HAL_UART_IRQHandler+0x240>)
 8007130:	4013      	ands	r3, r2
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 80e4 	beq.w	8007300 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d010      	beq.n	8007164 <HAL_UART_IRQHandler+0xac>
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2201      	movs	r2, #1
 8007152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715a:	f043 0201 	orr.w	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d010      	beq.n	8007190 <HAL_UART_IRQHandler+0xd8>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2202      	movs	r2, #2
 800717e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007186:	f043 0204 	orr.w	r2, r3, #4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d010      	beq.n	80071bc <HAL_UART_IRQHandler+0x104>
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2204      	movs	r2, #4
 80071aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b2:	f043 0202 	orr.w	r2, r3, #2
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d015      	beq.n	80071f2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4b48      	ldr	r3, [pc, #288]	; (80072f4 <HAL_UART_IRQHandler+0x23c>)
 80071d4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2208      	movs	r2, #8
 80071e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e8:	f043 0208 	orr.w	r2, r3, #8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d011      	beq.n	8007220 <HAL_UART_IRQHandler+0x168>
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800720e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 81f6 	beq.w	8007618 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d011      	beq.n	800725a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007260:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b40      	cmp	r3, #64	; 0x40
 800726e:	d004      	beq.n	800727a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007276:	2b00      	cmp	r3, #0
 8007278:	d031      	beq.n	80072de <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 f8d8 	bl	8008430 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d123      	bne.n	80072d6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800729c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d013      	beq.n	80072ce <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072aa:	4a14      	ldr	r2, [pc, #80]	; (80072fc <HAL_UART_IRQHandler+0x244>)
 80072ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fb fada 	bl	800286c <HAL_DMA_Abort_IT>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d017      	beq.n	80072ee <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072cc:	e00f      	b.n	80072ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7f9 fbdf 	bl	8000a92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	e00b      	b.n	80072ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7f9 fbdb 	bl	8000a92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	e007      	b.n	80072ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7f9 fbd7 	bl	8000a92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80072ec:	e194      	b.n	8007618 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ee:	bf00      	nop
    return;
 80072f0:	e192      	b.n	8007618 <HAL_UART_IRQHandler+0x560>
 80072f2:	bf00      	nop
 80072f4:	10000001 	.word	0x10000001
 80072f8:	04000120 	.word	0x04000120
 80072fc:	08008581 	.word	0x08008581

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007304:	2b01      	cmp	r3, #1
 8007306:	f040 810f 	bne.w	8007528 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8109 	beq.w	8007528 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8103 	beq.w	8007528 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2210      	movs	r2, #16
 8007328:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	f040 80bb 	bne.w	80074b0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a96      	ldr	r2, [pc, #600]	; (800759c <HAL_UART_IRQHandler+0x4e4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d059      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a94      	ldr	r2, [pc, #592]	; (80075a0 <HAL_UART_IRQHandler+0x4e8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d053      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a92      	ldr	r2, [pc, #584]	; (80075a4 <HAL_UART_IRQHandler+0x4ec>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d04d      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a90      	ldr	r2, [pc, #576]	; (80075a8 <HAL_UART_IRQHandler+0x4f0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d047      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a8e      	ldr	r2, [pc, #568]	; (80075ac <HAL_UART_IRQHandler+0x4f4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d041      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a8c      	ldr	r2, [pc, #560]	; (80075b0 <HAL_UART_IRQHandler+0x4f8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d03b      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a8a      	ldr	r2, [pc, #552]	; (80075b4 <HAL_UART_IRQHandler+0x4fc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d035      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a88      	ldr	r2, [pc, #544]	; (80075b8 <HAL_UART_IRQHandler+0x500>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d02f      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a86      	ldr	r2, [pc, #536]	; (80075bc <HAL_UART_IRQHandler+0x504>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d029      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a84      	ldr	r2, [pc, #528]	; (80075c0 <HAL_UART_IRQHandler+0x508>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d023      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a82      	ldr	r2, [pc, #520]	; (80075c4 <HAL_UART_IRQHandler+0x50c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01d      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a80      	ldr	r2, [pc, #512]	; (80075c8 <HAL_UART_IRQHandler+0x510>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d017      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a7e      	ldr	r2, [pc, #504]	; (80075cc <HAL_UART_IRQHandler+0x514>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d011      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a7c      	ldr	r2, [pc, #496]	; (80075d0 <HAL_UART_IRQHandler+0x518>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00b      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a7a      	ldr	r2, [pc, #488]	; (80075d4 <HAL_UART_IRQHandler+0x51c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d005      	beq.n	80073fa <HAL_UART_IRQHandler+0x342>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a78      	ldr	r2, [pc, #480]	; (80075d8 <HAL_UART_IRQHandler+0x520>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d105      	bne.n	8007406 <HAL_UART_IRQHandler+0x34e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	b29b      	uxth	r3, r3
 8007404:	e004      	b.n	8007410 <HAL_UART_IRQHandler+0x358>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	b29b      	uxth	r3, r3
 8007410:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8007412:	893b      	ldrh	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 8101 	beq.w	800761c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007420:	893a      	ldrh	r2, [r7, #8]
 8007422:	429a      	cmp	r2, r3
 8007424:	f080 80fa 	bcs.w	800761c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	893a      	ldrh	r2, [r7, #8]
 800742c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743a:	d02b      	beq.n	8007494 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800744a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0201 	bic.w	r2, r2, #1
 800745a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800746a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0210 	bic.w	r2, r2, #16
 8007488:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800748e:	4618      	mov	r0, r3
 8007490:	f7fa fece 	bl	8002230 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f8c9 	bl	8007640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074ae:	e0b5      	b.n	800761c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074bc:	b29b      	uxth	r3, r3
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80a8 	beq.w	8007620 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80074d0:	897b      	ldrh	r3, [r7, #10]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 80a4 	beq.w	8007620 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074e6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6899      	ldr	r1, [r3, #8]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b3a      	ldr	r3, [pc, #232]	; (80075dc <HAL_UART_IRQHandler+0x524>)
 80074f4:	400b      	ands	r3, r1
 80074f6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0210 	bic.w	r2, r2, #16
 800751a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800751c:	897b      	ldrh	r3, [r7, #10]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f88d 	bl	8007640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007526:	e07b      	b.n	8007620 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00d      	beq.n	800754e <HAL_UART_IRQHandler+0x496>
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007544:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 f84a 	bl	80085e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800754c:	e06b      	b.n	8007626 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007554:	2b00      	cmp	r3, #0
 8007556:	d012      	beq.n	800757e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d008      	beq.n	800757e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007570:	2b00      	cmp	r3, #0
 8007572:	d057      	beq.n	8007624 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
    }
    return;
 800757c:	e052      	b.n	8007624 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d02b      	beq.n	80075e0 <HAL_UART_IRQHandler+0x528>
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d026      	beq.n	80075e0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 f80a 	bl	80085ac <UART_EndTransmit_IT>
    return;
 8007598:	e045      	b.n	8007626 <HAL_UART_IRQHandler+0x56e>
 800759a:	bf00      	nop
 800759c:	40020010 	.word	0x40020010
 80075a0:	40020028 	.word	0x40020028
 80075a4:	40020040 	.word	0x40020040
 80075a8:	40020058 	.word	0x40020058
 80075ac:	40020070 	.word	0x40020070
 80075b0:	40020088 	.word	0x40020088
 80075b4:	400200a0 	.word	0x400200a0
 80075b8:	400200b8 	.word	0x400200b8
 80075bc:	40020410 	.word	0x40020410
 80075c0:	40020428 	.word	0x40020428
 80075c4:	40020440 	.word	0x40020440
 80075c8:	40020458 	.word	0x40020458
 80075cc:	40020470 	.word	0x40020470
 80075d0:	40020488 	.word	0x40020488
 80075d4:	400204a0 	.word	0x400204a0
 80075d8:	400204b8 	.word	0x400204b8
 80075dc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <HAL_UART_IRQHandler+0x544>
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 f807 	bl	8008608 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075fa:	e014      	b.n	8007626 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00f      	beq.n	8007626 <HAL_UART_IRQHandler+0x56e>
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	da0c      	bge.n	8007626 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fff1 	bl	80085f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007612:	e008      	b.n	8007626 <HAL_UART_IRQHandler+0x56e>
      return;
 8007614:	bf00      	nop
 8007616:	e006      	b.n	8007626 <HAL_UART_IRQHandler+0x56e>
    return;
 8007618:	bf00      	nop
 800761a:	e004      	b.n	8007626 <HAL_UART_IRQHandler+0x56e>
      return;
 800761c:	bf00      	nop
 800761e:	e002      	b.n	8007626 <HAL_UART_IRQHandler+0x56e>
      return;
 8007620:	bf00      	nop
 8007622:	e000      	b.n	8007626 <HAL_UART_IRQHandler+0x56e>
    return;
 8007624:	bf00      	nop
  }
}
 8007626:	3720      	adds	r7, #32
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007658:	b5b0      	push	{r4, r5, r7, lr}
 800765a:	b08e      	sub	sp, #56	; 0x38
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	4313      	orrs	r3, r2
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	4bbf      	ldr	r3, [pc, #764]	; (8007984 <UART_SetConfig+0x32c>)
 8007686:	4013      	ands	r3, r2
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6812      	ldr	r2, [r2, #0]
 800768c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800768e:	430b      	orrs	r3, r1
 8007690:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4ab5      	ldr	r2, [pc, #724]	; (8007988 <UART_SetConfig+0x330>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d004      	beq.n	80076c2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076be:	4313      	orrs	r3, r2
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	4bb0      	ldr	r3, [pc, #704]	; (800798c <UART_SetConfig+0x334>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076d2:	430b      	orrs	r3, r1
 80076d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	f023 010f 	bic.w	r1, r3, #15
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4aa7      	ldr	r2, [pc, #668]	; (8007990 <UART_SetConfig+0x338>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d176      	bne.n	80077e4 <UART_SetConfig+0x18c>
 80076f6:	4ba7      	ldr	r3, [pc, #668]	; (8007994 <UART_SetConfig+0x33c>)
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076fe:	2b28      	cmp	r3, #40	; 0x28
 8007700:	d86c      	bhi.n	80077dc <UART_SetConfig+0x184>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <UART_SetConfig+0xb0>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	080077ad 	.word	0x080077ad
 800770c:	080077dd 	.word	0x080077dd
 8007710:	080077dd 	.word	0x080077dd
 8007714:	080077dd 	.word	0x080077dd
 8007718:	080077dd 	.word	0x080077dd
 800771c:	080077dd 	.word	0x080077dd
 8007720:	080077dd 	.word	0x080077dd
 8007724:	080077dd 	.word	0x080077dd
 8007728:	080077b5 	.word	0x080077b5
 800772c:	080077dd 	.word	0x080077dd
 8007730:	080077dd 	.word	0x080077dd
 8007734:	080077dd 	.word	0x080077dd
 8007738:	080077dd 	.word	0x080077dd
 800773c:	080077dd 	.word	0x080077dd
 8007740:	080077dd 	.word	0x080077dd
 8007744:	080077dd 	.word	0x080077dd
 8007748:	080077bd 	.word	0x080077bd
 800774c:	080077dd 	.word	0x080077dd
 8007750:	080077dd 	.word	0x080077dd
 8007754:	080077dd 	.word	0x080077dd
 8007758:	080077dd 	.word	0x080077dd
 800775c:	080077dd 	.word	0x080077dd
 8007760:	080077dd 	.word	0x080077dd
 8007764:	080077dd 	.word	0x080077dd
 8007768:	080077c5 	.word	0x080077c5
 800776c:	080077dd 	.word	0x080077dd
 8007770:	080077dd 	.word	0x080077dd
 8007774:	080077dd 	.word	0x080077dd
 8007778:	080077dd 	.word	0x080077dd
 800777c:	080077dd 	.word	0x080077dd
 8007780:	080077dd 	.word	0x080077dd
 8007784:	080077dd 	.word	0x080077dd
 8007788:	080077cd 	.word	0x080077cd
 800778c:	080077dd 	.word	0x080077dd
 8007790:	080077dd 	.word	0x080077dd
 8007794:	080077dd 	.word	0x080077dd
 8007798:	080077dd 	.word	0x080077dd
 800779c:	080077dd 	.word	0x080077dd
 80077a0:	080077dd 	.word	0x080077dd
 80077a4:	080077dd 	.word	0x080077dd
 80077a8:	080077d5 	.word	0x080077d5
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e222      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077b4:	2304      	movs	r3, #4
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e21e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077bc:	2308      	movs	r3, #8
 80077be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c2:	e21a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077c4:	2310      	movs	r3, #16
 80077c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ca:	e216      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077cc:	2320      	movs	r3, #32
 80077ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d2:	e212      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077da:	e20e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077dc:	2380      	movs	r3, #128	; 0x80
 80077de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077e2:	e20a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a6b      	ldr	r2, [pc, #428]	; (8007998 <UART_SetConfig+0x340>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d130      	bne.n	8007850 <UART_SetConfig+0x1f8>
 80077ee:	4b69      	ldr	r3, [pc, #420]	; (8007994 <UART_SetConfig+0x33c>)
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	d826      	bhi.n	8007848 <UART_SetConfig+0x1f0>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <UART_SetConfig+0x1a8>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007819 	.word	0x08007819
 8007804:	08007821 	.word	0x08007821
 8007808:	08007829 	.word	0x08007829
 800780c:	08007831 	.word	0x08007831
 8007810:	08007839 	.word	0x08007839
 8007814:	08007841 	.word	0x08007841
 8007818:	2300      	movs	r3, #0
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e1ec      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007826:	e1e8      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800782e:	e1e4      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007836:	e1e0      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007838:	2320      	movs	r3, #32
 800783a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800783e:	e1dc      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007840:	2340      	movs	r3, #64	; 0x40
 8007842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007846:	e1d8      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800784e:	e1d4      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a51      	ldr	r2, [pc, #324]	; (800799c <UART_SetConfig+0x344>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d130      	bne.n	80078bc <UART_SetConfig+0x264>
 800785a:	4b4e      	ldr	r3, [pc, #312]	; (8007994 <UART_SetConfig+0x33c>)
 800785c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	2b05      	cmp	r3, #5
 8007864:	d826      	bhi.n	80078b4 <UART_SetConfig+0x25c>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <UART_SetConfig+0x214>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	08007885 	.word	0x08007885
 8007870:	0800788d 	.word	0x0800788d
 8007874:	08007895 	.word	0x08007895
 8007878:	0800789d 	.word	0x0800789d
 800787c:	080078a5 	.word	0x080078a5
 8007880:	080078ad 	.word	0x080078ad
 8007884:	2300      	movs	r3, #0
 8007886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788a:	e1b6      	b.n	8007bfa <UART_SetConfig+0x5a2>
 800788c:	2304      	movs	r3, #4
 800788e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007892:	e1b2      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007894:	2308      	movs	r3, #8
 8007896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800789a:	e1ae      	b.n	8007bfa <UART_SetConfig+0x5a2>
 800789c:	2310      	movs	r3, #16
 800789e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078a2:	e1aa      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078a4:	2320      	movs	r3, #32
 80078a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078aa:	e1a6      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078ac:	2340      	movs	r3, #64	; 0x40
 80078ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078b2:	e1a2      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078b4:	2380      	movs	r3, #128	; 0x80
 80078b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ba:	e19e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a37      	ldr	r2, [pc, #220]	; (80079a0 <UART_SetConfig+0x348>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d130      	bne.n	8007928 <UART_SetConfig+0x2d0>
 80078c6:	4b33      	ldr	r3, [pc, #204]	; (8007994 <UART_SetConfig+0x33c>)
 80078c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d826      	bhi.n	8007920 <UART_SetConfig+0x2c8>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x280>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078f9 	.word	0x080078f9
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078f6:	e180      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078fe:	e17c      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007906:	e178      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800790e:	e174      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007916:	e170      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800791e:	e16c      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007926:	e168      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1d      	ldr	r2, [pc, #116]	; (80079a4 <UART_SetConfig+0x34c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d142      	bne.n	80079b8 <UART_SetConfig+0x360>
 8007932:	4b18      	ldr	r3, [pc, #96]	; (8007994 <UART_SetConfig+0x33c>)
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b05      	cmp	r3, #5
 800793c:	d838      	bhi.n	80079b0 <UART_SetConfig+0x358>
 800793e:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <UART_SetConfig+0x2ec>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007965 	.word	0x08007965
 800794c:	0800796d 	.word	0x0800796d
 8007950:	08007975 	.word	0x08007975
 8007954:	0800797d 	.word	0x0800797d
 8007958:	080079a9 	.word	0x080079a9
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007962:	e14a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007964:	2304      	movs	r3, #4
 8007966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800796a:	e146      	b.n	8007bfa <UART_SetConfig+0x5a2>
 800796c:	2308      	movs	r3, #8
 800796e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007972:	e142      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007974:	2310      	movs	r3, #16
 8007976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800797a:	e13e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 800797c:	2320      	movs	r3, #32
 800797e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007982:	e13a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007984:	cfff69f3 	.word	0xcfff69f3
 8007988:	58000c00 	.word	0x58000c00
 800798c:	11fff4ff 	.word	0x11fff4ff
 8007990:	40011000 	.word	0x40011000
 8007994:	58024400 	.word	0x58024400
 8007998:	40004400 	.word	0x40004400
 800799c:	40004800 	.word	0x40004800
 80079a0:	40004c00 	.word	0x40004c00
 80079a4:	40005000 	.word	0x40005000
 80079a8:	2340      	movs	r3, #64	; 0x40
 80079aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ae:	e124      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80079b0:	2380      	movs	r3, #128	; 0x80
 80079b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079b6:	e120      	b.n	8007bfa <UART_SetConfig+0x5a2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4acc      	ldr	r2, [pc, #816]	; (8007cf0 <UART_SetConfig+0x698>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d176      	bne.n	8007ab0 <UART_SetConfig+0x458>
 80079c2:	4bcc      	ldr	r3, [pc, #816]	; (8007cf4 <UART_SetConfig+0x69c>)
 80079c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ca:	2b28      	cmp	r3, #40	; 0x28
 80079cc:	d86c      	bhi.n	8007aa8 <UART_SetConfig+0x450>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <UART_SetConfig+0x37c>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	08007a79 	.word	0x08007a79
 80079d8:	08007aa9 	.word	0x08007aa9
 80079dc:	08007aa9 	.word	0x08007aa9
 80079e0:	08007aa9 	.word	0x08007aa9
 80079e4:	08007aa9 	.word	0x08007aa9
 80079e8:	08007aa9 	.word	0x08007aa9
 80079ec:	08007aa9 	.word	0x08007aa9
 80079f0:	08007aa9 	.word	0x08007aa9
 80079f4:	08007a81 	.word	0x08007a81
 80079f8:	08007aa9 	.word	0x08007aa9
 80079fc:	08007aa9 	.word	0x08007aa9
 8007a00:	08007aa9 	.word	0x08007aa9
 8007a04:	08007aa9 	.word	0x08007aa9
 8007a08:	08007aa9 	.word	0x08007aa9
 8007a0c:	08007aa9 	.word	0x08007aa9
 8007a10:	08007aa9 	.word	0x08007aa9
 8007a14:	08007a89 	.word	0x08007a89
 8007a18:	08007aa9 	.word	0x08007aa9
 8007a1c:	08007aa9 	.word	0x08007aa9
 8007a20:	08007aa9 	.word	0x08007aa9
 8007a24:	08007aa9 	.word	0x08007aa9
 8007a28:	08007aa9 	.word	0x08007aa9
 8007a2c:	08007aa9 	.word	0x08007aa9
 8007a30:	08007aa9 	.word	0x08007aa9
 8007a34:	08007a91 	.word	0x08007a91
 8007a38:	08007aa9 	.word	0x08007aa9
 8007a3c:	08007aa9 	.word	0x08007aa9
 8007a40:	08007aa9 	.word	0x08007aa9
 8007a44:	08007aa9 	.word	0x08007aa9
 8007a48:	08007aa9 	.word	0x08007aa9
 8007a4c:	08007aa9 	.word	0x08007aa9
 8007a50:	08007aa9 	.word	0x08007aa9
 8007a54:	08007a99 	.word	0x08007a99
 8007a58:	08007aa9 	.word	0x08007aa9
 8007a5c:	08007aa9 	.word	0x08007aa9
 8007a60:	08007aa9 	.word	0x08007aa9
 8007a64:	08007aa9 	.word	0x08007aa9
 8007a68:	08007aa9 	.word	0x08007aa9
 8007a6c:	08007aa9 	.word	0x08007aa9
 8007a70:	08007aa9 	.word	0x08007aa9
 8007a74:	08007aa1 	.word	0x08007aa1
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7e:	e0bc      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007a80:	2304      	movs	r3, #4
 8007a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a86:	e0b8      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007a88:	2308      	movs	r3, #8
 8007a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8e:	e0b4      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007a90:	2310      	movs	r3, #16
 8007a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a96:	e0b0      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007a98:	2320      	movs	r3, #32
 8007a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9e:	e0ac      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007aa0:	2340      	movs	r3, #64	; 0x40
 8007aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aa6:	e0a8      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007aa8:	2380      	movs	r3, #128	; 0x80
 8007aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aae:	e0a4      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a90      	ldr	r2, [pc, #576]	; (8007cf8 <UART_SetConfig+0x6a0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d130      	bne.n	8007b1c <UART_SetConfig+0x4c4>
 8007aba:	4b8e      	ldr	r3, [pc, #568]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	2b05      	cmp	r3, #5
 8007ac4:	d826      	bhi.n	8007b14 <UART_SetConfig+0x4bc>
 8007ac6:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <UART_SetConfig+0x474>)
 8007ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007acc:	08007ae5 	.word	0x08007ae5
 8007ad0:	08007aed 	.word	0x08007aed
 8007ad4:	08007af5 	.word	0x08007af5
 8007ad8:	08007afd 	.word	0x08007afd
 8007adc:	08007b05 	.word	0x08007b05
 8007ae0:	08007b0d 	.word	0x08007b0d
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aea:	e086      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007aec:	2304      	movs	r3, #4
 8007aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007af2:	e082      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007af4:	2308      	movs	r3, #8
 8007af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007afa:	e07e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007afc:	2310      	movs	r3, #16
 8007afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b02:	e07a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b04:	2320      	movs	r3, #32
 8007b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b0a:	e076      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b12:	e072      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1a:	e06e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a76      	ldr	r2, [pc, #472]	; (8007cfc <UART_SetConfig+0x6a4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d130      	bne.n	8007b88 <UART_SetConfig+0x530>
 8007b26:	4b73      	ldr	r3, [pc, #460]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	2b05      	cmp	r3, #5
 8007b30:	d826      	bhi.n	8007b80 <UART_SetConfig+0x528>
 8007b32:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <UART_SetConfig+0x4e0>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b51 	.word	0x08007b51
 8007b3c:	08007b59 	.word	0x08007b59
 8007b40:	08007b61 	.word	0x08007b61
 8007b44:	08007b69 	.word	0x08007b69
 8007b48:	08007b71 	.word	0x08007b71
 8007b4c:	08007b79 	.word	0x08007b79
 8007b50:	2300      	movs	r3, #0
 8007b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b56:	e050      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b58:	2304      	movs	r3, #4
 8007b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b5e:	e04c      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b60:	2308      	movs	r3, #8
 8007b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b66:	e048      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b68:	2310      	movs	r3, #16
 8007b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b6e:	e044      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b70:	2320      	movs	r3, #32
 8007b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b76:	e040      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b78:	2340      	movs	r3, #64	; 0x40
 8007b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b7e:	e03c      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b80:	2380      	movs	r3, #128	; 0x80
 8007b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b86:	e038      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a5c      	ldr	r2, [pc, #368]	; (8007d00 <UART_SetConfig+0x6a8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d130      	bne.n	8007bf4 <UART_SetConfig+0x59c>
 8007b92:	4b58      	ldr	r3, [pc, #352]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	d826      	bhi.n	8007bec <UART_SetConfig+0x594>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <UART_SetConfig+0x54c>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bbd 	.word	0x08007bbd
 8007ba8:	08007bc5 	.word	0x08007bc5
 8007bac:	08007bcd 	.word	0x08007bcd
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bdd 	.word	0x08007bdd
 8007bb8:	08007be5 	.word	0x08007be5
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bc2:	e01a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bca:	e016      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bd2:	e012      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bda:	e00e      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bdc:	2320      	movs	r3, #32
 8007bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007be2:	e00a      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007be4:	2340      	movs	r3, #64	; 0x40
 8007be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bea:	e006      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bec:	2380      	movs	r3, #128	; 0x80
 8007bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf2:	e002      	b.n	8007bfa <UART_SetConfig+0x5a2>
 8007bf4:	2380      	movs	r3, #128	; 0x80
 8007bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a40      	ldr	r2, [pc, #256]	; (8007d00 <UART_SetConfig+0x6a8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	f040 80ef 	bne.w	8007de4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	dc46      	bgt.n	8007c9c <UART_SetConfig+0x644>
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	f2c0 8081 	blt.w	8007d16 <UART_SetConfig+0x6be>
 8007c14:	3b02      	subs	r3, #2
 8007c16:	2b1e      	cmp	r3, #30
 8007c18:	d87d      	bhi.n	8007d16 <UART_SetConfig+0x6be>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <UART_SetConfig+0x5c8>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007ca3 	.word	0x08007ca3
 8007c24:	08007d17 	.word	0x08007d17
 8007c28:	08007cab 	.word	0x08007cab
 8007c2c:	08007d17 	.word	0x08007d17
 8007c30:	08007d17 	.word	0x08007d17
 8007c34:	08007d17 	.word	0x08007d17
 8007c38:	08007cbb 	.word	0x08007cbb
 8007c3c:	08007d17 	.word	0x08007d17
 8007c40:	08007d17 	.word	0x08007d17
 8007c44:	08007d17 	.word	0x08007d17
 8007c48:	08007d17 	.word	0x08007d17
 8007c4c:	08007d17 	.word	0x08007d17
 8007c50:	08007d17 	.word	0x08007d17
 8007c54:	08007d17 	.word	0x08007d17
 8007c58:	08007ccb 	.word	0x08007ccb
 8007c5c:	08007d17 	.word	0x08007d17
 8007c60:	08007d17 	.word	0x08007d17
 8007c64:	08007d17 	.word	0x08007d17
 8007c68:	08007d17 	.word	0x08007d17
 8007c6c:	08007d17 	.word	0x08007d17
 8007c70:	08007d17 	.word	0x08007d17
 8007c74:	08007d17 	.word	0x08007d17
 8007c78:	08007d17 	.word	0x08007d17
 8007c7c:	08007d17 	.word	0x08007d17
 8007c80:	08007d17 	.word	0x08007d17
 8007c84:	08007d17 	.word	0x08007d17
 8007c88:	08007d17 	.word	0x08007d17
 8007c8c:	08007d17 	.word	0x08007d17
 8007c90:	08007d17 	.word	0x08007d17
 8007c94:	08007d17 	.word	0x08007d17
 8007c98:	08007d09 	.word	0x08007d09
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d036      	beq.n	8007d0e <UART_SetConfig+0x6b6>
 8007ca0:	e039      	b.n	8007d16 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ca2:	f7fe fc81 	bl	80065a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ca6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ca8:	e03b      	b.n	8007d22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007caa:	f107 0314 	add.w	r3, r7, #20
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fc90 	bl	80065d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cb8:	e033      	b.n	8007d22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fddc 	bl	800687c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cc8:	e02b      	b.n	8007d22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cca:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cd6:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <UART_SetConfig+0x69c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	08db      	lsrs	r3, r3, #3
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <UART_SetConfig+0x6ac>)
 8007ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ce8:	e01b      	b.n	8007d22 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007cea:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <UART_SetConfig+0x6ac>)
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cee:	e018      	b.n	8007d22 <UART_SetConfig+0x6ca>
 8007cf0:	40011400 	.word	0x40011400
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	40007800 	.word	0x40007800
 8007cfc:	40007c00 	.word	0x40007c00
 8007d00:	58000c00 	.word	0x58000c00
 8007d04:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d08:	4bc4      	ldr	r3, [pc, #784]	; (800801c <UART_SetConfig+0x9c4>)
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d0c:	e009      	b.n	8007d22 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d14:	e005      	b.n	8007d22 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007d20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 81da 	beq.w	80080de <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	4abc      	ldr	r2, [pc, #752]	; (8008020 <UART_SetConfig+0x9c8>)
 8007d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d34:	461a      	mov	r2, r3
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d3c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	4613      	mov	r3, r2
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	4413      	add	r3, r2
 8007d48:	6a3a      	ldr	r2, [r7, #32]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d305      	bcc.n	8007d5a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d54:	6a3a      	ldr	r2, [r7, #32]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d903      	bls.n	8007d62 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007d60:	e1bd      	b.n	80080de <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	4618      	mov	r0, r3
 8007d66:	f04f 0100 	mov.w	r1, #0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	4aac      	ldr	r2, [pc, #688]	; (8008020 <UART_SetConfig+0x9c8>)
 8007d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	f04f 0300 	mov.w	r3, #0
 8007d7a:	f7f8 faad 	bl	80002d8 <__aeabi_uldivmod>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	020b      	lsls	r3, r1, #8
 8007d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d94:	0202      	lsls	r2, r0, #8
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	6849      	ldr	r1, [r1, #4]
 8007d9a:	0849      	lsrs	r1, r1, #1
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	f04f 0100 	mov.w	r1, #0
 8007da2:	1814      	adds	r4, r2, r0
 8007da4:	eb43 0501 	adc.w	r5, r3, r1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	461a      	mov	r2, r3
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	4620      	mov	r0, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	f7f8 fa8f 	bl	80002d8 <__aeabi_uldivmod>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc8:	d308      	bcc.n	8007ddc <UART_SetConfig+0x784>
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd0:	d204      	bcs.n	8007ddc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	e180      	b.n	80080de <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007de2:	e17c      	b.n	80080de <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dec:	f040 80bf 	bne.w	8007f6e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	dc49      	bgt.n	8007e8c <UART_SetConfig+0x834>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	db7c      	blt.n	8007ef6 <UART_SetConfig+0x89e>
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d87a      	bhi.n	8007ef6 <UART_SetConfig+0x89e>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0x7b0>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e93 	.word	0x08007e93
 8007e0c:	08007e9b 	.word	0x08007e9b
 8007e10:	08007ef7 	.word	0x08007ef7
 8007e14:	08007ef7 	.word	0x08007ef7
 8007e18:	08007ea3 	.word	0x08007ea3
 8007e1c:	08007ef7 	.word	0x08007ef7
 8007e20:	08007ef7 	.word	0x08007ef7
 8007e24:	08007ef7 	.word	0x08007ef7
 8007e28:	08007eb3 	.word	0x08007eb3
 8007e2c:	08007ef7 	.word	0x08007ef7
 8007e30:	08007ef7 	.word	0x08007ef7
 8007e34:	08007ef7 	.word	0x08007ef7
 8007e38:	08007ef7 	.word	0x08007ef7
 8007e3c:	08007ef7 	.word	0x08007ef7
 8007e40:	08007ef7 	.word	0x08007ef7
 8007e44:	08007ef7 	.word	0x08007ef7
 8007e48:	08007ec3 	.word	0x08007ec3
 8007e4c:	08007ef7 	.word	0x08007ef7
 8007e50:	08007ef7 	.word	0x08007ef7
 8007e54:	08007ef7 	.word	0x08007ef7
 8007e58:	08007ef7 	.word	0x08007ef7
 8007e5c:	08007ef7 	.word	0x08007ef7
 8007e60:	08007ef7 	.word	0x08007ef7
 8007e64:	08007ef7 	.word	0x08007ef7
 8007e68:	08007ef7 	.word	0x08007ef7
 8007e6c:	08007ef7 	.word	0x08007ef7
 8007e70:	08007ef7 	.word	0x08007ef7
 8007e74:	08007ef7 	.word	0x08007ef7
 8007e78:	08007ef7 	.word	0x08007ef7
 8007e7c:	08007ef7 	.word	0x08007ef7
 8007e80:	08007ef7 	.word	0x08007ef7
 8007e84:	08007ef7 	.word	0x08007ef7
 8007e88:	08007ee9 	.word	0x08007ee9
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d02e      	beq.n	8007eee <UART_SetConfig+0x896>
 8007e90:	e031      	b.n	8007ef6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e92:	f7fd fc1d 	bl	80056d0 <HAL_RCC_GetPCLK1Freq>
 8007e96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e98:	e033      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e9a:	f7fd fc2f 	bl	80056fc <HAL_RCC_GetPCLK2Freq>
 8007e9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ea0:	e02f      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea2:	f107 0314 	add.w	r3, r7, #20
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe fb94 	bl	80065d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eb0:	e027      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fce0 	bl	800687c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ec0:	e01f      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ec2:	4b58      	ldr	r3, [pc, #352]	; (8008024 <UART_SetConfig+0x9cc>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ece:	4b55      	ldr	r3, [pc, #340]	; (8008024 <UART_SetConfig+0x9cc>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	08db      	lsrs	r3, r3, #3
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	4a53      	ldr	r2, [pc, #332]	; (8008028 <UART_SetConfig+0x9d0>)
 8007eda:	fa22 f303 	lsr.w	r3, r2, r3
 8007ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ee0:	e00f      	b.n	8007f02 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007ee2:	4b51      	ldr	r3, [pc, #324]	; (8008028 <UART_SetConfig+0x9d0>)
 8007ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ee6:	e00c      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ee8:	4b4c      	ldr	r3, [pc, #304]	; (800801c <UART_SetConfig+0x9c4>)
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eec:	e009      	b.n	8007f02 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ef4:	e005      	b.n	8007f02 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80ea 	beq.w	80080de <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	4a44      	ldr	r2, [pc, #272]	; (8008020 <UART_SetConfig+0x9c8>)
 8007f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f1c:	005a      	lsls	r2, r3, #1
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	2b0f      	cmp	r3, #15
 8007f36:	d916      	bls.n	8007f66 <UART_SetConfig+0x90e>
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3e:	d212      	bcs.n	8007f66 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f023 030f 	bic.w	r3, r3, #15
 8007f48:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007f62:	60da      	str	r2, [r3, #12]
 8007f64:	e0bb      	b.n	80080de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007f6c:	e0b7      	b.n	80080de <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f72:	2b20      	cmp	r3, #32
 8007f74:	dc4a      	bgt.n	800800c <UART_SetConfig+0x9b4>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f2c0 8086 	blt.w	8008088 <UART_SetConfig+0xa30>
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	f200 8083 	bhi.w	8008088 <UART_SetConfig+0xa30>
 8007f82:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x930>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08008013 	.word	0x08008013
 8007f8c:	0800802d 	.word	0x0800802d
 8007f90:	08008089 	.word	0x08008089
 8007f94:	08008089 	.word	0x08008089
 8007f98:	08008035 	.word	0x08008035
 8007f9c:	08008089 	.word	0x08008089
 8007fa0:	08008089 	.word	0x08008089
 8007fa4:	08008089 	.word	0x08008089
 8007fa8:	08008045 	.word	0x08008045
 8007fac:	08008089 	.word	0x08008089
 8007fb0:	08008089 	.word	0x08008089
 8007fb4:	08008089 	.word	0x08008089
 8007fb8:	08008089 	.word	0x08008089
 8007fbc:	08008089 	.word	0x08008089
 8007fc0:	08008089 	.word	0x08008089
 8007fc4:	08008089 	.word	0x08008089
 8007fc8:	08008055 	.word	0x08008055
 8007fcc:	08008089 	.word	0x08008089
 8007fd0:	08008089 	.word	0x08008089
 8007fd4:	08008089 	.word	0x08008089
 8007fd8:	08008089 	.word	0x08008089
 8007fdc:	08008089 	.word	0x08008089
 8007fe0:	08008089 	.word	0x08008089
 8007fe4:	08008089 	.word	0x08008089
 8007fe8:	08008089 	.word	0x08008089
 8007fec:	08008089 	.word	0x08008089
 8007ff0:	08008089 	.word	0x08008089
 8007ff4:	08008089 	.word	0x08008089
 8007ff8:	08008089 	.word	0x08008089
 8007ffc:	08008089 	.word	0x08008089
 8008000:	08008089 	.word	0x08008089
 8008004:	08008089 	.word	0x08008089
 8008008:	0800807b 	.word	0x0800807b
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d037      	beq.n	8008080 <UART_SetConfig+0xa28>
 8008010:	e03a      	b.n	8008088 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008012:	f7fd fb5d 	bl	80056d0 <HAL_RCC_GetPCLK1Freq>
 8008016:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008018:	e03c      	b.n	8008094 <UART_SetConfig+0xa3c>
 800801a:	bf00      	nop
 800801c:	003d0900 	.word	0x003d0900
 8008020:	080088bc 	.word	0x080088bc
 8008024:	58024400 	.word	0x58024400
 8008028:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802c:	f7fd fb66 	bl	80056fc <HAL_RCC_GetPCLK2Freq>
 8008030:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008032:	e02f      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008034:	f107 0314 	add.w	r3, r7, #20
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe facb 	bl	80065d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008042:	e027      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008044:	f107 0308 	add.w	r3, r7, #8
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fc17 	bl	800687c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008052:	e01f      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008054:	4b2c      	ldr	r3, [pc, #176]	; (8008108 <UART_SetConfig+0xab0>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0320 	and.w	r3, r3, #32
 800805c:	2b00      	cmp	r3, #0
 800805e:	d009      	beq.n	8008074 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008060:	4b29      	ldr	r3, [pc, #164]	; (8008108 <UART_SetConfig+0xab0>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	08db      	lsrs	r3, r3, #3
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	4a28      	ldr	r2, [pc, #160]	; (800810c <UART_SetConfig+0xab4>)
 800806c:	fa22 f303 	lsr.w	r3, r2, r3
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008072:	e00f      	b.n	8008094 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008074:	4b25      	ldr	r3, [pc, #148]	; (800810c <UART_SetConfig+0xab4>)
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008078:	e00c      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800807a:	4b25      	ldr	r3, [pc, #148]	; (8008110 <UART_SetConfig+0xab8>)
 800807c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800807e:	e009      	b.n	8008094 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008086:	e005      	b.n	8008094 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008092:	bf00      	nop
    }

    if (pclk != 0U)
 8008094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008096:	2b00      	cmp	r3, #0
 8008098:	d021      	beq.n	80080de <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <UART_SetConfig+0xabc>)
 80080a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	085b      	lsrs	r3, r3, #1
 80080b2:	441a      	add	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	b29b      	uxth	r3, r3
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	2b0f      	cmp	r3, #15
 80080c4:	d908      	bls.n	80080d8 <UART_SetConfig+0xa80>
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080cc:	d204      	bcs.n	80080d8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080d4:	60da      	str	r2, [r3, #12]
 80080d6:	e002      	b.n	80080de <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80080fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3738      	adds	r7, #56	; 0x38
 8008102:	46bd      	mov	sp, r7
 8008104:	bdb0      	pop	{r4, r5, r7, pc}
 8008106:	bf00      	nop
 8008108:	58024400 	.word	0x58024400
 800810c:	03d09000 	.word	0x03d09000
 8008110:	003d0900 	.word	0x003d0900
 8008114:	080088bc 	.word	0x080088bc

08008118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01a      	beq.n	800822e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008216:	d10a      	bne.n	800822e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	605a      	str	r2, [r3, #4]
  }
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800826c:	f7f9 f8ce 	bl	800140c <HAL_GetTick>
 8008270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b08      	cmp	r3, #8
 800827e:	d10e      	bne.n	800829e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f82f 	bl	80082f2 <UART_WaitOnFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e025      	b.n	80082ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d10e      	bne.n	80082ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f819 	bl	80082f2 <UART_WaitOnFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e00f      	b.n	80082ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	603b      	str	r3, [r7, #0]
 80082fe:	4613      	mov	r3, r2
 8008300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008302:	e062      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d05e      	beq.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830c:	f7f9 f87e 	bl	800140c <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	429a      	cmp	r2, r3
 800831a:	d302      	bcc.n	8008322 <UART_WaitOnFlagUntilTimeout+0x30>
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d11d      	bne.n	800835e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008330:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0201 	bic.w	r2, r2, #1
 8008340:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2220      	movs	r2, #32
 8008346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2220      	movs	r2, #32
 800834e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e045      	b.n	80083ea <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d02e      	beq.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800837a:	d126      	bne.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008384:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008394:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e00f      	b.n	80083ea <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4013      	ands	r3, r2
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	bf0c      	ite	eq
 80083da:	2301      	moveq	r3, #1
 80083dc:	2300      	movne	r3, #0
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d08d      	beq.n	8008304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008408:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008418:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
	...

08008430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008446:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6899      	ldr	r1, [r3, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <UART_EndRxTransfer+0x60>)
 8008454:	400b      	ands	r3, r1
 8008456:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845c:	2b01      	cmp	r3, #1
 800845e:	d107      	bne.n	8008470 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0210 	bic.w	r2, r2, #16
 800846e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	effffffe 	.word	0xeffffffe

08008494 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084aa:	d014      	beq.n	80084d6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084c2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084d4:	e002      	b.n	80084dc <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7f8 fad0 	bl	8000a7c <HAL_UART_TxCpltCallback>
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff f89a 	bl	800762c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008514:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800851c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008528:	2b80      	cmp	r3, #128	; 0x80
 800852a:	d109      	bne.n	8008540 <UART_DMAError+0x40>
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2b21      	cmp	r3, #33	; 0x21
 8008530:	d106      	bne.n	8008540 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2200      	movs	r2, #0
 8008536:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800853a:	6978      	ldr	r0, [r7, #20]
 800853c:	f7ff ff59 	bl	80083f2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854a:	2b40      	cmp	r3, #64	; 0x40
 800854c:	d109      	bne.n	8008562 <UART_DMAError+0x62>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b22      	cmp	r3, #34	; 0x22
 8008552:	d106      	bne.n	8008562 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2200      	movs	r2, #0
 8008558:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800855c:	6978      	ldr	r0, [r7, #20]
 800855e:	f7ff ff67 	bl	8008430 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008568:	f043 0210 	orr.w	r2, r3, #16
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008572:	6978      	ldr	r0, [r7, #20]
 8008574:	f7f8 fa8d 	bl	8000a92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008578:	bf00      	nop
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7f8 fa77 	bl	8000a92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085a4:	bf00      	nop
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085c2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7f8 fa52 	bl	8000a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_UARTEx_EnableFifoMode+0x16>
 800862e:	2302      	movs	r3, #2
 8008630:	e02b      	b.n	800868a <HAL_UARTEx_EnableFifoMode+0x6e>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2224      	movs	r2, #36	; 0x24
 800863e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0201 	bic.w	r2, r2, #1
 8008658:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008660:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008668:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f88a 	bl	800878c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2220      	movs	r2, #32
 800867c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e02d      	b.n	8008706 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2224      	movs	r2, #36	; 0x24
 80086b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0201 	bic.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f850 	bl	800878c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2220      	movs	r2, #32
 80086f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008722:	2302      	movs	r3, #2
 8008724:	e02d      	b.n	8008782 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2224      	movs	r2, #36	; 0x24
 8008732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0201 	bic.w	r2, r2, #1
 800874c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f812 	bl	800878c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008798:	2b00      	cmp	r3, #0
 800879a:	d108      	bne.n	80087ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087ac:	e031      	b.n	8008812 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ae:	2310      	movs	r3, #16
 80087b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087b2:	2310      	movs	r3, #16
 80087b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	0e5b      	lsrs	r3, r3, #25
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	0f5b      	lsrs	r3, r3, #29
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	f003 0307 	and.w	r3, r3, #7
 80087d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	7b3a      	ldrb	r2, [r7, #12]
 80087da:	4911      	ldr	r1, [pc, #68]	; (8008820 <UARTEx_SetNbDataToProcess+0x94>)
 80087dc:	5c8a      	ldrb	r2, [r1, r2]
 80087de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087e2:	7b3a      	ldrb	r2, [r7, #12]
 80087e4:	490f      	ldr	r1, [pc, #60]	; (8008824 <UARTEx_SetNbDataToProcess+0x98>)
 80087e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	7b7a      	ldrb	r2, [r7, #13]
 80087f8:	4909      	ldr	r1, [pc, #36]	; (8008820 <UARTEx_SetNbDataToProcess+0x94>)
 80087fa:	5c8a      	ldrb	r2, [r1, r2]
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008800:	7b7a      	ldrb	r2, [r7, #13]
 8008802:	4908      	ldr	r1, [pc, #32]	; (8008824 <UARTEx_SetNbDataToProcess+0x98>)
 8008804:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008806:	fb93 f3f2 	sdiv	r3, r3, r2
 800880a:	b29a      	uxth	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008812:	bf00      	nop
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	080088d4 	.word	0x080088d4
 8008824:	080088dc 	.word	0x080088dc

08008828 <__libc_init_array>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	4d0d      	ldr	r5, [pc, #52]	; (8008860 <__libc_init_array+0x38>)
 800882c:	4c0d      	ldr	r4, [pc, #52]	; (8008864 <__libc_init_array+0x3c>)
 800882e:	1b64      	subs	r4, r4, r5
 8008830:	10a4      	asrs	r4, r4, #2
 8008832:	2600      	movs	r6, #0
 8008834:	42a6      	cmp	r6, r4
 8008836:	d109      	bne.n	800884c <__libc_init_array+0x24>
 8008838:	4d0b      	ldr	r5, [pc, #44]	; (8008868 <__libc_init_array+0x40>)
 800883a:	4c0c      	ldr	r4, [pc, #48]	; (800886c <__libc_init_array+0x44>)
 800883c:	f000 f820 	bl	8008880 <_init>
 8008840:	1b64      	subs	r4, r4, r5
 8008842:	10a4      	asrs	r4, r4, #2
 8008844:	2600      	movs	r6, #0
 8008846:	42a6      	cmp	r6, r4
 8008848:	d105      	bne.n	8008856 <__libc_init_array+0x2e>
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008850:	4798      	blx	r3
 8008852:	3601      	adds	r6, #1
 8008854:	e7ee      	b.n	8008834 <__libc_init_array+0xc>
 8008856:	f855 3b04 	ldr.w	r3, [r5], #4
 800885a:	4798      	blx	r3
 800885c:	3601      	adds	r6, #1
 800885e:	e7f2      	b.n	8008846 <__libc_init_array+0x1e>
 8008860:	080088ec 	.word	0x080088ec
 8008864:	080088ec 	.word	0x080088ec
 8008868:	080088ec 	.word	0x080088ec
 800886c:	080088f0 	.word	0x080088f0

08008870 <memset>:
 8008870:	4402      	add	r2, r0
 8008872:	4603      	mov	r3, r0
 8008874:	4293      	cmp	r3, r2
 8008876:	d100      	bne.n	800887a <memset+0xa>
 8008878:	4770      	bx	lr
 800887a:	f803 1b01 	strb.w	r1, [r3], #1
 800887e:	e7f9      	b.n	8008874 <memset+0x4>

08008880 <_init>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	bf00      	nop
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr

0800888c <_fini>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	bf00      	nop
 8008890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008892:	bc08      	pop	{r3}
 8008894:	469e      	mov	lr, r3
 8008896:	4770      	bx	lr
