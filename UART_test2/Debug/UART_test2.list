
UART_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009708  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080099ec  080099ec  000199ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080099f8  080099f8  000199f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  24000000  080099fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d080  24000040  08009a24  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  2400d0c0  08009a24  0002d0c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001db8e  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fe6  00000000  00000000  0003dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc8  00000000  00000000  00040bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf0  00000000  00000000  00041998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037505  00000000  00000000  00042688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013058  00000000  00000000  00079b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f7b8  00000000  00000000  0008cbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ec39d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038e4  00000000  00000000  001ec3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009988 	.word	0x08009988

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08009988 	.word	0x08009988

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af02      	add	r7, sp, #8
	unsigned short rxCount = COUNTOF(aRxBuffer);
 80005d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005da:	81fb      	strh	r3, [r7, #14]
	unsigned short rxOffset = rxCount / 2;
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	81bb      	strh	r3, [r7, #12]
	unsigned short txCount = COUNTOF(aTxBuffer);
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	817b      	strh	r3, [r7, #10]
  /* USER CODE BEGIN 1 */
  for( int i = 0; i < txCount; ++i ){
 80005e8:	2300      	movs	r3, #0
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ec:	e00f      	b.n	800060e <main+0x3e>
	  aTxBuffer[i] = i % 16384;
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	425a      	negs	r2, r3
 80005f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005f6:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b299      	uxth	r1, r3
 8000600:	4a9b      	ldr	r2, [pc, #620]	; (8000870 <main+0x2a0>)
 8000602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 0; i < txCount; ++i ){
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	3301      	adds	r3, #1
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800060e:	897b      	ldrh	r3, [r7, #10]
 8000610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000612:	429a      	cmp	r2, r3
 8000614:	dbeb      	blt.n	80005ee <main+0x1e>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	4b97      	ldr	r3, [pc, #604]	; (8000874 <main+0x2a4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11b      	bne.n	800065a <main+0x8a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062e:	4b91      	ldr	r3, [pc, #580]	; (8000874 <main+0x2a4>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063c:	f3bf 8f6f 	isb	sy
}
 8000640:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000642:	4b8c      	ldr	r3, [pc, #560]	; (8000874 <main+0x2a4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a8b      	ldr	r2, [pc, #556]	; (8000874 <main+0x2a4>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <main+0x8c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 fa32 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 fa18 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fb8e 	bl	8000d84 <MX_GPIO_Init>
  HAL_EnableCompensationCell();
 8000668:	f001 faee 	bl	8001c48 <HAL_EnableCompensationCell>
  MX_DMA_Init();
 800066c:	f000 fb4a 	bl	8000d04 <MX_DMA_Init>
  //  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8000670:	f000 faee 	bl	8000c50 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000674:	f000 fa94 	bl	8000ba0 <MX_SPI1_Init>
//  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  /* Configure User push-button in Interrupt mode */

  while(UserButtonStatus == 0)
 8000678:	e005      	b.n	8000686 <main+0xb6>
  {
    BSP_LED_Toggle(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f001 f8be 	bl	80017fc <BSP_LED_Toggle>
    HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f001 fab1 	bl	8001be8 <HAL_Delay>
  while(UserButtonStatus == 0)
 8000686:	4b7c      	ldr	r3, [pc, #496]	; (8000878 <main+0x2a8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <main+0xaa>
  }
  UserButtonStatus = 0;
 800068e:	4b7a      	ldr	r3, [pc, #488]	; (8000878 <main+0x2a8>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000694:	f001 fa9c 	bl	8001bd0 <HAL_GetTick>
 8000698:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
 800069e:	e032      	b.n	8000706 <main+0x136>
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	4873      	ldr	r0, [pc, #460]	; (800087c <main+0x2ac>)
 80006ae:	f008 fea4 	bl	80093fa <UART_WaitOnFlagUntilTimeout>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0xec>
      {
        return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e1d7      	b.n	8000a6c <main+0x49c>
      }
      huart3.Instance->TDR = aTxBuffer[i] & 0xFFU;
 80006bc:	4a6c      	ldr	r2, [pc, #432]	; (8000870 <main+0x2a0>)
 80006be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b6c      	ldr	r3, [pc, #432]	; (800087c <main+0x2ac>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TXE, RESET, tickstart, 50000) != HAL_OK)
 80006d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4867      	ldr	r0, [pc, #412]	; (800087c <main+0x2ac>)
 80006de:	f008 fe8c 	bl	80093fa <UART_WaitOnFlagUntilTimeout>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <main+0x11c>
      {
        return HAL_TIMEOUT;
 80006e8:	2303      	movs	r3, #3
 80006ea:	e1bf      	b.n	8000a6c <main+0x49c>
      }
      huart3.Instance->TDR = (aTxBuffer[i] & 0xFF00U)>>8;
 80006ec:	4a60      	ldr	r2, [pc, #384]	; (8000870 <main+0x2a0>)
 80006ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	0a1a      	lsrs	r2, r3, #8
 80006f8:	4b60      	ldr	r3, [pc, #384]	; (800087c <main+0x2ac>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  for(int i = 0; i < COUNTOF(aTxBuffer); ++i){
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	3301      	adds	r3, #1
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
 8000706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800070c:	d3c8      	bcc.n	80006a0 <main+0xd0>
  }
  if (UART_WaitOnFlagUntilTimeout(&huart3, UART_FLAG_TC, RESET, tickstart, 50000) != HAL_OK)
 800070e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4858      	ldr	r0, [pc, #352]	; (800087c <main+0x2ac>)
 800071c:	f008 fe6d 	bl	80093fa <UART_WaitOnFlagUntilTimeout>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <main+0x15a>
  {
    return HAL_TIMEOUT;
 8000726:	2303      	movs	r3, #3
 8000728:	e1a0      	b.n	8000a6c <main+0x49c>
  }
  BSP_LED_Off(LED1);
 800072a:	2000      	movs	r0, #0
 800072c:	f001 f83c 	bl	80017a8 <BSP_LED_Off>
  while(UserButtonStatus == 0)
 8000730:	e005      	b.n	800073e <main+0x16e>
  {
    BSP_LED_Toggle(LED2);
 8000732:	2001      	movs	r0, #1
 8000734:	f001 f862 	bl	80017fc <BSP_LED_Toggle>
    HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f001 fa55 	bl	8001be8 <HAL_Delay>
  while(UserButtonStatus == 0)
 800073e:	4b4e      	ldr	r3, [pc, #312]	; (8000878 <main+0x2a8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f5      	beq.n	8000732 <main+0x162>
  }
  UserButtonStatus = 0;
 8000746:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <main+0x2a8>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
  UartReady = RESET;
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <main+0x2b0>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED1);
 8000752:	2000      	movs	r0, #0
 8000754:	f001 f828 	bl	80017a8 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8000758:	2001      	movs	r0, #1
 800075a:	f001 f825 	bl	80017a8 <BSP_LED_Off>
    /* Process Locked */
    __HAL_LOCK(&hspi1);
 800075e:	4b49      	ldr	r3, [pc, #292]	; (8000884 <main+0x2b4>)
 8000760:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000764:	2b01      	cmp	r3, #1
 8000766:	d101      	bne.n	800076c <main+0x19c>
 8000768:	2302      	movs	r3, #2
 800076a:	e17f      	b.n	8000a6c <main+0x49c>
 800076c:	4b45      	ldr	r3, [pc, #276]	; (8000884 <main+0x2b4>)
 800076e:	2201      	movs	r2, #1
 8000770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Configure communication direction : 1Line */
    if (hspi1.Init.Direction == SPI_DIRECTION_1LINE)
 8000774:	4b43      	ldr	r3, [pc, #268]	; (8000884 <main+0x2b4>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800077c:	d107      	bne.n	800078e <main+0x1be>
    {
      SPI_1LINE_RX(&hspi1);
 800077e:	4b41      	ldr	r3, [pc, #260]	; (8000884 <main+0x2b4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <main+0x2b4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800078c:	601a      	str	r2, [r3, #0]
    }

    /* Clear RXDMAEN bit */
    CLEAR_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <main+0x2b4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <main+0x2b4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800079c:	609a      	str	r2, [r3, #8]

    /* Set the SPI Rx DMA transfer complete callback */
    hspi1.hdmarx->XferCpltCallback = tx_complete;
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <main+0x2b4>)
 80007a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007a2:	4a39      	ldr	r2, [pc, #228]	; (8000888 <main+0x2b8>)
 80007a4:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.hdmarx->XferHalfCpltCallback = tx_h_complete;
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <main+0x2b4>)
 80007a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007aa:	4a38      	ldr	r2, [pc, #224]	; (800088c <main+0x2bc>)
 80007ac:	641a      	str	r2, [r3, #64]	; 0x40

    MODIFY_REG(((DMA_Stream_TypeDef   *)hdma_spi1_rx.Instance)->CR, (DMA_IT_TC | DMA_IT_HT), (DMA_IT_TC | DMA_IT_HT));
 80007ae:	4b38      	ldr	r3, [pc, #224]	; (8000890 <main+0x2c0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <main+0x2c0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f042 0218 	orr.w	r2, r2, #24
 80007bc:	601a      	str	r2, [r3, #0]
    /* Enable the Rx DMA Stream/Channel  */
    if (HAL_OK != HAL_DMA_Start(hspi1.hdmarx, (uint32_t)&hspi1.Instance->RXDR, (uint32_t)aRxBuffer, rxCount))
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <main+0x2b4>)
 80007c0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <main+0x2b4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3330      	adds	r3, #48	; 0x30
 80007c8:	4619      	mov	r1, r3
 80007ca:	4a32      	ldr	r2, [pc, #200]	; (8000894 <main+0x2c4>)
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	f001 fee9 	bl	80025a4 <HAL_DMA_Start>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00d      	beq.n	80007f4 <main+0x224>
    {
      /* Update SPI error code */
      SET_BIT(hspi1.ErrorCode, HAL_SPI_ERROR_DMA);
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <main+0x2b4>)
 80007da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	4a28      	ldr	r2, [pc, #160]	; (8000884 <main+0x2b4>)
 80007e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      hspi1.State = HAL_SPI_STATE_READY;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <main+0x2b4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      Error_Handler();
 80007f0:	f000 fbef 	bl	8000fd2 <Error_Handler>
    }

      MODIFY_REG(hspi1.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <main+0x2b4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6859      	ldr	r1, [r3, #4]
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <main+0x2b4>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <main+0x2c8>)
 8000800:	400b      	ands	r3, r1
 8000802:	6053      	str	r3, [r2, #4]

    /* Enable Rx DMA Request */
    SET_BIT(hspi1.Instance->CFG1, SPI_CFG1_RXDMAEN);
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <main+0x2b4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <main+0x2b4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000812:	609a      	str	r2, [r3, #8]

    /* Enable the SPI Error Interrupt Bit */
    __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <main+0x2b4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	691a      	ldr	r2, [r3, #16]
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <main+0x2b4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8000822:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&hspi1);
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0x2b4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <main+0x2b4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f042 0201 	orr.w	r2, r2, #1
 8000832:	601a      	str	r2, [r3, #0]

      SET_BIT(hspi1.Instance->CR1, SPI_CR1_CSTART);
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <main+0x2b4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <main+0x2b4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000842:	601a      	str	r2, [r3, #0]

  while (wTransferState != TRANSFER_H_COMPLETE)
 8000844:	e002      	b.n	800084c <main+0x27c>
  {
	    BSP_LED_Toggle(LED3);
 8000846:	2002      	movs	r0, #2
 8000848:	f000 ffd8 	bl	80017fc <BSP_LED_Toggle>
  while (wTransferState != TRANSFER_H_COMPLETE)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <main+0x2cc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d1f8      	bne.n	8000846 <main+0x276>
  }
  wTransferState = TRANSFER_WAIT;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <main+0x2cc>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
  int j = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  aTxBuffer[0] = aRxBuffer[0];
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <main+0x2c4>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b29a      	uxth	r2, r3
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <main+0x2a0>)
 8000866:	801a      	strh	r2, [r3, #0]
  for( int i = 1; i < txCount; ++i, j+= OVERSAMPLING){
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
 800086c:	e02a      	b.n	80008c4 <main+0x2f4>
 800086e:	bf00      	nop
 8000870:	24000080 	.word	0x24000080
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	24000060 	.word	0x24000060
 800087c:	2400c90c 	.word	0x2400c90c
 8000880:	2400005c 	.word	0x2400005c
 8000884:	2400cf24 	.word	0x2400cf24
 8000888:	08000f39 	.word	0x08000f39
 800088c:	08000f59 	.word	0x08000f59
 8000890:	2400cfac 	.word	0x2400cfac
 8000894:	24000880 	.word	0x24000880
 8000898:	ffff0000 	.word	0xffff0000
 800089c:	2400c880 	.word	0x2400c880
	  j+= OVERSAMPLING;
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	3304      	adds	r3, #4
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[i] = aRxBuffer[j];
 80008a6:	4a73      	ldr	r2, [pc, #460]	; (8000a74 <main+0x4a4>)
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ae:	b299      	uxth	r1, r3
 80008b0:	4a71      	ldr	r2, [pc, #452]	; (8000a78 <main+0x4a8>)
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for( int i = 1; i < txCount; ++i, j+= OVERSAMPLING){
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	3301      	adds	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	3304      	adds	r3, #4
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
 80008c4:	897b      	ldrh	r3, [r7, #10]
 80008c6:	6a3a      	ldr	r2, [r7, #32]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbe9      	blt.n	80008a0 <main+0x2d0>
  }
  if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
 80008cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008d0:	4969      	ldr	r1, [pc, #420]	; (8000a78 <main+0x4a8>)
 80008d2:	486a      	ldr	r0, [pc, #424]	; (8000a7c <main+0x4ac>)
 80008d4:	f007 fbf4 	bl	80080c0 <HAL_UART_Transmit_DMA>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <main+0x312>
  {
    Error_Handler();
 80008de:	f000 fb78 	bl	8000fd2 <Error_Handler>
  }
  HAL_NVIC_DisableIRQ(USART3_IRQn);
 80008e2:	2027      	movs	r0, #39	; 0x27
 80008e4:	f001 fae7 	bl	8001eb6 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(USART3_DMA_IRQN);
 80008e8:	200c      	movs	r0, #12
 80008ea:	f001 fae4 	bl	8001eb6 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(SPI1_DMA_IRQN);
 80008ee:	2038      	movs	r0, #56	; 0x38
 80008f0:	f001 fae1 	bl	8001eb6 <HAL_NVIC_DisableIRQ>
  BSP_LED_Off(LED3);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f000 ff57 	bl	80017a8 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4 ) {}
 80008fa:	bf00      	nop
 80008fc:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <main+0x4b0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 0320 	and.w	r3, r3, #32
 8000904:	2b20      	cmp	r3, #32
 8000906:	d1f9      	bne.n	80008fc <main+0x32c>
	  DMA2->LIFCR = DMA_FLAG_TCIF0_4;
 8000908:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <main+0x4b0>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
	  j = rxOffset;
 800090e:	89bb      	ldrh	r3, [r7, #12]
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[j];
 8000912:	4a58      	ldr	r2, [pc, #352]	; (8000a74 <main+0x4a4>)
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <main+0x4a8>)
 800091e:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i ){
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
 8000924:	e028      	b.n	8000978 <main+0x3a8>
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	e016      	b.n	800095a <main+0x38a>
			  yi[j] = aRxBuffer[j] * 1.0;
 800092c:	4a51      	ldr	r2, [pc, #324]	; (8000a74 <main+0x4a4>)
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000934:	b29b      	uxth	r3, r3
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800093e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000942:	4a50      	ldr	r2, [pc, #320]	; (8000a84 <main+0x4b4>)
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	3301      	adds	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	3301      	adds	r3, #1
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	2b03      	cmp	r3, #3
 800095e:	dde5      	ble.n	800092c <main+0x35c>
		  }
//		  yi[j] = aRxBuffer[j] * 1.0;
//		  aTxBuffer[i] = (uint16_t)yi[j];
		  aTxBuffer[i] = aRxBuffer[j];
 8000960:	4a44      	ldr	r2, [pc, #272]	; (8000a74 <main+0x4a4>)
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000968:	b299      	uxth	r1, r3
 800096a:	4a43      	ldr	r2, [pc, #268]	; (8000a78 <main+0x4a8>)
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i ){
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3301      	adds	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
 8000978:	897b      	ldrh	r3, [r7, #10]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbd2      	blt.n	8000926 <main+0x356>
	  }

	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 8000980:	bf00      	nop
 8000982:	4b41      	ldr	r3, [pc, #260]	; (8000a88 <main+0x4b8>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098a:	2b40      	cmp	r3, #64	; 0x40
 800098c:	d1f9      	bne.n	8000982 <main+0x3b2>
	  USART3->ICR = UART_CLEAR_TCF;
 800098e:	4b3e      	ldr	r3, [pc, #248]	; (8000a88 <main+0x4b8>)
 8000990:	2240      	movs	r2, #64	; 0x40
 8000992:	621a      	str	r2, [r3, #32]
	  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000994:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <main+0x4bc>)
 8000996:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800099a:	609a      	str	r2, [r3, #8]
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 800099c:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <main+0x4c0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a3b      	ldr	r2, [pc, #236]	; (8000a90 <main+0x4c0>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 80009a8:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <main+0x4b8>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	4a36      	ldr	r2, [pc, #216]	; (8000a88 <main+0x4b8>)
 80009ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b2:	6093      	str	r3, [r2, #8]

	  while ((DMA2->LISR & DMA_FLAG_HTIF0_4) != DMA_FLAG_HTIF0_4 ) {}
 80009b4:	bf00      	nop
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <main+0x4b0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	2b10      	cmp	r3, #16
 80009c0:	d1f9      	bne.n	80009b6 <main+0x3e6>
	  DMA2->LIFCR = DMA_FLAG_HTIF0_4;
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <main+0x4b0>)
 80009c4:	2210      	movs	r2, #16
 80009c6:	609a      	str	r2, [r3, #8]
	  j = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
	  aTxBuffer[0] = aRxBuffer[0];
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <main+0x4a4>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <main+0x4a8>)
 80009d4:	801a      	strh	r2, [r3, #0]
	  for( int i = 1; i < txCount; ++i){
 80009d6:	2301      	movs	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	e028      	b.n	8000a2e <main+0x45e>
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	e016      	b.n	8000a10 <main+0x440>
			  yi[j] = aRxBuffer[j] * 1.0;
 80009e2:	4a24      	ldr	r2, [pc, #144]	; (8000a74 <main+0x4a4>)
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	ee07 3a90 	vmov	s15, r3
 80009f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009f8:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <main+0x4b4>)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	edc3 7a00 	vstr	s15, [r3]
		  for( int k = 0; k < OVERSAMPLING; ++k, ++j){
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	3301      	adds	r3, #1
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	dde5      	ble.n	80009e2 <main+0x412>
		  }
		  aTxBuffer[i] = aRxBuffer[j];
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <main+0x4a4>)
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1e:	b299      	uxth	r1, r3
 8000a20:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <main+0x4a8>)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for( int i = 1; i < txCount; ++i){
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	897b      	ldrh	r3, [r7, #10]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dbd2      	blt.n	80009dc <main+0x40c>
	  }

	  while ((USART3->ISR & UART_FLAG_TC) != UART_FLAG_TC)  {  }
 8000a36:	bf00      	nop
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <main+0x4b8>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a40:	2b40      	cmp	r3, #64	; 0x40
 8000a42:	d1f9      	bne.n	8000a38 <main+0x468>
	  USART3->ICR = UART_CLEAR_TCF;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <main+0x4b8>)
 8000a46:	2240      	movs	r2, #64	; 0x40
 8000a48:	621a      	str	r2, [r3, #32]
	  DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <main+0x4bc>)
 8000a4c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000a50:	609a      	str	r2, [r3, #8]
	  SET_BIT(USART3_DMA_INSTANCE->CR, (DMA_SxCR_EN));
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <main+0x4c0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <main+0x4c0>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6013      	str	r3, [r2, #0]
	  SET_BIT(USART3->CR3, USART_CR3_DMAT);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <main+0x4b8>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	4a09      	ldr	r2, [pc, #36]	; (8000a88 <main+0x4b8>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6093      	str	r3, [r2, #8]
	  while ((DMA2->LISR & DMA_FLAG_TCIF0_4) != DMA_FLAG_TCIF0_4 ) {}
 8000a6a:	e746      	b.n	80008fa <main+0x32a>
  }
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3730      	adds	r7, #48	; 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	24000880 	.word	0x24000880
 8000a78:	24000080 	.word	0x24000080
 8000a7c:	2400c90c 	.word	0x2400c90c
 8000a80:	40020400 	.word	0x40020400
 8000a84:	24004880 	.word	0x24004880
 8000a88:	40004800 	.word	0x40004800
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020028 	.word	0x40020028

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09c      	sub	sp, #112	; 0x70
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	224c      	movs	r2, #76	; 0x4c
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 ff68 	bl	8009978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f008 ff62 	bl	8009978 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f004 fba5 	bl	8005204 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <SystemClock_Config+0x100>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a34      	ldr	r2, [pc, #208]	; (8000b94 <SystemClock_Config+0x100>)
 8000ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <SystemClock_Config+0x100>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <SystemClock_Config+0x104>)
 8000ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad8:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <SystemClock_Config+0x104>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <SystemClock_Config+0x104>)
 8000ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aec:	bf00      	nop
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <SystemClock_Config+0x100>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000afa:	d1f8      	bne.n	8000aee <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <SystemClock_Config+0x108>)
 8000afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b00:	f023 0303 	bic.w	r3, r3, #3
 8000b04:	4a25      	ldr	r2, [pc, #148]	; (8000b9c <SystemClock_Config+0x108>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b0c:	2321      	movs	r3, #33	; 0x21
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b16:	2301      	movs	r3, #1
 8000b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 115;
 8000b26:	2373      	movs	r3, #115	; 0x73
 8000b28:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b36:	230c      	movs	r3, #12
 8000b38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4618      	mov	r0, r3
 8000b48:	f004 fb96 	bl	8005278 <HAL_RCC_OscConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b52:	f000 fa3e 	bl	8000fd2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	233f      	movs	r3, #63	; 0x3f
 8000b58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b62:	2308      	movs	r3, #8
 8000b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b66:	2340      	movs	r3, #64	; 0x40
 8000b68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b74:	2340      	movs	r3, #64	; 0x40
 8000b76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 ff8b 	bl	8005a98 <HAL_RCC_ClockConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000b88:	f000 fa23 	bl	8000fd2 <Error_Handler>
  }


}
 8000b8c:	bf00      	nop
 8000b8e:	3770      	adds	r7, #112	; 0x70
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58024800 	.word	0x58024800
 8000b98:	58000400 	.word	0x58000400
 8000b9c:	58024400 	.word	0x58024400

08000ba0 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000ba6:	4a29      	ldr	r2, [pc, #164]	; (8000c4c <MX_SPI1_Init+0xac>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bb4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bb8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_14BIT;
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bbc:	220d      	movs	r2, #13
 8000bbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_SPI1_Init+0xa8>)
 8000c34:	f006 fe1e 	bl	8007874 <HAL_SPI_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c3e:	f000 f9c8 	bl	8000fd2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2400cf24 	.word	0x2400cf24
 8000c4c:	40013000 	.word	0x40013000

08000c50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c56:	4a29      	ldr	r2, [pc, #164]	; (8000cfc <MX_USART3_UART_Init+0xac>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11978688;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c5c:	4a28      	ldr	r2, [pc, #160]	; (8000d00 <MX_USART3_UART_Init+0xb0>)
 8000c5e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c74:	220c      	movs	r2, #12
 8000c76:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9e:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000ca0:	f007 f9bd 	bl	800801e <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000caa:	f000 f992 	bl	8000fd2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000cb2:	f008 fd72 	bl	800979a <HAL_UARTEx_SetTxFifoThreshold>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000cbc:	f000 f989 	bl	8000fd2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000cc4:	f008 fda7 	bl	8009816 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8000cce:	f000 f980 	bl	8000fd2 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <MX_USART3_UART_Init+0xa8>)
 8000cd4:	f008 fd26 	bl	8009724 <HAL_UARTEx_EnableFifoMode>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8000cde:	f000 f978 	bl	8000fd2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2027      	movs	r0, #39	; 0x27
 8000ce8:	f001 f8bd 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cec:	2027      	movs	r0, #39	; 0x27
 8000cee:	f001 f8d4 	bl	8001e9a <HAL_NVIC_EnableIRQ>
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2400c90c 	.word	0x2400c90c
 8000cfc:	40004800 	.word	0x40004800
 8000d00:	00b6c7c0 	.word	0x00b6c7c0

08000d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_DMA_Init+0x7c>)
 8000d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <MX_DMA_Init+0x7c>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_DMA_Init+0x7c>)
 8000d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_DMA_Init+0x7c>)
 8000d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <MX_DMA_Init+0x7c>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_DMA_Init+0x7c>)
 8000d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2100      	movs	r1, #0
 8000d4a:	200b      	movs	r0, #11
 8000d4c:	f001 f88b 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d50:	200b      	movs	r0, #11
 8000d52:	f001 f8a2 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2100      	movs	r1, #0
 8000d5a:	200c      	movs	r0, #12
 8000d5c:	f001 f883 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d60:	200c      	movs	r0, #12
 8000d62:	f001 f89a 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2038      	movs	r0, #56	; 0x38
 8000d6c:	f001 f87b 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d70:	2038      	movs	r0, #56	; 0x38
 8000d72:	f001 f892 	bl	8001e9a <HAL_NVIC_EnableIRQ>

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58024400 	.word	0x58024400

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	4a55      	ldr	r2, [pc, #340]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000daa:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db8:	4b4f      	ldr	r3, [pc, #316]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	4a4e      	ldr	r2, [pc, #312]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc8:	4b4b      	ldr	r3, [pc, #300]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b48      	ldr	r3, [pc, #288]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a46      	ldr	r2, [pc, #280]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a3f      	ldr	r2, [pc, #252]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a37      	ldr	r2, [pc, #220]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b35      	ldr	r3, [pc, #212]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e30:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a30      	ldr	r2, [pc, #192]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <MX_GPIO_Init+0x174>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e72:	4822      	ldr	r0, [pc, #136]	; (8000efc <MX_GPIO_Init+0x178>)
 8000e74:	f004 f978 	bl	8005168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4820      	ldr	r0, [pc, #128]	; (8000f00 <MX_GPIO_Init+0x17c>)
 8000e7e:	f004 f973 	bl	8005168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	481b      	ldr	r0, [pc, #108]	; (8000f04 <MX_GPIO_Init+0x180>)
 8000e98:	f003 ffb6 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e9c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4811      	ldr	r0, [pc, #68]	; (8000efc <MX_GPIO_Init+0x178>)
 8000eb6:	f003 ffa7 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <MX_GPIO_Init+0x17c>)
 8000ed2:	f003 ff99 	bl	8004e08 <HAL_GPIO_Init>

  BSP_LED_Init(LED1);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 fbc6 	bl	8001668 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f000 fbc3 	bl	8001668 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f000 fbc0 	bl	8001668 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fcb0 	bl	8001850 <BSP_PB_Init>
}
 8000ef0:	bf00      	nop
 8000ef2:	3730      	adds	r7, #48	; 0x30
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58021000 	.word	0x58021000
 8000f04:	58020800 	.word	0x58020800

08000f08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f18:	d105      	bne.n	8000f26 <HAL_GPIO_EXTI_Callback+0x1e>
  {
    UserButtonStatus ^= 1;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f083 0301 	eor.w	r3, r3, #1
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f24:	6013      	str	r3, [r2, #0]
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	24000060 	.word	0x24000060

08000f38 <tx_complete>:
//  BSP_LED_On(LED1);
//  wTransferState = TRANSFER_COMPLETE;
//}

void tx_complete(DMA_HandleTypeDef *hdma)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_COMPLETE;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <tx_complete+0x1c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2400c880 	.word	0x2400c880

08000f58 <tx_h_complete>:

void tx_h_complete(DMA_HandleTypeDef *hdma)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	  /* Turn LED1 on: Transfer in transmission process is complete */
//	  BSP_LED_On(LED1);
	  wTransferState = TRANSFER_H_COMPLETE;
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <tx_h_complete+0x1c>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2400c880 	.word	0x2400c880

08000f78 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_SPI_ErrorCallback+0x1c>)
 8000f82:	2203      	movs	r2, #3
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2400c880 	.word	0x2400c880

08000f98 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_UART_TxCpltCallback+0x1c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2400005c 	.word	0x2400005c

08000fb8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	BSP_LED_On(LED3);
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f000 fbc7 	bl	8001754 <BSP_LED_On>
  Error_Handler();
 8000fc6:	f000 f804 	bl	8000fd2 <Error_Handler>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd6:	b672      	cpsid	i
}
 8000fd8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f000 fc0e 	bl	80017fc <BSP_LED_Toggle>
	    HAL_Delay(100);
 8000fe0:	2064      	movs	r0, #100	; 0x64
 8000fe2:	f000 fe01 	bl	8001be8 <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8000fe6:	e7f8      	b.n	8000fda <Error_Handler+0x8>

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_MspInit+0x30>)
 8000ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x30>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x30>)
 8001000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	58024400 	.word	0x58024400

0800101c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0bc      	sub	sp, #240	; 0xf0
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	22bc      	movs	r2, #188	; 0xbc
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f008 fc9b 	bl	8009978 <memset>
  if(hspi->Instance==SPI1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4aa0      	ldr	r2, [pc, #640]	; (80012c8 <HAL_SPI_MspInit+0x2ac>)
 8001048:	4293      	cmp	r3, r2
 800104a:	f040 8096 	bne.w	800117a <HAL_SPI_MspInit+0x15e>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	623b      	str	r3, [r7, #32]
      PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001058:	67fb      	str	r3, [r7, #124]	; 0x7c
      PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 800105a:	2304      	movs	r3, #4
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
      PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 800105e:	f240 1317 	movw	r3, #279	; 0x117
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
      PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 8001064:	2308      	movs	r3, #8
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
      PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 8001068:	2302      	movs	r3, #2
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
      PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 800106c:	2302      	movs	r3, #2
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
      PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001070:	2340      	movs	r3, #64	; 0x40
 8001072:	63bb      	str	r3, [r7, #56]	; 0x38
      PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
      PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4618      	mov	r0, r3
 8001082:	f005 f895 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_SPI_MspInit+0x74>
      {
        Error_Handler();
 800108c:	f7ff ffa1 	bl	8000fd2 <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 8001090:	4b8e      	ldr	r3, [pc, #568]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 8001092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001096:	4a8d      	ldr	r2, [pc, #564]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 8001098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800109c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010a0:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80010a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b87      	ldr	r3, [pc, #540]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	4a85      	ldr	r2, [pc, #532]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	69bb      	ldr	r3, [r7, #24]
      /**SPI1 GPIO Configuration
      PA5     ------> SPI1_SCK
      PA6     ------> SPI1_MISO
      PA15 (JTDI)     ------> SPI1_NSS
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 80010cc:	f248 0360 	movw	r3, #32864	; 0x8060
 80010d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e6:	2305      	movs	r3, #5
 80010e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010f0:	4619      	mov	r1, r3
 80010f2:	4877      	ldr	r0, [pc, #476]	; (80012d0 <HAL_SPI_MspInit+0x2b4>)
 80010f4:	f003 fe88 	bl	8004e08 <HAL_GPIO_Init>

      /* SPI1 DMA Init */
      /* SPI1_RX Init */
      hdma_spi1_rx.Instance = DMA2_Stream0;
 80010f8:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 80010fa:	4a77      	ldr	r2, [pc, #476]	; (80012d8 <HAL_SPI_MspInit+0x2bc>)
 80010fc:	601a      	str	r2, [r3, #0]
      hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80010fe:	4b75      	ldr	r3, [pc, #468]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001100:	2225      	movs	r2, #37	; 0x25
 8001102:	605a      	str	r2, [r3, #4]
      hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001104:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
      hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110a:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
      hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001110:	4b70      	ldr	r3, [pc, #448]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001116:	611a      	str	r2, [r3, #16]
      hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001118:	4b6e      	ldr	r3, [pc, #440]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800111e:	615a      	str	r2, [r3, #20]
      hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001120:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001122:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001126:	619a      	str	r2, [r3, #24]
      hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001128:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 800112a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112e:	61da      	str	r2, [r3, #28]
      hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001130:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
      hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001136:	4b67      	ldr	r3, [pc, #412]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800113c:	4b65      	ldr	r3, [pc, #404]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001142:	4b64      	ldr	r3, [pc, #400]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001144:	2200      	movs	r2, #0
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001148:	4b62      	ldr	r3, [pc, #392]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 800114a:	2200      	movs	r2, #0
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800114e:	4861      	ldr	r0, [pc, #388]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001150:	f000 fecc 	bl	8001eec <HAL_DMA_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_SPI_MspInit+0x142>
      {
        Error_Handler();
 800115a:	f7ff ff3a 	bl	8000fd2 <Error_Handler>
      }

      __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001162:	67da      	str	r2, [r3, #124]	; 0x7c
 8001164:	4a5b      	ldr	r2, [pc, #364]	; (80012d4 <HAL_SPI_MspInit+0x2b8>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6393      	str	r3, [r2, #56]	; 0x38

      /* SPI1 interrupt Init */
      HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2023      	movs	r0, #35	; 0x23
 8001170:	f000 fe79 	bl	8001e66 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001174:	2023      	movs	r0, #35	; 0x23
 8001176:	f000 fe90 	bl	8001e9a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
    }
  if(hspi->Instance==SPI2)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_SPI_MspInit+0x2c0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	f040 809d 	bne.w	80012c0 <HAL_SPI_MspInit+0x2a4>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInitStruct.PLL2.PLL2M = pll2_m;
 8001192:	2304      	movs	r3, #4
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = pll2_n;
 8001196:	f240 1317 	movw	r3, #279	; 0x117
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = pll2_p;
 800119c:	2308      	movs	r3, #8
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = pll2_q;
 80011a0:	2302      	movs	r3, #2
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = pll2_r;
 80011a4:	2302      	movs	r3, #2
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80011a8:	2340      	movs	r3, #64	; 0x40
 80011aa:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fff9 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 80011c4:	f7ff ff05 	bl	8000fd2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011c8:	4b40      	ldr	r3, [pc, #256]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80011ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ce:	4a3f      	ldr	r2, [pc, #252]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80011da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	4a37      	ldr	r2, [pc, #220]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	4a30      	ldr	r2, [pc, #192]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	4a28      	ldr	r2, [pc, #160]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_SPI_MspInit+0x2b0>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001240:	230c      	movs	r3, #12
 8001242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001258:	2305      	movs	r3, #5
 800125a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001262:	4619      	mov	r1, r3
 8001264:	481e      	ldr	r0, [pc, #120]	; (80012e0 <HAL_SPI_MspInit+0x2c4>)
 8001266:	f003 fdcf 	bl	8004e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001284:	2305      	movs	r3, #5
 8001286:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800128e:	4619      	mov	r1, r3
 8001290:	4814      	ldr	r0, [pc, #80]	; (80012e4 <HAL_SPI_MspInit+0x2c8>)
 8001292:	f003 fdb9 	bl	8004e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001296:	2308      	movs	r3, #8
 8001298:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a8:	2302      	movs	r3, #2
 80012aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ae:	2305      	movs	r3, #5
 80012b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012b8:	4619      	mov	r1, r3
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <HAL_SPI_MspInit+0x2cc>)
 80012bc:	f003 fda4 	bl	8004e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	37f0      	adds	r7, #240	; 0xf0
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40013000 	.word	0x40013000
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020000 	.word	0x58020000
 80012d4:	2400cfac 	.word	0x2400cfac
 80012d8:	40020410 	.word	0x40020410
 80012dc:	40003800 	.word	0x40003800
 80012e0:	58020800 	.word	0x58020800
 80012e4:	58020400 	.word	0x58020400
 80012e8:	58020c00 	.word	0x58020c00

080012ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0ba      	sub	sp, #232	; 0xe8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	22bc      	movs	r2, #188	; 0xbc
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f008 fb33 	bl	8009978 <memset>
  if(huart->Instance==USART1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a94      	ldr	r2, [pc, #592]	; (8001568 <HAL_UART_MspInit+0x27c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	f040 8098 	bne.w	800144e <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 8001322:	2304      	movs	r3, #4
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001326:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800132a:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 800132c:	2309      	movs	r3, #9
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 8001330:	2308      	movs	r3, #8
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001334:	2302      	movs	r3, #2
 8001336:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133c:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800133e:	2300      	movs	r3, #0
 8001340:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8001346:	2310      	movs	r3, #16
 8001348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f004 ff2d 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 800135c:	f7ff fe39 	bl	8000fd2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001360:	4b82      	ldr	r3, [pc, #520]	; (800156c <HAL_UART_MspInit+0x280>)
 8001362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001366:	4a81      	ldr	r2, [pc, #516]	; (800156c <HAL_UART_MspInit+0x280>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001370:	4b7e      	ldr	r3, [pc, #504]	; (800156c <HAL_UART_MspInit+0x280>)
 8001372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b7b      	ldr	r3, [pc, #492]	; (800156c <HAL_UART_MspInit+0x280>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	4a79      	ldr	r2, [pc, #484]	; (800156c <HAL_UART_MspInit+0x280>)
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138e:	4b77      	ldr	r3, [pc, #476]	; (800156c <HAL_UART_MspInit+0x280>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800139c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013b6:	2304      	movs	r3, #4
 80013b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013c0:	4619      	mov	r1, r3
 80013c2:	486b      	ldr	r0, [pc, #428]	; (8001570 <HAL_UART_MspInit+0x284>)
 80013c4:	f003 fd20 	bl	8004e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c8:	2340      	movs	r3, #64	; 0x40
 80013ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e0:	2307      	movs	r3, #7
 80013e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4860      	ldr	r0, [pc, #384]	; (8001570 <HAL_UART_MspInit+0x284>)
 80013ee:	f003 fd0b 	bl	8004e08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80013f2:	4b60      	ldr	r3, [pc, #384]	; (8001574 <HAL_UART_MspInit+0x288>)
 80013f4:	4a60      	ldr	r2, [pc, #384]	; (8001578 <HAL_UART_MspInit+0x28c>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80013f8:	4b5e      	ldr	r3, [pc, #376]	; (8001574 <HAL_UART_MspInit+0x288>)
 80013fa:	222a      	movs	r2, #42	; 0x2a
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013fe:	4b5d      	ldr	r3, [pc, #372]	; (8001574 <HAL_UART_MspInit+0x288>)
 8001400:	2240      	movs	r2, #64	; 0x40
 8001402:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <HAL_UART_MspInit+0x288>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b5a      	ldr	r3, [pc, #360]	; (8001574 <HAL_UART_MspInit+0x288>)
 800140c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001410:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001412:	4b58      	ldr	r3, [pc, #352]	; (8001574 <HAL_UART_MspInit+0x288>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001418:	4b56      	ldr	r3, [pc, #344]	; (8001574 <HAL_UART_MspInit+0x288>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800141e:	4b55      	ldr	r3, [pc, #340]	; (8001574 <HAL_UART_MspInit+0x288>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001424:	4b53      	ldr	r3, [pc, #332]	; (8001574 <HAL_UART_MspInit+0x288>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142a:	4b52      	ldr	r3, [pc, #328]	; (8001574 <HAL_UART_MspInit+0x288>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001430:	4850      	ldr	r0, [pc, #320]	; (8001574 <HAL_UART_MspInit+0x288>)
 8001432:	f000 fd5b 	bl	8001eec <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 800143c:	f7ff fdc9 	bl	8000fd2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_UART_MspInit+0x288>)
 8001444:	679a      	str	r2, [r3, #120]	; 0x78
 8001446:	4a4b      	ldr	r2, [pc, #300]	; (8001574 <HAL_UART_MspInit+0x288>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800144c:	e088      	b.n	8001560 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a4a      	ldr	r2, [pc, #296]	; (800157c <HAL_UART_MspInit+0x290>)
 8001454:	4293      	cmp	r3, r2
 8001456:	f040 8083 	bne.w	8001560 <HAL_UART_MspInit+0x274>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
	  PeriphClkInitStruct.PLL3.PLL3M = pll3_m;
 800145e:	2304      	movs	r3, #4
 8001460:	63fb      	str	r3, [r7, #60]	; 0x3c
	  PeriphClkInitStruct.PLL3.PLL3N = pll3_n;
 8001462:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001466:	643b      	str	r3, [r7, #64]	; 0x40
	  PeriphClkInitStruct.PLL3.PLL3P = pll3_p;
 8001468:	2309      	movs	r3, #9
 800146a:	647b      	str	r3, [r7, #68]	; 0x44
	  PeriphClkInitStruct.PLL3.PLL3Q = pll3_q;
 800146c:	2308      	movs	r3, #8
 800146e:	64bb      	str	r3, [r7, #72]	; 0x48
	  PeriphClkInitStruct.PLL3.PLL3R = pll3_r;
 8001470:	2302      	movs	r3, #2
 8001472:	64fb      	str	r3, [r7, #76]	; 0x4c
	  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001478:	653b      	str	r3, [r7, #80]	; 0x50
	  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800147a:	2300      	movs	r3, #0
 800147c:	657b      	str	r3, [r7, #84]	; 0x54
	  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	65bb      	str	r3, [r7, #88]	; 0x58
	  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	4618      	mov	r0, r3
 800148e:	f004 fe8f 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_UART_MspInit+0x1b0>
	    Error_Handler();
 8001498:	f7ff fd9b 	bl	8000fd2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800149c:	4b33      	ldr	r3, [pc, #204]	; (800156c <HAL_UART_MspInit+0x280>)
 800149e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a2:	4a32      	ldr	r2, [pc, #200]	; (800156c <HAL_UART_MspInit+0x280>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <HAL_UART_MspInit+0x280>)
 80014ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <HAL_UART_MspInit+0x280>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	4a2a      	ldr	r2, [pc, #168]	; (800156c <HAL_UART_MspInit+0x280>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <HAL_UART_MspInit+0x280>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f2:	2307      	movs	r3, #7
 80014f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4820      	ldr	r0, [pc, #128]	; (8001580 <HAL_UART_MspInit+0x294>)
 8001500:	f003 fc82 	bl	8004e08 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = USART3_DMA_INSTANCE;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_UART_MspInit+0x298>)
 8001506:	4a20      	ldr	r2, [pc, #128]	; (8001588 <HAL_UART_MspInit+0x29c>)
 8001508:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <HAL_UART_MspInit+0x298>)
 800150c:	222e      	movs	r2, #46	; 0x2e
 800150e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_UART_MspInit+0x298>)
 8001512:	2240      	movs	r2, #64	; 0x40
 8001514:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_UART_MspInit+0x298>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_UART_MspInit+0x298>)
 800151e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001522:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_UART_MspInit+0x298>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_UART_MspInit+0x298>)
 800152c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001530:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_MspInit+0x298>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_UART_MspInit+0x298>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_UART_MspInit+0x298>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001544:	480f      	ldr	r0, [pc, #60]	; (8001584 <HAL_UART_MspInit+0x298>)
 8001546:	f000 fcd1 	bl	8001eec <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8001550:	f7ff fd3f 	bl	8000fd2 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_UART_MspInit+0x298>)
 8001558:	679a      	str	r2, [r3, #120]	; 0x78
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_UART_MspInit+0x298>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001560:	bf00      	nop
 8001562:	37e8      	adds	r7, #232	; 0xe8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40011000 	.word	0x40011000
 800156c:	58024400 	.word	0x58024400
 8001570:	58020400 	.word	0x58020400
 8001574:	2400ce1c 	.word	0x2400ce1c
 8001578:	40020010 	.word	0x40020010
 800157c:	40004800 	.word	0x40004800
 8001580:	58020c00 	.word	0x58020c00
 8001584:	2400cda4 	.word	0x2400cda4
 8001588:	40020028 	.word	0x40020028

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 fae6 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <DMA1_Stream0_IRQHandler+0x10>)
 80015e6:	f002 f8c9 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2400ce1c 	.word	0x2400ce1c

080015f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f000 f8ab 	bl	8001754 <BSP_LED_On>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_usart3_tx);
	DMA1->LIFCR = DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5;
 80015fe:	4b03      	ldr	r3, [pc, #12]	; (800160c <DMA1_Stream1_IRQHandler+0x18>)
 8001600:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001604:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40020000 	.word	0x40020000

08001610 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	  BSP_LED_On(LED3);
 8001614:	2002      	movs	r0, #2
 8001616:	f000 f89d 	bl	8001754 <BSP_LED_On>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800161a:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA2_Stream0_IRQHandler+0x14>)
 800161c:	f002 f8ae 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2400cfac 	.word	0x2400cfac

08001628 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 800162c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001630:	f003 fdcd 	bl	80051ce <HAL_GPIO_EXTI_IRQHandler>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 800163c:	2002      	movs	r0, #2
 800163e:	f000 f889 	bl	8001754 <BSP_LED_On>
  HAL_UART_IRQHandler(&huart3);
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <USART3_IRQHandler+0x14>)
 8001644:	f006 fdbc 	bl	80081c0 <HAL_UART_IRQHandler>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2400c90c 	.word	0x2400c90c

08001650 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	  BSP_LED_On(LED3);
 8001654:	2002      	movs	r0, #2
 8001656:	f000 f87d 	bl	8001754 <BSP_LED_On>
  HAL_SPI_IRQHandler(&hspi1);
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <SPI1_IRQHandler+0x14>)
 800165c:	f006 fa0c 	bl	8007a78 <HAL_SPI_IRQHandler>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2400cf24 	.word	0x2400cf24

08001668 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <BSP_LED_Init+0x28>
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d006      	beq.n	8001690 <BSP_LED_Init+0x28>
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d003      	beq.n	8001690 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001688:	f06f 0301 	mvn.w	r3, #1
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800168e:	e055      	b.n	800173c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10f      	bne.n	80016b6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <BSP_LED_Init+0xe0>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <BSP_LED_Init+0xe0>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <BSP_LED_Init+0xe0>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	e021      	b.n	80016fa <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d10f      	bne.n	80016dc <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <BSP_LED_Init+0xe0>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <BSP_LED_Init+0xe0>)
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <BSP_LED_Init+0xe0>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	e00e      	b.n	80016fa <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <BSP_LED_Init+0xe0>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e2:	4a19      	ldr	r2, [pc, #100]	; (8001748 <BSP_LED_Init+0xe0>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <BSP_LED_Init+0xe0>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4a13      	ldr	r2, [pc, #76]	; (800174c <BSP_LED_Init+0xe4>)
 80016fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001702:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <BSP_LED_Init+0xe8>)
 8001714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001718:	f107 0218 	add.w	r2, r7, #24
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fb72 	bl	8004e08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <BSP_LED_Init+0xe8>)
 8001728:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <BSP_LED_Init+0xe4>)
 8001730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	f003 fd16 	bl	8005168 <HAL_GPIO_WritePin>
  }

  return ret;
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800173e:	4618      	mov	r0, r3
 8001740:	3730      	adds	r7, #48	; 0x30
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	58024400 	.word	0x58024400
 800174c:	080099a0 	.word	0x080099a0
 8001750:	24000000 	.word	0x24000000

08001754 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d009      	beq.n	800177c <BSP_LED_On+0x28>
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d006      	beq.n	800177c <BSP_LED_On+0x28>
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d003      	beq.n	800177c <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001774:	f06f 0301 	mvn.w	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e00b      	b.n	8001794 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <BSP_LED_On+0x4c>)
 8001780:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <BSP_LED_On+0x50>)
 8001788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800178c:	2201      	movs	r2, #1
 800178e:	4619      	mov	r1, r3
 8001790:	f003 fcea 	bl	8005168 <HAL_GPIO_WritePin>
  }

  return ret;
 8001794:	68fb      	ldr	r3, [r7, #12]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	24000000 	.word	0x24000000
 80017a4:	080099a0 	.word	0x080099a0

080017a8 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d009      	beq.n	80017d0 <BSP_LED_Off+0x28>
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d006      	beq.n	80017d0 <BSP_LED_Off+0x28>
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d003      	beq.n	80017d0 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017c8:	f06f 0301 	mvn.w	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e00b      	b.n	80017e8 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <BSP_LED_Off+0x4c>)
 80017d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <BSP_LED_Off+0x50>)
 80017dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	f003 fcc0 	bl	8005168 <HAL_GPIO_WritePin>
  }

  return ret;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	24000000 	.word	0x24000000
 80017f8:	080099a0 	.word	0x080099a0

080017fc <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d009      	beq.n	8001824 <BSP_LED_Toggle+0x28>
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d006      	beq.n	8001824 <BSP_LED_Toggle+0x28>
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d003      	beq.n	8001824 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800181c:	f06f 0301 	mvn.w	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	e00b      	b.n	800183c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <BSP_LED_Toggle+0x4c>)
 8001828:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4907      	ldr	r1, [pc, #28]	; (800184c <BSP_LED_Toggle+0x50>)
 8001830:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f003 fcaf 	bl	800519a <HAL_GPIO_TogglePin>
  }

  return ret;
 800183c:	68fb      	ldr	r3, [r7, #12]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	24000000 	.word	0x24000000
 800184c:	080099a0 	.word	0x080099a0

08001850 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	460a      	mov	r2, r1
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	4613      	mov	r3, r2
 800185e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <BSP_PB_Init+0xc8>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001866:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <BSP_PB_Init+0xc8>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <BSP_PB_Init+0xc8>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800187e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001882:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001884:	2302      	movs	r3, #2
 8001886:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001888:	2302      	movs	r3, #2
 800188a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10c      	bne.n	80018ac <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <BSP_PB_Init+0xcc>)
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	f107 020c 	add.w	r2, r7, #12
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 faaf 	bl	8004e08 <HAL_GPIO_Init>
 80018aa:	e030      	b.n	800190e <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <BSP_PB_Init+0xd0>)
 80018ae:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4a1a      	ldr	r2, [pc, #104]	; (800191c <BSP_PB_Init+0xcc>)
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	f107 020c 	add.w	r2, r7, #12
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 faa2 	bl	8004e08 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4a16      	ldr	r2, [pc, #88]	; (8001924 <BSP_PB_Init+0xd4>)
 80018ca:	441a      	add	r2, r3
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4916      	ldr	r1, [pc, #88]	; (8001928 <BSP_PB_Init+0xd8>)
 80018d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f003 fa81 	bl	8004dde <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4a10      	ldr	r2, [pc, #64]	; (8001924 <BSP_PB_Init+0xd4>)
 80018e2:	1898      	adds	r0, r3, r2
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4a11      	ldr	r2, [pc, #68]	; (800192c <BSP_PB_Init+0xdc>)
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	461a      	mov	r2, r3
 80018ee:	2100      	movs	r1, #0
 80018f0:	f003 fa56 	bl	8004da0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80018f4:	2028      	movs	r0, #40	; 0x28
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <BSP_PB_Init+0xe0>)
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	2200      	movs	r2, #0
 8001900:	4619      	mov	r1, r3
 8001902:	f000 fab0 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001906:	2328      	movs	r3, #40	; 0x28
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fac6 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58024400 	.word	0x58024400
 800191c:	2400000c 	.word	0x2400000c
 8001920:	11110000 	.word	0x11110000
 8001924:	2400d024 	.word	0x2400d024
 8001928:	080099a8 	.word	0x080099a8
 800192c:	24000010 	.word	0x24000010
 8001930:	24000014 	.word	0x24000014

08001934 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fff0 	bl	8001934 <BSP_PB_Callback>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800195c:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <SystemInit+0xec>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a38      	ldr	r2, [pc, #224]	; (8001a44 <SystemInit+0xec>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <SystemInit+0xf0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	2b06      	cmp	r3, #6
 8001976:	d807      	bhi.n	8001988 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <SystemInit+0xf0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 030f 	bic.w	r3, r3, #15
 8001980:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <SystemInit+0xf0>)
 8001982:	f043 0307 	orr.w	r3, r3, #7
 8001986:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <SystemInit+0xf4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <SystemInit+0xf4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <SystemInit+0xf4>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <SystemInit+0xf4>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	492b      	ldr	r1, [pc, #172]	; (8001a4c <SystemInit+0xf4>)
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <SystemInit+0xf8>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <SystemInit+0xf0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <SystemInit+0xf0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 030f 	bic.w	r3, r3, #15
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <SystemInit+0xf0>)
 80019bc:	f043 0307 	orr.w	r3, r3, #7
 80019c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <SystemInit+0xf4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <SystemInit+0xf4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <SystemInit+0xf4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <SystemInit+0xf4>)
 80019d6:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <SystemInit+0xfc>)
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <SystemInit+0xf4>)
 80019dc:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <SystemInit+0x100>)
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <SystemInit+0xf4>)
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <SystemInit+0x104>)
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <SystemInit+0xf4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <SystemInit+0xf4>)
 80019ee:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <SystemInit+0x104>)
 80019f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <SystemInit+0xf4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <SystemInit+0xf4>)
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <SystemInit+0x104>)
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <SystemInit+0xf4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <SystemInit+0xf4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <SystemInit+0xf4>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <SystemInit+0xf4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <SystemInit+0x108>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <SystemInit+0x10c>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a22:	d202      	bcs.n	8001a2a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <SystemInit+0x110>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <SystemInit+0x114>)
 8001a2c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a30:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SystemInit+0xec>)
 8001a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a38:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00
 8001a48:	52002000 	.word	0x52002000
 8001a4c:	58024400 	.word	0x58024400
 8001a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a54:	02020200 	.word	0x02020200
 8001a58:	01ff0000 	.word	0x01ff0000
 8001a5c:	01010280 	.word	0x01010280
 8001a60:	5c001000 	.word	0x5c001000
 8001a64:	ffff0000 	.word	0xffff0000
 8001a68:	51008108 	.word	0x51008108
 8001a6c:	52004000 	.word	0x52004000

08001a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a74:	f7ff ff70 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a7a:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a90:	4c0a      	ldr	r4, [pc, #40]	; (8001abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f007 ff47 	bl	8009930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aa2:	f7fe fd95 	bl	80005d0 <main>
  bx  lr
 8001aa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001aac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ab0:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001ab4:	080099fc 	.word	0x080099fc
  ldr r2, =_sbss
 8001ab8:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8001abc:	2400d0c0 	.word	0x2400d0c0

08001ac0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC3_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aca:	2003      	movs	r0, #3
 8001acc:	f000 f9c0 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ad0:	f004 f998 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_Init+0x68>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	4913      	ldr	r1, [pc, #76]	; (8001b30 <HAL_Init+0x6c>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_Init+0x68>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_Init+0x6c>)
 8001af8:	5cd3      	ldrb	r3, [r2, r3]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_Init+0x70>)
 8001b06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <HAL_Init+0x74>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f000 f814 	bl	8001b3c <HAL_InitTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e002      	b.n	8001b24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1e:	f7ff fa63 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	080099ac 	.word	0x080099ac
 8001b34:	2400001c 	.word	0x2400001c
 8001b38:	24000018 	.word	0x24000018

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_InitTick+0x60>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e021      	b.n	8001b94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_InitTick+0x64>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_InitTick+0x60>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f9b3 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 f96f 	bl	8001e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <HAL_InitTick+0x68>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	24000024 	.word	0x24000024
 8001ba0:	24000018 	.word	0x24000018
 8001ba4:	24000020 	.word	0x24000020

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x20>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x24>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_IncTick+0x24>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	24000024 	.word	0x24000024
 8001bcc:	2400d0bc 	.word	0x2400d0bc

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_GetTick+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2400d0bc 	.word	0x2400d0bc

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff ffee 	bl	8001bd0 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	24000024 	.word	0x24000024

08001c30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetREVID+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0c1b      	lsrs	r3, r3, #16
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	5c001000 	.word	0x5c001000

08001c48 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_EnableCompensationCell+0x1c>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_EnableCompensationCell+0x1c>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6213      	str	r3, [r2, #32]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	58000400 	.word	0x58000400

08001c68 <__NVIC_SetPriorityGrouping>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	05fa0000 	.word	0x05fa0000

08001cb0 <__NVIC_GetPriorityGrouping>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_DisableIRQ>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db12      	blt.n	8001d40 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	490a      	ldr	r1, [pc, #40]	; (8001d4c <__NVIC_DisableIRQ+0x44>)
 8001d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	3320      	adds	r3, #32
 8001d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d34:	f3bf 8f4f 	dsb	sy
}
 8001d38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d3a:	f3bf 8f6f 	isb	sy
}
 8001d3e:	bf00      	nop
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f7ff ff8e 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff05 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff1c 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff90 	bl	8001da4 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5f 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff0f 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff1f 	bl	8001d08 <__NVIC_DisableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff96 	bl	8001e0c <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff fe6c 	bl	8001bd0 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e316      	b.n	8002532 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a66      	ldr	r2, [pc, #408]	; (80020a4 <HAL_DMA_Init+0x1b8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d04a      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <HAL_DMA_Init+0x1bc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d045      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a63      	ldr	r2, [pc, #396]	; (80020ac <HAL_DMA_Init+0x1c0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d040      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a62      	ldr	r2, [pc, #392]	; (80020b0 <HAL_DMA_Init+0x1c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d03b      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a60      	ldr	r2, [pc, #384]	; (80020b4 <HAL_DMA_Init+0x1c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d036      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5f      	ldr	r2, [pc, #380]	; (80020b8 <HAL_DMA_Init+0x1cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d031      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5d      	ldr	r2, [pc, #372]	; (80020bc <HAL_DMA_Init+0x1d0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02c      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5c      	ldr	r2, [pc, #368]	; (80020c0 <HAL_DMA_Init+0x1d4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d027      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5a      	ldr	r2, [pc, #360]	; (80020c4 <HAL_DMA_Init+0x1d8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d022      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a59      	ldr	r2, [pc, #356]	; (80020c8 <HAL_DMA_Init+0x1dc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d01d      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a57      	ldr	r2, [pc, #348]	; (80020cc <HAL_DMA_Init+0x1e0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d018      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a56      	ldr	r2, [pc, #344]	; (80020d0 <HAL_DMA_Init+0x1e4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a54      	ldr	r2, [pc, #336]	; (80020d4 <HAL_DMA_Init+0x1e8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00e      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a53      	ldr	r2, [pc, #332]	; (80020d8 <HAL_DMA_Init+0x1ec>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a51      	ldr	r2, [pc, #324]	; (80020dc <HAL_DMA_Init+0x1f0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_DMA_Init+0xb8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a50      	ldr	r2, [pc, #320]	; (80020e0 <HAL_DMA_Init+0x1f4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Init+0xbc>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_Init+0xbe>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 813b 	beq.w	8002226 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a37      	ldr	r2, [pc, #220]	; (80020a4 <HAL_DMA_Init+0x1b8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d04a      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a36      	ldr	r2, [pc, #216]	; (80020a8 <HAL_DMA_Init+0x1bc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d045      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a34      	ldr	r2, [pc, #208]	; (80020ac <HAL_DMA_Init+0x1c0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d040      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a33      	ldr	r2, [pc, #204]	; (80020b0 <HAL_DMA_Init+0x1c4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d03b      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a31      	ldr	r2, [pc, #196]	; (80020b4 <HAL_DMA_Init+0x1c8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d036      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <HAL_DMA_Init+0x1cc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d031      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <HAL_DMA_Init+0x1d0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02c      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2d      	ldr	r2, [pc, #180]	; (80020c0 <HAL_DMA_Init+0x1d4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d027      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2b      	ldr	r2, [pc, #172]	; (80020c4 <HAL_DMA_Init+0x1d8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d022      	beq.n	8002060 <HAL_DMA_Init+0x174>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <HAL_DMA_Init+0x1dc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d01d      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <HAL_DMA_Init+0x1e0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d018      	beq.n	8002060 <HAL_DMA_Init+0x174>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_DMA_Init+0x1e4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <HAL_DMA_Init+0x1e8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00e      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <HAL_DMA_Init+0x1ec>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_DMA_Init+0x174>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_DMA_Init+0x1f0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d004      	beq.n	8002060 <HAL_DMA_Init+0x174>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <HAL_DMA_Init+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d108      	bne.n	8002072 <HAL_DMA_Init+0x186>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e007      	b.n	8002082 <HAL_DMA_Init+0x196>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002082:	e02f      	b.n	80020e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002084:	f7ff fda4 	bl	8001bd0 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b05      	cmp	r3, #5
 8002090:	d928      	bls.n	80020e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2203      	movs	r2, #3
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e246      	b.n	8002532 <HAL_DMA_Init+0x646>
 80020a4:	40020010 	.word	0x40020010
 80020a8:	40020028 	.word	0x40020028
 80020ac:	40020040 	.word	0x40020040
 80020b0:	40020058 	.word	0x40020058
 80020b4:	40020070 	.word	0x40020070
 80020b8:	40020088 	.word	0x40020088
 80020bc:	400200a0 	.word	0x400200a0
 80020c0:	400200b8 	.word	0x400200b8
 80020c4:	40020410 	.word	0x40020410
 80020c8:	40020428 	.word	0x40020428
 80020cc:	40020440 	.word	0x40020440
 80020d0:	40020458 	.word	0x40020458
 80020d4:	40020470 	.word	0x40020470
 80020d8:	40020488 	.word	0x40020488
 80020dc:	400204a0 	.word	0x400204a0
 80020e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1c8      	bne.n	8002084 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4b83      	ldr	r3, [pc, #524]	; (800230c <HAL_DMA_Init+0x420>)
 80020fe:	4013      	ands	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800210a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002116:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2b04      	cmp	r3, #4
 8002136:	d107      	bne.n	8002148 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4313      	orrs	r3, r2
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002148:	4b71      	ldr	r3, [pc, #452]	; (8002310 <HAL_DMA_Init+0x424>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b71      	ldr	r3, [pc, #452]	; (8002314 <HAL_DMA_Init+0x428>)
 800214e:	4013      	ands	r3, r2
 8002150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002154:	d328      	bcc.n	80021a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b28      	cmp	r3, #40	; 0x28
 800215c:	d903      	bls.n	8002166 <HAL_DMA_Init+0x27a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b2e      	cmp	r3, #46	; 0x2e
 8002164:	d917      	bls.n	8002196 <HAL_DMA_Init+0x2aa>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b3e      	cmp	r3, #62	; 0x3e
 800216c:	d903      	bls.n	8002176 <HAL_DMA_Init+0x28a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b42      	cmp	r3, #66	; 0x42
 8002174:	d90f      	bls.n	8002196 <HAL_DMA_Init+0x2aa>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b46      	cmp	r3, #70	; 0x46
 800217c:	d903      	bls.n	8002186 <HAL_DMA_Init+0x29a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b48      	cmp	r3, #72	; 0x48
 8002184:	d907      	bls.n	8002196 <HAL_DMA_Init+0x2aa>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b4e      	cmp	r3, #78	; 0x4e
 800218c:	d905      	bls.n	800219a <HAL_DMA_Init+0x2ae>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b52      	cmp	r3, #82	; 0x52
 8002194:	d801      	bhi.n	800219a <HAL_DMA_Init+0x2ae>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_DMA_Init+0x2b0>
 800219a:	2300      	movs	r3, #0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f023 0307 	bic.w	r3, r3, #7
 80021be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d117      	bne.n	8002202 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f002 fc51 	bl	8004a8c <DMA_CheckFifoParam>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e197      	b.n	8002532 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f002 fb8c 	bl	8004928 <DMA_CalcBaseAndBitshift>
 8002210:	4603      	mov	r3, r0
 8002212:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	223f      	movs	r2, #63	; 0x3f
 800221e:	409a      	lsls	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	e0cd      	b.n	80023c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <HAL_DMA_Init+0x42c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <HAL_DMA_Init+0x38a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a39      	ldr	r2, [pc, #228]	; (800231c <HAL_DMA_Init+0x430>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01d      	beq.n	8002276 <HAL_DMA_Init+0x38a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a38      	ldr	r2, [pc, #224]	; (8002320 <HAL_DMA_Init+0x434>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d018      	beq.n	8002276 <HAL_DMA_Init+0x38a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a36      	ldr	r2, [pc, #216]	; (8002324 <HAL_DMA_Init+0x438>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_DMA_Init+0x38a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a35      	ldr	r2, [pc, #212]	; (8002328 <HAL_DMA_Init+0x43c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Init+0x38a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a33      	ldr	r2, [pc, #204]	; (800232c <HAL_DMA_Init+0x440>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_DMA_Init+0x38a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a32      	ldr	r2, [pc, #200]	; (8002330 <HAL_DMA_Init+0x444>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Init+0x38a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a30      	ldr	r2, [pc, #192]	; (8002334 <HAL_DMA_Init+0x448>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_DMA_Init+0x38e>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_DMA_Init+0x390>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8097 	beq.w	80023b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a24      	ldr	r2, [pc, #144]	; (8002318 <HAL_DMA_Init+0x42c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d021      	beq.n	80022d0 <HAL_DMA_Init+0x3e4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a22      	ldr	r2, [pc, #136]	; (800231c <HAL_DMA_Init+0x430>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01c      	beq.n	80022d0 <HAL_DMA_Init+0x3e4>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a21      	ldr	r2, [pc, #132]	; (8002320 <HAL_DMA_Init+0x434>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d017      	beq.n	80022d0 <HAL_DMA_Init+0x3e4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_DMA_Init+0x438>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d012      	beq.n	80022d0 <HAL_DMA_Init+0x3e4>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1e      	ldr	r2, [pc, #120]	; (8002328 <HAL_DMA_Init+0x43c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00d      	beq.n	80022d0 <HAL_DMA_Init+0x3e4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_DMA_Init+0x440>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d008      	beq.n	80022d0 <HAL_DMA_Init+0x3e4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <HAL_DMA_Init+0x444>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d003      	beq.n	80022d0 <HAL_DMA_Init+0x3e4>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_DMA_Init+0x448>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_DMA_Init+0x44c>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d020      	beq.n	800233c <HAL_DMA_Init+0x450>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b80      	cmp	r3, #128	; 0x80
 8002300:	d102      	bne.n	8002308 <HAL_DMA_Init+0x41c>
 8002302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002306:	e01a      	b.n	800233e <HAL_DMA_Init+0x452>
 8002308:	2300      	movs	r3, #0
 800230a:	e018      	b.n	800233e <HAL_DMA_Init+0x452>
 800230c:	fe10803f 	.word	0xfe10803f
 8002310:	5c001000 	.word	0x5c001000
 8002314:	ffff0000 	.word	0xffff0000
 8002318:	58025408 	.word	0x58025408
 800231c:	5802541c 	.word	0x5802541c
 8002320:	58025430 	.word	0x58025430
 8002324:	58025444 	.word	0x58025444
 8002328:	58025458 	.word	0x58025458
 800232c:	5802546c 	.word	0x5802546c
 8002330:	58025480 	.word	0x58025480
 8002334:	58025494 	.word	0x58025494
 8002338:	fffe000f 	.word	0xfffe000f
 800233c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68d2      	ldr	r2, [r2, #12]
 8002342:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002344:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800234c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002354:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800235c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800236c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b6e      	ldr	r3, [pc, #440]	; (800253c <HAL_DMA_Init+0x650>)
 8002384:	4413      	add	r3, r2
 8002386:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <HAL_DMA_Init+0x654>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	009a      	lsls	r2, r3, #2
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f002 fac7 	bl	8004928 <DMA_CalcBaseAndBitshift>
 800239a:	4603      	mov	r3, r0
 800239c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2201      	movs	r2, #1
 80023a8:	409a      	lsls	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	e008      	b.n	80023c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2240      	movs	r2, #64	; 0x40
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2203      	movs	r2, #3
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0b7      	b.n	8002532 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5f      	ldr	r2, [pc, #380]	; (8002544 <HAL_DMA_Init+0x658>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d072      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5d      	ldr	r2, [pc, #372]	; (8002548 <HAL_DMA_Init+0x65c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d06d      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5c      	ldr	r2, [pc, #368]	; (800254c <HAL_DMA_Init+0x660>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d068      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a5a      	ldr	r2, [pc, #360]	; (8002550 <HAL_DMA_Init+0x664>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d063      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a59      	ldr	r2, [pc, #356]	; (8002554 <HAL_DMA_Init+0x668>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d05e      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a57      	ldr	r2, [pc, #348]	; (8002558 <HAL_DMA_Init+0x66c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d059      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a56      	ldr	r2, [pc, #344]	; (800255c <HAL_DMA_Init+0x670>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d054      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a54      	ldr	r2, [pc, #336]	; (8002560 <HAL_DMA_Init+0x674>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d04f      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a53      	ldr	r2, [pc, #332]	; (8002564 <HAL_DMA_Init+0x678>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d04a      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a51      	ldr	r2, [pc, #324]	; (8002568 <HAL_DMA_Init+0x67c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d045      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a50      	ldr	r2, [pc, #320]	; (800256c <HAL_DMA_Init+0x680>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d040      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_DMA_Init+0x684>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d03b      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a4d      	ldr	r2, [pc, #308]	; (8002574 <HAL_DMA_Init+0x688>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d036      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a4b      	ldr	r2, [pc, #300]	; (8002578 <HAL_DMA_Init+0x68c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d031      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a4a      	ldr	r2, [pc, #296]	; (800257c <HAL_DMA_Init+0x690>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d02c      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_DMA_Init+0x694>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d027      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a47      	ldr	r2, [pc, #284]	; (8002584 <HAL_DMA_Init+0x698>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d022      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a45      	ldr	r2, [pc, #276]	; (8002588 <HAL_DMA_Init+0x69c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01d      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a44      	ldr	r2, [pc, #272]	; (800258c <HAL_DMA_Init+0x6a0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d018      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a42      	ldr	r2, [pc, #264]	; (8002590 <HAL_DMA_Init+0x6a4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a41      	ldr	r2, [pc, #260]	; (8002594 <HAL_DMA_Init+0x6a8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00e      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <HAL_DMA_Init+0x6ac>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3e      	ldr	r2, [pc, #248]	; (800259c <HAL_DMA_Init+0x6b0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_DMA_Init+0x5c6>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a3c      	ldr	r2, [pc, #240]	; (80025a0 <HAL_DMA_Init+0x6b4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_DMA_Init+0x5ca>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_DMA_Init+0x5cc>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d032      	beq.n	8002522 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f002 fb61 	bl	8004b84 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b80      	cmp	r3, #128	; 0x80
 80024c8:	d102      	bne.n	80024d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_DMA_Init+0x624>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d80c      	bhi.n	8002510 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f002 fbde 	bl	8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e008      	b.n	8002522 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	a7fdabf8 	.word	0xa7fdabf8
 8002540:	cccccccd 	.word	0xcccccccd
 8002544:	40020010 	.word	0x40020010
 8002548:	40020028 	.word	0x40020028
 800254c:	40020040 	.word	0x40020040
 8002550:	40020058 	.word	0x40020058
 8002554:	40020070 	.word	0x40020070
 8002558:	40020088 	.word	0x40020088
 800255c:	400200a0 	.word	0x400200a0
 8002560:	400200b8 	.word	0x400200b8
 8002564:	40020410 	.word	0x40020410
 8002568:	40020428 	.word	0x40020428
 800256c:	40020440 	.word	0x40020440
 8002570:	40020458 	.word	0x40020458
 8002574:	40020470 	.word	0x40020470
 8002578:	40020488 	.word	0x40020488
 800257c:	400204a0 	.word	0x400204a0
 8002580:	400204b8 	.word	0x400204b8
 8002584:	58025408 	.word	0x58025408
 8002588:	5802541c 	.word	0x5802541c
 800258c:	58025430 	.word	0x58025430
 8002590:	58025444 	.word	0x58025444
 8002594:	58025458 	.word	0x58025458
 8002598:	5802546c 	.word	0x5802546c
 800259c:	58025480 	.word	0x58025480
 80025a0:	58025494 	.word	0x58025494

080025a4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0ec      	b.n	800279a <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_DMA_Start+0x2a>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0e5      	b.n	800279a <HAL_DMA_Start+0x1f6>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	f040 80d0 	bne.w	8002784 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6b      	ldr	r2, [pc, #428]	; (80027a4 <HAL_DMA_Start+0x200>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d04a      	beq.n	8002692 <HAL_DMA_Start+0xee>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a69      	ldr	r2, [pc, #420]	; (80027a8 <HAL_DMA_Start+0x204>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d045      	beq.n	8002692 <HAL_DMA_Start+0xee>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a68      	ldr	r2, [pc, #416]	; (80027ac <HAL_DMA_Start+0x208>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d040      	beq.n	8002692 <HAL_DMA_Start+0xee>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a66      	ldr	r2, [pc, #408]	; (80027b0 <HAL_DMA_Start+0x20c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d03b      	beq.n	8002692 <HAL_DMA_Start+0xee>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_DMA_Start+0x210>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d036      	beq.n	8002692 <HAL_DMA_Start+0xee>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a63      	ldr	r2, [pc, #396]	; (80027b8 <HAL_DMA_Start+0x214>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d031      	beq.n	8002692 <HAL_DMA_Start+0xee>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a62      	ldr	r2, [pc, #392]	; (80027bc <HAL_DMA_Start+0x218>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d02c      	beq.n	8002692 <HAL_DMA_Start+0xee>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a60      	ldr	r2, [pc, #384]	; (80027c0 <HAL_DMA_Start+0x21c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d027      	beq.n	8002692 <HAL_DMA_Start+0xee>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5f      	ldr	r2, [pc, #380]	; (80027c4 <HAL_DMA_Start+0x220>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d022      	beq.n	8002692 <HAL_DMA_Start+0xee>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_DMA_Start+0x224>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01d      	beq.n	8002692 <HAL_DMA_Start+0xee>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5c      	ldr	r2, [pc, #368]	; (80027cc <HAL_DMA_Start+0x228>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d018      	beq.n	8002692 <HAL_DMA_Start+0xee>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5a      	ldr	r2, [pc, #360]	; (80027d0 <HAL_DMA_Start+0x22c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_DMA_Start+0xee>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_DMA_Start+0x230>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Start+0xee>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_DMA_Start+0x234>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_DMA_Start+0xee>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a56      	ldr	r2, [pc, #344]	; (80027dc <HAL_DMA_Start+0x238>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_DMA_Start+0xee>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a54      	ldr	r2, [pc, #336]	; (80027e0 <HAL_DMA_Start+0x23c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <HAL_DMA_Start+0x100>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e007      	b.n	80026b4 <HAL_DMA_Start+0x110>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f001 ff88 	bl	80045d0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a37      	ldr	r2, [pc, #220]	; (80027a4 <HAL_DMA_Start+0x200>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d04a      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a36      	ldr	r2, [pc, #216]	; (80027a8 <HAL_DMA_Start+0x204>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d045      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a34      	ldr	r2, [pc, #208]	; (80027ac <HAL_DMA_Start+0x208>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d040      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a33      	ldr	r2, [pc, #204]	; (80027b0 <HAL_DMA_Start+0x20c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d03b      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a31      	ldr	r2, [pc, #196]	; (80027b4 <HAL_DMA_Start+0x210>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d036      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <HAL_DMA_Start+0x214>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d031      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2e      	ldr	r2, [pc, #184]	; (80027bc <HAL_DMA_Start+0x218>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02c      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <HAL_DMA_Start+0x21c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d027      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <HAL_DMA_Start+0x220>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d022      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <HAL_DMA_Start+0x224>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d01d      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a28      	ldr	r2, [pc, #160]	; (80027cc <HAL_DMA_Start+0x228>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d018      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_DMA_Start+0x22c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <HAL_DMA_Start+0x230>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00e      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <HAL_DMA_Start+0x234>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <HAL_DMA_Start+0x238>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_DMA_Start+0x1bc>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <HAL_DMA_Start+0x23c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d108      	bne.n	8002772 <HAL_DMA_Start+0x1ce>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e012      	b.n	8002798 <HAL_DMA_Start+0x1f4>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e009      	b.n	8002798 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002792:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002798:	7dfb      	ldrb	r3, [r7, #23]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40020010 	.word	0x40020010
 80027a8:	40020028 	.word	0x40020028
 80027ac:	40020040 	.word	0x40020040
 80027b0:	40020058 	.word	0x40020058
 80027b4:	40020070 	.word	0x40020070
 80027b8:	40020088 	.word	0x40020088
 80027bc:	400200a0 	.word	0x400200a0
 80027c0:	400200b8 	.word	0x400200b8
 80027c4:	40020410 	.word	0x40020410
 80027c8:	40020428 	.word	0x40020428
 80027cc:	40020440 	.word	0x40020440
 80027d0:	40020458 	.word	0x40020458
 80027d4:	40020470 	.word	0x40020470
 80027d8:	40020488 	.word	0x40020488
 80027dc:	400204a0 	.word	0x400204a0
 80027e0:	400204b8 	.word	0x400204b8

080027e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e226      	b.n	8002c4e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_DMA_Start_IT+0x2a>
 800280a:	2302      	movs	r3, #2
 800280c:	e21f      	b.n	8002c4e <HAL_DMA_Start_IT+0x46a>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	f040 820a 	bne.w	8002c38 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a68      	ldr	r2, [pc, #416]	; (80029d8 <HAL_DMA_Start_IT+0x1f4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d04a      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_DMA_Start_IT+0x1f8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d045      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_DMA_Start_IT+0x1fc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d040      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a63      	ldr	r2, [pc, #396]	; (80029e4 <HAL_DMA_Start_IT+0x200>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d03b      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a62      	ldr	r2, [pc, #392]	; (80029e8 <HAL_DMA_Start_IT+0x204>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d036      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a60      	ldr	r2, [pc, #384]	; (80029ec <HAL_DMA_Start_IT+0x208>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d031      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_DMA_Start_IT+0x20c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d02c      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a5d      	ldr	r2, [pc, #372]	; (80029f4 <HAL_DMA_Start_IT+0x210>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d027      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_DMA_Start_IT+0x214>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a5a      	ldr	r2, [pc, #360]	; (80029fc <HAL_DMA_Start_IT+0x218>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01d      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a59      	ldr	r2, [pc, #356]	; (8002a00 <HAL_DMA_Start_IT+0x21c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d018      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a57      	ldr	r2, [pc, #348]	; (8002a04 <HAL_DMA_Start_IT+0x220>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a56      	ldr	r2, [pc, #344]	; (8002a08 <HAL_DMA_Start_IT+0x224>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00e      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_DMA_Start_IT+0x228>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a53      	ldr	r2, [pc, #332]	; (8002a10 <HAL_DMA_Start_IT+0x22c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_DMA_Start_IT+0xee>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a51      	ldr	r2, [pc, #324]	; (8002a14 <HAL_DMA_Start_IT+0x230>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d108      	bne.n	80028e4 <HAL_DMA_Start_IT+0x100>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e007      	b.n	80028f4 <HAL_DMA_Start_IT+0x110>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f001 fe68 	bl	80045d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a34      	ldr	r2, [pc, #208]	; (80029d8 <HAL_DMA_Start_IT+0x1f4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d04a      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a33      	ldr	r2, [pc, #204]	; (80029dc <HAL_DMA_Start_IT+0x1f8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d045      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a31      	ldr	r2, [pc, #196]	; (80029e0 <HAL_DMA_Start_IT+0x1fc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d040      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <HAL_DMA_Start_IT+0x200>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d03b      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <HAL_DMA_Start_IT+0x204>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d036      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <HAL_DMA_Start_IT+0x208>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d031      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2b      	ldr	r2, [pc, #172]	; (80029f0 <HAL_DMA_Start_IT+0x20c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d02c      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_DMA_Start_IT+0x210>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d027      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a28      	ldr	r2, [pc, #160]	; (80029f8 <HAL_DMA_Start_IT+0x214>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d022      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a27      	ldr	r2, [pc, #156]	; (80029fc <HAL_DMA_Start_IT+0x218>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d01d      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <HAL_DMA_Start_IT+0x21c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d018      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <HAL_DMA_Start_IT+0x220>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_DMA_Start_IT+0x224>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00e      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <HAL_DMA_Start_IT+0x228>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_DMA_Start_IT+0x22c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_DMA_Start_IT+0x1bc>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <HAL_DMA_Start_IT+0x230>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_DMA_Start_IT+0x1c0>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_DMA_Start_IT+0x1c2>
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d036      	beq.n	8002a18 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 021e 	bic.w	r2, r3, #30
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0216 	orr.w	r2, r2, #22
 80029bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d03e      	beq.n	8002a44 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0208 	orr.w	r2, r2, #8
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e035      	b.n	8002a44 <HAL_DMA_Start_IT+0x260>
 80029d8:	40020010 	.word	0x40020010
 80029dc:	40020028 	.word	0x40020028
 80029e0:	40020040 	.word	0x40020040
 80029e4:	40020058 	.word	0x40020058
 80029e8:	40020070 	.word	0x40020070
 80029ec:	40020088 	.word	0x40020088
 80029f0:	400200a0 	.word	0x400200a0
 80029f4:	400200b8 	.word	0x400200b8
 80029f8:	40020410 	.word	0x40020410
 80029fc:	40020428 	.word	0x40020428
 8002a00:	40020440 	.word	0x40020440
 8002a04:	40020458 	.word	0x40020458
 8002a08:	40020470 	.word	0x40020470
 8002a0c:	40020488 	.word	0x40020488
 8002a10:	400204a0 	.word	0x400204a0
 8002a14:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 020e 	bic.w	r2, r3, #14
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 020a 	orr.w	r2, r2, #10
 8002a2a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0204 	orr.w	r2, r2, #4
 8002a42:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a83      	ldr	r2, [pc, #524]	; (8002c58 <HAL_DMA_Start_IT+0x474>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d072      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a82      	ldr	r2, [pc, #520]	; (8002c5c <HAL_DMA_Start_IT+0x478>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d06d      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a80      	ldr	r2, [pc, #512]	; (8002c60 <HAL_DMA_Start_IT+0x47c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d068      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7f      	ldr	r2, [pc, #508]	; (8002c64 <HAL_DMA_Start_IT+0x480>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d063      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a7d      	ldr	r2, [pc, #500]	; (8002c68 <HAL_DMA_Start_IT+0x484>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d05e      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7c      	ldr	r2, [pc, #496]	; (8002c6c <HAL_DMA_Start_IT+0x488>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d059      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a7a      	ldr	r2, [pc, #488]	; (8002c70 <HAL_DMA_Start_IT+0x48c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d054      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <HAL_DMA_Start_IT+0x490>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d04f      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a77      	ldr	r2, [pc, #476]	; (8002c78 <HAL_DMA_Start_IT+0x494>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d04a      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a76      	ldr	r2, [pc, #472]	; (8002c7c <HAL_DMA_Start_IT+0x498>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d045      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a74      	ldr	r2, [pc, #464]	; (8002c80 <HAL_DMA_Start_IT+0x49c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d040      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a73      	ldr	r2, [pc, #460]	; (8002c84 <HAL_DMA_Start_IT+0x4a0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d03b      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a71      	ldr	r2, [pc, #452]	; (8002c88 <HAL_DMA_Start_IT+0x4a4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d036      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a70      	ldr	r2, [pc, #448]	; (8002c8c <HAL_DMA_Start_IT+0x4a8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d031      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6e      	ldr	r2, [pc, #440]	; (8002c90 <HAL_DMA_Start_IT+0x4ac>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02c      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6d      	ldr	r2, [pc, #436]	; (8002c94 <HAL_DMA_Start_IT+0x4b0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d027      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6b      	ldr	r2, [pc, #428]	; (8002c98 <HAL_DMA_Start_IT+0x4b4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d022      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6a      	ldr	r2, [pc, #424]	; (8002c9c <HAL_DMA_Start_IT+0x4b8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d01d      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a68      	ldr	r2, [pc, #416]	; (8002ca0 <HAL_DMA_Start_IT+0x4bc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d018      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_DMA_Start_IT+0x4c0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d013      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <HAL_DMA_Start_IT+0x4c4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00e      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a64      	ldr	r2, [pc, #400]	; (8002cac <HAL_DMA_Start_IT+0x4c8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d009      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a62      	ldr	r2, [pc, #392]	; (8002cb0 <HAL_DMA_Start_IT+0x4cc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <HAL_DMA_Start_IT+0x350>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a61      	ldr	r2, [pc, #388]	; (8002cb4 <HAL_DMA_Start_IT+0x4d0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_DMA_Start_IT+0x354>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_DMA_Start_IT+0x356>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01a      	beq.n	8002b74 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b72:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a37      	ldr	r2, [pc, #220]	; (8002c58 <HAL_DMA_Start_IT+0x474>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d04a      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a36      	ldr	r2, [pc, #216]	; (8002c5c <HAL_DMA_Start_IT+0x478>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d045      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <HAL_DMA_Start_IT+0x47c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d040      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a33      	ldr	r2, [pc, #204]	; (8002c64 <HAL_DMA_Start_IT+0x480>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d03b      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <HAL_DMA_Start_IT+0x484>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d036      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a30      	ldr	r2, [pc, #192]	; (8002c6c <HAL_DMA_Start_IT+0x488>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d031      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2e      	ldr	r2, [pc, #184]	; (8002c70 <HAL_DMA_Start_IT+0x48c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02c      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <HAL_DMA_Start_IT+0x490>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d027      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <HAL_DMA_Start_IT+0x494>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d022      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <HAL_DMA_Start_IT+0x498>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d01d      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_DMA_Start_IT+0x49c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d018      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <HAL_DMA_Start_IT+0x4a0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <HAL_DMA_Start_IT+0x4a4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a24      	ldr	r2, [pc, #144]	; (8002c8c <HAL_DMA_Start_IT+0x4a8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <HAL_DMA_Start_IT+0x4ac>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_DMA_Start_IT+0x430>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <HAL_DMA_Start_IT+0x4b0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d108      	bne.n	8002c26 <HAL_DMA_Start_IT+0x442>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e012      	b.n	8002c4c <HAL_DMA_Start_IT+0x468>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e009      	b.n	8002c4c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40020010 	.word	0x40020010
 8002c5c:	40020028 	.word	0x40020028
 8002c60:	40020040 	.word	0x40020040
 8002c64:	40020058 	.word	0x40020058
 8002c68:	40020070 	.word	0x40020070
 8002c6c:	40020088 	.word	0x40020088
 8002c70:	400200a0 	.word	0x400200a0
 8002c74:	400200b8 	.word	0x400200b8
 8002c78:	40020410 	.word	0x40020410
 8002c7c:	40020428 	.word	0x40020428
 8002c80:	40020440 	.word	0x40020440
 8002c84:	40020458 	.word	0x40020458
 8002c88:	40020470 	.word	0x40020470
 8002c8c:	40020488 	.word	0x40020488
 8002c90:	400204a0 	.word	0x400204a0
 8002c94:	400204b8 	.word	0x400204b8
 8002c98:	58025408 	.word	0x58025408
 8002c9c:	5802541c 	.word	0x5802541c
 8002ca0:	58025430 	.word	0x58025430
 8002ca4:	58025444 	.word	0x58025444
 8002ca8:	58025458 	.word	0x58025458
 8002cac:	5802546c 	.word	0x5802546c
 8002cb0:	58025480 	.word	0x58025480
 8002cb4:	58025494 	.word	0x58025494

08002cb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7fe ff86 	bl	8001bd0 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e2dc      	b.n	800328a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d008      	beq.n	8002cee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e2cd      	b.n	800328a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a76      	ldr	r2, [pc, #472]	; (8002ecc <HAL_DMA_Abort+0x214>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d04a      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a74      	ldr	r2, [pc, #464]	; (8002ed0 <HAL_DMA_Abort+0x218>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d045      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a73      	ldr	r2, [pc, #460]	; (8002ed4 <HAL_DMA_Abort+0x21c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d040      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a71      	ldr	r2, [pc, #452]	; (8002ed8 <HAL_DMA_Abort+0x220>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d03b      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a70      	ldr	r2, [pc, #448]	; (8002edc <HAL_DMA_Abort+0x224>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d036      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a6e      	ldr	r2, [pc, #440]	; (8002ee0 <HAL_DMA_Abort+0x228>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d031      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6d      	ldr	r2, [pc, #436]	; (8002ee4 <HAL_DMA_Abort+0x22c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d02c      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a6b      	ldr	r2, [pc, #428]	; (8002ee8 <HAL_DMA_Abort+0x230>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d027      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6a      	ldr	r2, [pc, #424]	; (8002eec <HAL_DMA_Abort+0x234>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a68      	ldr	r2, [pc, #416]	; (8002ef0 <HAL_DMA_Abort+0x238>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01d      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a67      	ldr	r2, [pc, #412]	; (8002ef4 <HAL_DMA_Abort+0x23c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d018      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a65      	ldr	r2, [pc, #404]	; (8002ef8 <HAL_DMA_Abort+0x240>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a64      	ldr	r2, [pc, #400]	; (8002efc <HAL_DMA_Abort+0x244>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00e      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a62      	ldr	r2, [pc, #392]	; (8002f00 <HAL_DMA_Abort+0x248>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a61      	ldr	r2, [pc, #388]	; (8002f04 <HAL_DMA_Abort+0x24c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_DMA_Abort+0xd6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a5f      	ldr	r2, [pc, #380]	; (8002f08 <HAL_DMA_Abort+0x250>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_DMA_Abort+0xda>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_DMA_Abort+0xdc>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 021e 	bic.w	r2, r2, #30
 8002da6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e00a      	b.n	8002dd6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 020e 	bic.w	r2, r2, #14
 8002dce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a3c      	ldr	r2, [pc, #240]	; (8002ecc <HAL_DMA_Abort+0x214>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d072      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <HAL_DMA_Abort+0x218>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d06d      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a39      	ldr	r2, [pc, #228]	; (8002ed4 <HAL_DMA_Abort+0x21c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d068      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a37      	ldr	r2, [pc, #220]	; (8002ed8 <HAL_DMA_Abort+0x220>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d063      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a36      	ldr	r2, [pc, #216]	; (8002edc <HAL_DMA_Abort+0x224>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d05e      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a34      	ldr	r2, [pc, #208]	; (8002ee0 <HAL_DMA_Abort+0x228>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d059      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a33      	ldr	r2, [pc, #204]	; (8002ee4 <HAL_DMA_Abort+0x22c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d054      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a31      	ldr	r2, [pc, #196]	; (8002ee8 <HAL_DMA_Abort+0x230>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d04f      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a30      	ldr	r2, [pc, #192]	; (8002eec <HAL_DMA_Abort+0x234>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d04a      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2e      	ldr	r2, [pc, #184]	; (8002ef0 <HAL_DMA_Abort+0x238>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d045      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2d      	ldr	r2, [pc, #180]	; (8002ef4 <HAL_DMA_Abort+0x23c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d040      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2b      	ldr	r2, [pc, #172]	; (8002ef8 <HAL_DMA_Abort+0x240>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d03b      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2a      	ldr	r2, [pc, #168]	; (8002efc <HAL_DMA_Abort+0x244>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d036      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <HAL_DMA_Abort+0x248>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d031      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <HAL_DMA_Abort+0x24c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d02c      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <HAL_DMA_Abort+0x250>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d027      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <HAL_DMA_Abort+0x254>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d022      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <HAL_DMA_Abort+0x258>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01d      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <HAL_DMA_Abort+0x25c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d018      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_DMA_Abort+0x260>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_DMA_Abort+0x264>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_DMA_Abort+0x268>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_DMA_Abort+0x26c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_DMA_Abort+0x20e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_DMA_Abort+0x270>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d132      	bne.n	8002f2c <HAL_DMA_Abort+0x274>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e031      	b.n	8002f2e <HAL_DMA_Abort+0x276>
 8002eca:	bf00      	nop
 8002ecc:	40020010 	.word	0x40020010
 8002ed0:	40020028 	.word	0x40020028
 8002ed4:	40020040 	.word	0x40020040
 8002ed8:	40020058 	.word	0x40020058
 8002edc:	40020070 	.word	0x40020070
 8002ee0:	40020088 	.word	0x40020088
 8002ee4:	400200a0 	.word	0x400200a0
 8002ee8:	400200b8 	.word	0x400200b8
 8002eec:	40020410 	.word	0x40020410
 8002ef0:	40020428 	.word	0x40020428
 8002ef4:	40020440 	.word	0x40020440
 8002ef8:	40020458 	.word	0x40020458
 8002efc:	40020470 	.word	0x40020470
 8002f00:	40020488 	.word	0x40020488
 8002f04:	400204a0 	.word	0x400204a0
 8002f08:	400204b8 	.word	0x400204b8
 8002f0c:	58025408 	.word	0x58025408
 8002f10:	5802541c 	.word	0x5802541c
 8002f14:	58025430 	.word	0x58025430
 8002f18:	58025444 	.word	0x58025444
 8002f1c:	58025458 	.word	0x58025458
 8002f20:	5802546c 	.word	0x5802546c
 8002f24:	58025480 	.word	0x58025480
 8002f28:	58025494 	.word	0x58025494
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f40:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6d      	ldr	r2, [pc, #436]	; (80030fc <HAL_DMA_Abort+0x444>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04a      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a6b      	ldr	r2, [pc, #428]	; (8003100 <HAL_DMA_Abort+0x448>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d045      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6a      	ldr	r2, [pc, #424]	; (8003104 <HAL_DMA_Abort+0x44c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d040      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a68      	ldr	r2, [pc, #416]	; (8003108 <HAL_DMA_Abort+0x450>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d03b      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a67      	ldr	r2, [pc, #412]	; (800310c <HAL_DMA_Abort+0x454>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d036      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a65      	ldr	r2, [pc, #404]	; (8003110 <HAL_DMA_Abort+0x458>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d031      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a64      	ldr	r2, [pc, #400]	; (8003114 <HAL_DMA_Abort+0x45c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d02c      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a62      	ldr	r2, [pc, #392]	; (8003118 <HAL_DMA_Abort+0x460>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d027      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a61      	ldr	r2, [pc, #388]	; (800311c <HAL_DMA_Abort+0x464>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5f      	ldr	r2, [pc, #380]	; (8003120 <HAL_DMA_Abort+0x468>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5e      	ldr	r2, [pc, #376]	; (8003124 <HAL_DMA_Abort+0x46c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d018      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5c      	ldr	r2, [pc, #368]	; (8003128 <HAL_DMA_Abort+0x470>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a5b      	ldr	r2, [pc, #364]	; (800312c <HAL_DMA_Abort+0x474>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a59      	ldr	r2, [pc, #356]	; (8003130 <HAL_DMA_Abort+0x478>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a58      	ldr	r2, [pc, #352]	; (8003134 <HAL_DMA_Abort+0x47c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_DMA_Abort+0x32a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a56      	ldr	r2, [pc, #344]	; (8003138 <HAL_DMA_Abort+0x480>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d108      	bne.n	8002ff4 <HAL_DMA_Abort+0x33c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_DMA_Abort+0x34c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003004:	e013      	b.n	800302e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003006:	f7fe fde3 	bl	8001bd0 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b05      	cmp	r3, #5
 8003012:	d90c      	bls.n	800302e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2203      	movs	r2, #3
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e12d      	b.n	800328a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e5      	bne.n	8003006 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <HAL_DMA_Abort+0x444>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d04a      	beq.n	80030da <HAL_DMA_Abort+0x422>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2d      	ldr	r2, [pc, #180]	; (8003100 <HAL_DMA_Abort+0x448>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d045      	beq.n	80030da <HAL_DMA_Abort+0x422>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <HAL_DMA_Abort+0x44c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d040      	beq.n	80030da <HAL_DMA_Abort+0x422>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <HAL_DMA_Abort+0x450>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d03b      	beq.n	80030da <HAL_DMA_Abort+0x422>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a29      	ldr	r2, [pc, #164]	; (800310c <HAL_DMA_Abort+0x454>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d036      	beq.n	80030da <HAL_DMA_Abort+0x422>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a27      	ldr	r2, [pc, #156]	; (8003110 <HAL_DMA_Abort+0x458>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d031      	beq.n	80030da <HAL_DMA_Abort+0x422>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a26      	ldr	r2, [pc, #152]	; (8003114 <HAL_DMA_Abort+0x45c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d02c      	beq.n	80030da <HAL_DMA_Abort+0x422>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a24      	ldr	r2, [pc, #144]	; (8003118 <HAL_DMA_Abort+0x460>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d027      	beq.n	80030da <HAL_DMA_Abort+0x422>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a23      	ldr	r2, [pc, #140]	; (800311c <HAL_DMA_Abort+0x464>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <HAL_DMA_Abort+0x422>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a21      	ldr	r2, [pc, #132]	; (8003120 <HAL_DMA_Abort+0x468>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01d      	beq.n	80030da <HAL_DMA_Abort+0x422>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a20      	ldr	r2, [pc, #128]	; (8003124 <HAL_DMA_Abort+0x46c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d018      	beq.n	80030da <HAL_DMA_Abort+0x422>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_DMA_Abort+0x470>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_DMA_Abort+0x422>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_DMA_Abort+0x474>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00e      	beq.n	80030da <HAL_DMA_Abort+0x422>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <HAL_DMA_Abort+0x478>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_DMA_Abort+0x422>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <HAL_DMA_Abort+0x47c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_DMA_Abort+0x422>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <HAL_DMA_Abort+0x480>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_DMA_Abort+0x426>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_DMA_Abort+0x428>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d02b      	beq.n	800313c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	223f      	movs	r2, #63	; 0x3f
 80030f4:	409a      	lsls	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	e02a      	b.n	8003152 <HAL_DMA_Abort+0x49a>
 80030fc:	40020010 	.word	0x40020010
 8003100:	40020028 	.word	0x40020028
 8003104:	40020040 	.word	0x40020040
 8003108:	40020058 	.word	0x40020058
 800310c:	40020070 	.word	0x40020070
 8003110:	40020088 	.word	0x40020088
 8003114:	400200a0 	.word	0x400200a0
 8003118:	400200b8 	.word	0x400200b8
 800311c:	40020410 	.word	0x40020410
 8003120:	40020428 	.word	0x40020428
 8003124:	40020440 	.word	0x40020440
 8003128:	40020458 	.word	0x40020458
 800312c:	40020470 	.word	0x40020470
 8003130:	40020488 	.word	0x40020488
 8003134:	400204a0 	.word	0x400204a0
 8003138:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2201      	movs	r2, #1
 800314c:	409a      	lsls	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a4f      	ldr	r2, [pc, #316]	; (8003294 <HAL_DMA_Abort+0x5dc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d072      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a4d      	ldr	r2, [pc, #308]	; (8003298 <HAL_DMA_Abort+0x5e0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d06d      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4c      	ldr	r2, [pc, #304]	; (800329c <HAL_DMA_Abort+0x5e4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d068      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4a      	ldr	r2, [pc, #296]	; (80032a0 <HAL_DMA_Abort+0x5e8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d063      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a49      	ldr	r2, [pc, #292]	; (80032a4 <HAL_DMA_Abort+0x5ec>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d05e      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <HAL_DMA_Abort+0x5f0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d059      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a46      	ldr	r2, [pc, #280]	; (80032ac <HAL_DMA_Abort+0x5f4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d054      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a44      	ldr	r2, [pc, #272]	; (80032b0 <HAL_DMA_Abort+0x5f8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d04f      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a43      	ldr	r2, [pc, #268]	; (80032b4 <HAL_DMA_Abort+0x5fc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d04a      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <HAL_DMA_Abort+0x600>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d045      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a40      	ldr	r2, [pc, #256]	; (80032bc <HAL_DMA_Abort+0x604>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d040      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a3e      	ldr	r2, [pc, #248]	; (80032c0 <HAL_DMA_Abort+0x608>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d03b      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3d      	ldr	r2, [pc, #244]	; (80032c4 <HAL_DMA_Abort+0x60c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d036      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3b      	ldr	r2, [pc, #236]	; (80032c8 <HAL_DMA_Abort+0x610>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d031      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a3a      	ldr	r2, [pc, #232]	; (80032cc <HAL_DMA_Abort+0x614>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d02c      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a38      	ldr	r2, [pc, #224]	; (80032d0 <HAL_DMA_Abort+0x618>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d027      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a37      	ldr	r2, [pc, #220]	; (80032d4 <HAL_DMA_Abort+0x61c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d022      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a35      	ldr	r2, [pc, #212]	; (80032d8 <HAL_DMA_Abort+0x620>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01d      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a34      	ldr	r2, [pc, #208]	; (80032dc <HAL_DMA_Abort+0x624>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d018      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a32      	ldr	r2, [pc, #200]	; (80032e0 <HAL_DMA_Abort+0x628>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a31      	ldr	r2, [pc, #196]	; (80032e4 <HAL_DMA_Abort+0x62c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <HAL_DMA_Abort+0x630>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2e      	ldr	r2, [pc, #184]	; (80032ec <HAL_DMA_Abort+0x634>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_DMA_Abort+0x58a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <HAL_DMA_Abort+0x638>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_DMA_Abort+0x58e>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_DMA_Abort+0x590>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d015      	beq.n	8003278 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003254:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800326c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003276:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40020010 	.word	0x40020010
 8003298:	40020028 	.word	0x40020028
 800329c:	40020040 	.word	0x40020040
 80032a0:	40020058 	.word	0x40020058
 80032a4:	40020070 	.word	0x40020070
 80032a8:	40020088 	.word	0x40020088
 80032ac:	400200a0 	.word	0x400200a0
 80032b0:	400200b8 	.word	0x400200b8
 80032b4:	40020410 	.word	0x40020410
 80032b8:	40020428 	.word	0x40020428
 80032bc:	40020440 	.word	0x40020440
 80032c0:	40020458 	.word	0x40020458
 80032c4:	40020470 	.word	0x40020470
 80032c8:	40020488 	.word	0x40020488
 80032cc:	400204a0 	.word	0x400204a0
 80032d0:	400204b8 	.word	0x400204b8
 80032d4:	58025408 	.word	0x58025408
 80032d8:	5802541c 	.word	0x5802541c
 80032dc:	58025430 	.word	0x58025430
 80032e0:	58025444 	.word	0x58025444
 80032e4:	58025458 	.word	0x58025458
 80032e8:	5802546c 	.word	0x5802546c
 80032ec:	58025480 	.word	0x58025480
 80032f0:	58025494 	.word	0x58025494

080032f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e205      	b.n	8003712 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d004      	beq.n	800331c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e1fa      	b.n	8003712 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a8c      	ldr	r2, [pc, #560]	; (8003554 <HAL_DMA_Abort_IT+0x260>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d04a      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8b      	ldr	r2, [pc, #556]	; (8003558 <HAL_DMA_Abort_IT+0x264>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d045      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a89      	ldr	r2, [pc, #548]	; (800355c <HAL_DMA_Abort_IT+0x268>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d040      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a88      	ldr	r2, [pc, #544]	; (8003560 <HAL_DMA_Abort_IT+0x26c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d03b      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a86      	ldr	r2, [pc, #536]	; (8003564 <HAL_DMA_Abort_IT+0x270>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d036      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a85      	ldr	r2, [pc, #532]	; (8003568 <HAL_DMA_Abort_IT+0x274>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d031      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a83      	ldr	r2, [pc, #524]	; (800356c <HAL_DMA_Abort_IT+0x278>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02c      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a82      	ldr	r2, [pc, #520]	; (8003570 <HAL_DMA_Abort_IT+0x27c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d027      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a80      	ldr	r2, [pc, #512]	; (8003574 <HAL_DMA_Abort_IT+0x280>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d022      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7f      	ldr	r2, [pc, #508]	; (8003578 <HAL_DMA_Abort_IT+0x284>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d01d      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a7d      	ldr	r2, [pc, #500]	; (800357c <HAL_DMA_Abort_IT+0x288>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d018      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7c      	ldr	r2, [pc, #496]	; (8003580 <HAL_DMA_Abort_IT+0x28c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d013      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a7a      	ldr	r2, [pc, #488]	; (8003584 <HAL_DMA_Abort_IT+0x290>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00e      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a79      	ldr	r2, [pc, #484]	; (8003588 <HAL_DMA_Abort_IT+0x294>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d009      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a77      	ldr	r2, [pc, #476]	; (800358c <HAL_DMA_Abort_IT+0x298>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_DMA_Abort_IT+0xc8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a76      	ldr	r2, [pc, #472]	; (8003590 <HAL_DMA_Abort_IT+0x29c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_DMA_Abort_IT+0xcc>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_DMA_Abort_IT+0xce>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d065      	beq.n	8003492 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2204      	movs	r2, #4
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a60      	ldr	r2, [pc, #384]	; (8003554 <HAL_DMA_Abort_IT+0x260>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d04a      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a5e      	ldr	r2, [pc, #376]	; (8003558 <HAL_DMA_Abort_IT+0x264>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d045      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a5d      	ldr	r2, [pc, #372]	; (800355c <HAL_DMA_Abort_IT+0x268>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d040      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5b      	ldr	r2, [pc, #364]	; (8003560 <HAL_DMA_Abort_IT+0x26c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d03b      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5a      	ldr	r2, [pc, #360]	; (8003564 <HAL_DMA_Abort_IT+0x270>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d036      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a58      	ldr	r2, [pc, #352]	; (8003568 <HAL_DMA_Abort_IT+0x274>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d031      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_DMA_Abort_IT+0x278>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d02c      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a55      	ldr	r2, [pc, #340]	; (8003570 <HAL_DMA_Abort_IT+0x27c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d027      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a54      	ldr	r2, [pc, #336]	; (8003574 <HAL_DMA_Abort_IT+0x280>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d022      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_DMA_Abort_IT+0x284>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01d      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a51      	ldr	r2, [pc, #324]	; (800357c <HAL_DMA_Abort_IT+0x288>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d018      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a4f      	ldr	r2, [pc, #316]	; (8003580 <HAL_DMA_Abort_IT+0x28c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a4e      	ldr	r2, [pc, #312]	; (8003584 <HAL_DMA_Abort_IT+0x290>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00e      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a4c      	ldr	r2, [pc, #304]	; (8003588 <HAL_DMA_Abort_IT+0x294>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a4b      	ldr	r2, [pc, #300]	; (800358c <HAL_DMA_Abort_IT+0x298>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_DMA_Abort_IT+0x17a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a49      	ldr	r2, [pc, #292]	; (8003590 <HAL_DMA_Abort_IT+0x29c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d108      	bne.n	8003480 <HAL_DMA_Abort_IT+0x18c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e147      	b.n	8003710 <HAL_DMA_Abort_IT+0x41c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e13e      	b.n	8003710 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 020e 	bic.w	r2, r2, #14
 80034a0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <HAL_DMA_Abort_IT+0x260>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d04a      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a29      	ldr	r2, [pc, #164]	; (8003558 <HAL_DMA_Abort_IT+0x264>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d045      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a28      	ldr	r2, [pc, #160]	; (800355c <HAL_DMA_Abort_IT+0x268>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d040      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a26      	ldr	r2, [pc, #152]	; (8003560 <HAL_DMA_Abort_IT+0x26c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d03b      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a25      	ldr	r2, [pc, #148]	; (8003564 <HAL_DMA_Abort_IT+0x270>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d036      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a23      	ldr	r2, [pc, #140]	; (8003568 <HAL_DMA_Abort_IT+0x274>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d031      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a22      	ldr	r2, [pc, #136]	; (800356c <HAL_DMA_Abort_IT+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d02c      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <HAL_DMA_Abort_IT+0x27c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d027      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <HAL_DMA_Abort_IT+0x280>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <HAL_DMA_Abort_IT+0x284>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01d      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_DMA_Abort_IT+0x288>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_DMA_Abort_IT+0x28c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_DMA_Abort_IT+0x290>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	; (8003588 <HAL_DMA_Abort_IT+0x294>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_DMA_Abort_IT+0x298>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_DMA_Abort_IT+0x24e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_DMA_Abort_IT+0x29c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d128      	bne.n	8003594 <HAL_DMA_Abort_IT+0x2a0>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e027      	b.n	80035a4 <HAL_DMA_Abort_IT+0x2b0>
 8003554:	40020010 	.word	0x40020010
 8003558:	40020028 	.word	0x40020028
 800355c:	40020040 	.word	0x40020040
 8003560:	40020058 	.word	0x40020058
 8003564:	40020070 	.word	0x40020070
 8003568:	40020088 	.word	0x40020088
 800356c:	400200a0 	.word	0x400200a0
 8003570:	400200b8 	.word	0x400200b8
 8003574:	40020410 	.word	0x40020410
 8003578:	40020428 	.word	0x40020428
 800357c:	40020440 	.word	0x40020440
 8003580:	40020458 	.word	0x40020458
 8003584:	40020470 	.word	0x40020470
 8003588:	40020488 	.word	0x40020488
 800358c:	400204a0 	.word	0x400204a0
 8003590:	400204b8 	.word	0x400204b8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a5c      	ldr	r2, [pc, #368]	; (800371c <HAL_DMA_Abort_IT+0x428>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d072      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5b      	ldr	r2, [pc, #364]	; (8003720 <HAL_DMA_Abort_IT+0x42c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d06d      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a59      	ldr	r2, [pc, #356]	; (8003724 <HAL_DMA_Abort_IT+0x430>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d068      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a58      	ldr	r2, [pc, #352]	; (8003728 <HAL_DMA_Abort_IT+0x434>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d063      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a56      	ldr	r2, [pc, #344]	; (800372c <HAL_DMA_Abort_IT+0x438>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d05e      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a55      	ldr	r2, [pc, #340]	; (8003730 <HAL_DMA_Abort_IT+0x43c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d059      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a53      	ldr	r2, [pc, #332]	; (8003734 <HAL_DMA_Abort_IT+0x440>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d054      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_DMA_Abort_IT+0x444>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d04f      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a50      	ldr	r2, [pc, #320]	; (800373c <HAL_DMA_Abort_IT+0x448>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d04a      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a4f      	ldr	r2, [pc, #316]	; (8003740 <HAL_DMA_Abort_IT+0x44c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d045      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a4d      	ldr	r2, [pc, #308]	; (8003744 <HAL_DMA_Abort_IT+0x450>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d040      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a4c      	ldr	r2, [pc, #304]	; (8003748 <HAL_DMA_Abort_IT+0x454>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d03b      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4a      	ldr	r2, [pc, #296]	; (800374c <HAL_DMA_Abort_IT+0x458>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d036      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a49      	ldr	r2, [pc, #292]	; (8003750 <HAL_DMA_Abort_IT+0x45c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d031      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a47      	ldr	r2, [pc, #284]	; (8003754 <HAL_DMA_Abort_IT+0x460>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02c      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a46      	ldr	r2, [pc, #280]	; (8003758 <HAL_DMA_Abort_IT+0x464>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d027      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a44      	ldr	r2, [pc, #272]	; (800375c <HAL_DMA_Abort_IT+0x468>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a43      	ldr	r2, [pc, #268]	; (8003760 <HAL_DMA_Abort_IT+0x46c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01d      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a41      	ldr	r2, [pc, #260]	; (8003764 <HAL_DMA_Abort_IT+0x470>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a40      	ldr	r2, [pc, #256]	; (8003768 <HAL_DMA_Abort_IT+0x474>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3e      	ldr	r2, [pc, #248]	; (800376c <HAL_DMA_Abort_IT+0x478>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3d      	ldr	r2, [pc, #244]	; (8003770 <HAL_DMA_Abort_IT+0x47c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3b      	ldr	r2, [pc, #236]	; (8003774 <HAL_DMA_Abort_IT+0x480>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_Abort_IT+0x3a0>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <HAL_DMA_Abort_IT+0x484>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <HAL_DMA_Abort_IT+0x3a4>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_DMA_Abort_IT+0x3a6>
 8003698:	2300      	movs	r3, #0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d028      	beq.n	80036f0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2201      	movs	r2, #1
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40020010 	.word	0x40020010
 8003720:	40020028 	.word	0x40020028
 8003724:	40020040 	.word	0x40020040
 8003728:	40020058 	.word	0x40020058
 800372c:	40020070 	.word	0x40020070
 8003730:	40020088 	.word	0x40020088
 8003734:	400200a0 	.word	0x400200a0
 8003738:	400200b8 	.word	0x400200b8
 800373c:	40020410 	.word	0x40020410
 8003740:	40020428 	.word	0x40020428
 8003744:	40020440 	.word	0x40020440
 8003748:	40020458 	.word	0x40020458
 800374c:	40020470 	.word	0x40020470
 8003750:	40020488 	.word	0x40020488
 8003754:	400204a0 	.word	0x400204a0
 8003758:	400204b8 	.word	0x400204b8
 800375c:	58025408 	.word	0x58025408
 8003760:	5802541c 	.word	0x5802541c
 8003764:	58025430 	.word	0x58025430
 8003768:	58025444 	.word	0x58025444
 800376c:	58025458 	.word	0x58025458
 8003770:	5802546c 	.word	0x5802546c
 8003774:	58025480 	.word	0x58025480
 8003778:	58025494 	.word	0x58025494

0800377c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003788:	4b67      	ldr	r3, [pc, #412]	; (8003928 <HAL_DMA_IRQHandler+0x1ac>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a67      	ldr	r2, [pc, #412]	; (800392c <HAL_DMA_IRQHandler+0x1b0>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0a9b      	lsrs	r3, r3, #10
 8003794:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a5f      	ldr	r2, [pc, #380]	; (8003930 <HAL_DMA_IRQHandler+0x1b4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d04a      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5d      	ldr	r2, [pc, #372]	; (8003934 <HAL_DMA_IRQHandler+0x1b8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d045      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5c      	ldr	r2, [pc, #368]	; (8003938 <HAL_DMA_IRQHandler+0x1bc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d040      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5a      	ldr	r2, [pc, #360]	; (800393c <HAL_DMA_IRQHandler+0x1c0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d03b      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a59      	ldr	r2, [pc, #356]	; (8003940 <HAL_DMA_IRQHandler+0x1c4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d036      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a57      	ldr	r2, [pc, #348]	; (8003944 <HAL_DMA_IRQHandler+0x1c8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d031      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a56      	ldr	r2, [pc, #344]	; (8003948 <HAL_DMA_IRQHandler+0x1cc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d02c      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a54      	ldr	r2, [pc, #336]	; (800394c <HAL_DMA_IRQHandler+0x1d0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d027      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a53      	ldr	r2, [pc, #332]	; (8003950 <HAL_DMA_IRQHandler+0x1d4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d022      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a51      	ldr	r2, [pc, #324]	; (8003954 <HAL_DMA_IRQHandler+0x1d8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01d      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a50      	ldr	r2, [pc, #320]	; (8003958 <HAL_DMA_IRQHandler+0x1dc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d018      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a4e      	ldr	r2, [pc, #312]	; (800395c <HAL_DMA_IRQHandler+0x1e0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a4d      	ldr	r2, [pc, #308]	; (8003960 <HAL_DMA_IRQHandler+0x1e4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00e      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a4b      	ldr	r2, [pc, #300]	; (8003964 <HAL_DMA_IRQHandler+0x1e8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d009      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a4a      	ldr	r2, [pc, #296]	; (8003968 <HAL_DMA_IRQHandler+0x1ec>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d004      	beq.n	800384e <HAL_DMA_IRQHandler+0xd2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a48      	ldr	r2, [pc, #288]	; (800396c <HAL_DMA_IRQHandler+0x1f0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_DMA_IRQHandler+0xd6>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_DMA_IRQHandler+0xd8>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 842b 	beq.w	80040b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	2208      	movs	r2, #8
 8003864:	409a      	lsls	r2, r3
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80a2 	beq.w	80039b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2e      	ldr	r2, [pc, #184]	; (8003930 <HAL_DMA_IRQHandler+0x1b4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d04a      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <HAL_DMA_IRQHandler+0x1b8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d045      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2b      	ldr	r2, [pc, #172]	; (8003938 <HAL_DMA_IRQHandler+0x1bc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d040      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2a      	ldr	r2, [pc, #168]	; (800393c <HAL_DMA_IRQHandler+0x1c0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d03b      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a28      	ldr	r2, [pc, #160]	; (8003940 <HAL_DMA_IRQHandler+0x1c4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d036      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a27      	ldr	r2, [pc, #156]	; (8003944 <HAL_DMA_IRQHandler+0x1c8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d031      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a25      	ldr	r2, [pc, #148]	; (8003948 <HAL_DMA_IRQHandler+0x1cc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02c      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a24      	ldr	r2, [pc, #144]	; (800394c <HAL_DMA_IRQHandler+0x1d0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d027      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_DMA_IRQHandler+0x1d4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d022      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_DMA_IRQHandler+0x1d8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d01d      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <HAL_DMA_IRQHandler+0x1dc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d018      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_DMA_IRQHandler+0x1e0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <HAL_DMA_IRQHandler+0x1e4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_DMA_IRQHandler+0x1e8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_DMA_IRQHandler+0x1ec>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_DMA_IRQHandler+0x194>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a18      	ldr	r2, [pc, #96]	; (800396c <HAL_DMA_IRQHandler+0x1f0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d12f      	bne.n	8003970 <HAL_DMA_IRQHandler+0x1f4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e02e      	b.n	8003984 <HAL_DMA_IRQHandler+0x208>
 8003926:	bf00      	nop
 8003928:	24000018 	.word	0x24000018
 800392c:	1b4e81b5 	.word	0x1b4e81b5
 8003930:	40020010 	.word	0x40020010
 8003934:	40020028 	.word	0x40020028
 8003938:	40020040 	.word	0x40020040
 800393c:	40020058 	.word	0x40020058
 8003940:	40020070 	.word	0x40020070
 8003944:	40020088 	.word	0x40020088
 8003948:	400200a0 	.word	0x400200a0
 800394c:	400200b8 	.word	0x400200b8
 8003950:	40020410 	.word	0x40020410
 8003954:	40020428 	.word	0x40020428
 8003958:	40020440 	.word	0x40020440
 800395c:	40020458 	.word	0x40020458
 8003960:	40020470 	.word	0x40020470
 8003964:	40020488 	.word	0x40020488
 8003968:	400204a0 	.word	0x400204a0
 800396c:	400204b8 	.word	0x400204b8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0204 	bic.w	r2, r2, #4
 8003996:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2208      	movs	r2, #8
 80039a2:	409a      	lsls	r2, r3
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d06e      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a69      	ldr	r2, [pc, #420]	; (8003b74 <HAL_DMA_IRQHandler+0x3f8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d04a      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a67      	ldr	r2, [pc, #412]	; (8003b78 <HAL_DMA_IRQHandler+0x3fc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d045      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a66      	ldr	r2, [pc, #408]	; (8003b7c <HAL_DMA_IRQHandler+0x400>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d040      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a64      	ldr	r2, [pc, #400]	; (8003b80 <HAL_DMA_IRQHandler+0x404>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d03b      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a63      	ldr	r2, [pc, #396]	; (8003b84 <HAL_DMA_IRQHandler+0x408>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d036      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a61      	ldr	r2, [pc, #388]	; (8003b88 <HAL_DMA_IRQHandler+0x40c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d031      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a60      	ldr	r2, [pc, #384]	; (8003b8c <HAL_DMA_IRQHandler+0x410>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d02c      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5e      	ldr	r2, [pc, #376]	; (8003b90 <HAL_DMA_IRQHandler+0x414>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d027      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a5d      	ldr	r2, [pc, #372]	; (8003b94 <HAL_DMA_IRQHandler+0x418>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d022      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a5b      	ldr	r2, [pc, #364]	; (8003b98 <HAL_DMA_IRQHandler+0x41c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01d      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a5a      	ldr	r2, [pc, #360]	; (8003b9c <HAL_DMA_IRQHandler+0x420>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d018      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_DMA_IRQHandler+0x424>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a57      	ldr	r2, [pc, #348]	; (8003ba4 <HAL_DMA_IRQHandler+0x428>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00e      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a55      	ldr	r2, [pc, #340]	; (8003ba8 <HAL_DMA_IRQHandler+0x42c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_DMA_IRQHandler+0x430>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x2ee>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a52      	ldr	r2, [pc, #328]	; (8003bb0 <HAL_DMA_IRQHandler+0x434>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d10a      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x304>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	e003      	b.n	8003a88 <HAL_DMA_IRQHandler+0x30c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2300      	movs	r3, #0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2201      	movs	r2, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f043 0202 	orr.w	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 808f 	beq.w	8003bdc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2c      	ldr	r2, [pc, #176]	; (8003b74 <HAL_DMA_IRQHandler+0x3f8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2a      	ldr	r2, [pc, #168]	; (8003b78 <HAL_DMA_IRQHandler+0x3fc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <HAL_DMA_IRQHandler+0x400>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <HAL_DMA_IRQHandler+0x404>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a26      	ldr	r2, [pc, #152]	; (8003b84 <HAL_DMA_IRQHandler+0x408>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a24      	ldr	r2, [pc, #144]	; (8003b88 <HAL_DMA_IRQHandler+0x40c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_DMA_IRQHandler+0x410>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <HAL_DMA_IRQHandler+0x414>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <HAL_DMA_IRQHandler+0x418>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_DMA_IRQHandler+0x41c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <HAL_DMA_IRQHandler+0x420>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_DMA_IRQHandler+0x424>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <HAL_DMA_IRQHandler+0x428>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <HAL_DMA_IRQHandler+0x42c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_DMA_IRQHandler+0x430>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x3e2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <HAL_DMA_IRQHandler+0x434>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d12a      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x438>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e023      	b.n	8003bbc <HAL_DMA_IRQHandler+0x440>
 8003b74:	40020010 	.word	0x40020010
 8003b78:	40020028 	.word	0x40020028
 8003b7c:	40020040 	.word	0x40020040
 8003b80:	40020058 	.word	0x40020058
 8003b84:	40020070 	.word	0x40020070
 8003b88:	40020088 	.word	0x40020088
 8003b8c:	400200a0 	.word	0x400200a0
 8003b90:	400200b8 	.word	0x400200b8
 8003b94:	40020410 	.word	0x40020410
 8003b98:	40020428 	.word	0x40020428
 8003b9c:	40020440 	.word	0x40020440
 8003ba0:	40020458 	.word	0x40020458
 8003ba4:	40020470 	.word	0x40020470
 8003ba8:	40020488 	.word	0x40020488
 8003bac:	400204a0 	.word	0x400204a0
 8003bb0:	400204b8 	.word	0x400204b8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2204      	movs	r2, #4
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	2210      	movs	r2, #16
 8003be6:	409a      	lsls	r2, r3
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80a6 	beq.w	8003d3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a85      	ldr	r2, [pc, #532]	; (8003e0c <HAL_DMA_IRQHandler+0x690>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d04a      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a83      	ldr	r2, [pc, #524]	; (8003e10 <HAL_DMA_IRQHandler+0x694>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d045      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a82      	ldr	r2, [pc, #520]	; (8003e14 <HAL_DMA_IRQHandler+0x698>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d040      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a80      	ldr	r2, [pc, #512]	; (8003e18 <HAL_DMA_IRQHandler+0x69c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d03b      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7f      	ldr	r2, [pc, #508]	; (8003e1c <HAL_DMA_IRQHandler+0x6a0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d036      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a7d      	ldr	r2, [pc, #500]	; (8003e20 <HAL_DMA_IRQHandler+0x6a4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d031      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7c      	ldr	r2, [pc, #496]	; (8003e24 <HAL_DMA_IRQHandler+0x6a8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d02c      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a7a      	ldr	r2, [pc, #488]	; (8003e28 <HAL_DMA_IRQHandler+0x6ac>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d027      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a79      	ldr	r2, [pc, #484]	; (8003e2c <HAL_DMA_IRQHandler+0x6b0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d022      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a77      	ldr	r2, [pc, #476]	; (8003e30 <HAL_DMA_IRQHandler+0x6b4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d01d      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a76      	ldr	r2, [pc, #472]	; (8003e34 <HAL_DMA_IRQHandler+0x6b8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d018      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a74      	ldr	r2, [pc, #464]	; (8003e38 <HAL_DMA_IRQHandler+0x6bc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a73      	ldr	r2, [pc, #460]	; (8003e3c <HAL_DMA_IRQHandler+0x6c0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a71      	ldr	r2, [pc, #452]	; (8003e40 <HAL_DMA_IRQHandler+0x6c4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a70      	ldr	r2, [pc, #448]	; (8003e44 <HAL_DMA_IRQHandler+0x6c8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x516>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a6e      	ldr	r2, [pc, #440]	; (8003e48 <HAL_DMA_IRQHandler+0x6cc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10a      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0x52c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e009      	b.n	8003cbc <HAL_DMA_IRQHandler+0x540>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03e      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2210      	movs	r2, #16
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d018      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d108      	bne.n	8003cfe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d024      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4798      	blx	r3
 8003cfc:	e01f      	b.n	8003d3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01b      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
 8003d0e:	e016      	b.n	8003d3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d107      	bne.n	8003d2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0208 	bic.w	r2, r2, #8
 8003d2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	2220      	movs	r2, #32
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8110 	beq.w	8003f74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <HAL_DMA_IRQHandler+0x690>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d04a      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <HAL_DMA_IRQHandler+0x694>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d045      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <HAL_DMA_IRQHandler+0x698>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d040      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a28      	ldr	r2, [pc, #160]	; (8003e18 <HAL_DMA_IRQHandler+0x69c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d03b      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a26      	ldr	r2, [pc, #152]	; (8003e1c <HAL_DMA_IRQHandler+0x6a0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d036      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a25      	ldr	r2, [pc, #148]	; (8003e20 <HAL_DMA_IRQHandler+0x6a4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d031      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <HAL_DMA_IRQHandler+0x6a8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02c      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <HAL_DMA_IRQHandler+0x6ac>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d027      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a20      	ldr	r2, [pc, #128]	; (8003e2c <HAL_DMA_IRQHandler+0x6b0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d022      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <HAL_DMA_IRQHandler+0x6b4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d01d      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <HAL_DMA_IRQHandler+0x6b8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <HAL_DMA_IRQHandler+0x6bc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_DMA_IRQHandler+0x6c0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00e      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_DMA_IRQHandler+0x6c4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <HAL_DMA_IRQHandler+0x6c8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x678>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_DMA_IRQHandler+0x6cc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d12b      	bne.n	8003e4c <HAL_DMA_IRQHandler+0x6d0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	e02a      	b.n	8003e60 <HAL_DMA_IRQHandler+0x6e4>
 8003e0a:	bf00      	nop
 8003e0c:	40020010 	.word	0x40020010
 8003e10:	40020028 	.word	0x40020028
 8003e14:	40020040 	.word	0x40020040
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	40020070 	.word	0x40020070
 8003e20:	40020088 	.word	0x40020088
 8003e24:	400200a0 	.word	0x400200a0
 8003e28:	400200b8 	.word	0x400200b8
 8003e2c:	40020410 	.word	0x40020410
 8003e30:	40020428 	.word	0x40020428
 8003e34:	40020440 	.word	0x40020440
 8003e38:	40020458 	.word	0x40020458
 8003e3c:	40020470 	.word	0x40020470
 8003e40:	40020488 	.word	0x40020488
 8003e44:	400204a0 	.word	0x400204a0
 8003e48:	400204b8 	.word	0x400204b8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bf14      	ite	ne
 8003e5a:	2301      	movne	r3, #1
 8003e5c:	2300      	moveq	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8087 	beq.w	8003f74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	2220      	movs	r2, #32
 8003e70:	409a      	lsls	r2, r3
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d139      	bne.n	8003ef6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0216 	bic.w	r2, r2, #22
 8003e90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <HAL_DMA_IRQHandler+0x736>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0208 	bic.w	r2, r2, #8
 8003ec0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	223f      	movs	r2, #63	; 0x3f
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 834a 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
          }
          return;
 8003ef4:	e344      	b.n	8004580 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d108      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02c      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
 8003f22:	e027      	b.n	8003f74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d023      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
 8003f34:	e01e      	b.n	8003f74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0210 	bic.w	r2, r2, #16
 8003f52:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8306 	beq.w	800458a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8088 	beq.w	800409c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a7a      	ldr	r2, [pc, #488]	; (8004184 <HAL_DMA_IRQHandler+0xa08>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d04a      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a79      	ldr	r2, [pc, #484]	; (8004188 <HAL_DMA_IRQHandler+0xa0c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d045      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a77      	ldr	r2, [pc, #476]	; (800418c <HAL_DMA_IRQHandler+0xa10>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d040      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a76      	ldr	r2, [pc, #472]	; (8004190 <HAL_DMA_IRQHandler+0xa14>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d03b      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a74      	ldr	r2, [pc, #464]	; (8004194 <HAL_DMA_IRQHandler+0xa18>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d036      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a73      	ldr	r2, [pc, #460]	; (8004198 <HAL_DMA_IRQHandler+0xa1c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d031      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a71      	ldr	r2, [pc, #452]	; (800419c <HAL_DMA_IRQHandler+0xa20>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02c      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a70      	ldr	r2, [pc, #448]	; (80041a0 <HAL_DMA_IRQHandler+0xa24>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d027      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6e      	ldr	r2, [pc, #440]	; (80041a4 <HAL_DMA_IRQHandler+0xa28>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d022      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6d      	ldr	r2, [pc, #436]	; (80041a8 <HAL_DMA_IRQHandler+0xa2c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d01d      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a6b      	ldr	r2, [pc, #428]	; (80041ac <HAL_DMA_IRQHandler+0xa30>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d018      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6a      	ldr	r2, [pc, #424]	; (80041b0 <HAL_DMA_IRQHandler+0xa34>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a68      	ldr	r2, [pc, #416]	; (80041b4 <HAL_DMA_IRQHandler+0xa38>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00e      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a67      	ldr	r2, [pc, #412]	; (80041b8 <HAL_DMA_IRQHandler+0xa3c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d009      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a65      	ldr	r2, [pc, #404]	; (80041bc <HAL_DMA_IRQHandler+0xa40>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_DMA_IRQHandler+0x8b8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a64      	ldr	r2, [pc, #400]	; (80041c0 <HAL_DMA_IRQHandler+0xa44>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <HAL_DMA_IRQHandler+0x8ca>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e007      	b.n	8004056 <HAL_DMA_IRQHandler+0x8da>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3301      	adds	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405e:	429a      	cmp	r2, r3
 8004060:	d307      	bcc.n	8004072 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f2      	bne.n	8004056 <HAL_DMA_IRQHandler+0x8da>
 8004070:	e000      	b.n	8004074 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004072:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2203      	movs	r2, #3
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004092:	e003      	b.n	800409c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8272 	beq.w	800458a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	4798      	blx	r3
 80040ae:	e26c      	b.n	800458a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a43      	ldr	r2, [pc, #268]	; (80041c4 <HAL_DMA_IRQHandler+0xa48>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d022      	beq.n	8004100 <HAL_DMA_IRQHandler+0x984>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a42      	ldr	r2, [pc, #264]	; (80041c8 <HAL_DMA_IRQHandler+0xa4c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d01d      	beq.n	8004100 <HAL_DMA_IRQHandler+0x984>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a40      	ldr	r2, [pc, #256]	; (80041cc <HAL_DMA_IRQHandler+0xa50>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_DMA_IRQHandler+0x984>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a3f      	ldr	r2, [pc, #252]	; (80041d0 <HAL_DMA_IRQHandler+0xa54>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_DMA_IRQHandler+0x984>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a3d      	ldr	r2, [pc, #244]	; (80041d4 <HAL_DMA_IRQHandler+0xa58>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_DMA_IRQHandler+0x984>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <HAL_DMA_IRQHandler+0xa5c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_DMA_IRQHandler+0x984>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a3a      	ldr	r2, [pc, #232]	; (80041dc <HAL_DMA_IRQHandler+0xa60>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_DMA_IRQHandler+0x984>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a39      	ldr	r2, [pc, #228]	; (80041e0 <HAL_DMA_IRQHandler+0xa64>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_DMA_IRQHandler+0x988>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_DMA_IRQHandler+0x98a>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 823f 	beq.w	800458a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2204      	movs	r2, #4
 800411e:	409a      	lsls	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80cd 	beq.w	80042c4 <HAL_DMA_IRQHandler+0xb48>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80c7 	beq.w	80042c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2204      	movs	r2, #4
 8004140:	409a      	lsls	r2, r3
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d049      	beq.n	80041e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 8210 	beq.w	8004584 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800416c:	e20a      	b.n	8004584 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8206 	beq.w	8004584 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004180:	e200      	b.n	8004584 <HAL_DMA_IRQHandler+0xe08>
 8004182:	bf00      	nop
 8004184:	40020010 	.word	0x40020010
 8004188:	40020028 	.word	0x40020028
 800418c:	40020040 	.word	0x40020040
 8004190:	40020058 	.word	0x40020058
 8004194:	40020070 	.word	0x40020070
 8004198:	40020088 	.word	0x40020088
 800419c:	400200a0 	.word	0x400200a0
 80041a0:	400200b8 	.word	0x400200b8
 80041a4:	40020410 	.word	0x40020410
 80041a8:	40020428 	.word	0x40020428
 80041ac:	40020440 	.word	0x40020440
 80041b0:	40020458 	.word	0x40020458
 80041b4:	40020470 	.word	0x40020470
 80041b8:	40020488 	.word	0x40020488
 80041bc:	400204a0 	.word	0x400204a0
 80041c0:	400204b8 	.word	0x400204b8
 80041c4:	58025408 	.word	0x58025408
 80041c8:	5802541c 	.word	0x5802541c
 80041cc:	58025430 	.word	0x58025430
 80041d0:	58025444 	.word	0x58025444
 80041d4:	58025458 	.word	0x58025458
 80041d8:	5802546c 	.word	0x5802546c
 80041dc:	58025480 	.word	0x58025480
 80041e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d160      	bne.n	80042b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a8c      	ldr	r2, [pc, #560]	; (8004424 <HAL_DMA_IRQHandler+0xca8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d04a      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a8a      	ldr	r2, [pc, #552]	; (8004428 <HAL_DMA_IRQHandler+0xcac>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d045      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a89      	ldr	r2, [pc, #548]	; (800442c <HAL_DMA_IRQHandler+0xcb0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d040      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a87      	ldr	r2, [pc, #540]	; (8004430 <HAL_DMA_IRQHandler+0xcb4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d03b      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a86      	ldr	r2, [pc, #536]	; (8004434 <HAL_DMA_IRQHandler+0xcb8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d036      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a84      	ldr	r2, [pc, #528]	; (8004438 <HAL_DMA_IRQHandler+0xcbc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d031      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a83      	ldr	r2, [pc, #524]	; (800443c <HAL_DMA_IRQHandler+0xcc0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d02c      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a81      	ldr	r2, [pc, #516]	; (8004440 <HAL_DMA_IRQHandler+0xcc4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d027      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a80      	ldr	r2, [pc, #512]	; (8004444 <HAL_DMA_IRQHandler+0xcc8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d022      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a7e      	ldr	r2, [pc, #504]	; (8004448 <HAL_DMA_IRQHandler+0xccc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01d      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a7d      	ldr	r2, [pc, #500]	; (800444c <HAL_DMA_IRQHandler+0xcd0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a7b      	ldr	r2, [pc, #492]	; (8004450 <HAL_DMA_IRQHandler+0xcd4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a7a      	ldr	r2, [pc, #488]	; (8004454 <HAL_DMA_IRQHandler+0xcd8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00e      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a78      	ldr	r2, [pc, #480]	; (8004458 <HAL_DMA_IRQHandler+0xcdc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a77      	ldr	r2, [pc, #476]	; (800445c <HAL_DMA_IRQHandler+0xce0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_DMA_IRQHandler+0xb12>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a75      	ldr	r2, [pc, #468]	; (8004460 <HAL_DMA_IRQHandler+0xce4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d108      	bne.n	80042a0 <HAL_DMA_IRQHandler+0xb24>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0208 	bic.w	r2, r2, #8
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e007      	b.n	80042b0 <HAL_DMA_IRQHandler+0xb34>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8165 	beq.w	8004584 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042c2:	e15f      	b.n	8004584 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	2202      	movs	r2, #2
 80042ce:	409a      	lsls	r2, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80c5 	beq.w	8004464 <HAL_DMA_IRQHandler+0xce8>
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80bf 	beq.w	8004464 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2202      	movs	r2, #2
 80042f0:	409a      	lsls	r2, r3
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d018      	beq.n	8004332 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 813a 	beq.w	8004588 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800431c:	e134      	b.n	8004588 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8130 	beq.w	8004588 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004330:	e12a      	b.n	8004588 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d168      	bne.n	800440e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a38      	ldr	r2, [pc, #224]	; (8004424 <HAL_DMA_IRQHandler+0xca8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d04a      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a37      	ldr	r2, [pc, #220]	; (8004428 <HAL_DMA_IRQHandler+0xcac>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d045      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a35      	ldr	r2, [pc, #212]	; (800442c <HAL_DMA_IRQHandler+0xcb0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d040      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a34      	ldr	r2, [pc, #208]	; (8004430 <HAL_DMA_IRQHandler+0xcb4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d03b      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a32      	ldr	r2, [pc, #200]	; (8004434 <HAL_DMA_IRQHandler+0xcb8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d036      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a31      	ldr	r2, [pc, #196]	; (8004438 <HAL_DMA_IRQHandler+0xcbc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d031      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2f      	ldr	r2, [pc, #188]	; (800443c <HAL_DMA_IRQHandler+0xcc0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02c      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a2e      	ldr	r2, [pc, #184]	; (8004440 <HAL_DMA_IRQHandler+0xcc4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d027      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <HAL_DMA_IRQHandler+0xcc8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d022      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <HAL_DMA_IRQHandler+0xccc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01d      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a29      	ldr	r2, [pc, #164]	; (800444c <HAL_DMA_IRQHandler+0xcd0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d018      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a28      	ldr	r2, [pc, #160]	; (8004450 <HAL_DMA_IRQHandler+0xcd4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a26      	ldr	r2, [pc, #152]	; (8004454 <HAL_DMA_IRQHandler+0xcd8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a25      	ldr	r2, [pc, #148]	; (8004458 <HAL_DMA_IRQHandler+0xcdc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a23      	ldr	r2, [pc, #140]	; (800445c <HAL_DMA_IRQHandler+0xce0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc60>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a22      	ldr	r2, [pc, #136]	; (8004460 <HAL_DMA_IRQHandler+0xce4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <HAL_DMA_IRQHandler+0xc72>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0214 	bic.w	r2, r2, #20
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e007      	b.n	80043fe <HAL_DMA_IRQHandler+0xc82>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 020a 	bic.w	r2, r2, #10
 80043fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80b8 	beq.w	8004588 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004420:	e0b2      	b.n	8004588 <HAL_DMA_IRQHandler+0xe0c>
 8004422:	bf00      	nop
 8004424:	40020010 	.word	0x40020010
 8004428:	40020028 	.word	0x40020028
 800442c:	40020040 	.word	0x40020040
 8004430:	40020058 	.word	0x40020058
 8004434:	40020070 	.word	0x40020070
 8004438:	40020088 	.word	0x40020088
 800443c:	400200a0 	.word	0x400200a0
 8004440:	400200b8 	.word	0x400200b8
 8004444:	40020410 	.word	0x40020410
 8004448:	40020428 	.word	0x40020428
 800444c:	40020440 	.word	0x40020440
 8004450:	40020458 	.word	0x40020458
 8004454:	40020470 	.word	0x40020470
 8004458:	40020488 	.word	0x40020488
 800445c:	400204a0 	.word	0x400204a0
 8004460:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2208      	movs	r2, #8
 800446e:	409a      	lsls	r2, r3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8088 	beq.w	800458a <HAL_DMA_IRQHandler+0xe0e>
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8082 	beq.w	800458a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a41      	ldr	r2, [pc, #260]	; (8004590 <HAL_DMA_IRQHandler+0xe14>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d04a      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3f      	ldr	r2, [pc, #252]	; (8004594 <HAL_DMA_IRQHandler+0xe18>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d045      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a3e      	ldr	r2, [pc, #248]	; (8004598 <HAL_DMA_IRQHandler+0xe1c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d040      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a3c      	ldr	r2, [pc, #240]	; (800459c <HAL_DMA_IRQHandler+0xe20>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d03b      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3b      	ldr	r2, [pc, #236]	; (80045a0 <HAL_DMA_IRQHandler+0xe24>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d036      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a39      	ldr	r2, [pc, #228]	; (80045a4 <HAL_DMA_IRQHandler+0xe28>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d031      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a38      	ldr	r2, [pc, #224]	; (80045a8 <HAL_DMA_IRQHandler+0xe2c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d02c      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a36      	ldr	r2, [pc, #216]	; (80045ac <HAL_DMA_IRQHandler+0xe30>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d027      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a35      	ldr	r2, [pc, #212]	; (80045b0 <HAL_DMA_IRQHandler+0xe34>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d022      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a33      	ldr	r2, [pc, #204]	; (80045b4 <HAL_DMA_IRQHandler+0xe38>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d01d      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a32      	ldr	r2, [pc, #200]	; (80045b8 <HAL_DMA_IRQHandler+0xe3c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d018      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a30      	ldr	r2, [pc, #192]	; (80045bc <HAL_DMA_IRQHandler+0xe40>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d013      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2f      	ldr	r2, [pc, #188]	; (80045c0 <HAL_DMA_IRQHandler+0xe44>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00e      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <HAL_DMA_IRQHandler+0xe48>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d009      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <HAL_DMA_IRQHandler+0xe4c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_DMA_IRQHandler+0xdaa>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <HAL_DMA_IRQHandler+0xe50>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d108      	bne.n	8004538 <HAL_DMA_IRQHandler+0xdbc>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 021c 	bic.w	r2, r2, #28
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e007      	b.n	8004548 <HAL_DMA_IRQHandler+0xdcc>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 020e 	bic.w	r2, r2, #14
 8004546:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	2201      	movs	r2, #1
 8004552:	409a      	lsls	r2, r3
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
 800457e:	e004      	b.n	800458a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004580:	bf00      	nop
 8004582:	e002      	b.n	800458a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004588:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800458a:	3728      	adds	r7, #40	; 0x28
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40020010 	.word	0x40020010
 8004594:	40020028 	.word	0x40020028
 8004598:	40020040 	.word	0x40020040
 800459c:	40020058 	.word	0x40020058
 80045a0:	40020070 	.word	0x40020070
 80045a4:	40020088 	.word	0x40020088
 80045a8:	400200a0 	.word	0x400200a0
 80045ac:	400200b8 	.word	0x400200b8
 80045b0:	40020410 	.word	0x40020410
 80045b4:	40020428 	.word	0x40020428
 80045b8:	40020440 	.word	0x40020440
 80045bc:	40020458 	.word	0x40020458
 80045c0:	40020470 	.word	0x40020470
 80045c4:	40020488 	.word	0x40020488
 80045c8:	400204a0 	.word	0x400204a0
 80045cc:	400204b8 	.word	0x400204b8

080045d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a84      	ldr	r2, [pc, #528]	; (8004800 <DMA_SetConfig+0x230>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d072      	beq.n	80046da <DMA_SetConfig+0x10a>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a82      	ldr	r2, [pc, #520]	; (8004804 <DMA_SetConfig+0x234>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d06d      	beq.n	80046da <DMA_SetConfig+0x10a>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a81      	ldr	r2, [pc, #516]	; (8004808 <DMA_SetConfig+0x238>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d068      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a7f      	ldr	r2, [pc, #508]	; (800480c <DMA_SetConfig+0x23c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d063      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7e      	ldr	r2, [pc, #504]	; (8004810 <DMA_SetConfig+0x240>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d05e      	beq.n	80046da <DMA_SetConfig+0x10a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7c      	ldr	r2, [pc, #496]	; (8004814 <DMA_SetConfig+0x244>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d059      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7b      	ldr	r2, [pc, #492]	; (8004818 <DMA_SetConfig+0x248>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d054      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a79      	ldr	r2, [pc, #484]	; (800481c <DMA_SetConfig+0x24c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d04f      	beq.n	80046da <DMA_SetConfig+0x10a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a78      	ldr	r2, [pc, #480]	; (8004820 <DMA_SetConfig+0x250>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d04a      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a76      	ldr	r2, [pc, #472]	; (8004824 <DMA_SetConfig+0x254>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d045      	beq.n	80046da <DMA_SetConfig+0x10a>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a75      	ldr	r2, [pc, #468]	; (8004828 <DMA_SetConfig+0x258>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d040      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a73      	ldr	r2, [pc, #460]	; (800482c <DMA_SetConfig+0x25c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d03b      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a72      	ldr	r2, [pc, #456]	; (8004830 <DMA_SetConfig+0x260>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d036      	beq.n	80046da <DMA_SetConfig+0x10a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a70      	ldr	r2, [pc, #448]	; (8004834 <DMA_SetConfig+0x264>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d031      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6f      	ldr	r2, [pc, #444]	; (8004838 <DMA_SetConfig+0x268>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d02c      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a6d      	ldr	r2, [pc, #436]	; (800483c <DMA_SetConfig+0x26c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d027      	beq.n	80046da <DMA_SetConfig+0x10a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6c      	ldr	r2, [pc, #432]	; (8004840 <DMA_SetConfig+0x270>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <DMA_SetConfig+0x10a>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6a      	ldr	r2, [pc, #424]	; (8004844 <DMA_SetConfig+0x274>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01d      	beq.n	80046da <DMA_SetConfig+0x10a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a69      	ldr	r2, [pc, #420]	; (8004848 <DMA_SetConfig+0x278>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <DMA_SetConfig+0x10a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a67      	ldr	r2, [pc, #412]	; (800484c <DMA_SetConfig+0x27c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <DMA_SetConfig+0x10a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a66      	ldr	r2, [pc, #408]	; (8004850 <DMA_SetConfig+0x280>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <DMA_SetConfig+0x10a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a64      	ldr	r2, [pc, #400]	; (8004854 <DMA_SetConfig+0x284>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <DMA_SetConfig+0x10a>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a63      	ldr	r2, [pc, #396]	; (8004858 <DMA_SetConfig+0x288>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <DMA_SetConfig+0x10a>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a61      	ldr	r2, [pc, #388]	; (800485c <DMA_SetConfig+0x28c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <DMA_SetConfig+0x10e>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <DMA_SetConfig+0x110>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00d      	beq.n	8004700 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d004      	beq.n	8004700 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a3e      	ldr	r2, [pc, #248]	; (8004800 <DMA_SetConfig+0x230>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d04a      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a3d      	ldr	r2, [pc, #244]	; (8004804 <DMA_SetConfig+0x234>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d045      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a3b      	ldr	r2, [pc, #236]	; (8004808 <DMA_SetConfig+0x238>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d040      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a3a      	ldr	r2, [pc, #232]	; (800480c <DMA_SetConfig+0x23c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d03b      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a38      	ldr	r2, [pc, #224]	; (8004810 <DMA_SetConfig+0x240>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d036      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a37      	ldr	r2, [pc, #220]	; (8004814 <DMA_SetConfig+0x244>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d031      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a35      	ldr	r2, [pc, #212]	; (8004818 <DMA_SetConfig+0x248>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d02c      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a34      	ldr	r2, [pc, #208]	; (800481c <DMA_SetConfig+0x24c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d027      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a32      	ldr	r2, [pc, #200]	; (8004820 <DMA_SetConfig+0x250>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d022      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a31      	ldr	r2, [pc, #196]	; (8004824 <DMA_SetConfig+0x254>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d01d      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <DMA_SetConfig+0x258>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d018      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2e      	ldr	r2, [pc, #184]	; (800482c <DMA_SetConfig+0x25c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a2c      	ldr	r2, [pc, #176]	; (8004830 <DMA_SetConfig+0x260>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00e      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <DMA_SetConfig+0x264>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d009      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a29      	ldr	r2, [pc, #164]	; (8004838 <DMA_SetConfig+0x268>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <DMA_SetConfig+0x1d0>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a28      	ldr	r2, [pc, #160]	; (800483c <DMA_SetConfig+0x26c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d101      	bne.n	80047a4 <DMA_SetConfig+0x1d4>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <DMA_SetConfig+0x1d6>
 80047a4:	2300      	movs	r3, #0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d05a      	beq.n	8004860 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	223f      	movs	r2, #63	; 0x3f
 80047b4:	409a      	lsls	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d108      	bne.n	80047ec <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047ea:	e087      	b.n	80048fc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]
}
 80047fc:	e07e      	b.n	80048fc <DMA_SetConfig+0x32c>
 80047fe:	bf00      	nop
 8004800:	40020010 	.word	0x40020010
 8004804:	40020028 	.word	0x40020028
 8004808:	40020040 	.word	0x40020040
 800480c:	40020058 	.word	0x40020058
 8004810:	40020070 	.word	0x40020070
 8004814:	40020088 	.word	0x40020088
 8004818:	400200a0 	.word	0x400200a0
 800481c:	400200b8 	.word	0x400200b8
 8004820:	40020410 	.word	0x40020410
 8004824:	40020428 	.word	0x40020428
 8004828:	40020440 	.word	0x40020440
 800482c:	40020458 	.word	0x40020458
 8004830:	40020470 	.word	0x40020470
 8004834:	40020488 	.word	0x40020488
 8004838:	400204a0 	.word	0x400204a0
 800483c:	400204b8 	.word	0x400204b8
 8004840:	58025408 	.word	0x58025408
 8004844:	5802541c 	.word	0x5802541c
 8004848:	58025430 	.word	0x58025430
 800484c:	58025444 	.word	0x58025444
 8004850:	58025458 	.word	0x58025458
 8004854:	5802546c 	.word	0x5802546c
 8004858:	58025480 	.word	0x58025480
 800485c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a28      	ldr	r2, [pc, #160]	; (8004908 <DMA_SetConfig+0x338>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d022      	beq.n	80048b0 <DMA_SetConfig+0x2e0>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a27      	ldr	r2, [pc, #156]	; (800490c <DMA_SetConfig+0x33c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d01d      	beq.n	80048b0 <DMA_SetConfig+0x2e0>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <DMA_SetConfig+0x340>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <DMA_SetConfig+0x2e0>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a24      	ldr	r2, [pc, #144]	; (8004914 <DMA_SetConfig+0x344>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <DMA_SetConfig+0x2e0>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a22      	ldr	r2, [pc, #136]	; (8004918 <DMA_SetConfig+0x348>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <DMA_SetConfig+0x2e0>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a21      	ldr	r2, [pc, #132]	; (800491c <DMA_SetConfig+0x34c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <DMA_SetConfig+0x2e0>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <DMA_SetConfig+0x350>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <DMA_SetConfig+0x2e0>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <DMA_SetConfig+0x354>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <DMA_SetConfig+0x2e4>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <DMA_SetConfig+0x2e6>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d020      	beq.n	80048fc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2201      	movs	r2, #1
 80048c4:	409a      	lsls	r2, r3
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d108      	bne.n	80048ec <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	60da      	str	r2, [r3, #12]
}
 80048ea:	e007      	b.n	80048fc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	60da      	str	r2, [r3, #12]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	58025408 	.word	0x58025408
 800490c:	5802541c 	.word	0x5802541c
 8004910:	58025430 	.word	0x58025430
 8004914:	58025444 	.word	0x58025444
 8004918:	58025458 	.word	0x58025458
 800491c:	5802546c 	.word	0x5802546c
 8004920:	58025480 	.word	0x58025480
 8004924:	58025494 	.word	0x58025494

08004928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a42      	ldr	r2, [pc, #264]	; (8004a40 <DMA_CalcBaseAndBitshift+0x118>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04a      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a41      	ldr	r2, [pc, #260]	; (8004a44 <DMA_CalcBaseAndBitshift+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d045      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a3f      	ldr	r2, [pc, #252]	; (8004a48 <DMA_CalcBaseAndBitshift+0x120>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d040      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a3e      	ldr	r2, [pc, #248]	; (8004a4c <DMA_CalcBaseAndBitshift+0x124>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d03b      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3c      	ldr	r2, [pc, #240]	; (8004a50 <DMA_CalcBaseAndBitshift+0x128>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d036      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a3b      	ldr	r2, [pc, #236]	; (8004a54 <DMA_CalcBaseAndBitshift+0x12c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d031      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a39      	ldr	r2, [pc, #228]	; (8004a58 <DMA_CalcBaseAndBitshift+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02c      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a38      	ldr	r2, [pc, #224]	; (8004a5c <DMA_CalcBaseAndBitshift+0x134>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a36      	ldr	r2, [pc, #216]	; (8004a60 <DMA_CalcBaseAndBitshift+0x138>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a35      	ldr	r2, [pc, #212]	; (8004a64 <DMA_CalcBaseAndBitshift+0x13c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a33      	ldr	r2, [pc, #204]	; (8004a68 <DMA_CalcBaseAndBitshift+0x140>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a32      	ldr	r2, [pc, #200]	; (8004a6c <DMA_CalcBaseAndBitshift+0x144>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a30      	ldr	r2, [pc, #192]	; (8004a70 <DMA_CalcBaseAndBitshift+0x148>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a2f      	ldr	r2, [pc, #188]	; (8004a74 <DMA_CalcBaseAndBitshift+0x14c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2d      	ldr	r2, [pc, #180]	; (8004a78 <DMA_CalcBaseAndBitshift+0x150>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <DMA_CalcBaseAndBitshift+0xa8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2c      	ldr	r2, [pc, #176]	; (8004a7c <DMA_CalcBaseAndBitshift+0x154>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d101      	bne.n	80049d4 <DMA_CalcBaseAndBitshift+0xac>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <DMA_CalcBaseAndBitshift+0xae>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d024      	beq.n	8004a24 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	3b10      	subs	r3, #16
 80049e2:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <DMA_CalcBaseAndBitshift+0x158>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	4a24      	ldr	r2, [pc, #144]	; (8004a84 <DMA_CalcBaseAndBitshift+0x15c>)
 80049f4:	5cd3      	ldrb	r3, [r2, r3]
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d908      	bls.n	8004a14 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	4b1f      	ldr	r3, [pc, #124]	; (8004a88 <DMA_CalcBaseAndBitshift+0x160>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	1d1a      	adds	r2, r3, #4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	659a      	str	r2, [r3, #88]	; 0x58
 8004a12:	e00d      	b.n	8004a30 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <DMA_CalcBaseAndBitshift+0x160>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6593      	str	r3, [r2, #88]	; 0x58
 8004a22:	e005      	b.n	8004a30 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	40020010 	.word	0x40020010
 8004a44:	40020028 	.word	0x40020028
 8004a48:	40020040 	.word	0x40020040
 8004a4c:	40020058 	.word	0x40020058
 8004a50:	40020070 	.word	0x40020070
 8004a54:	40020088 	.word	0x40020088
 8004a58:	400200a0 	.word	0x400200a0
 8004a5c:	400200b8 	.word	0x400200b8
 8004a60:	40020410 	.word	0x40020410
 8004a64:	40020428 	.word	0x40020428
 8004a68:	40020440 	.word	0x40020440
 8004a6c:	40020458 	.word	0x40020458
 8004a70:	40020470 	.word	0x40020470
 8004a74:	40020488 	.word	0x40020488
 8004a78:	400204a0 	.word	0x400204a0
 8004a7c:	400204b8 	.word	0x400204b8
 8004a80:	aaaaaaab 	.word	0xaaaaaaab
 8004a84:	080099bc 	.word	0x080099bc
 8004a88:	fffffc00 	.word	0xfffffc00

08004a8c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d120      	bne.n	8004ae2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d858      	bhi.n	8004b5a <DMA_CheckFifoParam+0xce>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <DMA_CheckFifoParam+0x24>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004ad3 	.word	0x08004ad3
 8004ab8:	08004ac1 	.word	0x08004ac1
 8004abc:	08004b5b 	.word	0x08004b5b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d048      	beq.n	8004b5e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ad0:	e045      	b.n	8004b5e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ada:	d142      	bne.n	8004b62 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ae0:	e03f      	b.n	8004b62 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aea:	d123      	bne.n	8004b34 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d838      	bhi.n	8004b66 <DMA_CheckFifoParam+0xda>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <DMA_CheckFifoParam+0x70>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b13 	.word	0x08004b13
 8004b04:	08004b0d 	.word	0x08004b0d
 8004b08:	08004b25 	.word	0x08004b25
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
        break;
 8004b10:	e030      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d025      	beq.n	8004b6a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b22:	e022      	b.n	8004b6a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b2c:	d11f      	bne.n	8004b6e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b32:	e01c      	b.n	8004b6e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d902      	bls.n	8004b42 <DMA_CheckFifoParam+0xb6>
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d003      	beq.n	8004b48 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b40:	e018      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
        break;
 8004b46:	e015      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00e      	beq.n	8004b72 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
    break;
 8004b58:	e00b      	b.n	8004b72 <DMA_CheckFifoParam+0xe6>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e00a      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e008      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b62:	bf00      	nop
 8004b64:	e006      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b66:	bf00      	nop
 8004b68:	e004      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b6a:	bf00      	nop
 8004b6c:	e002      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
        break;
 8004b6e:	bf00      	nop
 8004b70:	e000      	b.n	8004b74 <DMA_CheckFifoParam+0xe8>
    break;
 8004b72:	bf00      	nop
    }
  }

  return status;
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop

08004b84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d022      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a36      	ldr	r2, [pc, #216]	; (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01d      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a35      	ldr	r2, [pc, #212]	; (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d018      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a33      	ldr	r2, [pc, #204]	; (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d013      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a32      	ldr	r2, [pc, #200]	; (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	; (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d101      	bne.n	8004be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01a      	beq.n	8004c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	3b08      	subs	r3, #8
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a24      	ldr	r2, [pc, #144]	; (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	2201      	movs	r2, #1
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c20:	e024      	b.n	8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	3b10      	subs	r3, #16
 8004c2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4a1c      	ldr	r2, [pc, #112]	; (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d806      	bhi.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d902      	bls.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3308      	adds	r3, #8
 8004c48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	461a      	mov	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a16      	ldr	r2, [pc, #88]	; (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	2201      	movs	r2, #1
 8004c66:	409a      	lsls	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	58025408 	.word	0x58025408
 8004c7c:	5802541c 	.word	0x5802541c
 8004c80:	58025430 	.word	0x58025430
 8004c84:	58025444 	.word	0x58025444
 8004c88:	58025458 	.word	0x58025458
 8004c8c:	5802546c 	.word	0x5802546c
 8004c90:	58025480 	.word	0x58025480
 8004c94:	58025494 	.word	0x58025494
 8004c98:	cccccccd 	.word	0xcccccccd
 8004c9c:	16009600 	.word	0x16009600
 8004ca0:	58025880 	.word	0x58025880
 8004ca4:	aaaaaaab 	.word	0xaaaaaaab
 8004ca8:	400204b8 	.word	0x400204b8
 8004cac:	4002040f 	.word	0x4002040f
 8004cb0:	10008200 	.word	0x10008200
 8004cb4:	40020880 	.word	0x40020880

08004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d04a      	beq.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d847      	bhi.n	8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d022      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a24      	ldr	r2, [pc, #144]	; (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d01d      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a22      	ldr	r2, [pc, #136]	; (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d018      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d101      	bne.n	8004d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d40:	671a      	str	r2, [r3, #112]	; 0x70
 8004d42:	e009      	b.n	8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d56:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	58025408 	.word	0x58025408
 8004d74:	5802541c 	.word	0x5802541c
 8004d78:	58025430 	.word	0x58025430
 8004d7c:	58025444 	.word	0x58025444
 8004d80:	58025458 	.word	0x58025458
 8004d84:	5802546c 	.word	0x5802546c
 8004d88:	58025480 	.word	0x58025480
 8004d8c:	58025494 	.word	0x58025494
 8004d90:	1600963f 	.word	0x1600963f
 8004d94:	58025940 	.word	0x58025940
 8004d98:	1000823f 	.word	0x1000823f
 8004d9c:	40020940 	.word	0x40020940

08004da0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	460b      	mov	r3, r1
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e00a      	b.n	8004dd2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004dbc:	7afb      	ldrb	r3, [r7, #11]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	605a      	str	r2, [r3, #4]
      break;
 8004dc8:	e002      	b.n	8004dd0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dce:	bf00      	nop
  }

  return status;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e003      	b.n	8004dfa <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
  }
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b089      	sub	sp, #36	; 0x24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e16:	4b89      	ldr	r3, [pc, #548]	; (800503c <HAL_GPIO_Init+0x234>)
 8004e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e1a:	e194      	b.n	8005146 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	2101      	movs	r1, #1
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8186 	beq.w	8005140 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d00b      	beq.n	8004e54 <HAL_GPIO_Init+0x4c>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d007      	beq.n	8004e54 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e48:	2b11      	cmp	r3, #17
 8004e4a:	d003      	beq.n	8004e54 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b12      	cmp	r3, #18
 8004e52:	d130      	bne.n	8004eb6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	2203      	movs	r2, #3
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 0201 	and.w	r2, r3, #1
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_Init+0xee>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b12      	cmp	r3, #18
 8004ef4:	d123      	bne.n	8004f3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	08da      	lsrs	r2, r3, #3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3208      	adds	r2, #8
 8004efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	220f      	movs	r2, #15
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	08da      	lsrs	r2, r3, #3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3208      	adds	r2, #8
 8004f38:	69b9      	ldr	r1, [r7, #24]
 8004f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	2203      	movs	r2, #3
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 0203 	and.w	r2, r3, #3
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80e0 	beq.w	8005140 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f80:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <HAL_GPIO_Init+0x238>)
 8004f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f86:	4a2e      	ldr	r2, [pc, #184]	; (8005040 <HAL_GPIO_Init+0x238>)
 8004f88:	f043 0302 	orr.w	r3, r3, #2
 8004f8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f90:	4b2b      	ldr	r3, [pc, #172]	; (8005040 <HAL_GPIO_Init+0x238>)
 8004f92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f9e:	4a29      	ldr	r2, [pc, #164]	; (8005044 <HAL_GPIO_Init+0x23c>)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	220f      	movs	r2, #15
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a20      	ldr	r2, [pc, #128]	; (8005048 <HAL_GPIO_Init+0x240>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d052      	beq.n	8005070 <HAL_GPIO_Init+0x268>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	; (800504c <HAL_GPIO_Init+0x244>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d031      	beq.n	8005036 <HAL_GPIO_Init+0x22e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1e      	ldr	r2, [pc, #120]	; (8005050 <HAL_GPIO_Init+0x248>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d02b      	beq.n	8005032 <HAL_GPIO_Init+0x22a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_GPIO_Init+0x24c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d025      	beq.n	800502e <HAL_GPIO_Init+0x226>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <HAL_GPIO_Init+0x250>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01f      	beq.n	800502a <HAL_GPIO_Init+0x222>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1b      	ldr	r2, [pc, #108]	; (800505c <HAL_GPIO_Init+0x254>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d019      	beq.n	8005026 <HAL_GPIO_Init+0x21e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <HAL_GPIO_Init+0x258>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <HAL_GPIO_Init+0x21a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a19      	ldr	r2, [pc, #100]	; (8005064 <HAL_GPIO_Init+0x25c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00d      	beq.n	800501e <HAL_GPIO_Init+0x216>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a18      	ldr	r2, [pc, #96]	; (8005068 <HAL_GPIO_Init+0x260>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <HAL_GPIO_Init+0x212>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a17      	ldr	r2, [pc, #92]	; (800506c <HAL_GPIO_Init+0x264>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d101      	bne.n	8005016 <HAL_GPIO_Init+0x20e>
 8005012:	2309      	movs	r3, #9
 8005014:	e02d      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 8005016:	230a      	movs	r3, #10
 8005018:	e02b      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 800501a:	2308      	movs	r3, #8
 800501c:	e029      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 800501e:	2307      	movs	r3, #7
 8005020:	e027      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 8005022:	2306      	movs	r3, #6
 8005024:	e025      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 8005026:	2305      	movs	r3, #5
 8005028:	e023      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 800502a:	2304      	movs	r3, #4
 800502c:	e021      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 800502e:	2303      	movs	r3, #3
 8005030:	e01f      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 8005032:	2302      	movs	r3, #2
 8005034:	e01d      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 8005036:	2301      	movs	r3, #1
 8005038:	e01b      	b.n	8005072 <HAL_GPIO_Init+0x26a>
 800503a:	bf00      	nop
 800503c:	58000080 	.word	0x58000080
 8005040:	58024400 	.word	0x58024400
 8005044:	58000400 	.word	0x58000400
 8005048:	58020000 	.word	0x58020000
 800504c:	58020400 	.word	0x58020400
 8005050:	58020800 	.word	0x58020800
 8005054:	58020c00 	.word	0x58020c00
 8005058:	58021000 	.word	0x58021000
 800505c:	58021400 	.word	0x58021400
 8005060:	58021800 	.word	0x58021800
 8005064:	58021c00 	.word	0x58021c00
 8005068:	58022000 	.word	0x58022000
 800506c:	58022400 	.word	0x58022400
 8005070:	2300      	movs	r3, #0
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	f002 0203 	and.w	r2, r2, #3
 8005078:	0092      	lsls	r2, r2, #2
 800507a:	4093      	lsls	r3, r2
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005082:	4938      	ldr	r1, [pc, #224]	; (8005164 <HAL_GPIO_Init+0x35c>)
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	089b      	lsrs	r3, r3, #2
 8005088:	3302      	adds	r3, #2
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	43db      	mvns	r3, r3
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4013      	ands	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	43db      	mvns	r3, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4013      	ands	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	43db      	mvns	r3, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4013      	ands	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800510a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	43db      	mvns	r3, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4013      	ands	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005138:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	3301      	adds	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	f47f ae63 	bne.w	8004e1c <HAL_GPIO_Init+0x14>
  }
}
 8005156:	bf00      	nop
 8005158:	bf00      	nop
 800515a:	3724      	adds	r7, #36	; 0x24
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	58000400 	.word	0x58000400

08005168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	807b      	strh	r3, [r7, #2]
 8005174:	4613      	mov	r3, r2
 8005176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005178:	787b      	ldrb	r3, [r7, #1]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005184:	e003      	b.n	800518e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005186:	887b      	ldrh	r3, [r7, #2]
 8005188:	041a      	lsls	r2, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	619a      	str	r2, [r3, #24]
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	460b      	mov	r3, r1
 80051a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051ac:	887a      	ldrh	r2, [r7, #2]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4013      	ands	r3, r2
 80051b2:	041a      	lsls	r2, r3, #16
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	43d9      	mvns	r1, r3
 80051b8:	887b      	ldrh	r3, [r7, #2]
 80051ba:	400b      	ands	r3, r1
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	619a      	str	r2, [r3, #24]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	4603      	mov	r3, r0
 80051d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb fe87 	bl	8000f08 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b04      	cmp	r3, #4
 8005216:	d00a      	beq.n	800522e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005218:	4b16      	ldr	r3, [pc, #88]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d001      	beq.n	800522a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e01f      	b.n	800526a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e01d      	b.n	800526a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f023 0207 	bic.w	r2, r3, #7
 8005236:	490f      	ldr	r1, [pc, #60]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4313      	orrs	r3, r2
 800523c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800523e:	f7fc fcc7 	bl	8001bd0 <HAL_GetTick>
 8005242:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005244:	e009      	b.n	800525a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005246:	f7fc fcc3 	bl	8001bd0 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005254:	d901      	bls.n	800525a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e007      	b.n	800526a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005266:	d1ee      	bne.n	8005246 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	58024800 	.word	0x58024800

08005278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e3ff      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8087 	beq.w	80053a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005298:	4b99      	ldr	r3, [pc, #612]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052a2:	4b97      	ldr	r3, [pc, #604]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	2b10      	cmp	r3, #16
 80052ac:	d007      	beq.n	80052be <HAL_RCC_OscConfig+0x46>
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	2b18      	cmp	r3, #24
 80052b2:	d110      	bne.n	80052d6 <HAL_RCC_OscConfig+0x5e>
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d10b      	bne.n	80052d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052be:	4b90      	ldr	r3, [pc, #576]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d06c      	beq.n	80053a4 <HAL_RCC_OscConfig+0x12c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d168      	bne.n	80053a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e3d9      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052de:	d106      	bne.n	80052ee <HAL_RCC_OscConfig+0x76>
 80052e0:	4b87      	ldr	r3, [pc, #540]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a86      	ldr	r2, [pc, #536]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	e02e      	b.n	800534c <HAL_RCC_OscConfig+0xd4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10c      	bne.n	8005310 <HAL_RCC_OscConfig+0x98>
 80052f6:	4b82      	ldr	r3, [pc, #520]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a81      	ldr	r2, [pc, #516]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b7f      	ldr	r3, [pc, #508]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a7e      	ldr	r2, [pc, #504]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e01d      	b.n	800534c <HAL_RCC_OscConfig+0xd4>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005318:	d10c      	bne.n	8005334 <HAL_RCC_OscConfig+0xbc>
 800531a:	4b79      	ldr	r3, [pc, #484]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a78      	ldr	r2, [pc, #480]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	4b76      	ldr	r3, [pc, #472]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a75      	ldr	r2, [pc, #468]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800532c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e00b      	b.n	800534c <HAL_RCC_OscConfig+0xd4>
 8005334:	4b72      	ldr	r3, [pc, #456]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a71      	ldr	r2, [pc, #452]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800533a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	4b6f      	ldr	r3, [pc, #444]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a6e      	ldr	r2, [pc, #440]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d013      	beq.n	800537c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fc fc3c 	bl	8001bd0 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800535c:	f7fc fc38 	bl	8001bd0 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b64      	cmp	r3, #100	; 0x64
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e38d      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800536e:	4b64      	ldr	r3, [pc, #400]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0xe4>
 800537a:	e014      	b.n	80053a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fc fc28 	bl	8001bd0 <HAL_GetTick>
 8005380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005384:	f7fc fc24 	bl	8001bd0 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	; 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e379      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005396:	4b5a      	ldr	r3, [pc, #360]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x10c>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 80ae 	beq.w	8005510 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b4:	4b52      	ldr	r3, [pc, #328]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053be:	4b50      	ldr	r3, [pc, #320]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <HAL_RCC_OscConfig+0x162>
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	2b18      	cmp	r3, #24
 80053ce:	d13a      	bne.n	8005446 <HAL_RCC_OscConfig+0x1ce>
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d135      	bne.n	8005446 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053da:	4b49      	ldr	r3, [pc, #292]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_RCC_OscConfig+0x17a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e34b      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f2:	f7fc fc1d 	bl	8001c30 <HAL_GetREVID>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d817      	bhi.n	8005430 <HAL_RCC_OscConfig+0x1b8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d108      	bne.n	800541a <HAL_RCC_OscConfig+0x1a2>
 8005408:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005410:	4a3b      	ldr	r2, [pc, #236]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005416:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005418:	e07a      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541a:	4b39      	ldr	r3, [pc, #228]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	031b      	lsls	r3, r3, #12
 8005428:	4935      	ldr	r1, [pc, #212]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800542a:	4313      	orrs	r3, r2
 800542c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800542e:	e06f      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005430:	4b33      	ldr	r3, [pc, #204]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	061b      	lsls	r3, r3, #24
 800543e:	4930      	ldr	r1, [pc, #192]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005444:	e064      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d045      	beq.n	80054da <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800544e:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 0219 	bic.w	r2, r3, #25
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	4929      	ldr	r1, [pc, #164]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fc fbb6 	bl	8001bd0 <HAL_GetTick>
 8005464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005468:	f7fc fbb2 	bl	8001bd0 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e307      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800547a:	4b21      	ldr	r3, [pc, #132]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005486:	f7fc fbd3 	bl	8001c30 <HAL_GetREVID>
 800548a:	4603      	mov	r3, r0
 800548c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005490:	4293      	cmp	r3, r2
 8005492:	d817      	bhi.n	80054c4 <HAL_RCC_OscConfig+0x24c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d108      	bne.n	80054ae <HAL_RCC_OscConfig+0x236>
 800549c:	4b18      	ldr	r3, [pc, #96]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054a4:	4a16      	ldr	r2, [pc, #88]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054aa:	6053      	str	r3, [r2, #4]
 80054ac:	e030      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
 80054ae:	4b14      	ldr	r3, [pc, #80]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	031b      	lsls	r3, r3, #12
 80054bc:	4910      	ldr	r1, [pc, #64]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	604b      	str	r3, [r1, #4]
 80054c2:	e025      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	490b      	ldr	r1, [pc, #44]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
 80054d8:	e01a      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a08      	ldr	r2, [pc, #32]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fc fb73 	bl	8001bd0 <HAL_GetTick>
 80054ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054ec:	e00a      	b.n	8005504 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fc fb6f 	bl	8001bd0 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d903      	bls.n	8005504 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e2c4      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
 8005500:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005504:	4ba4      	ldr	r3, [pc, #656]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1ee      	bne.n	80054ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80a9 	beq.w	8005670 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800551e:	4b9e      	ldr	r3, [pc, #632]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005526:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005528:	4b9b      	ldr	r3, [pc, #620]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d007      	beq.n	8005544 <HAL_RCC_OscConfig+0x2cc>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b18      	cmp	r3, #24
 8005538:	d13a      	bne.n	80055b0 <HAL_RCC_OscConfig+0x338>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d135      	bne.n	80055b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005544:	4b94      	ldr	r3, [pc, #592]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_RCC_OscConfig+0x2e4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d001      	beq.n	800555c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e296      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800555c:	f7fc fb68 	bl	8001c30 <HAL_GetREVID>
 8005560:	4603      	mov	r3, r0
 8005562:	f241 0203 	movw	r2, #4099	; 0x1003
 8005566:	4293      	cmp	r3, r2
 8005568:	d817      	bhi.n	800559a <HAL_RCC_OscConfig+0x322>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	2b20      	cmp	r3, #32
 8005570:	d108      	bne.n	8005584 <HAL_RCC_OscConfig+0x30c>
 8005572:	4b89      	ldr	r3, [pc, #548]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800557a:	4a87      	ldr	r2, [pc, #540]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800557c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005580:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005582:	e075      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005584:	4b84      	ldr	r3, [pc, #528]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	069b      	lsls	r3, r3, #26
 8005592:	4981      	ldr	r1, [pc, #516]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005598:	e06a      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800559a:	4b7f      	ldr	r3, [pc, #508]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	497b      	ldr	r1, [pc, #492]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ae:	e05f      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d042      	beq.n	800563e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055b8:	4b77      	ldr	r3, [pc, #476]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a76      	ldr	r2, [pc, #472]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80055be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fc fb04 	bl	8001bd0 <HAL_GetTick>
 80055c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055cc:	f7fc fb00 	bl	8001bd0 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e255      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055de:	4b6e      	ldr	r3, [pc, #440]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ea:	f7fc fb21 	bl	8001c30 <HAL_GetREVID>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d817      	bhi.n	8005628 <HAL_RCC_OscConfig+0x3b0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d108      	bne.n	8005612 <HAL_RCC_OscConfig+0x39a>
 8005600:	4b65      	ldr	r3, [pc, #404]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005608:	4a63      	ldr	r2, [pc, #396]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800560a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800560e:	6053      	str	r3, [r2, #4]
 8005610:	e02e      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
 8005612:	4b61      	ldr	r3, [pc, #388]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	069b      	lsls	r3, r3, #26
 8005620:	495d      	ldr	r1, [pc, #372]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
 8005626:	e023      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
 8005628:	4b5b      	ldr	r3, [pc, #364]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	061b      	lsls	r3, r3, #24
 8005636:	4958      	ldr	r1, [pc, #352]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005638:	4313      	orrs	r3, r2
 800563a:	60cb      	str	r3, [r1, #12]
 800563c:	e018      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800563e:	4b56      	ldr	r3, [pc, #344]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a55      	ldr	r2, [pc, #340]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564a:	f7fc fac1 	bl	8001bd0 <HAL_GetTick>
 800564e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005652:	f7fc fabd 	bl	8001bd0 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e212      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005664:	4b4c      	ldr	r3, [pc, #304]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f0      	bne.n	8005652 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d036      	beq.n	80056ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d019      	beq.n	80056b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005684:	4b44      	ldr	r3, [pc, #272]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005688:	4a43      	ldr	r2, [pc, #268]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fc fa9e 	bl	8001bd0 <HAL_GetTick>
 8005694:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005698:	f7fc fa9a 	bl	8001bd0 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e1ef      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80056ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x420>
 80056b6:	e018      	b.n	80056ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b8:	4b37      	ldr	r3, [pc, #220]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80056ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056bc:	4a36      	ldr	r2, [pc, #216]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fc fa84 	bl	8001bd0 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056cc:	f7fc fa80 	bl	8001bd0 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e1d5      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056de:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80056e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d036      	beq.n	8005764 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d019      	beq.n	8005732 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056fe:	4b26      	ldr	r3, [pc, #152]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a25      	ldr	r2, [pc, #148]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005708:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800570a:	f7fc fa61 	bl	8001bd0 <HAL_GetTick>
 800570e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005712:	f7fc fa5d 	bl	8001bd0 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e1b2      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005724:	4b1c      	ldr	r3, [pc, #112]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <HAL_RCC_OscConfig+0x49a>
 8005730:	e018      	b.n	8005764 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005732:	4b19      	ldr	r3, [pc, #100]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800573c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800573e:	f7fc fa47 	bl	8001bd0 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005746:	f7fc fa43 	bl	8001bd0 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e198      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f0      	bne.n	8005746 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8085 	beq.w	800587c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <HAL_RCC_OscConfig+0x524>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_OscConfig+0x524>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800577e:	f7fc fa27 	bl	8001bd0 <HAL_GetTick>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005784:	e00c      	b.n	80057a0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005786:	f7fc fa23 	bl	8001bd0 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b64      	cmp	r3, #100	; 0x64
 8005792:	d905      	bls.n	80057a0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e178      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
 8005798:	58024400 	.word	0x58024400
 800579c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057a0:	4b96      	ldr	r3, [pc, #600]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ec      	beq.n	8005786 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d106      	bne.n	80057c2 <HAL_RCC_OscConfig+0x54a>
 80057b4:	4b92      	ldr	r3, [pc, #584]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b8:	4a91      	ldr	r2, [pc, #580]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	6713      	str	r3, [r2, #112]	; 0x70
 80057c0:	e02d      	b.n	800581e <HAL_RCC_OscConfig+0x5a6>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10c      	bne.n	80057e4 <HAL_RCC_OscConfig+0x56c>
 80057ca:	4b8d      	ldr	r3, [pc, #564]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	4a8c      	ldr	r2, [pc, #560]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	6713      	str	r3, [r2, #112]	; 0x70
 80057d6:	4b8a      	ldr	r3, [pc, #552]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	4a89      	ldr	r2, [pc, #548]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057dc:	f023 0304 	bic.w	r3, r3, #4
 80057e0:	6713      	str	r3, [r2, #112]	; 0x70
 80057e2:	e01c      	b.n	800581e <HAL_RCC_OscConfig+0x5a6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b05      	cmp	r3, #5
 80057ea:	d10c      	bne.n	8005806 <HAL_RCC_OscConfig+0x58e>
 80057ec:	4b84      	ldr	r3, [pc, #528]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	4a83      	ldr	r2, [pc, #524]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057f2:	f043 0304 	orr.w	r3, r3, #4
 80057f6:	6713      	str	r3, [r2, #112]	; 0x70
 80057f8:	4b81      	ldr	r3, [pc, #516]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	4a80      	ldr	r2, [pc, #512]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6713      	str	r3, [r2, #112]	; 0x70
 8005804:	e00b      	b.n	800581e <HAL_RCC_OscConfig+0x5a6>
 8005806:	4b7e      	ldr	r3, [pc, #504]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	4a7d      	ldr	r2, [pc, #500]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	6713      	str	r3, [r2, #112]	; 0x70
 8005812:	4b7b      	ldr	r3, [pc, #492]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a7a      	ldr	r2, [pc, #488]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005818:	f023 0304 	bic.w	r3, r3, #4
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d015      	beq.n	8005852 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005826:	f7fc f9d3 	bl	8001bd0 <HAL_GetTick>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800582c:	e00a      	b.n	8005844 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800582e:	f7fc f9cf 	bl	8001bd0 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	; 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e122      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005844:	4b6e      	ldr	r3, [pc, #440]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0ee      	beq.n	800582e <HAL_RCC_OscConfig+0x5b6>
 8005850:	e014      	b.n	800587c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fc f9bd 	bl	8001bd0 <HAL_GetTick>
 8005856:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005858:	e00a      	b.n	8005870 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fc f9b9 	bl	8001bd0 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	f241 3288 	movw	r2, #5000	; 0x1388
 8005868:	4293      	cmp	r3, r2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e10c      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005870:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1ee      	bne.n	800585a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8101 	beq.w	8005a88 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005886:	4b5e      	ldr	r3, [pc, #376]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800588e:	2b18      	cmp	r3, #24
 8005890:	f000 80bc 	beq.w	8005a0c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	2b02      	cmp	r3, #2
 800589a:	f040 8095 	bne.w	80059c8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589e:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a57      	ldr	r2, [pc, #348]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7fc f991 	bl	8001bd0 <HAL_GetTick>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b2:	f7fc f98d 	bl	8001bd0 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e0e2      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058c4:	4b4e      	ldr	r3, [pc, #312]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d0:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058d4:	4b4b      	ldr	r3, [pc, #300]	; (8005a04 <HAL_RCC_OscConfig+0x78c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058e0:	0112      	lsls	r2, r2, #4
 80058e2:	430a      	orrs	r2, r1
 80058e4:	4946      	ldr	r1, [pc, #280]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	628b      	str	r3, [r1, #40]	; 0x28
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	3b01      	subs	r3, #1
 80058f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	3b01      	subs	r3, #1
 80058fa:	025b      	lsls	r3, r3, #9
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	3b01      	subs	r3, #1
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005912:	3b01      	subs	r3, #1
 8005914:	061b      	lsls	r3, r3, #24
 8005916:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800591a:	4939      	ldr	r1, [pc, #228]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800591c:	4313      	orrs	r3, r2
 800591e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005920:	4b37      	ldr	r3, [pc, #220]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a36      	ldr	r2, [pc, #216]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800592c:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800592e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005930:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <HAL_RCC_OscConfig+0x790>)
 8005932:	4013      	ands	r3, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005938:	00d2      	lsls	r2, r2, #3
 800593a:	4931      	ldr	r1, [pc, #196]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800593c:	4313      	orrs	r3, r2
 800593e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005940:	4b2f      	ldr	r3, [pc, #188]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	f023 020c 	bic.w	r2, r3, #12
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	492c      	ldr	r1, [pc, #176]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800594e:	4313      	orrs	r3, r2
 8005950:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005952:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	f023 0202 	bic.w	r2, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	4928      	ldr	r1, [pc, #160]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005960:	4313      	orrs	r3, r2
 8005962:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005964:	4b26      	ldr	r3, [pc, #152]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4a25      	ldr	r2, [pc, #148]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800596a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005970:	4b23      	ldr	r3, [pc, #140]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800597a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800597c:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005988:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005994:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800599a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800599e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fc f916 	bl	8001bd0 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a8:	f7fc f912 	bl	8001bd0 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e067      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x730>
 80059c6:	e05f      	b.n	8005a88 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80059ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fc f8fc 	bl	8001bd0 <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fc f8f8 	bl	8001bd0 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e04d      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x764>
 80059fa:	e045      	b.n	8005a88 <HAL_RCC_OscConfig+0x810>
 80059fc:	58024800 	.word	0x58024800
 8005a00:	58024400 	.word	0x58024400
 8005a04:	fffffc0c 	.word	0xfffffc0c
 8005a08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <HAL_RCC_OscConfig+0x81c>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a12:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_RCC_OscConfig+0x81c>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d031      	beq.n	8005a84 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f003 0203 	and.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d12a      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d122      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d11a      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	0a5b      	lsrs	r3, r3, #9
 8005a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d111      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	0c1b      	lsrs	r3, r3, #16
 8005a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d108      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	0e1b      	lsrs	r3, r3, #24
 8005a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3730      	adds	r7, #48	; 0x30
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	58024400 	.word	0x58024400

08005a98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e19c      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aac:	4b8a      	ldr	r3, [pc, #552]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d910      	bls.n	8005adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b87      	ldr	r3, [pc, #540]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 020f 	bic.w	r2, r3, #15
 8005ac2:	4985      	ldr	r1, [pc, #532]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b83      	ldr	r3, [pc, #524]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e184      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	4b7b      	ldr	r3, [pc, #492]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d908      	bls.n	8005b0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005af8:	4b78      	ldr	r3, [pc, #480]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	4975      	ldr	r1, [pc, #468]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d010      	beq.n	8005b38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	4b70      	ldr	r3, [pc, #448]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d908      	bls.n	8005b38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b26:	4b6d      	ldr	r3, [pc, #436]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	496a      	ldr	r1, [pc, #424]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d010      	beq.n	8005b66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	4b64      	ldr	r3, [pc, #400]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d908      	bls.n	8005b66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b54:	4b61      	ldr	r3, [pc, #388]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	495e      	ldr	r1, [pc, #376]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d010      	beq.n	8005b94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	4b59      	ldr	r3, [pc, #356]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d908      	bls.n	8005b94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b82:	4b56      	ldr	r3, [pc, #344]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	4953      	ldr	r1, [pc, #332]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d010      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	4b4d      	ldr	r3, [pc, #308]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d908      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb0:	4b4a      	ldr	r3, [pc, #296]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f023 020f 	bic.w	r2, r3, #15
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4947      	ldr	r1, [pc, #284]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d055      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bce:	4b43      	ldr	r3, [pc, #268]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4940      	ldr	r1, [pc, #256]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d107      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005be8:	4b3c      	ldr	r3, [pc, #240]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d121      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0f6      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d107      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c00:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d115      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0ea      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c18:	4b30      	ldr	r3, [pc, #192]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0de      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c28:	4b2c      	ldr	r3, [pc, #176]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0d6      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c38:	4b28      	ldr	r3, [pc, #160]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f023 0207 	bic.w	r2, r3, #7
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4925      	ldr	r1, [pc, #148]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4a:	f7fb ffc1 	bl	8001bd0 <HAL_GetTick>
 8005c4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c50:	e00a      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c52:	f7fb ffbd 	bl	8001bd0 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e0be      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c68:	4b1c      	ldr	r3, [pc, #112]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d1eb      	bne.n	8005c52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d208      	bcs.n	8005ca8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c96:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f023 020f 	bic.w	r2, r3, #15
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	490e      	ldr	r1, [pc, #56]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d214      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 020f 	bic.w	r2, r3, #15
 8005cbe:	4906      	ldr	r1, [pc, #24]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e086      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
 8005cd8:	52002000 	.word	0x52002000
 8005cdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d010      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	4b3f      	ldr	r3, [pc, #252]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d208      	bcs.n	8005d0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cfc:	4b3c      	ldr	r3, [pc, #240]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	4939      	ldr	r1, [pc, #228]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d010      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	4b34      	ldr	r3, [pc, #208]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d208      	bcs.n	8005d3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d2a:	4b31      	ldr	r3, [pc, #196]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	492e      	ldr	r1, [pc, #184]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	4b28      	ldr	r3, [pc, #160]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d208      	bcs.n	8005d6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d58:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	4922      	ldr	r1, [pc, #136]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d010      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69da      	ldr	r2, [r3, #28]
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d208      	bcs.n	8005d98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	4917      	ldr	r1, [pc, #92]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d98:	f000 f834 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	4912      	ldr	r1, [pc, #72]	; (8005df4 <HAL_RCC_ClockConfig+0x35c>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
 8005db4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005db6:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	4a0d      	ldr	r2, [pc, #52]	; (8005df4 <HAL_RCC_ClockConfig+0x35c>)
 8005dc0:	5cd3      	ldrb	r3, [r2, r3]
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <HAL_RCC_ClockConfig+0x360>)
 8005dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dd0:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <HAL_RCC_ClockConfig+0x364>)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <HAL_RCC_ClockConfig+0x368>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fb feae 	bl	8001b3c <HAL_InitTick>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	58024400 	.word	0x58024400
 8005df4:	080099ac 	.word	0x080099ac
 8005df8:	2400001c 	.word	0x2400001c
 8005dfc:	24000018 	.word	0x24000018
 8005e00:	24000020 	.word	0x24000020

08005e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	; 0x24
 8005e08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e0a:	4bb3      	ldr	r3, [pc, #716]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e12:	2b18      	cmp	r3, #24
 8005e14:	f200 8155 	bhi.w	80060c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	080060c3 	.word	0x080060c3
 8005e28:	080060c3 	.word	0x080060c3
 8005e2c:	080060c3 	.word	0x080060c3
 8005e30:	080060c3 	.word	0x080060c3
 8005e34:	080060c3 	.word	0x080060c3
 8005e38:	080060c3 	.word	0x080060c3
 8005e3c:	080060c3 	.word	0x080060c3
 8005e40:	08005eab 	.word	0x08005eab
 8005e44:	080060c3 	.word	0x080060c3
 8005e48:	080060c3 	.word	0x080060c3
 8005e4c:	080060c3 	.word	0x080060c3
 8005e50:	080060c3 	.word	0x080060c3
 8005e54:	080060c3 	.word	0x080060c3
 8005e58:	080060c3 	.word	0x080060c3
 8005e5c:	080060c3 	.word	0x080060c3
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	080060c3 	.word	0x080060c3
 8005e68:	080060c3 	.word	0x080060c3
 8005e6c:	080060c3 	.word	0x080060c3
 8005e70:	080060c3 	.word	0x080060c3
 8005e74:	080060c3 	.word	0x080060c3
 8005e78:	080060c3 	.word	0x080060c3
 8005e7c:	080060c3 	.word	0x080060c3
 8005e80:	08005eb7 	.word	0x08005eb7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e84:	4b94      	ldr	r3, [pc, #592]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d009      	beq.n	8005ea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e90:	4b91      	ldr	r3, [pc, #580]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	08db      	lsrs	r3, r3, #3
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	4a90      	ldr	r2, [pc, #576]	; (80060dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ea2:	e111      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ea4:	4b8d      	ldr	r3, [pc, #564]	; (80060dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ea6:	61bb      	str	r3, [r7, #24]
    break;
 8005ea8:	e10e      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005eaa:	4b8d      	ldr	r3, [pc, #564]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005eac:	61bb      	str	r3, [r7, #24]
    break;
 8005eae:	e10b      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005eb0:	4b8c      	ldr	r3, [pc, #560]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005eb2:	61bb      	str	r3, [r7, #24]
    break;
 8005eb4:	e108      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eb6:	4b88      	ldr	r3, [pc, #544]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ec0:	4b85      	ldr	r3, [pc, #532]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ecc:	4b82      	ldr	r3, [pc, #520]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ed6:	4b80      	ldr	r3, [pc, #512]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	08db      	lsrs	r3, r3, #3
 8005edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80e1 	beq.w	80060bc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	f000 8083 	beq.w	8006008 <HAL_RCC_GetSysClockFreq+0x204>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	f200 80a1 	bhi.w	800604c <HAL_RCC_GetSysClockFreq+0x248>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x114>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d056      	beq.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f16:	e099      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f18:	4b6f      	ldr	r3, [pc, #444]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02d      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f24:	4b6c      	ldr	r3, [pc, #432]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	4a6b      	ldr	r2, [pc, #428]	; (80060dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
 8005f34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4e:	4b62      	ldr	r3, [pc, #392]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f62:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f7e:	e087      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060ec <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b51      	ldr	r3, [pc, #324]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc2:	e065      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd6:	4b40      	ldr	r3, [pc, #256]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006006:	e043      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601a:	4b2f      	ldr	r3, [pc, #188]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a02 	vldr	s12, [r7, #8]
 800602e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800604a:	e021      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b1e      	ldr	r3, [pc, #120]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006072:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006090:	4b11      	ldr	r3, [pc, #68]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	0a5b      	lsrs	r3, r3, #9
 8006096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609a:	3301      	adds	r3, #1
 800609c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b4:	ee17 3a90 	vmov	r3, s15
 80060b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060ba:	e005      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	61bb      	str	r3, [r7, #24]
    break;
 80060c0:	e002      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80060c2:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060c4:	61bb      	str	r3, [r7, #24]
    break;
 80060c6:	bf00      	nop
  }

  return sysclockfreq;
 80060c8:	69bb      	ldr	r3, [r7, #24]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3724      	adds	r7, #36	; 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	58024400 	.word	0x58024400
 80060dc:	03d09000 	.word	0x03d09000
 80060e0:	003d0900 	.word	0x003d0900
 80060e4:	007f2815 	.word	0x007f2815
 80060e8:	46000000 	.word	0x46000000
 80060ec:	4c742400 	.word	0x4c742400
 80060f0:	4a742400 	.word	0x4a742400
 80060f4:	4afe502a 	.word	0x4afe502a

080060f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060fe:	f7ff fe81 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8006102:	4602      	mov	r2, r0
 8006104:	4b10      	ldr	r3, [pc, #64]	; (8006148 <HAL_RCC_GetHCLKFreq+0x50>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	490f      	ldr	r1, [pc, #60]	; (800614c <HAL_RCC_GetHCLKFreq+0x54>)
 8006110:	5ccb      	ldrb	r3, [r1, r3]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800611c:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <HAL_RCC_GetHCLKFreq+0x50>)
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	4a09      	ldr	r2, [pc, #36]	; (800614c <HAL_RCC_GetHCLKFreq+0x54>)
 8006126:	5cd3      	ldrb	r3, [r2, r3]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	fa22 f303 	lsr.w	r3, r2, r3
 8006132:	4a07      	ldr	r2, [pc, #28]	; (8006150 <HAL_RCC_GetHCLKFreq+0x58>)
 8006134:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006136:	4a07      	ldr	r2, [pc, #28]	; (8006154 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800613c:	4b04      	ldr	r3, [pc, #16]	; (8006150 <HAL_RCC_GetHCLKFreq+0x58>)
 800613e:	681b      	ldr	r3, [r3, #0]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	58024400 	.word	0x58024400
 800614c:	080099ac 	.word	0x080099ac
 8006150:	2400001c 	.word	0x2400001c
 8006154:	24000018 	.word	0x24000018

08006158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800615c:	f7ff ffcc 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4904      	ldr	r1, [pc, #16]	; (8006180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800616e:	5ccb      	ldrb	r3, [r1, r3]
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	58024400 	.word	0x58024400
 8006180:	080099ac 	.word	0x080099ac

08006184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006188:	f7ff ffb6 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 800618c:	4602      	mov	r2, r0
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	4904      	ldr	r1, [pc, #16]	; (80061ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800619a:	5ccb      	ldrb	r3, [r1, r3]
 800619c:	f003 031f 	and.w	r3, r3, #31
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	58024400 	.word	0x58024400
 80061ac:	080099ac 	.word	0x080099ac

080061b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061b8:	2300      	movs	r3, #0
 80061ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061bc:	2300      	movs	r3, #0
 80061be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d03f      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061d4:	d02a      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061da:	d824      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061e0:	d018      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061e6:	d81e      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f0:	d007      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061f2:	e018      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061f4:	4bab      	ldr	r3, [pc, #684]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	4aaa      	ldr	r2, [pc, #680]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006200:	e015      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3304      	adds	r3, #4
 8006206:	2102      	movs	r1, #2
 8006208:	4618      	mov	r0, r3
 800620a:	f001 f9cf 	bl	80075ac <RCCEx_PLL2_Config>
 800620e:	4603      	mov	r3, r0
 8006210:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006212:	e00c      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3324      	adds	r3, #36	; 0x24
 8006218:	2102      	movs	r1, #2
 800621a:	4618      	mov	r0, r3
 800621c:	f001 fa78 	bl	8007710 <RCCEx_PLL3_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006224:	e003      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	75fb      	strb	r3, [r7, #23]
      break;
 800622a:	e000      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800622c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006234:	4b9b      	ldr	r3, [pc, #620]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006240:	4998      	ldr	r1, [pc, #608]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006242:	4313      	orrs	r3, r2
 8006244:	650b      	str	r3, [r1, #80]	; 0x50
 8006246:	e001      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d03d      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625c:	2b04      	cmp	r3, #4
 800625e:	d826      	bhi.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006260:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	0800627d 	.word	0x0800627d
 800626c:	0800628b 	.word	0x0800628b
 8006270:	0800629d 	.word	0x0800629d
 8006274:	080062b5 	.word	0x080062b5
 8006278:	080062b5 	.word	0x080062b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627c:	4b89      	ldr	r3, [pc, #548]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	4a88      	ldr	r2, [pc, #544]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006286:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006288:	e015      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3304      	adds	r3, #4
 800628e:	2100      	movs	r1, #0
 8006290:	4618      	mov	r0, r3
 8006292:	f001 f98b 	bl	80075ac <RCCEx_PLL2_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800629a:	e00c      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3324      	adds	r3, #36	; 0x24
 80062a0:	2100      	movs	r1, #0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 fa34 	bl	8007710 <RCCEx_PLL3_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]
      break;
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80062b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062bc:	4b79      	ldr	r3, [pc, #484]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c0:	f023 0207 	bic.w	r2, r3, #7
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c8:	4976      	ldr	r1, [pc, #472]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	650b      	str	r3, [r1, #80]	; 0x50
 80062ce:	e001      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d042      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e8:	d02b      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ee:	d825      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062f0:	2bc0      	cmp	r3, #192	; 0xc0
 80062f2:	d028      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062f4:	2bc0      	cmp	r3, #192	; 0xc0
 80062f6:	d821      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d016      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d81d      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d007      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006308:	e018      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630a:	4b66      	ldr	r3, [pc, #408]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630e:	4a65      	ldr	r2, [pc, #404]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006316:	e017      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3304      	adds	r3, #4
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f944 	bl	80075ac <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006328:	e00e      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3324      	adds	r3, #36	; 0x24
 800632e:	2100      	movs	r1, #0
 8006330:	4618      	mov	r0, r3
 8006332:	f001 f9ed 	bl	8007710 <RCCEx_PLL3_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800633a:	e005      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]
      break;
 8006340:	e002      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800634e:	4b55      	ldr	r3, [pc, #340]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006352:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635a:	4952      	ldr	r1, [pc, #328]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800635c:	4313      	orrs	r3, r2
 800635e:	650b      	str	r3, [r1, #80]	; 0x50
 8006360:	e001      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636e:	2b00      	cmp	r3, #0
 8006370:	d049      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800637c:	d030      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800637e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006382:	d82a      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006384:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006388:	d02c      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800638a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800638e:	d824      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006394:	d018      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800639a:	d81e      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80063a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a4:	d007      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80063a6:	e018      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a8:	4b3e      	ldr	r3, [pc, #248]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a3d      	ldr	r2, [pc, #244]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063b4:	e017      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3304      	adds	r3, #4
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f8f5 	bl	80075ac <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063c6:	e00e      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	2100      	movs	r1, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 f99e 	bl	8007710 <RCCEx_PLL3_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063d8:	e005      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
      break;
 80063de:	e002      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063e0:	bf00      	nop
 80063e2:	e000      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063ec:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063fa:	492a      	ldr	r1, [pc, #168]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	658b      	str	r3, [r1, #88]	; 0x58
 8006400:	e001      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640e:	2b00      	cmp	r3, #0
 8006410:	d04c      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800641c:	d030      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800641e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006422:	d82a      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006424:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006428:	d02c      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800642a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800642e:	d824      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006434:	d018      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800643a:	d81e      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006444:	d007      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006446:	e018      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006448:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	4a15      	ldr	r2, [pc, #84]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800644e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006454:	e017      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3304      	adds	r3, #4
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f001 f8a5 	bl	80075ac <RCCEx_PLL2_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006466:	e00e      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3324      	adds	r3, #36	; 0x24
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f001 f94e 	bl	8007710 <RCCEx_PLL3_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006478:	e005      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	75fb      	strb	r3, [r7, #23]
      break;
 800647e:	e002      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006480:	bf00      	nop
 8006482:	e000      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10d      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006490:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800649a:	4902      	ldr	r1, [pc, #8]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800649c:	4313      	orrs	r3, r2
 800649e:	658b      	str	r3, [r1, #88]	; 0x58
 80064a0:	e004      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80064a2:	bf00      	nop
 80064a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d032      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064bc:	2b30      	cmp	r3, #48	; 0x30
 80064be:	d01c      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064c0:	2b30      	cmp	r3, #48	; 0x30
 80064c2:	d817      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d00c      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d813      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d016      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d10f      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d4:	4baf      	ldr	r3, [pc, #700]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	4aae      	ldr	r2, [pc, #696]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064e0:	e00e      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3304      	adds	r3, #4
 80064e6:	2102      	movs	r1, #2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 f85f 	bl	80075ac <RCCEx_PLL2_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064f2:	e005      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	75fb      	strb	r3, [r7, #23]
      break;
 80064f8:	e002      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064fa:	bf00      	nop
 80064fc:	e000      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006506:	4ba3      	ldr	r3, [pc, #652]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006512:	49a0      	ldr	r1, [pc, #640]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006514:	4313      	orrs	r3, r2
 8006516:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006518:	e001      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d047      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006532:	d030      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006538:	d82a      	bhi.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800653a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800653e:	d02c      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006540:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006544:	d824      	bhi.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654a:	d018      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800654c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006550:	d81e      	bhi.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655a:	d007      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800655c:	e018      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655e:	4b8d      	ldr	r3, [pc, #564]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	4a8c      	ldr	r2, [pc, #560]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800656a:	e017      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3304      	adds	r3, #4
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f001 f81a 	bl	80075ac <RCCEx_PLL2_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800657c:	e00e      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3324      	adds	r3, #36	; 0x24
 8006582:	2100      	movs	r1, #0
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f8c3 	bl	8007710 <RCCEx_PLL3_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800658e:	e005      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	75fb      	strb	r3, [r7, #23]
      break;
 8006594:	e002      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006596:	bf00      	nop
 8006598:	e000      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800659a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065a2:	4b7c      	ldr	r3, [pc, #496]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ae:	4979      	ldr	r1, [pc, #484]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	650b      	str	r3, [r1, #80]	; 0x50
 80065b4:	e001      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d049      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065ce:	d02e      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80065d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065d4:	d828      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065da:	d02a      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80065dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065e0:	d822      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065e6:	d026      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80065e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ec:	d81c      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065f2:	d010      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80065f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065f8:	d816      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01d      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80065fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006602:	d111      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	2101      	movs	r1, #1
 800660a:	4618      	mov	r0, r3
 800660c:	f000 ffce 	bl	80075ac <RCCEx_PLL2_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006614:	e012      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3324      	adds	r3, #36	; 0x24
 800661a:	2101      	movs	r1, #1
 800661c:	4618      	mov	r0, r3
 800661e:	f001 f877 	bl	8007710 <RCCEx_PLL3_Config>
 8006622:	4603      	mov	r3, r0
 8006624:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006626:	e009      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
      break;
 800662c:	e006      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800662e:	bf00      	nop
 8006630:	e004      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800663a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d109      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006642:	4b54      	ldr	r3, [pc, #336]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006646:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664e:	4951      	ldr	r1, [pc, #324]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006650:	4313      	orrs	r3, r2
 8006652:	650b      	str	r3, [r1, #80]	; 0x50
 8006654:	e001      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d04b      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800666c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006670:	d02e      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006676:	d828      	bhi.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667c:	d02a      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d822      	bhi.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006684:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006688:	d026      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800668a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800668e:	d81c      	bhi.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006694:	d010      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669a:	d816      	bhi.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01d      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80066a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a4:	d111      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3304      	adds	r3, #4
 80066aa:	2101      	movs	r1, #1
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 ff7d 	bl	80075ac <RCCEx_PLL2_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066b6:	e012      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3324      	adds	r3, #36	; 0x24
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 f826 	bl	8007710 <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066c8:	e009      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]
      break;
 80066ce:	e006      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066d0:	bf00      	nop
 80066d2:	e004      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066d4:	bf00      	nop
 80066d6:	e002      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066e4:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066f2:	4928      	ldr	r1, [pc, #160]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	658b      	str	r3, [r1, #88]	; 0x58
 80066f8:	e001      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d02f      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006712:	d00e      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006718:	d814      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d015      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800671e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006722:	d10f      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006724:	4b1b      	ldr	r3, [pc, #108]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4a1a      	ldr	r2, [pc, #104]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800672a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006730:	e00c      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3304      	adds	r3, #4
 8006736:	2101      	movs	r1, #1
 8006738:	4618      	mov	r0, r3
 800673a:	f000 ff37 	bl	80075ac <RCCEx_PLL2_Config>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006742:	e003      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	75fb      	strb	r3, [r7, #23]
      break;
 8006748:	e000      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800674a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006756:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	490d      	ldr	r1, [pc, #52]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006760:	4313      	orrs	r3, r2
 8006762:	650b      	str	r3, [r1, #80]	; 0x50
 8006764:	e001      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d033      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	2b03      	cmp	r3, #3
 800677c:	d81c      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067bf 	.word	0x080067bf
 8006788:	08006799 	.word	0x08006799
 800678c:	080067a7 	.word	0x080067a7
 8006790:	080067bf 	.word	0x080067bf
 8006794:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006798:	4bb8      	ldr	r3, [pc, #736]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	4ab7      	ldr	r2, [pc, #732]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800679e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067a4:	e00c      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3304      	adds	r3, #4
 80067aa:	2102      	movs	r1, #2
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fefd 	bl	80075ac <RCCEx_PLL2_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067b6:	e003      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]
      break;
 80067bc:	e000      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80067be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067c6:	4bad      	ldr	r3, [pc, #692]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	f023 0203 	bic.w	r2, r3, #3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d2:	49aa      	ldr	r1, [pc, #680]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067d8:	e001      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8086 	beq.w	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ec:	4ba4      	ldr	r3, [pc, #656]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4aa3      	ldr	r2, [pc, #652]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067f8:	f7fb f9ea 	bl	8001bd0 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067fe:	e009      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006800:	f7fb f9e6 	bl	8001bd0 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b64      	cmp	r3, #100	; 0x64
 800680c:	d902      	bls.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	75fb      	strb	r3, [r7, #23]
        break;
 8006812:	e005      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006814:	4b9a      	ldr	r3, [pc, #616]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0ef      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d166      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006826:	4b95      	ldr	r3, [pc, #596]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006830:	4053      	eors	r3, r2
 8006832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006836:	2b00      	cmp	r3, #0
 8006838:	d013      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800683a:	4b90      	ldr	r3, [pc, #576]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800683c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006842:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006844:	4b8d      	ldr	r3, [pc, #564]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006848:	4a8c      	ldr	r2, [pc, #560]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800684a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800684e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006850:	4b8a      	ldr	r3, [pc, #552]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	4a89      	ldr	r2, [pc, #548]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800685c:	4a87      	ldr	r2, [pc, #540]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686c:	d115      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686e:	f7fb f9af 	bl	8001bd0 <HAL_GetTick>
 8006872:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006874:	e00b      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006876:	f7fb f9ab 	bl	8001bd0 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f241 3288 	movw	r2, #5000	; 0x1388
 8006884:	4293      	cmp	r3, r2
 8006886:	d902      	bls.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	75fb      	strb	r3, [r7, #23]
            break;
 800688c:	e005      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800688e:	4b7b      	ldr	r3, [pc, #492]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0ed      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d126      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ae:	d10d      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80068b0:	4b72      	ldr	r3, [pc, #456]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068be:	0919      	lsrs	r1, r3, #4
 80068c0:	4b70      	ldr	r3, [pc, #448]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80068c2:	400b      	ands	r3, r1
 80068c4:	496d      	ldr	r1, [pc, #436]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	610b      	str	r3, [r1, #16]
 80068ca:	e005      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80068cc:	4b6b      	ldr	r3, [pc, #428]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	4a6a      	ldr	r2, [pc, #424]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068d6:	6113      	str	r3, [r2, #16]
 80068d8:	4b68      	ldr	r3, [pc, #416]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e6:	4965      	ldr	r1, [pc, #404]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	670b      	str	r3, [r1, #112]	; 0x70
 80068ec:	e004      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	75bb      	strb	r3, [r7, #22]
 80068f2:	e001      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d07e      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006908:	2b28      	cmp	r3, #40	; 0x28
 800690a:	d867      	bhi.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	080069e3 	.word	0x080069e3
 8006918:	080069dd 	.word	0x080069dd
 800691c:	080069dd 	.word	0x080069dd
 8006920:	080069dd 	.word	0x080069dd
 8006924:	080069dd 	.word	0x080069dd
 8006928:	080069dd 	.word	0x080069dd
 800692c:	080069dd 	.word	0x080069dd
 8006930:	080069dd 	.word	0x080069dd
 8006934:	080069b9 	.word	0x080069b9
 8006938:	080069dd 	.word	0x080069dd
 800693c:	080069dd 	.word	0x080069dd
 8006940:	080069dd 	.word	0x080069dd
 8006944:	080069dd 	.word	0x080069dd
 8006948:	080069dd 	.word	0x080069dd
 800694c:	080069dd 	.word	0x080069dd
 8006950:	080069dd 	.word	0x080069dd
 8006954:	080069cb 	.word	0x080069cb
 8006958:	080069dd 	.word	0x080069dd
 800695c:	080069dd 	.word	0x080069dd
 8006960:	080069dd 	.word	0x080069dd
 8006964:	080069dd 	.word	0x080069dd
 8006968:	080069dd 	.word	0x080069dd
 800696c:	080069dd 	.word	0x080069dd
 8006970:	080069dd 	.word	0x080069dd
 8006974:	080069e3 	.word	0x080069e3
 8006978:	080069dd 	.word	0x080069dd
 800697c:	080069dd 	.word	0x080069dd
 8006980:	080069dd 	.word	0x080069dd
 8006984:	080069dd 	.word	0x080069dd
 8006988:	080069dd 	.word	0x080069dd
 800698c:	080069dd 	.word	0x080069dd
 8006990:	080069dd 	.word	0x080069dd
 8006994:	080069e3 	.word	0x080069e3
 8006998:	080069dd 	.word	0x080069dd
 800699c:	080069dd 	.word	0x080069dd
 80069a0:	080069dd 	.word	0x080069dd
 80069a4:	080069dd 	.word	0x080069dd
 80069a8:	080069dd 	.word	0x080069dd
 80069ac:	080069dd 	.word	0x080069dd
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	080069e3 	.word	0x080069e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	2101      	movs	r1, #1
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fdf4 	bl	80075ac <RCCEx_PLL2_Config>
 80069c4:	4603      	mov	r3, r0
 80069c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069c8:	e00c      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3324      	adds	r3, #36	; 0x24
 80069ce:	2101      	movs	r1, #1
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fe9d 	bl	8007710 <RCCEx_PLL3_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069da:	e003      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	75fb      	strb	r3, [r7, #23]
      break;
 80069e0:	e000      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80069e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069ea:	4b24      	ldr	r3, [pc, #144]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f6:	4921      	ldr	r1, [pc, #132]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	654b      	str	r3, [r1, #84]	; 0x54
 80069fc:	e001      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
 8006a00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d03e      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	d820      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a5f 	.word	0x08006a5f
 8006a20:	08006a35 	.word	0x08006a35
 8006a24:	08006a47 	.word	0x08006a47
 8006a28:	08006a5f 	.word	0x08006a5f
 8006a2c:	08006a5f 	.word	0x08006a5f
 8006a30:	08006a5f 	.word	0x08006a5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3304      	adds	r3, #4
 8006a38:	2101      	movs	r1, #1
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fdb6 	bl	80075ac <RCCEx_PLL2_Config>
 8006a40:	4603      	mov	r3, r0
 8006a42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a44:	e00c      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3324      	adds	r3, #36	; 0x24
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fe5f 	bl	8007710 <RCCEx_PLL3_Config>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a56:	e003      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a5c:	e000      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a60:	7dfb      	ldrb	r3, [r7, #23]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d110      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	f023 0207 	bic.w	r2, r3, #7
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a72:	4902      	ldr	r1, [pc, #8]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	654b      	str	r3, [r1, #84]	; 0x54
 8006a78:	e008      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006a7a:	bf00      	nop
 8006a7c:	58024400 	.word	0x58024400
 8006a80:	58024800 	.word	0x58024800
 8006a84:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d039      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	d820      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006aeb 	.word	0x08006aeb
 8006aac:	08006ac1 	.word	0x08006ac1
 8006ab0:	08006ad3 	.word	0x08006ad3
 8006ab4:	08006aeb 	.word	0x08006aeb
 8006ab8:	08006aeb 	.word	0x08006aeb
 8006abc:	08006aeb 	.word	0x08006aeb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fd70 	bl	80075ac <RCCEx_PLL2_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ad0:	e00c      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3324      	adds	r3, #36	; 0x24
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fe19 	bl	8007710 <RCCEx_PLL3_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ae2:	e003      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae8:	e000      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006af2:	4bb7      	ldr	r3, [pc, #732]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af6:	f023 0207 	bic.w	r2, r3, #7
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b00:	49b3      	ldr	r1, [pc, #716]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	658b      	str	r3, [r1, #88]	; 0x58
 8006b06:	e001      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d04b      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b22:	d02e      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b28:	d828      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2e:	d02a      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b34:	d822      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b3a:	d026      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006b3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b40:	d81c      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b46:	d010      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b4c:	d816      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01d      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b56:	d111      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fd24 	bl	80075ac <RCCEx_PLL2_Config>
 8006b64:	4603      	mov	r3, r0
 8006b66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b68:	e012      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3324      	adds	r3, #36	; 0x24
 8006b6e:	2102      	movs	r1, #2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fdcd 	bl	8007710 <RCCEx_PLL3_Config>
 8006b76:	4603      	mov	r3, r0
 8006b78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b7a:	e009      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b80:	e006      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b82:	bf00      	nop
 8006b84:	e004      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b86:	bf00      	nop
 8006b88:	e002      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b96:	4b8e      	ldr	r3, [pc, #568]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba4:	498a      	ldr	r1, [pc, #552]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	654b      	str	r3, [r1, #84]	; 0x54
 8006baa:	e001      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d04b      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bc6:	d02e      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006bc8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bcc:	d828      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd2:	d02a      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd8:	d822      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bde:	d026      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006be4:	d81c      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bea:	d010      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf0:	d816      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01d      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bfa:	d111      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	2100      	movs	r1, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fcd2 	bl	80075ac <RCCEx_PLL2_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c0c:	e012      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3324      	adds	r3, #36	; 0x24
 8006c12:	2102      	movs	r1, #2
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fd7b 	bl	8007710 <RCCEx_PLL3_Config>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c1e:	e009      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	75fb      	strb	r3, [r7, #23]
      break;
 8006c24:	e006      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c26:	bf00      	nop
 8006c28:	e004      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e002      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c2e:	bf00      	nop
 8006c30:	e000      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c3a:	4b65      	ldr	r3, [pc, #404]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c48:	4961      	ldr	r1, [pc, #388]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c4e:	e001      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d04b      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c6a:	d02e      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006c6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c70:	d828      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c76:	d02a      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7c:	d822      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c82:	d026      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006c84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c88:	d81c      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c8e:	d010      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c94:	d816      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01d      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c9e:	d111      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fc80 	bl	80075ac <RCCEx_PLL2_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cb0:	e012      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3324      	adds	r3, #36	; 0x24
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fd29 	bl	8007710 <RCCEx_PLL3_Config>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cc2:	e009      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc8:	e006      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cca:	bf00      	nop
 8006ccc:	e004      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cce:	bf00      	nop
 8006cd0:	e002      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cd2:	bf00      	nop
 8006cd4:	e000      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006cde:	4b3c      	ldr	r3, [pc, #240]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cec:	4938      	ldr	r1, [pc, #224]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	658b      	str	r3, [r1, #88]	; 0x58
 8006cf2:	e001      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0308 	and.w	r3, r3, #8
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01a      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0e:	d10a      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3324      	adds	r3, #36	; 0x24
 8006d14:	2102      	movs	r1, #2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fcfa 	bl	8007710 <RCCEx_PLL3_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d26:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d34:	4926      	ldr	r1, [pc, #152]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01a      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d50:	d10a      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3324      	adds	r3, #36	; 0x24
 8006d56:	2102      	movs	r1, #2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fcd9 	bl	8007710 <RCCEx_PLL3_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d68:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d76:	4916      	ldr	r1, [pc, #88]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d036      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d92:	d01f      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d98:	d817      	bhi.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da2:	d009      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006da4:	e011      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3304      	adds	r3, #4
 8006daa:	2100      	movs	r1, #0
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fbfd 	bl	80075ac <RCCEx_PLL2_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006db6:	e00e      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3324      	adds	r3, #36	; 0x24
 8006dbc:	2102      	movs	r1, #2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fca6 	bl	8007710 <RCCEx_PLL3_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006dc8:	e005      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dce:	e002      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006dd0:	58024400 	.word	0x58024400
      break;
 8006dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ddc:	4b93      	ldr	r3, [pc, #588]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dea:	4990      	ldr	r1, [pc, #576]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	658b      	str	r3, [r1, #88]	; 0x58
 8006df0:	e001      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d033      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e0c:	d01c      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006e0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e12:	d816      	bhi.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e18:	d003      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e1e:	d007      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006e20:	e00f      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e22:	4b82      	ldr	r3, [pc, #520]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	4a81      	ldr	r2, [pc, #516]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e2e:	e00c      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3324      	adds	r3, #36	; 0x24
 8006e34:	2101      	movs	r1, #1
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fc6a 	bl	8007710 <RCCEx_PLL3_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e40:	e003      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	75fb      	strb	r3, [r7, #23]
      break;
 8006e46:	e000      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e50:	4b76      	ldr	r3, [pc, #472]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e5e:	4973      	ldr	r1, [pc, #460]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	654b      	str	r3, [r1, #84]	; 0x54
 8006e64:	e001      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
 8006e68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d029      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e82:	d007      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006e84:	e00f      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e86:	4b69      	ldr	r3, [pc, #420]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	4a68      	ldr	r2, [pc, #416]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e92:	e00b      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3304      	adds	r3, #4
 8006e98:	2102      	movs	r1, #2
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fb86 	bl	80075ac <RCCEx_PLL2_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ea4:	e002      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006eb2:	4b5e      	ldr	r3, [pc, #376]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebe:	495b      	ldr	r1, [pc, #364]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ec4:	e001      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3324      	adds	r3, #36	; 0x24
 8006eda:	2102      	movs	r1, #2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fc17 	bl	8007710 <RCCEx_PLL3_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d030      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f00:	d017      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f06:	d811      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0c:	d013      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f12:	d80b      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d010      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1c:	d106      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1e:	4b43      	ldr	r3, [pc, #268]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	4a42      	ldr	r2, [pc, #264]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f2a:	e007      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f30:	e004      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f32:	bf00      	nop
 8006f34:	e002      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f36:	bf00      	nop
 8006f38:	e000      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d109      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f42:	4b3a      	ldr	r3, [pc, #232]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f4e:	4937      	ldr	r1, [pc, #220]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	654b      	str	r3, [r1, #84]	; 0x54
 8006f54:	e001      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f66:	4b31      	ldr	r3, [pc, #196]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f72:	492e      	ldr	r1, [pc, #184]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f84:	4b29      	ldr	r3, [pc, #164]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f92:	4926      	ldr	r1, [pc, #152]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fa4:	4b21      	ldr	r3, [pc, #132]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fb0:	491e      	ldr	r1, [pc, #120]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00d      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fc2:	4b1a      	ldr	r3, [pc, #104]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	4a19      	ldr	r2, [pc, #100]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fcc:	6113      	str	r3, [r2, #16]
 8006fce:	4b17      	ldr	r3, [pc, #92]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006fd8:	4914      	ldr	r1, [pc, #80]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	da08      	bge.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fe6:	4b11      	ldr	r3, [pc, #68]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff2:	490e      	ldr	r1, [pc, #56]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d009      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007004:	4b09      	ldr	r3, [pc, #36]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007008:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007012:	4906      	ldr	r1, [pc, #24]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007014:	4313      	orrs	r3, r2
 8007016:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007018:	7dbb      	ldrb	r3, [r7, #22]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	e000      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	58024400 	.word	0x58024400

08007030 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007034:	f7ff f860 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 8007038:	4602      	mov	r2, r0
 800703a:	4b06      	ldr	r3, [pc, #24]	; (8007054 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	091b      	lsrs	r3, r3, #4
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	4904      	ldr	r1, [pc, #16]	; (8007058 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007046:	5ccb      	ldrb	r3, [r1, r3]
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007050:	4618      	mov	r0, r3
 8007052:	bd80      	pop	{r7, pc}
 8007054:	58024400 	.word	0x58024400
 8007058:	080099ac 	.word	0x080099ac

0800705c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800705c:	b480      	push	{r7}
 800705e:	b089      	sub	sp, #36	; 0x24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007064:	4ba1      	ldr	r3, [pc, #644]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	f003 0303 	and.w	r3, r3, #3
 800706c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800706e:	4b9f      	ldr	r3, [pc, #636]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	0b1b      	lsrs	r3, r3, #12
 8007074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007078:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800707a:	4b9c      	ldr	r3, [pc, #624]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	091b      	lsrs	r3, r3, #4
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007086:	4b99      	ldr	r3, [pc, #612]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708a:	08db      	lsrs	r3, r3, #3
 800708c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	fb02 f303 	mul.w	r3, r2, r3
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8111 	beq.w	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	f000 8083 	beq.w	80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	f200 80a1 	bhi.w	80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d056      	beq.n	8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070c6:	e099      	b.n	80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070c8:	4b88      	ldr	r3, [pc, #544]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d02d      	beq.n	8007130 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070d4:	4b85      	ldr	r3, [pc, #532]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	08db      	lsrs	r3, r3, #3
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	4a84      	ldr	r2, [pc, #528]	; (80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
 80070e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	ee07 3a90 	vmov	s15, r3
 80070ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fe:	4b7b      	ldr	r3, [pc, #492]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007112:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800712e:	e087      	b.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800713e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007142:	4b6a      	ldr	r3, [pc, #424]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007152:	ed97 6a03 	vldr	s12, [r7, #12]
 8007156:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800715a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007172:	e065      	b.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007186:	4b59      	ldr	r3, [pc, #356]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007196:	ed97 6a03 	vldr	s12, [r7, #12]
 800719a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800719e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071b6:	e043      	b.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ca:	4b48      	ldr	r3, [pc, #288]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071da:	ed97 6a03 	vldr	s12, [r7, #12]
 80071de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071fa:	e021      	b.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800720a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720e:	4b37      	ldr	r3, [pc, #220]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007222:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800723e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007240:	4b2a      	ldr	r3, [pc, #168]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	0a5b      	lsrs	r3, r3, #9
 8007246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800725a:	edd7 6a07 	vldr	s13, [r7, #28]
 800725e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007266:	ee17 2a90 	vmov	r2, s15
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800726e:	4b1f      	ldr	r3, [pc, #124]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	0c1b      	lsrs	r3, r3, #16
 8007274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007284:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007288:	edd7 6a07 	vldr	s13, [r7, #28]
 800728c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007294:	ee17 2a90 	vmov	r2, s15
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800729c:	4b13      	ldr	r3, [pc, #76]	; (80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	0e1b      	lsrs	r3, r3, #24
 80072a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c2:	ee17 2a90 	vmov	r2, s15
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072ca:	e008      	b.n	80072de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	609a      	str	r2, [r3, #8]
}
 80072de:	bf00      	nop
 80072e0:	3724      	adds	r7, #36	; 0x24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	58024400 	.word	0x58024400
 80072f0:	03d09000 	.word	0x03d09000
 80072f4:	46000000 	.word	0x46000000
 80072f8:	4c742400 	.word	0x4c742400
 80072fc:	4a742400 	.word	0x4a742400
 8007300:	4afe502a 	.word	0x4afe502a

08007304 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007304:	b480      	push	{r7}
 8007306:	b089      	sub	sp, #36	; 0x24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800730c:	4ba1      	ldr	r3, [pc, #644]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	f003 0303 	and.w	r3, r3, #3
 8007314:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007316:	4b9f      	ldr	r3, [pc, #636]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	0d1b      	lsrs	r3, r3, #20
 800731c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007320:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007322:	4b9c      	ldr	r3, [pc, #624]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800732e:	4b99      	ldr	r3, [pc, #612]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	08db      	lsrs	r3, r3, #3
 8007334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8111 	beq.w	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	2b02      	cmp	r3, #2
 8007356:	f000 8083 	beq.w	8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2b02      	cmp	r3, #2
 800735e:	f200 80a1 	bhi.w	80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d056      	beq.n	800741c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800736e:	e099      	b.n	80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007370:	4b88      	ldr	r3, [pc, #544]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d02d      	beq.n	80073d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800737c:	4b85      	ldr	r3, [pc, #532]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	08db      	lsrs	r3, r3, #3
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	4a84      	ldr	r2, [pc, #528]	; (8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007388:	fa22 f303 	lsr.w	r3, r2, r3
 800738c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	ee07 3a90 	vmov	s15, r3
 8007394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a6:	4b7b      	ldr	r3, [pc, #492]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800759c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073d6:	e087      	b.n	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ea:	4b6a      	ldr	r3, [pc, #424]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800759c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800741a:	e065      	b.n	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800742a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742e:	4b59      	ldr	r3, [pc, #356]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007442:	eddf 5a56 	vldr	s11, [pc, #344]	; 800759c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800745e:	e043      	b.n	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800746e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007472:	4b48      	ldr	r3, [pc, #288]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007482:	ed97 6a03 	vldr	s12, [r7, #12]
 8007486:	eddf 5a45 	vldr	s11, [pc, #276]	; 800759c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800748a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074a2:	e021      	b.n	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b6:	4b37      	ldr	r3, [pc, #220]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800759c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80074e8:	4b2a      	ldr	r3, [pc, #168]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	0a5b      	lsrs	r3, r3, #9
 80074ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007502:	edd7 6a07 	vldr	s13, [r7, #28]
 8007506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800750a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800750e:	ee17 2a90 	vmov	r2, s15
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007516:	4b1f      	ldr	r3, [pc, #124]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	0c1b      	lsrs	r3, r3, #16
 800751c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800752c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007530:	edd7 6a07 	vldr	s13, [r7, #28]
 8007534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800753c:	ee17 2a90 	vmov	r2, s15
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007544:	4b13      	ldr	r3, [pc, #76]	; (8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	0e1b      	lsrs	r3, r3, #24
 800754a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800755a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800755e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756a:	ee17 2a90 	vmov	r2, s15
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007572:	e008      	b.n	8007586 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	609a      	str	r2, [r3, #8]
}
 8007586:	bf00      	nop
 8007588:	3724      	adds	r7, #36	; 0x24
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	58024400 	.word	0x58024400
 8007598:	03d09000 	.word	0x03d09000
 800759c:	46000000 	.word	0x46000000
 80075a0:	4c742400 	.word	0x4c742400
 80075a4:	4a742400 	.word	0x4a742400
 80075a8:	4afe502a 	.word	0x4afe502a

080075ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075ba:	4b53      	ldr	r3, [pc, #332]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d101      	bne.n	80075ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e099      	b.n	80076fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075ca:	4b4f      	ldr	r3, [pc, #316]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a4e      	ldr	r2, [pc, #312]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80075d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d6:	f7fa fafb 	bl	8001bd0 <HAL_GetTick>
 80075da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075dc:	e008      	b.n	80075f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075de:	f7fa faf7 	bl	8001bd0 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d901      	bls.n	80075f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e086      	b.n	80076fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075f0:	4b45      	ldr	r3, [pc, #276]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f0      	bne.n	80075de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075fc:	4b42      	ldr	r3, [pc, #264]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80075fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007600:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	031b      	lsls	r3, r3, #12
 800760a:	493f      	ldr	r1, [pc, #252]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 800760c:	4313      	orrs	r3, r2
 800760e:	628b      	str	r3, [r1, #40]	; 0x28
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	3b01      	subs	r3, #1
 8007616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	3b01      	subs	r3, #1
 8007620:	025b      	lsls	r3, r3, #9
 8007622:	b29b      	uxth	r3, r3
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	3b01      	subs	r3, #1
 800762c:	041b      	lsls	r3, r3, #16
 800762e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	3b01      	subs	r3, #1
 800763a:	061b      	lsls	r3, r3, #24
 800763c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007640:	4931      	ldr	r1, [pc, #196]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007646:	4b30      	ldr	r3, [pc, #192]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	492d      	ldr	r1, [pc, #180]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 8007654:	4313      	orrs	r3, r2
 8007656:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007658:	4b2b      	ldr	r3, [pc, #172]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	f023 0220 	bic.w	r2, r3, #32
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	4928      	ldr	r1, [pc, #160]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 8007666:	4313      	orrs	r3, r2
 8007668:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800766a:	4b27      	ldr	r3, [pc, #156]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 800766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766e:	4a26      	ldr	r2, [pc, #152]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 8007670:	f023 0310 	bic.w	r3, r3, #16
 8007674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007676:	4b24      	ldr	r3, [pc, #144]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 8007678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800767a:	4b24      	ldr	r3, [pc, #144]	; (800770c <RCCEx_PLL2_Config+0x160>)
 800767c:	4013      	ands	r3, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	69d2      	ldr	r2, [r2, #28]
 8007682:	00d2      	lsls	r2, r2, #3
 8007684:	4920      	ldr	r1, [pc, #128]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 8007686:	4313      	orrs	r3, r2
 8007688:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800768a:	4b1f      	ldr	r3, [pc, #124]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	4a1e      	ldr	r2, [pc, #120]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 8007690:	f043 0310 	orr.w	r3, r3, #16
 8007694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d106      	bne.n	80076aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800769c:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	4a19      	ldr	r2, [pc, #100]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80076a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076a8:	e00f      	b.n	80076ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d106      	bne.n	80076be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076b0:	4b15      	ldr	r3, [pc, #84]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	4a14      	ldr	r2, [pc, #80]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80076b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076bc:	e005      	b.n	80076ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076be:	4b12      	ldr	r3, [pc, #72]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	4a11      	ldr	r2, [pc, #68]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80076c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076ca:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a0e      	ldr	r2, [pc, #56]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80076d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d6:	f7fa fa7b 	bl	8001bd0 <HAL_GetTick>
 80076da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076dc:	e008      	b.n	80076f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076de:	f7fa fa77 	bl	8001bd0 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d901      	bls.n	80076f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e006      	b.n	80076fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076f0:	4b05      	ldr	r3, [pc, #20]	; (8007708 <RCCEx_PLL2_Config+0x15c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0f0      	beq.n	80076de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	58024400 	.word	0x58024400
 800770c:	ffff0007 	.word	0xffff0007

08007710 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800771e:	4b53      	ldr	r3, [pc, #332]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d101      	bne.n	800772e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e099      	b.n	8007862 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800772e:	4b4f      	ldr	r3, [pc, #316]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a4e      	ldr	r2, [pc, #312]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773a:	f7fa fa49 	bl	8001bd0 <HAL_GetTick>
 800773e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007740:	e008      	b.n	8007754 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007742:	f7fa fa45 	bl	8001bd0 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e086      	b.n	8007862 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007754:	4b45      	ldr	r3, [pc, #276]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f0      	bne.n	8007742 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007760:	4b42      	ldr	r3, [pc, #264]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	051b      	lsls	r3, r3, #20
 800776e:	493f      	ldr	r1, [pc, #252]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007770:	4313      	orrs	r3, r2
 8007772:	628b      	str	r3, [r1, #40]	; 0x28
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	3b01      	subs	r3, #1
 800777a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	3b01      	subs	r3, #1
 8007784:	025b      	lsls	r3, r3, #9
 8007786:	b29b      	uxth	r3, r3
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	3b01      	subs	r3, #1
 8007790:	041b      	lsls	r3, r3, #16
 8007792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	3b01      	subs	r3, #1
 800779e:	061b      	lsls	r3, r3, #24
 80077a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077a4:	4931      	ldr	r1, [pc, #196]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077aa:	4b30      	ldr	r3, [pc, #192]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	492d      	ldr	r1, [pc, #180]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077bc:	4b2b      	ldr	r3, [pc, #172]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	4928      	ldr	r1, [pc, #160]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077ce:	4b27      	ldr	r3, [pc, #156]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	4a26      	ldr	r2, [pc, #152]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077da:	4b24      	ldr	r3, [pc, #144]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077de:	4b24      	ldr	r3, [pc, #144]	; (8007870 <RCCEx_PLL3_Config+0x160>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	69d2      	ldr	r2, [r2, #28]
 80077e6:	00d2      	lsls	r2, r2, #3
 80077e8:	4920      	ldr	r1, [pc, #128]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077ee:	4b1f      	ldr	r3, [pc, #124]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	4a1e      	ldr	r2, [pc, #120]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 80077f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007800:	4b1a      	ldr	r3, [pc, #104]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	4a19      	ldr	r2, [pc, #100]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007806:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800780a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800780c:	e00f      	b.n	800782e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d106      	bne.n	8007822 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007814:	4b15      	ldr	r3, [pc, #84]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	4a14      	ldr	r2, [pc, #80]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 800781a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800781e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007820:	e005      	b.n	800782e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	4a11      	ldr	r2, [pc, #68]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800782c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a0e      	ldr	r2, [pc, #56]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800783a:	f7fa f9c9 	bl	8001bd0 <HAL_GetTick>
 800783e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007840:	e008      	b.n	8007854 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007842:	f7fa f9c5 	bl	8001bd0 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e006      	b.n	8007862 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <RCCEx_PLL3_Config+0x15c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0f0      	beq.n	8007842 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	58024400 	.word	0x58024400
 8007870:	ffff0007 	.word	0xffff0007

08007874 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e0eb      	b.n	8007a62 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a75      	ldr	r2, [pc, #468]	; (8007a6c <HAL_SPI_Init+0x1f8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00f      	beq.n	80078ba <HAL_SPI_Init+0x46>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a74      	ldr	r2, [pc, #464]	; (8007a70 <HAL_SPI_Init+0x1fc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00a      	beq.n	80078ba <HAL_SPI_Init+0x46>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a72      	ldr	r2, [pc, #456]	; (8007a74 <HAL_SPI_Init+0x200>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d005      	beq.n	80078ba <HAL_SPI_Init+0x46>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b0f      	cmp	r3, #15
 80078b4:	d901      	bls.n	80078ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0d3      	b.n	8007a62 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fb94 	bl	8007fe8 <SPI_GetPacketSize>
 80078c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a69      	ldr	r2, [pc, #420]	; (8007a6c <HAL_SPI_Init+0x1f8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00c      	beq.n	80078e6 <HAL_SPI_Init+0x72>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a67      	ldr	r2, [pc, #412]	; (8007a70 <HAL_SPI_Init+0x1fc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d007      	beq.n	80078e6 <HAL_SPI_Init+0x72>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a66      	ldr	r2, [pc, #408]	; (8007a74 <HAL_SPI_Init+0x200>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d002      	beq.n	80078e6 <HAL_SPI_Init+0x72>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d811      	bhi.n	800790a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078ea:	4a60      	ldr	r2, [pc, #384]	; (8007a6c <HAL_SPI_Init+0x1f8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d009      	beq.n	8007904 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a5e      	ldr	r2, [pc, #376]	; (8007a70 <HAL_SPI_Init+0x1fc>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d004      	beq.n	8007904 <HAL_SPI_Init+0x90>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a5d      	ldr	r2, [pc, #372]	; (8007a74 <HAL_SPI_Init+0x200>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d104      	bne.n	800790e <HAL_SPI_Init+0x9a>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b10      	cmp	r3, #16
 8007908:	d901      	bls.n	800790e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e0a9      	b.n	8007a62 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7f9 fb7a 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0201 	bic.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007948:	d119      	bne.n	800797e <HAL_SPI_Init+0x10a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007952:	d103      	bne.n	800795c <HAL_SPI_Init+0xe8>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	2b00      	cmp	r3, #0
 800795a:	d008      	beq.n	800796e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10c      	bne.n	800797e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800796c:	d107      	bne.n	800797e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800797c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69da      	ldr	r2, [r3, #28]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	431a      	orrs	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007990:	ea42 0103 	orr.w	r1, r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079de:	ea42 0103 	orr.w	r1, r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d113      	bne.n	8007a1e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0201 	bic.w	r2, r2, #1
 8007a2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40013000 	.word	0x40013000
 8007a70:	40003800 	.word	0x40003800
 8007a74:	40003c00 	.word	0x40003c00

08007a78 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08a      	sub	sp, #40	; 0x28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007a90:	6a3a      	ldr	r2, [r7, #32]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4013      	ands	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007aaa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3330      	adds	r3, #48	; 0x30
 8007ab2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d113      	bne.n	8007ae6 <HAL_SPI_IRQHandler+0x6e>
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10e      	bne.n	8007ae6 <HAL_SPI_IRQHandler+0x6e>
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
    handled = 1UL;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10f      	bne.n	8007b10 <HAL_SPI_IRQHandler+0x98>
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <HAL_SPI_IRQHandler+0x98>
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d105      	bne.n	8007b10 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
    handled = 1UL;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10f      	bne.n	8007b3a <HAL_SPI_IRQHandler+0xc2>
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <HAL_SPI_IRQHandler+0xc2>
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d105      	bne.n	8007b3a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
    handled = 1UL;
 8007b36:	2301      	movs	r3, #1
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f040 816f 	bne.w	8007e20 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 80a0 	beq.w	8007c8e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0208 	orr.w	r2, r2, #8
 8007b5c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0210 	orr.w	r2, r2, #16
 8007b6c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b7c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0208 	bic.w	r2, r2, #8
 8007b8c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00f      	beq.n	8007bb8 <HAL_SPI_IRQHandler+0x140>
 8007b98:	7cfb      	ldrb	r3, [r7, #19]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d004      	beq.n	8007ba8 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <HAL_SPI_IRQHandler+0x140>
 8007ba8:	7cfb      	ldrb	r3, [r7, #19]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d059      	beq.n	8007c62 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d154      	bne.n	8007c62 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d13d      	bne.n	8007c42 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007bc6:	e036      	b.n	8007c36 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	2b0f      	cmp	r3, #15
 8007bce:	d90b      	bls.n	8007be8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007bda:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be0:	1d1a      	adds	r2, r3, #4
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	665a      	str	r2, [r3, #100]	; 0x64
 8007be6:	e01d      	b.n	8007c24 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	2b07      	cmp	r3, #7
 8007bee:	d90b      	bls.n	8007c08 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	8812      	ldrh	r2, [r2, #0]
 8007bf8:	b292      	uxth	r2, r2
 8007bfa:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c00:	1c9a      	adds	r2, r3, #2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	665a      	str	r2, [r3, #100]	; 0x64
 8007c06:	e00d      	b.n	8007c24 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c14:	7812      	ldrb	r2, [r2, #0]
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1c2      	bne.n	8007bc8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f930 	bl	8007ea8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7f9 f98c 	bl	8000f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007c60:	e0e3      	b.n	8007e2a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007c62:	7cfb      	ldrb	r3, [r7, #19]
 8007c64:	2b05      	cmp	r3, #5
 8007c66:	d103      	bne.n	8007c70 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8f9 	bl	8007e60 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007c6e:	e0d9      	b.n	8007e24 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007c70:	7cfb      	ldrb	r3, [r7, #19]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d103      	bne.n	8007c7e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f8e8 	bl	8007e4c <HAL_SPI_RxCpltCallback>
    return;
 8007c7c:	e0d2      	b.n	8007e24 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007c7e:	7cfb      	ldrb	r3, [r7, #19]
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	f040 80cf 	bne.w	8007e24 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f8d6 	bl	8007e38 <HAL_SPI_TxCpltCallback>
    return;
 8007c8c:	e0ca      	b.n	8007e24 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00d      	beq.n	8007cb4 <HAL_SPI_IRQHandler+0x23c>
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d008      	beq.n	8007cb4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699a      	ldr	r2, [r3, #24]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cb0:	619a      	str	r2, [r3, #24]

    return;
 8007cb2:	e0ba      	b.n	8007e2a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 80b5 	beq.w	8007e2a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00f      	beq.n	8007cea <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cd0:	f043 0204 	orr.w	r2, r3, #4
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699a      	ldr	r2, [r3, #24]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ce8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00f      	beq.n	8007d14 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cfa:	f043 0201 	orr.w	r2, r3, #1
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699a      	ldr	r2, [r3, #24]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d12:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00f      	beq.n	8007d3e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d24:	f043 0208 	orr.w	r2, r3, #8
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d3c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00f      	beq.n	8007d68 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0220 	orr.w	r2, r2, #32
 8007d66:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d05a      	beq.n	8007e28 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0201 	bic.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6919      	ldr	r1, [r3, #16]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	4b28      	ldr	r3, [pc, #160]	; (8007e30 <HAL_SPI_IRQHandler+0x3b8>)
 8007d8e:	400b      	ands	r3, r1
 8007d90:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d9c:	d138      	bne.n	8007e10 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007dac:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d013      	beq.n	8007dde <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dba:	4a1e      	ldr	r2, [pc, #120]	; (8007e34 <HAL_SPI_IRQHandler+0x3bc>)
 8007dbc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fb fa96 	bl	80032f4 <HAL_DMA_Abort_IT>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d007      	beq.n	8007dde <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d020      	beq.n	8007e28 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dea:	4a12      	ldr	r2, [pc, #72]	; (8007e34 <HAL_SPI_IRQHandler+0x3bc>)
 8007dec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fb fa7e 	bl	80032f4 <HAL_DMA_Abort_IT>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d014      	beq.n	8007e28 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e0e:	e00b      	b.n	8007e28 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7f9 f8ad 	bl	8000f78 <HAL_SPI_ErrorCallback>
    return;
 8007e1e:	e003      	b.n	8007e28 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007e20:	bf00      	nop
 8007e22:	e002      	b.n	8007e2a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007e28:	bf00      	nop
  }
}
 8007e2a:	3728      	adds	r7, #40	; 0x28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	fffffc94 	.word	0xfffffc94
 8007e34:	08007e75 	.word	0x08007e75

08007e38 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7f9 f86c 	bl	8000f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ea0:	bf00      	nop
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0208 	orr.w	r2, r2, #8
 8007ec6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0210 	orr.w	r2, r2, #16
 8007ed6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0201 	bic.w	r2, r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6919      	ldr	r1, [r3, #16]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b3c      	ldr	r3, [pc, #240]	; (8007fe4 <SPI_CloseTransfer+0x13c>)
 8007ef4:	400b      	ands	r3, r1
 8007ef6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d014      	beq.n	8007f3e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00f      	beq.n	8007f3e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0220 	orr.w	r2, r2, #32
 8007f3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d014      	beq.n	8007f74 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00f      	beq.n	8007f74 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5a:	f043 0204 	orr.w	r2, r3, #4
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00f      	beq.n	8007f9e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f84:	f043 0201 	orr.w	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	699a      	ldr	r2, [r3, #24]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00f      	beq.n	8007fc8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fae:	f043 0208 	orr.w	r2, r3, #8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699a      	ldr	r2, [r3, #24]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fc6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007fd8:	bf00      	nop
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	fffffc90 	.word	0xfffffc90

08007fe8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff4:	095b      	lsrs	r3, r3, #5
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	3301      	adds	r3, #1
 8008000:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	3307      	adds	r3, #7
 8008006:	08db      	lsrs	r3, r3, #3
 8008008:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e042      	b.n	80080b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008036:	2b00      	cmp	r3, #0
 8008038:	d106      	bne.n	8008048 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7f9 f952 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2224      	movs	r2, #36	; 0x24
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fb7d 	bl	8008760 <UART_SetConfig>
 8008066:	4603      	mov	r3, r0
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e022      	b.n	80080b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 f8d1 	bl	8009220 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800808c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800809c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 f958 	bl	8009364 <UART_CheckIdleState>
 80080b4:	4603      	mov	r3, r0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d168      	bne.n	80081aa <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_UART_Transmit_DMA+0x24>
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e061      	b.n	80081ac <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d101      	bne.n	80080f6 <HAL_UART_Transmit_DMA+0x36>
 80080f2:	2302      	movs	r3, #2
 80080f4:	e05a      	b.n	80081ac <HAL_UART_Transmit_DMA+0xec>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	88fa      	ldrh	r2, [r7, #6]
 8008108:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	88fa      	ldrh	r2, [r7, #6]
 8008110:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2221      	movs	r2, #33	; 0x21
 8008120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008128:	2b00      	cmp	r3, #0
 800812a:	d02c      	beq.n	8008186 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008130:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <HAL_UART_Transmit_DMA+0xf4>)
 8008132:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008138:	4a1f      	ldr	r2, [pc, #124]	; (80081b8 <HAL_UART_Transmit_DMA+0xf8>)
 800813a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008140:	4a1e      	ldr	r2, [pc, #120]	; (80081bc <HAL_UART_Transmit_DMA+0xfc>)
 8008142:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008148:	2200      	movs	r2, #0
 800814a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008154:	4619      	mov	r1, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3328      	adds	r3, #40	; 0x28
 800815c:	461a      	mov	r2, r3
 800815e:	88fb      	ldrh	r3, [r7, #6]
 8008160:	f7fa fb40 	bl	80027e4 <HAL_DMA_Start_IT>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00d      	beq.n	8008186 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2210      	movs	r2, #16
 800816e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e012      	b.n	80081ac <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2240      	movs	r2, #64	; 0x40
 800818c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081a4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	e000      	b.n	80081ac <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80081aa:	2302      	movs	r3, #2
  }
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	0800959d 	.word	0x0800959d
 80081b8:	080095ed 	.word	0x080095ed
 80081bc:	08009609 	.word	0x08009609

080081c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80081e6:	4013      	ands	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d118      	bne.n	8008222 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d013      	beq.n	8008222 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	f003 0320 	and.w	r3, r3, #32
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d009      	beq.n	8008222 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8282 	beq.w	800871c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	4798      	blx	r3
      }
      return;
 8008220:	e27c      	b.n	800871c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80ef 	beq.w	8008408 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4b73      	ldr	r3, [pc, #460]	; (80083fc <HAL_UART_IRQHandler+0x23c>)
 800822e:	4013      	ands	r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d105      	bne.n	8008240 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	4b72      	ldr	r3, [pc, #456]	; (8008400 <HAL_UART_IRQHandler+0x240>)
 8008238:	4013      	ands	r3, r2
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80e4 	beq.w	8008408 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d010      	beq.n	800826c <HAL_UART_IRQHandler+0xac>
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2201      	movs	r2, #1
 800825a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008262:	f043 0201 	orr.w	r2, r3, #1
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d010      	beq.n	8008298 <HAL_UART_IRQHandler+0xd8>
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2202      	movs	r2, #2
 8008286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800828e:	f043 0204 	orr.w	r2, r3, #4
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d010      	beq.n	80082c4 <HAL_UART_IRQHandler+0x104>
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2204      	movs	r2, #4
 80082b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ba:	f043 0202 	orr.w	r2, r3, #2
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d015      	beq.n	80082fa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d104      	bne.n	80082e2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4b48      	ldr	r3, [pc, #288]	; (80083fc <HAL_UART_IRQHandler+0x23c>)
 80082dc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2208      	movs	r2, #8
 80082e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f0:	f043 0208 	orr.w	r2, r3, #8
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008300:	2b00      	cmp	r3, #0
 8008302:	d011      	beq.n	8008328 <HAL_UART_IRQHandler+0x168>
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00c      	beq.n	8008328 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800831e:	f043 0220 	orr.w	r2, r3, #32
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 81f6 	beq.w	8008720 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d011      	beq.n	8008362 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	f003 0320 	and.w	r3, r3, #32
 8008344:	2b00      	cmp	r3, #0
 8008346:	d104      	bne.n	8008352 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008368:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008374:	2b40      	cmp	r3, #64	; 0x40
 8008376:	d004      	beq.n	8008382 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800837e:	2b00      	cmp	r3, #0
 8008380:	d031      	beq.n	80083e6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 f8d8 	bl	8009538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008392:	2b40      	cmp	r3, #64	; 0x40
 8008394:	d123      	bne.n	80083de <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d013      	beq.n	80083d6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b2:	4a14      	ldr	r2, [pc, #80]	; (8008404 <HAL_UART_IRQHandler+0x244>)
 80083b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fa ff9a 	bl	80032f4 <HAL_DMA_Abort_IT>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d017      	beq.n	80083f6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d4:	e00f      	b.n	80083f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7f8 fdee 	bl	8000fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	e00b      	b.n	80083f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7f8 fdea 	bl	8000fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e4:	e007      	b.n	80083f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7f8 fde6 	bl	8000fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80083f4:	e194      	b.n	8008720 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f6:	bf00      	nop
    return;
 80083f8:	e192      	b.n	8008720 <HAL_UART_IRQHandler+0x560>
 80083fa:	bf00      	nop
 80083fc:	10000001 	.word	0x10000001
 8008400:	04000120 	.word	0x04000120
 8008404:	08009689 	.word	0x08009689

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800840c:	2b01      	cmp	r3, #1
 800840e:	f040 810f 	bne.w	8008630 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 8109 	beq.w	8008630 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 8103 	beq.w	8008630 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2210      	movs	r2, #16
 8008430:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	f040 80bb 	bne.w	80085b8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a96      	ldr	r2, [pc, #600]	; (80086a4 <HAL_UART_IRQHandler+0x4e4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d059      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a94      	ldr	r2, [pc, #592]	; (80086a8 <HAL_UART_IRQHandler+0x4e8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d053      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a92      	ldr	r2, [pc, #584]	; (80086ac <HAL_UART_IRQHandler+0x4ec>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d04d      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a90      	ldr	r2, [pc, #576]	; (80086b0 <HAL_UART_IRQHandler+0x4f0>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d047      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a8e      	ldr	r2, [pc, #568]	; (80086b4 <HAL_UART_IRQHandler+0x4f4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d041      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a8c      	ldr	r2, [pc, #560]	; (80086b8 <HAL_UART_IRQHandler+0x4f8>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d03b      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a8a      	ldr	r2, [pc, #552]	; (80086bc <HAL_UART_IRQHandler+0x4fc>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d035      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a88      	ldr	r2, [pc, #544]	; (80086c0 <HAL_UART_IRQHandler+0x500>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d02f      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a86      	ldr	r2, [pc, #536]	; (80086c4 <HAL_UART_IRQHandler+0x504>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d029      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a84      	ldr	r2, [pc, #528]	; (80086c8 <HAL_UART_IRQHandler+0x508>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d023      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a82      	ldr	r2, [pc, #520]	; (80086cc <HAL_UART_IRQHandler+0x50c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d01d      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a80      	ldr	r2, [pc, #512]	; (80086d0 <HAL_UART_IRQHandler+0x510>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d017      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a7e      	ldr	r2, [pc, #504]	; (80086d4 <HAL_UART_IRQHandler+0x514>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d011      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a7c      	ldr	r2, [pc, #496]	; (80086d8 <HAL_UART_IRQHandler+0x518>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00b      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a7a      	ldr	r2, [pc, #488]	; (80086dc <HAL_UART_IRQHandler+0x51c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d005      	beq.n	8008502 <HAL_UART_IRQHandler+0x342>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a78      	ldr	r2, [pc, #480]	; (80086e0 <HAL_UART_IRQHandler+0x520>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d105      	bne.n	800850e <HAL_UART_IRQHandler+0x34e>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	b29b      	uxth	r3, r3
 800850c:	e004      	b.n	8008518 <HAL_UART_IRQHandler+0x358>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	b29b      	uxth	r3, r3
 8008518:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800851a:	893b      	ldrh	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 8101 	beq.w	8008724 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008528:	893a      	ldrh	r2, [r7, #8]
 800852a:	429a      	cmp	r2, r3
 800852c:	f080 80fa 	bcs.w	8008724 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	893a      	ldrh	r2, [r7, #8]
 8008534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008542:	d02b      	beq.n	800859c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008552:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0201 	bic.w	r2, r2, #1
 8008562:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008572:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0210 	bic.w	r2, r2, #16
 8008590:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008596:	4618      	mov	r0, r3
 8008598:	f7fa fb8e 	bl	8002cb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f8c9 	bl	8008748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085b6:	e0b5      	b.n	8008724 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80a8 	beq.w	8008728 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80085d8:	897b      	ldrh	r3, [r7, #10]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 80a4 	beq.w	8008728 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085ee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6899      	ldr	r1, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	4b3a      	ldr	r3, [pc, #232]	; (80086e4 <HAL_UART_IRQHandler+0x524>)
 80085fc:	400b      	ands	r3, r1
 80085fe:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0210 	bic.w	r2, r2, #16
 8008622:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008624:	897b      	ldrh	r3, [r7, #10]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f88d 	bl	8008748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800862e:	e07b      	b.n	8008728 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00d      	beq.n	8008656 <HAL_UART_IRQHandler+0x496>
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800864c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 f84a 	bl	80096e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008654:	e06b      	b.n	800872e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865c:	2b00      	cmp	r3, #0
 800865e:	d012      	beq.n	8008686 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008666:	2b00      	cmp	r3, #0
 8008668:	d104      	bne.n	8008674 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d008      	beq.n	8008686 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008678:	2b00      	cmp	r3, #0
 800867a:	d057      	beq.n	800872c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
    }
    return;
 8008684:	e052      	b.n	800872c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d02b      	beq.n	80086e8 <HAL_UART_IRQHandler+0x528>
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d026      	beq.n	80086e8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 f80a 	bl	80096b4 <UART_EndTransmit_IT>
    return;
 80086a0:	e045      	b.n	800872e <HAL_UART_IRQHandler+0x56e>
 80086a2:	bf00      	nop
 80086a4:	40020010 	.word	0x40020010
 80086a8:	40020028 	.word	0x40020028
 80086ac:	40020040 	.word	0x40020040
 80086b0:	40020058 	.word	0x40020058
 80086b4:	40020070 	.word	0x40020070
 80086b8:	40020088 	.word	0x40020088
 80086bc:	400200a0 	.word	0x400200a0
 80086c0:	400200b8 	.word	0x400200b8
 80086c4:	40020410 	.word	0x40020410
 80086c8:	40020428 	.word	0x40020428
 80086cc:	40020440 	.word	0x40020440
 80086d0:	40020458 	.word	0x40020458
 80086d4:	40020470 	.word	0x40020470
 80086d8:	40020488 	.word	0x40020488
 80086dc:	400204a0 	.word	0x400204a0
 80086e0:	400204b8 	.word	0x400204b8
 80086e4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d008      	beq.n	8008704 <HAL_UART_IRQHandler+0x544>
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 f807 	bl	8009710 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008702:	e014      	b.n	800872e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00f      	beq.n	800872e <HAL_UART_IRQHandler+0x56e>
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	da0c      	bge.n	800872e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fff1 	bl	80096fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800871a:	e008      	b.n	800872e <HAL_UART_IRQHandler+0x56e>
      return;
 800871c:	bf00      	nop
 800871e:	e006      	b.n	800872e <HAL_UART_IRQHandler+0x56e>
    return;
 8008720:	bf00      	nop
 8008722:	e004      	b.n	800872e <HAL_UART_IRQHandler+0x56e>
      return;
 8008724:	bf00      	nop
 8008726:	e002      	b.n	800872e <HAL_UART_IRQHandler+0x56e>
      return;
 8008728:	bf00      	nop
 800872a:	e000      	b.n	800872e <HAL_UART_IRQHandler+0x56e>
    return;
 800872c:	bf00      	nop
  }
}
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008760:	b5b0      	push	{r4, r5, r7, lr}
 8008762:	b08e      	sub	sp, #56	; 0x38
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	431a      	orrs	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	4313      	orrs	r3, r2
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	4bbf      	ldr	r3, [pc, #764]	; (8008a8c <UART_SetConfig+0x32c>)
 800878e:	4013      	ands	r3, r2
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008796:	430b      	orrs	r3, r1
 8008798:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4ab5      	ldr	r2, [pc, #724]	; (8008a90 <UART_SetConfig+0x330>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d004      	beq.n	80087ca <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a1b      	ldr	r3, [r3, #32]
 80087c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c6:	4313      	orrs	r3, r2
 80087c8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	4bb0      	ldr	r3, [pc, #704]	; (8008a94 <UART_SetConfig+0x334>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	6812      	ldr	r2, [r2, #0]
 80087d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087da:	430b      	orrs	r3, r1
 80087dc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	f023 010f 	bic.w	r1, r3, #15
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4aa7      	ldr	r2, [pc, #668]	; (8008a98 <UART_SetConfig+0x338>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d176      	bne.n	80088ec <UART_SetConfig+0x18c>
 80087fe:	4ba7      	ldr	r3, [pc, #668]	; (8008a9c <UART_SetConfig+0x33c>)
 8008800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008806:	2b28      	cmp	r3, #40	; 0x28
 8008808:	d86c      	bhi.n	80088e4 <UART_SetConfig+0x184>
 800880a:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <UART_SetConfig+0xb0>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	080088b5 	.word	0x080088b5
 8008814:	080088e5 	.word	0x080088e5
 8008818:	080088e5 	.word	0x080088e5
 800881c:	080088e5 	.word	0x080088e5
 8008820:	080088e5 	.word	0x080088e5
 8008824:	080088e5 	.word	0x080088e5
 8008828:	080088e5 	.word	0x080088e5
 800882c:	080088e5 	.word	0x080088e5
 8008830:	080088bd 	.word	0x080088bd
 8008834:	080088e5 	.word	0x080088e5
 8008838:	080088e5 	.word	0x080088e5
 800883c:	080088e5 	.word	0x080088e5
 8008840:	080088e5 	.word	0x080088e5
 8008844:	080088e5 	.word	0x080088e5
 8008848:	080088e5 	.word	0x080088e5
 800884c:	080088e5 	.word	0x080088e5
 8008850:	080088c5 	.word	0x080088c5
 8008854:	080088e5 	.word	0x080088e5
 8008858:	080088e5 	.word	0x080088e5
 800885c:	080088e5 	.word	0x080088e5
 8008860:	080088e5 	.word	0x080088e5
 8008864:	080088e5 	.word	0x080088e5
 8008868:	080088e5 	.word	0x080088e5
 800886c:	080088e5 	.word	0x080088e5
 8008870:	080088cd 	.word	0x080088cd
 8008874:	080088e5 	.word	0x080088e5
 8008878:	080088e5 	.word	0x080088e5
 800887c:	080088e5 	.word	0x080088e5
 8008880:	080088e5 	.word	0x080088e5
 8008884:	080088e5 	.word	0x080088e5
 8008888:	080088e5 	.word	0x080088e5
 800888c:	080088e5 	.word	0x080088e5
 8008890:	080088d5 	.word	0x080088d5
 8008894:	080088e5 	.word	0x080088e5
 8008898:	080088e5 	.word	0x080088e5
 800889c:	080088e5 	.word	0x080088e5
 80088a0:	080088e5 	.word	0x080088e5
 80088a4:	080088e5 	.word	0x080088e5
 80088a8:	080088e5 	.word	0x080088e5
 80088ac:	080088e5 	.word	0x080088e5
 80088b0:	080088dd 	.word	0x080088dd
 80088b4:	2301      	movs	r3, #1
 80088b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ba:	e222      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80088bc:	2304      	movs	r3, #4
 80088be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c2:	e21e      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80088c4:	2308      	movs	r3, #8
 80088c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ca:	e21a      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80088cc:	2310      	movs	r3, #16
 80088ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d2:	e216      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80088d4:	2320      	movs	r3, #32
 80088d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088da:	e212      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80088dc:	2340      	movs	r3, #64	; 0x40
 80088de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e2:	e20e      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80088e4:	2380      	movs	r3, #128	; 0x80
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e20a      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a6b      	ldr	r2, [pc, #428]	; (8008aa0 <UART_SetConfig+0x340>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d130      	bne.n	8008958 <UART_SetConfig+0x1f8>
 80088f6:	4b69      	ldr	r3, [pc, #420]	; (8008a9c <UART_SetConfig+0x33c>)
 80088f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	2b05      	cmp	r3, #5
 8008900:	d826      	bhi.n	8008950 <UART_SetConfig+0x1f0>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <UART_SetConfig+0x1a8>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008921 	.word	0x08008921
 800890c:	08008929 	.word	0x08008929
 8008910:	08008931 	.word	0x08008931
 8008914:	08008939 	.word	0x08008939
 8008918:	08008941 	.word	0x08008941
 800891c:	08008949 	.word	0x08008949
 8008920:	2300      	movs	r3, #0
 8008922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008926:	e1ec      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008928:	2304      	movs	r3, #4
 800892a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892e:	e1e8      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008930:	2308      	movs	r3, #8
 8008932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008936:	e1e4      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008938:	2310      	movs	r3, #16
 800893a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893e:	e1e0      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008940:	2320      	movs	r3, #32
 8008942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008946:	e1dc      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008948:	2340      	movs	r3, #64	; 0x40
 800894a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894e:	e1d8      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008950:	2380      	movs	r3, #128	; 0x80
 8008952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008956:	e1d4      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a51      	ldr	r2, [pc, #324]	; (8008aa4 <UART_SetConfig+0x344>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d130      	bne.n	80089c4 <UART_SetConfig+0x264>
 8008962:	4b4e      	ldr	r3, [pc, #312]	; (8008a9c <UART_SetConfig+0x33c>)
 8008964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b05      	cmp	r3, #5
 800896c:	d826      	bhi.n	80089bc <UART_SetConfig+0x25c>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <UART_SetConfig+0x214>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	0800898d 	.word	0x0800898d
 8008978:	08008995 	.word	0x08008995
 800897c:	0800899d 	.word	0x0800899d
 8008980:	080089a5 	.word	0x080089a5
 8008984:	080089ad 	.word	0x080089ad
 8008988:	080089b5 	.word	0x080089b5
 800898c:	2300      	movs	r3, #0
 800898e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008992:	e1b6      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008994:	2304      	movs	r3, #4
 8008996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800899a:	e1b2      	b.n	8008d02 <UART_SetConfig+0x5a2>
 800899c:	2308      	movs	r3, #8
 800899e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089a2:	e1ae      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80089a4:	2310      	movs	r3, #16
 80089a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089aa:	e1aa      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80089ac:	2320      	movs	r3, #32
 80089ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b2:	e1a6      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80089b4:	2340      	movs	r3, #64	; 0x40
 80089b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ba:	e1a2      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80089bc:	2380      	movs	r3, #128	; 0x80
 80089be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c2:	e19e      	b.n	8008d02 <UART_SetConfig+0x5a2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a37      	ldr	r2, [pc, #220]	; (8008aa8 <UART_SetConfig+0x348>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d130      	bne.n	8008a30 <UART_SetConfig+0x2d0>
 80089ce:	4b33      	ldr	r3, [pc, #204]	; (8008a9c <UART_SetConfig+0x33c>)
 80089d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	2b05      	cmp	r3, #5
 80089d8:	d826      	bhi.n	8008a28 <UART_SetConfig+0x2c8>
 80089da:	a201      	add	r2, pc, #4	; (adr r2, 80089e0 <UART_SetConfig+0x280>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	080089f9 	.word	0x080089f9
 80089e4:	08008a01 	.word	0x08008a01
 80089e8:	08008a09 	.word	0x08008a09
 80089ec:	08008a11 	.word	0x08008a11
 80089f0:	08008a19 	.word	0x08008a19
 80089f4:	08008a21 	.word	0x08008a21
 80089f8:	2300      	movs	r3, #0
 80089fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fe:	e180      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a00:	2304      	movs	r3, #4
 8008a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a06:	e17c      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a08:	2308      	movs	r3, #8
 8008a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a0e:	e178      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a10:	2310      	movs	r3, #16
 8008a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a16:	e174      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a18:	2320      	movs	r3, #32
 8008a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1e:	e170      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a20:	2340      	movs	r3, #64	; 0x40
 8008a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a26:	e16c      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a28:	2380      	movs	r3, #128	; 0x80
 8008a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2e:	e168      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a1d      	ldr	r2, [pc, #116]	; (8008aac <UART_SetConfig+0x34c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d142      	bne.n	8008ac0 <UART_SetConfig+0x360>
 8008a3a:	4b18      	ldr	r3, [pc, #96]	; (8008a9c <UART_SetConfig+0x33c>)
 8008a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	2b05      	cmp	r3, #5
 8008a44:	d838      	bhi.n	8008ab8 <UART_SetConfig+0x358>
 8008a46:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <UART_SetConfig+0x2ec>)
 8008a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4c:	08008a65 	.word	0x08008a65
 8008a50:	08008a6d 	.word	0x08008a6d
 8008a54:	08008a75 	.word	0x08008a75
 8008a58:	08008a7d 	.word	0x08008a7d
 8008a5c:	08008a85 	.word	0x08008a85
 8008a60:	08008ab1 	.word	0x08008ab1
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6a:	e14a      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a72:	e146      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a74:	2308      	movs	r3, #8
 8008a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7a:	e142      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a7c:	2310      	movs	r3, #16
 8008a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a82:	e13e      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a84:	2320      	movs	r3, #32
 8008a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a8a:	e13a      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008a8c:	cfff69f3 	.word	0xcfff69f3
 8008a90:	58000c00 	.word	0x58000c00
 8008a94:	11fff4ff 	.word	0x11fff4ff
 8008a98:	40011000 	.word	0x40011000
 8008a9c:	58024400 	.word	0x58024400
 8008aa0:	40004400 	.word	0x40004400
 8008aa4:	40004800 	.word	0x40004800
 8008aa8:	40004c00 	.word	0x40004c00
 8008aac:	40005000 	.word	0x40005000
 8008ab0:	2340      	movs	r3, #64	; 0x40
 8008ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab6:	e124      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008ab8:	2380      	movs	r3, #128	; 0x80
 8008aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008abe:	e120      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4acc      	ldr	r2, [pc, #816]	; (8008df8 <UART_SetConfig+0x698>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d176      	bne.n	8008bb8 <UART_SetConfig+0x458>
 8008aca:	4bcc      	ldr	r3, [pc, #816]	; (8008dfc <UART_SetConfig+0x69c>)
 8008acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ad2:	2b28      	cmp	r3, #40	; 0x28
 8008ad4:	d86c      	bhi.n	8008bb0 <UART_SetConfig+0x450>
 8008ad6:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <UART_SetConfig+0x37c>)
 8008ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008adc:	08008b81 	.word	0x08008b81
 8008ae0:	08008bb1 	.word	0x08008bb1
 8008ae4:	08008bb1 	.word	0x08008bb1
 8008ae8:	08008bb1 	.word	0x08008bb1
 8008aec:	08008bb1 	.word	0x08008bb1
 8008af0:	08008bb1 	.word	0x08008bb1
 8008af4:	08008bb1 	.word	0x08008bb1
 8008af8:	08008bb1 	.word	0x08008bb1
 8008afc:	08008b89 	.word	0x08008b89
 8008b00:	08008bb1 	.word	0x08008bb1
 8008b04:	08008bb1 	.word	0x08008bb1
 8008b08:	08008bb1 	.word	0x08008bb1
 8008b0c:	08008bb1 	.word	0x08008bb1
 8008b10:	08008bb1 	.word	0x08008bb1
 8008b14:	08008bb1 	.word	0x08008bb1
 8008b18:	08008bb1 	.word	0x08008bb1
 8008b1c:	08008b91 	.word	0x08008b91
 8008b20:	08008bb1 	.word	0x08008bb1
 8008b24:	08008bb1 	.word	0x08008bb1
 8008b28:	08008bb1 	.word	0x08008bb1
 8008b2c:	08008bb1 	.word	0x08008bb1
 8008b30:	08008bb1 	.word	0x08008bb1
 8008b34:	08008bb1 	.word	0x08008bb1
 8008b38:	08008bb1 	.word	0x08008bb1
 8008b3c:	08008b99 	.word	0x08008b99
 8008b40:	08008bb1 	.word	0x08008bb1
 8008b44:	08008bb1 	.word	0x08008bb1
 8008b48:	08008bb1 	.word	0x08008bb1
 8008b4c:	08008bb1 	.word	0x08008bb1
 8008b50:	08008bb1 	.word	0x08008bb1
 8008b54:	08008bb1 	.word	0x08008bb1
 8008b58:	08008bb1 	.word	0x08008bb1
 8008b5c:	08008ba1 	.word	0x08008ba1
 8008b60:	08008bb1 	.word	0x08008bb1
 8008b64:	08008bb1 	.word	0x08008bb1
 8008b68:	08008bb1 	.word	0x08008bb1
 8008b6c:	08008bb1 	.word	0x08008bb1
 8008b70:	08008bb1 	.word	0x08008bb1
 8008b74:	08008bb1 	.word	0x08008bb1
 8008b78:	08008bb1 	.word	0x08008bb1
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	2301      	movs	r3, #1
 8008b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b86:	e0bc      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8e:	e0b8      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008b90:	2308      	movs	r3, #8
 8008b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b96:	e0b4      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9e:	e0b0      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba6:	e0ac      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008ba8:	2340      	movs	r3, #64	; 0x40
 8008baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bae:	e0a8      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008bb0:	2380      	movs	r3, #128	; 0x80
 8008bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb6:	e0a4      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a90      	ldr	r2, [pc, #576]	; (8008e00 <UART_SetConfig+0x6a0>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d130      	bne.n	8008c24 <UART_SetConfig+0x4c4>
 8008bc2:	4b8e      	ldr	r3, [pc, #568]	; (8008dfc <UART_SetConfig+0x69c>)
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d826      	bhi.n	8008c1c <UART_SetConfig+0x4bc>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <UART_SetConfig+0x474>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008bfd 	.word	0x08008bfd
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf2:	e086      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfa:	e082      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008bfc:	2308      	movs	r3, #8
 8008bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c02:	e07e      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0a:	e07a      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c0c:	2320      	movs	r3, #32
 8008c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c12:	e076      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c14:	2340      	movs	r3, #64	; 0x40
 8008c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1a:	e072      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c22:	e06e      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a76      	ldr	r2, [pc, #472]	; (8008e04 <UART_SetConfig+0x6a4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d130      	bne.n	8008c90 <UART_SetConfig+0x530>
 8008c2e:	4b73      	ldr	r3, [pc, #460]	; (8008dfc <UART_SetConfig+0x69c>)
 8008c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b05      	cmp	r3, #5
 8008c38:	d826      	bhi.n	8008c88 <UART_SetConfig+0x528>
 8008c3a:	a201      	add	r2, pc, #4	; (adr r2, 8008c40 <UART_SetConfig+0x4e0>)
 8008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c40:	08008c59 	.word	0x08008c59
 8008c44:	08008c61 	.word	0x08008c61
 8008c48:	08008c69 	.word	0x08008c69
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c79 	.word	0x08008c79
 8008c54:	08008c81 	.word	0x08008c81
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5e:	e050      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c60:	2304      	movs	r3, #4
 8008c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c66:	e04c      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c68:	2308      	movs	r3, #8
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	e048      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c70:	2310      	movs	r3, #16
 8008c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c76:	e044      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c78:	2320      	movs	r3, #32
 8008c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7e:	e040      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c80:	2340      	movs	r3, #64	; 0x40
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c86:	e03c      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c88:	2380      	movs	r3, #128	; 0x80
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e038      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a5c      	ldr	r2, [pc, #368]	; (8008e08 <UART_SetConfig+0x6a8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d130      	bne.n	8008cfc <UART_SetConfig+0x59c>
 8008c9a:	4b58      	ldr	r3, [pc, #352]	; (8008dfc <UART_SetConfig+0x69c>)
 8008c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9e:	f003 0307 	and.w	r3, r3, #7
 8008ca2:	2b05      	cmp	r3, #5
 8008ca4:	d826      	bhi.n	8008cf4 <UART_SetConfig+0x594>
 8008ca6:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <UART_SetConfig+0x54c>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008cc5 	.word	0x08008cc5
 8008cb0:	08008ccd 	.word	0x08008ccd
 8008cb4:	08008cd5 	.word	0x08008cd5
 8008cb8:	08008cdd 	.word	0x08008cdd
 8008cbc:	08008ce5 	.word	0x08008ce5
 8008cc0:	08008ced 	.word	0x08008ced
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cca:	e01a      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd2:	e016      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cda:	e012      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008cdc:	2310      	movs	r3, #16
 8008cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce2:	e00e      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cea:	e00a      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf2:	e006      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008cf4:	2380      	movs	r3, #128	; 0x80
 8008cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfa:	e002      	b.n	8008d02 <UART_SetConfig+0x5a2>
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a40      	ldr	r2, [pc, #256]	; (8008e08 <UART_SetConfig+0x6a8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	f040 80ef 	bne.w	8008eec <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	dc46      	bgt.n	8008da4 <UART_SetConfig+0x644>
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	f2c0 8081 	blt.w	8008e1e <UART_SetConfig+0x6be>
 8008d1c:	3b02      	subs	r3, #2
 8008d1e:	2b1e      	cmp	r3, #30
 8008d20:	d87d      	bhi.n	8008e1e <UART_SetConfig+0x6be>
 8008d22:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <UART_SetConfig+0x5c8>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008dab 	.word	0x08008dab
 8008d2c:	08008e1f 	.word	0x08008e1f
 8008d30:	08008db3 	.word	0x08008db3
 8008d34:	08008e1f 	.word	0x08008e1f
 8008d38:	08008e1f 	.word	0x08008e1f
 8008d3c:	08008e1f 	.word	0x08008e1f
 8008d40:	08008dc3 	.word	0x08008dc3
 8008d44:	08008e1f 	.word	0x08008e1f
 8008d48:	08008e1f 	.word	0x08008e1f
 8008d4c:	08008e1f 	.word	0x08008e1f
 8008d50:	08008e1f 	.word	0x08008e1f
 8008d54:	08008e1f 	.word	0x08008e1f
 8008d58:	08008e1f 	.word	0x08008e1f
 8008d5c:	08008e1f 	.word	0x08008e1f
 8008d60:	08008dd3 	.word	0x08008dd3
 8008d64:	08008e1f 	.word	0x08008e1f
 8008d68:	08008e1f 	.word	0x08008e1f
 8008d6c:	08008e1f 	.word	0x08008e1f
 8008d70:	08008e1f 	.word	0x08008e1f
 8008d74:	08008e1f 	.word	0x08008e1f
 8008d78:	08008e1f 	.word	0x08008e1f
 8008d7c:	08008e1f 	.word	0x08008e1f
 8008d80:	08008e1f 	.word	0x08008e1f
 8008d84:	08008e1f 	.word	0x08008e1f
 8008d88:	08008e1f 	.word	0x08008e1f
 8008d8c:	08008e1f 	.word	0x08008e1f
 8008d90:	08008e1f 	.word	0x08008e1f
 8008d94:	08008e1f 	.word	0x08008e1f
 8008d98:	08008e1f 	.word	0x08008e1f
 8008d9c:	08008e1f 	.word	0x08008e1f
 8008da0:	08008e11 	.word	0x08008e11
 8008da4:	2b40      	cmp	r3, #64	; 0x40
 8008da6:	d036      	beq.n	8008e16 <UART_SetConfig+0x6b6>
 8008da8:	e039      	b.n	8008e1e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008daa:	f7fe f941 	bl	8007030 <HAL_RCCEx_GetD3PCLK1Freq>
 8008dae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008db0:	e03b      	b.n	8008e2a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db2:	f107 0314 	add.w	r3, r7, #20
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe f950 	bl	800705c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dc0:	e033      	b.n	8008e2a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dc2:	f107 0308 	add.w	r3, r7, #8
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fa9c 	bl	8007304 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dd0:	e02b      	b.n	8008e2a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <UART_SetConfig+0x69c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d009      	beq.n	8008df2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dde:	4b07      	ldr	r3, [pc, #28]	; (8008dfc <UART_SetConfig+0x69c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	08db      	lsrs	r3, r3, #3
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	4a08      	ldr	r2, [pc, #32]	; (8008e0c <UART_SetConfig+0x6ac>)
 8008dea:	fa22 f303 	lsr.w	r3, r2, r3
 8008dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008df0:	e01b      	b.n	8008e2a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008df2:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <UART_SetConfig+0x6ac>)
 8008df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008df6:	e018      	b.n	8008e2a <UART_SetConfig+0x6ca>
 8008df8:	40011400 	.word	0x40011400
 8008dfc:	58024400 	.word	0x58024400
 8008e00:	40007800 	.word	0x40007800
 8008e04:	40007c00 	.word	0x40007c00
 8008e08:	58000c00 	.word	0x58000c00
 8008e0c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e10:	4bc4      	ldr	r3, [pc, #784]	; (8009124 <UART_SetConfig+0x9c4>)
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e14:	e009      	b.n	8008e2a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e1c:	e005      	b.n	8008e2a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 81da 	beq.w	80091e6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	4abc      	ldr	r2, [pc, #752]	; (8009128 <UART_SetConfig+0x9c8>)
 8008e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e44:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	4413      	add	r3, r2
 8008e50:	6a3a      	ldr	r2, [r7, #32]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d305      	bcc.n	8008e62 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e5c:	6a3a      	ldr	r2, [r7, #32]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d903      	bls.n	8008e6a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e68:	e1bd      	b.n	80091e6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f04f 0100 	mov.w	r1, #0
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	4aac      	ldr	r2, [pc, #688]	; (8009128 <UART_SetConfig+0x9c8>)
 8008e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	f7f7 fa29 	bl	80002d8 <__aeabi_uldivmod>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	f04f 0300 	mov.w	r3, #0
 8008e96:	020b      	lsls	r3, r1, #8
 8008e98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e9c:	0202      	lsls	r2, r0, #8
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	6849      	ldr	r1, [r1, #4]
 8008ea2:	0849      	lsrs	r1, r1, #1
 8008ea4:	4608      	mov	r0, r1
 8008ea6:	f04f 0100 	mov.w	r1, #0
 8008eaa:	1814      	adds	r4, r2, r0
 8008eac:	eb43 0501 	adc.w	r5, r3, r1
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	4620      	mov	r0, r4
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	f7f7 fa0b 	bl	80002d8 <__aeabi_uldivmod>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ed0:	d308      	bcc.n	8008ee4 <UART_SetConfig+0x784>
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed8:	d204      	bcs.n	8008ee4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee0:	60da      	str	r2, [r3, #12]
 8008ee2:	e180      	b.n	80091e6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008eea:	e17c      	b.n	80091e6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef4:	f040 80bf 	bne.w	8009076 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	dc49      	bgt.n	8008f94 <UART_SetConfig+0x834>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	db7c      	blt.n	8008ffe <UART_SetConfig+0x89e>
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d87a      	bhi.n	8008ffe <UART_SetConfig+0x89e>
 8008f08:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <UART_SetConfig+0x7b0>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f9b 	.word	0x08008f9b
 8008f14:	08008fa3 	.word	0x08008fa3
 8008f18:	08008fff 	.word	0x08008fff
 8008f1c:	08008fff 	.word	0x08008fff
 8008f20:	08008fab 	.word	0x08008fab
 8008f24:	08008fff 	.word	0x08008fff
 8008f28:	08008fff 	.word	0x08008fff
 8008f2c:	08008fff 	.word	0x08008fff
 8008f30:	08008fbb 	.word	0x08008fbb
 8008f34:	08008fff 	.word	0x08008fff
 8008f38:	08008fff 	.word	0x08008fff
 8008f3c:	08008fff 	.word	0x08008fff
 8008f40:	08008fff 	.word	0x08008fff
 8008f44:	08008fff 	.word	0x08008fff
 8008f48:	08008fff 	.word	0x08008fff
 8008f4c:	08008fff 	.word	0x08008fff
 8008f50:	08008fcb 	.word	0x08008fcb
 8008f54:	08008fff 	.word	0x08008fff
 8008f58:	08008fff 	.word	0x08008fff
 8008f5c:	08008fff 	.word	0x08008fff
 8008f60:	08008fff 	.word	0x08008fff
 8008f64:	08008fff 	.word	0x08008fff
 8008f68:	08008fff 	.word	0x08008fff
 8008f6c:	08008fff 	.word	0x08008fff
 8008f70:	08008fff 	.word	0x08008fff
 8008f74:	08008fff 	.word	0x08008fff
 8008f78:	08008fff 	.word	0x08008fff
 8008f7c:	08008fff 	.word	0x08008fff
 8008f80:	08008fff 	.word	0x08008fff
 8008f84:	08008fff 	.word	0x08008fff
 8008f88:	08008fff 	.word	0x08008fff
 8008f8c:	08008fff 	.word	0x08008fff
 8008f90:	08008ff1 	.word	0x08008ff1
 8008f94:	2b40      	cmp	r3, #64	; 0x40
 8008f96:	d02e      	beq.n	8008ff6 <UART_SetConfig+0x896>
 8008f98:	e031      	b.n	8008ffe <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f9a:	f7fd f8dd 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 8008f9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fa0:	e033      	b.n	800900a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fa2:	f7fd f8ef 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 8008fa6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008fa8:	e02f      	b.n	800900a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008faa:	f107 0314 	add.w	r3, r7, #20
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe f854 	bl	800705c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fb8:	e027      	b.n	800900a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fba:	f107 0308 	add.w	r3, r7, #8
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe f9a0 	bl	8007304 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fc8:	e01f      	b.n	800900a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fca:	4b58      	ldr	r3, [pc, #352]	; (800912c <UART_SetConfig+0x9cc>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0320 	and.w	r3, r3, #32
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d009      	beq.n	8008fea <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fd6:	4b55      	ldr	r3, [pc, #340]	; (800912c <UART_SetConfig+0x9cc>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	08db      	lsrs	r3, r3, #3
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	4a53      	ldr	r2, [pc, #332]	; (8009130 <UART_SetConfig+0x9d0>)
 8008fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fe8:	e00f      	b.n	800900a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008fea:	4b51      	ldr	r3, [pc, #324]	; (8009130 <UART_SetConfig+0x9d0>)
 8008fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fee:	e00c      	b.n	800900a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ff0:	4b4c      	ldr	r3, [pc, #304]	; (8009124 <UART_SetConfig+0x9c4>)
 8008ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ff4:	e009      	b.n	800900a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ffc:	e005      	b.n	800900a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800900a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 80ea 	beq.w	80091e6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	4a44      	ldr	r2, [pc, #272]	; (8009128 <UART_SetConfig+0x9c8>)
 8009018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800901c:	461a      	mov	r2, r3
 800901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009020:	fbb3 f3f2 	udiv	r3, r3, r2
 8009024:	005a      	lsls	r2, r3, #1
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	085b      	lsrs	r3, r3, #1
 800902c:	441a      	add	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	fbb2 f3f3 	udiv	r3, r2, r3
 8009036:	b29b      	uxth	r3, r3
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	2b0f      	cmp	r3, #15
 800903e:	d916      	bls.n	800906e <UART_SetConfig+0x90e>
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009046:	d212      	bcs.n	800906e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	b29b      	uxth	r3, r3
 800904c:	f023 030f 	bic.w	r3, r3, #15
 8009050:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	085b      	lsrs	r3, r3, #1
 8009056:	b29b      	uxth	r3, r3
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	b29a      	uxth	r2, r3
 800905e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009060:	4313      	orrs	r3, r2
 8009062:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800906a:	60da      	str	r2, [r3, #12]
 800906c:	e0bb      	b.n	80091e6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009074:	e0b7      	b.n	80091e6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009076:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800907a:	2b20      	cmp	r3, #32
 800907c:	dc4a      	bgt.n	8009114 <UART_SetConfig+0x9b4>
 800907e:	2b00      	cmp	r3, #0
 8009080:	f2c0 8086 	blt.w	8009190 <UART_SetConfig+0xa30>
 8009084:	2b20      	cmp	r3, #32
 8009086:	f200 8083 	bhi.w	8009190 <UART_SetConfig+0xa30>
 800908a:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <UART_SetConfig+0x930>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	0800911b 	.word	0x0800911b
 8009094:	08009135 	.word	0x08009135
 8009098:	08009191 	.word	0x08009191
 800909c:	08009191 	.word	0x08009191
 80090a0:	0800913d 	.word	0x0800913d
 80090a4:	08009191 	.word	0x08009191
 80090a8:	08009191 	.word	0x08009191
 80090ac:	08009191 	.word	0x08009191
 80090b0:	0800914d 	.word	0x0800914d
 80090b4:	08009191 	.word	0x08009191
 80090b8:	08009191 	.word	0x08009191
 80090bc:	08009191 	.word	0x08009191
 80090c0:	08009191 	.word	0x08009191
 80090c4:	08009191 	.word	0x08009191
 80090c8:	08009191 	.word	0x08009191
 80090cc:	08009191 	.word	0x08009191
 80090d0:	0800915d 	.word	0x0800915d
 80090d4:	08009191 	.word	0x08009191
 80090d8:	08009191 	.word	0x08009191
 80090dc:	08009191 	.word	0x08009191
 80090e0:	08009191 	.word	0x08009191
 80090e4:	08009191 	.word	0x08009191
 80090e8:	08009191 	.word	0x08009191
 80090ec:	08009191 	.word	0x08009191
 80090f0:	08009191 	.word	0x08009191
 80090f4:	08009191 	.word	0x08009191
 80090f8:	08009191 	.word	0x08009191
 80090fc:	08009191 	.word	0x08009191
 8009100:	08009191 	.word	0x08009191
 8009104:	08009191 	.word	0x08009191
 8009108:	08009191 	.word	0x08009191
 800910c:	08009191 	.word	0x08009191
 8009110:	08009183 	.word	0x08009183
 8009114:	2b40      	cmp	r3, #64	; 0x40
 8009116:	d037      	beq.n	8009188 <UART_SetConfig+0xa28>
 8009118:	e03a      	b.n	8009190 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800911a:	f7fd f81d 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 800911e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009120:	e03c      	b.n	800919c <UART_SetConfig+0xa3c>
 8009122:	bf00      	nop
 8009124:	003d0900 	.word	0x003d0900
 8009128:	080099c4 	.word	0x080099c4
 800912c:	58024400 	.word	0x58024400
 8009130:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009134:	f7fd f826 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 8009138:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800913a:	e02f      	b.n	800919c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800913c:	f107 0314 	add.w	r3, r7, #20
 8009140:	4618      	mov	r0, r3
 8009142:	f7fd ff8b 	bl	800705c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800914a:	e027      	b.n	800919c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800914c:	f107 0308 	add.w	r3, r7, #8
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe f8d7 	bl	8007304 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800915a:	e01f      	b.n	800919c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800915c:	4b2c      	ldr	r3, [pc, #176]	; (8009210 <UART_SetConfig+0xab0>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009168:	4b29      	ldr	r3, [pc, #164]	; (8009210 <UART_SetConfig+0xab0>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	08db      	lsrs	r3, r3, #3
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	4a28      	ldr	r2, [pc, #160]	; (8009214 <UART_SetConfig+0xab4>)
 8009174:	fa22 f303 	lsr.w	r3, r2, r3
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800917a:	e00f      	b.n	800919c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800917c:	4b25      	ldr	r3, [pc, #148]	; (8009214 <UART_SetConfig+0xab4>)
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009180:	e00c      	b.n	800919c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009182:	4b25      	ldr	r3, [pc, #148]	; (8009218 <UART_SetConfig+0xab8>)
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009186:	e009      	b.n	800919c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800918c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800918e:	e005      	b.n	800919c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800919a:	bf00      	nop
    }

    if (pclk != 0U)
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d021      	beq.n	80091e6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	4a1d      	ldr	r2, [pc, #116]	; (800921c <UART_SetConfig+0xabc>)
 80091a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ac:	461a      	mov	r2, r3
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	085b      	lsrs	r3, r3, #1
 80091ba:	441a      	add	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d908      	bls.n	80091e0 <UART_SetConfig+0xa80>
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d4:	d204      	bcs.n	80091e0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091dc:	60da      	str	r2, [r3, #12]
 80091de:	e002      	b.n	80091e6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009202:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009206:	4618      	mov	r0, r3
 8009208:	3738      	adds	r7, #56	; 0x38
 800920a:	46bd      	mov	sp, r7
 800920c:	bdb0      	pop	{r4, r5, r7, pc}
 800920e:	bf00      	nop
 8009210:	58024400 	.word	0x58024400
 8009214:	03d09000 	.word	0x03d09000
 8009218:	003d0900 	.word	0x003d0900
 800921c:	080099c4 	.word	0x080099c4

08009220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00a      	beq.n	800928e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	f003 0308 	and.w	r3, r3, #8
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	430a      	orrs	r2, r1
 80092ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b4:	f003 0310 	and.w	r3, r3, #16
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01a      	beq.n	8009336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931e:	d10a      	bne.n	8009336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	605a      	str	r2, [r3, #4]
  }
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af02      	add	r7, sp, #8
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009374:	f7f8 fc2c 	bl	8001bd0 <HAL_GetTick>
 8009378:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0308 	and.w	r3, r3, #8
 8009384:	2b08      	cmp	r3, #8
 8009386:	d10e      	bne.n	80093a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f82f 	bl	80093fa <UART_WaitOnFlagUntilTimeout>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e025      	b.n	80093f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0304 	and.w	r3, r3, #4
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d10e      	bne.n	80093d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f819 	bl	80093fa <UART_WaitOnFlagUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e00f      	b.n	80093f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2220      	movs	r2, #32
 80093d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2220      	movs	r2, #32
 80093de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	60b9      	str	r1, [r7, #8]
 8009404:	603b      	str	r3, [r7, #0]
 8009406:	4613      	mov	r3, r2
 8009408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800940a:	e062      	b.n	80094d2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009412:	d05e      	beq.n	80094d2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009414:	f7f8 fbdc 	bl	8001bd0 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	429a      	cmp	r2, r3
 8009422:	d302      	bcc.n	800942a <UART_WaitOnFlagUntilTimeout+0x30>
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d11d      	bne.n	8009466 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009438:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 0201 	bic.w	r2, r2, #1
 8009448:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2220      	movs	r2, #32
 800944e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2220      	movs	r2, #32
 8009456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e045      	b.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	d02e      	beq.n	80094d2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800947e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009482:	d126      	bne.n	80094d2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800948c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800949c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0201 	bic.w	r2, r2, #1
 80094ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e00f      	b.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	69da      	ldr	r2, [r3, #28]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	4013      	ands	r3, r2
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	429a      	cmp	r2, r3
 80094e0:	bf0c      	ite	eq
 80094e2:	2301      	moveq	r3, #1
 80094e4:	2300      	movne	r3, #0
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d08d      	beq.n	800940c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009510:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009520:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800952a:	bf00      	nop
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
	...

08009538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800954e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6899      	ldr	r1, [r3, #8]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <UART_EndRxTransfer+0x60>)
 800955c:	400b      	ands	r3, r1
 800955e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009564:	2b01      	cmp	r3, #1
 8009566:	d107      	bne.n	8009578 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 0210 	bic.w	r2, r2, #16
 8009576:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2220      	movs	r2, #32
 800957c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	effffffe 	.word	0xeffffffe

0800959c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b2:	d014      	beq.n	80095de <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689a      	ldr	r2, [r3, #8]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ca:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095da:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095dc:	e002      	b.n	80095e4 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7f7 fcda 	bl	8000f98 <HAL_UART_TxCpltCallback>
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f7ff f89a 	bl	8008734 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009600:	bf00      	nop
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009614:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800961c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009624:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009630:	2b80      	cmp	r3, #128	; 0x80
 8009632:	d109      	bne.n	8009648 <UART_DMAError+0x40>
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	2b21      	cmp	r3, #33	; 0x21
 8009638:	d106      	bne.n	8009648 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2200      	movs	r2, #0
 800963e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009642:	6978      	ldr	r0, [r7, #20]
 8009644:	f7ff ff59 	bl	80094fa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009652:	2b40      	cmp	r3, #64	; 0x40
 8009654:	d109      	bne.n	800966a <UART_DMAError+0x62>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b22      	cmp	r3, #34	; 0x22
 800965a:	d106      	bne.n	800966a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2200      	movs	r2, #0
 8009660:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009664:	6978      	ldr	r0, [r7, #20]
 8009666:	f7ff ff67 	bl	8009538 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009670:	f043 0210 	orr.w	r2, r3, #16
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800967a:	6978      	ldr	r0, [r7, #20]
 800967c:	f7f7 fc9c 	bl	8000fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009680:	bf00      	nop
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f7f7 fc86 	bl	8000fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ac:	bf00      	nop
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2220      	movs	r2, #32
 80096d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7f7 fc5c 	bl	8000f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_UARTEx_EnableFifoMode+0x16>
 8009736:	2302      	movs	r3, #2
 8009738:	e02b      	b.n	8009792 <HAL_UARTEx_EnableFifoMode+0x6e>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2224      	movs	r2, #36	; 0x24
 8009746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0201 	bic.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009768:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009770:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f88a 	bl	8009894 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d101      	bne.n	80097b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097ae:	2302      	movs	r3, #2
 80097b0:	e02d      	b.n	800980e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2224      	movs	r2, #36	; 0x24
 80097be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 0201 	bic.w	r2, r2, #1
 80097d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f850 	bl	8009894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009826:	2b01      	cmp	r3, #1
 8009828:	d101      	bne.n	800982e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800982a:	2302      	movs	r3, #2
 800982c:	e02d      	b.n	800988a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2224      	movs	r2, #36	; 0x24
 800983a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0201 	bic.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f812 	bl	8009894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2220      	movs	r2, #32
 800987c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d108      	bne.n	80098b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098b4:	e031      	b.n	800991a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098b6:	2310      	movs	r3, #16
 80098b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098ba:	2310      	movs	r3, #16
 80098bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	0e5b      	lsrs	r3, r3, #25
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f003 0307 	and.w	r3, r3, #7
 80098cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	0f5b      	lsrs	r3, r3, #29
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	f003 0307 	and.w	r3, r3, #7
 80098dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	7b3a      	ldrb	r2, [r7, #12]
 80098e2:	4911      	ldr	r1, [pc, #68]	; (8009928 <UARTEx_SetNbDataToProcess+0x94>)
 80098e4:	5c8a      	ldrb	r2, [r1, r2]
 80098e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098ea:	7b3a      	ldrb	r2, [r7, #12]
 80098ec:	490f      	ldr	r1, [pc, #60]	; (800992c <UARTEx_SetNbDataToProcess+0x98>)
 80098ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	7b7a      	ldrb	r2, [r7, #13]
 8009900:	4909      	ldr	r1, [pc, #36]	; (8009928 <UARTEx_SetNbDataToProcess+0x94>)
 8009902:	5c8a      	ldrb	r2, [r1, r2]
 8009904:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009908:	7b7a      	ldrb	r2, [r7, #13]
 800990a:	4908      	ldr	r1, [pc, #32]	; (800992c <UARTEx_SetNbDataToProcess+0x98>)
 800990c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800990e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009912:	b29a      	uxth	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800991a:	bf00      	nop
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	080099dc 	.word	0x080099dc
 800992c:	080099e4 	.word	0x080099e4

08009930 <__libc_init_array>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	4d0d      	ldr	r5, [pc, #52]	; (8009968 <__libc_init_array+0x38>)
 8009934:	4c0d      	ldr	r4, [pc, #52]	; (800996c <__libc_init_array+0x3c>)
 8009936:	1b64      	subs	r4, r4, r5
 8009938:	10a4      	asrs	r4, r4, #2
 800993a:	2600      	movs	r6, #0
 800993c:	42a6      	cmp	r6, r4
 800993e:	d109      	bne.n	8009954 <__libc_init_array+0x24>
 8009940:	4d0b      	ldr	r5, [pc, #44]	; (8009970 <__libc_init_array+0x40>)
 8009942:	4c0c      	ldr	r4, [pc, #48]	; (8009974 <__libc_init_array+0x44>)
 8009944:	f000 f820 	bl	8009988 <_init>
 8009948:	1b64      	subs	r4, r4, r5
 800994a:	10a4      	asrs	r4, r4, #2
 800994c:	2600      	movs	r6, #0
 800994e:	42a6      	cmp	r6, r4
 8009950:	d105      	bne.n	800995e <__libc_init_array+0x2e>
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	f855 3b04 	ldr.w	r3, [r5], #4
 8009958:	4798      	blx	r3
 800995a:	3601      	adds	r6, #1
 800995c:	e7ee      	b.n	800993c <__libc_init_array+0xc>
 800995e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009962:	4798      	blx	r3
 8009964:	3601      	adds	r6, #1
 8009966:	e7f2      	b.n	800994e <__libc_init_array+0x1e>
 8009968:	080099f4 	.word	0x080099f4
 800996c:	080099f4 	.word	0x080099f4
 8009970:	080099f4 	.word	0x080099f4
 8009974:	080099f8 	.word	0x080099f8

08009978 <memset>:
 8009978:	4402      	add	r2, r0
 800997a:	4603      	mov	r3, r0
 800997c:	4293      	cmp	r3, r2
 800997e:	d100      	bne.n	8009982 <memset+0xa>
 8009980:	4770      	bx	lr
 8009982:	f803 1b01 	strb.w	r1, [r3], #1
 8009986:	e7f9      	b.n	800997c <memset+0x4>

08009988 <_init>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	bf00      	nop
 800998c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998e:	bc08      	pop	{r3}
 8009990:	469e      	mov	lr, r3
 8009992:	4770      	bx	lr

08009994 <_fini>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	bf00      	nop
 8009998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999a:	bc08      	pop	{r3}
 800999c:	469e      	mov	lr, r3
 800999e:	4770      	bx	lr
