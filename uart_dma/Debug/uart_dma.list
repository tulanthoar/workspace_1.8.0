
uart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000cc  24000000  080077bc  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002fc  240000e0  08007888  000200e0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240003dc  08007888  000203dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001976d  00000000  00000000  000200fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c57  00000000  00000000  00039867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bd0  00000000  00000000  0003c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b08  00000000  00000000  0003d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034cb8  00000000  00000000  0003db98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f9d0  00000000  00000000  00072850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ff4a  00000000  00000000  00082220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d216a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002fdc  00000000  00000000  001d21c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000e0 	.word	0x240000e0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007758 	.word	0x08007758

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000e4 	.word	0x240000e4
 80002d4:	08007758 	.word	0x08007758

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 80005d4:	f000 f91c 	bl	8000810 <CPU_CACHE_Enable>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 80005d8:	f000 fd10 	bl	8000ffc <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 80005dc:	f000 f866 	bl	80006ac <SystemClock_Config>
  
  /* Configure LED1, LED2 and LED3 */
  BSP_LED_Init(LED1);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fb01 	bl	8000be8 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fafe 	bl	8000be8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 fafb 	bl	8000be8 <BSP_LED_Init>
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = None
      - BaudRate = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <main+0xc8>)
 80005f4:	4a29      	ldr	r2, [pc, #164]	; (800069c <main+0xcc>)
 80005f6:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 9600;
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <main+0xc8>)
 80005fa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005fe:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <main+0xc8>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <main+0xc8>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <main+0xc8>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <main+0xc8>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <main+0xc8>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <main+0xc8>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8000624:	481c      	ldr	r0, [pc, #112]	; (8000698 <main+0xc8>)
 8000626:	f005 fd05 	bl	8006034 <HAL_UART_DeInit>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x64>
  {
    Error_Handler();
 8000630:	f000 f8e8 	bl	8000804 <Error_Handler>
  }  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8000634:	4818      	ldr	r0, [pc, #96]	; (8000698 <main+0xc8>)
 8000636:	f005 fcad 	bl	8005f94 <HAL_UART_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <main+0x74>
  {
    Error_Handler();
 8000640:	f000 f8e0 	bl	8000804 <Error_Handler>
  }
  
#ifdef TRANSMITTER_BOARD

  /* Configure User push-button in Interrupt mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000644:	2101      	movs	r1, #1
 8000646:	2000      	movs	r0, #0
 8000648:	f000 fbc2 	bl	8000dd0 <BSP_PB_Init>
  
  /* Wait for User push-button press before starting the Communication.
     In the meantime, LED1 is blinking */
  while(UserButtonStatus == 0)
 800064c:	e005      	b.n	800065a <main+0x8a>
  {
    /* Toggle LED1*/
    BSP_LED_Toggle(LED1); 
 800064e:	2000      	movs	r0, #0
 8000650:	f000 fb94 	bl	8000d7c <BSP_LED_Toggle>
    HAL_Delay(100);
 8000654:	2064      	movs	r0, #100	; 0x64
 8000656:	f000 fd6b 	bl	8001130 <HAL_Delay>
  while(UserButtonStatus == 0)
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <main+0xd0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0f5      	beq.n	800064e <main+0x7e>
  }
  
  BSP_LED_Off(LED1); 
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fb60 	bl	8000d28 <BSP_LED_Off>
  /* The board sends the message and expects to receive it back */
  
  /*##-2- Start the transmission process #####################################*/  
  /* While the UART in reception process, user can transmit data through 
     "aTxBuffer" buffer */
  if(HAL_UART_Transmit_DMA(&UartHandle, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 8000668:	22a0      	movs	r2, #160	; 0xa0
 800066a:	490e      	ldr	r1, [pc, #56]	; (80006a4 <main+0xd4>)
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <main+0xc8>)
 800066e:	f005 fd1d 	bl	80060ac <HAL_UART_Transmit_DMA>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <main+0xac>
  {
    Error_Handler();
 8000678:	f000 f8c4 	bl	8000804 <Error_Handler>
  }
  
  /*##-3- Wait for the end of the transfer ###################################*/  
  while (UartReady != SET)
 800067c:	bf00      	nop
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <main+0xd8>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b01      	cmp	r3, #1
 8000686:	d1fa      	bne.n	800067e <main+0xae>
  {
  }

  while (1)
  {
	    BSP_LED_Toggle(LED3);
 8000688:	2002      	movs	r0, #2
 800068a:	f000 fb77 	bl	8000d7c <BSP_LED_Toggle>
	    HAL_Delay(100);
 800068e:	2064      	movs	r0, #100	; 0x64
 8000690:	f000 fd4e 	bl	8001130 <HAL_Delay>
	    BSP_LED_Toggle(LED3);
 8000694:	e7f8      	b.n	8000688 <main+0xb8>
 8000696:	bf00      	nop
 8000698:	24000200 	.word	0x24000200
 800069c:	40011400 	.word	0x40011400
 80006a0:	24000100 	.word	0x24000100
 80006a4:	24000000 	.word	0x24000000
 80006a8:	240000fc 	.word	0x240000fc

080006ac <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09e      	sub	sp, #120	; 0x78
 80006b0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f004 f9d7 	bl	8004a6c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b37      	ldr	r3, [pc, #220]	; (80007a0 <SystemClock_Config+0xf4>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	4a36      	ldr	r2, [pc, #216]	; (80007a0 <SystemClock_Config+0xf4>)
 80006c8:	f023 0301 	bic.w	r3, r3, #1
 80006cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ce:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <SystemClock_Config+0xf4>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <SystemClock_Config+0xf8>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <SystemClock_Config+0xf8>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <SystemClock_Config+0xf8>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f0:	bf00      	nop
 80006f2:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <SystemClock_Config+0xf8>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006fe:	d1f8      	bne.n	80006f2 <SystemClock_Config+0x46>
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000704:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	2302      	movs	r3, #2
 8000718:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 800071e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000734:	2300      	movs	r3, #0
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000738:	2304      	movs	r3, #4
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4618      	mov	r0, r3
 8000742:	f004 f9cd 	bl	8004ae0 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800074c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000754:	f000 f856 	bl	8000804 <Error_Handler>
  }
  
/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000758:	233f      	movs	r3, #63	; 0x3f
 800075a:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2303      	movs	r3, #3
 800075e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000764:	2308      	movs	r3, #8
 8000766:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000768:	2340      	movs	r3, #64	; 0x40
 800076a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 800076c:	2340      	movs	r3, #64	; 0x40
 800076e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8000770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000774:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 8000776:	2340      	movs	r3, #64	; 0x40
 8000778:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800077a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800077e:	2104      	movs	r1, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f004 fdbd 	bl	8005300 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800078c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000794:	f000 f836 	bl	8000804 <Error_Handler>
  }

}
 8000798:	bf00      	nop
 800079a:	3778      	adds	r7, #120	; 0x78
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58000400 	.word	0x58000400
 80007a4:	58024800 	.word	0x58024800

080007a8 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and 
  *         you can add your own implementation. 
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_UART_TxCpltCallback+0x1c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]

#ifdef TRANSMITTER_BOARD
  /* Turn LED2 on: Transfer in transmission process is correct */
  BSP_LED_On(LED2); 
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 fa8c 	bl	8000cd4 <BSP_LED_On>
#else  
  /* Turn LED2 off: Transfer in transmission process is correct */
  BSP_LED_Off(LED2); 
#endif  /* TRANSMITTER_BOARD */ 
  
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	240000fc 	.word	0x240000fc

080007c8 <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  Error_Handler();
 80007d0:	f000 f818 	bl	8000804 <Error_Handler>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BUTTON_USER_PIN)
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ec:	d102      	bne.n	80007f4 <HAL_GPIO_EXTI_Callback+0x18>
  {  
    UserButtonStatus = 1;
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <HAL_GPIO_EXTI_Callback+0x24>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
  }
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	24000100 	.word	0x24000100

08000804 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* Turn LED_RED on */
  BSP_LED_On(LED_RED);
 8000808:	2002      	movs	r0, #2
 800080a:	f000 fa63 	bl	8000cd4 <BSP_LED_On>

  while(1)
 800080e:	e7fe      	b.n	800080e <Error_Handler+0xa>

08000810 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d11b      	bne.n	800085a <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000822:	f3bf 8f4f 	dsb	sy
}
 8000826:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000828:	f3bf 8f6f 	isb	sy
}
 800082c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000836:	f3bf 8f4f 	dsb	sy
}
 800083a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800083c:	f3bf 8f6f 	isb	sy
}
 8000840:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800084e:	f3bf 8f4f 	dsb	sy
}
 8000852:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000854:	f3bf 8f6f 	isb	sy
}
 8000858:	e000      	b.n	800085c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800085a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d138      	bne.n	80008da <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 800086a:	2200      	movs	r2, #0
 800086c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000870:	f3bf 8f4f 	dsb	sy
}
 8000874:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 8000878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800087c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	0b5b      	lsrs	r3, r3, #13
 8000882:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000886:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000890:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	015a      	lsls	r2, r3, #5
 8000896:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800089a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a0:	4911      	ldr	r1, [pc, #68]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 80008a2:	4313      	orrs	r3, r2
 80008a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1ef      	bne.n	8000892 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	60ba      	str	r2, [r7, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e5      	bne.n	8000888 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80008bc:	f3bf 8f4f 	dsb	sy
}
 80008c0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <CPU_CACHE_Enable+0xd8>)
 80008c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ce:	f3bf 8f4f 	dsb	sy
}
 80008d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
}
 80008d8:	e000      	b.n	80008dc <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008da:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80008f4:	4b6c      	ldr	r3, [pc, #432]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	4a6b      	ldr	r2, [pc, #428]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000904:	4b68      	ldr	r3, [pc, #416]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000912:	4b65      	ldr	r3, [pc, #404]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	4a63      	ldr	r2, [pc, #396]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000922:	4b61      	ldr	r3, [pc, #388]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	697b      	ldr	r3, [r7, #20]

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8000930:	4b5d      	ldr	r3, [pc, #372]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000936:	4a5c      	ldr	r2, [pc, #368]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000938:	f043 0320 	orr.w	r3, r3, #32
 800093c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000940:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

  /* Enable DMA clock */
  DMAx_CLK_ENABLE();
 800094e:	4b56      	ldr	r3, [pc, #344]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000954:	4a54      	ldr	r2, [pc, #336]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800095e:	4b52      	ldr	r3, [pc, #328]	; (8000aa8 <HAL_UART_MspInit+0x1bc>)
 8000960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000974:	2301      	movs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800097c:	2307      	movs	r3, #7
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4849      	ldr	r0, [pc, #292]	; (8000aac <HAL_UART_MspInit+0x1c0>)
 8000988:	f003 fd68 	bl	800445c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8000990:	2307      	movs	r3, #7
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4844      	ldr	r0, [pc, #272]	; (8000aac <HAL_UART_MspInit+0x1c0>)
 800099c:	f003 fd5e 	bl	800445c <HAL_GPIO_Init>

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 80009a0:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009a2:	4a44      	ldr	r2, [pc, #272]	; (8000ab4 <HAL_UART_MspInit+0x1c8>)
 80009a4:	601a      	str	r2, [r3, #0]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80009a6:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009a8:	2240      	movs	r2, #64	; 0x40
 80009aa:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b8:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80009c0:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Mode                = DMA_NORMAL;
 80009c6:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80009cc:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80009d2:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80009d8:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009da:	2203      	movs	r2, #3
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 80009de:	4b34      	ldr	r3, [pc, #208]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80009e6:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009f0:	2248      	movs	r2, #72	; 0x48
 80009f2:	605a      	str	r2, [r3, #4]

  HAL_DMA_Init(&hdma_tx);
 80009f4:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009f6:	f000 fd0d 	bl	8001414 <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 80009fe:	679a      	str	r2, [r3, #120]	; 0x78
 8000a00:	4a2b      	ldr	r2, [pc, #172]	; (8000ab0 <HAL_UART_MspInit+0x1c4>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6393      	str	r3, [r2, #56]	; 0x38

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a08:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <HAL_UART_MspInit+0x1d0>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a1e:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a38:	621a      	str	r2, [r3, #32]
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a42:	2203      	movs	r2, #3
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
  hdma_rx.Init.Request             = USARTx_RX_DMA_REQUEST;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a58:	2247      	movs	r2, #71	; 0x47
 8000a5a:	605a      	str	r2, [r3, #4]

  HAL_DMA_Init(&hdma_rx);
 8000a5c:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a5e:	f000 fcd9 	bl	8001414 <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a66:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_UART_MspInit+0x1cc>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6393      	str	r3, [r2, #56]	; 0x38
    
  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USART6_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2100      	movs	r1, #0
 8000a72:	2046      	movs	r0, #70	; 0x46
 8000a74:	f000 fc8b 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8000a78:	2046      	movs	r0, #70	; 0x46
 8000a7a:	f000 fca2 	bl	80013c2 <HAL_NVIC_EnableIRQ>
    
  /* NVIC configuration for DMA transfer complete interrupt (USART6_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2039      	movs	r0, #57	; 0x39
 8000a84:	f000 fc83 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 8000a88:	2039      	movs	r0, #57	; 0x39
 8000a8a:	f000 fc9a 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  
  /* NVIC for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2100      	movs	r1, #0
 8000a92:	2047      	movs	r0, #71	; 0x47
 8000a94:	f000 fc7b 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8000a98:	2047      	movs	r0, #71	; 0x47
 8000a9a:	f000 fc92 	bl	80013c2 <HAL_NVIC_EnableIRQ>
}
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	; 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	58020800 	.word	0x58020800
 8000ab0:	24000104 	.word	0x24000104
 8000ab4:	400204b8 	.word	0x400204b8
 8000ab8:	2400017c 	.word	0x2400017c
 8000abc:	40020428 	.word	0x40020428

08000ac0 <HAL_UART_MspDeInit>:
  *          - Revert GPIO, DMA and NVIC configuration to their default state
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  /*##-1- Reset peripherals ##################################################*/
  USARTx_FORCE_RESET();
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_UART_MspDeInit+0x70>)
 8000aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_UART_MspDeInit+0x70>)
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  USARTx_RELEASE_RESET();
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_UART_MspDeInit+0x70>)
 8000ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <HAL_UART_MspDeInit+0x70>)
 8000ae0:	f023 0320 	bic.w	r3, r3, #32
 8000ae4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /*##-2- Disable peripherals and GPIO Clocks #################################*/
  /* Configure USARTx Tx as alternate function  */
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	4812      	ldr	r0, [pc, #72]	; (8000b34 <HAL_UART_MspDeInit+0x74>)
 8000aec:	f003 fe66 	bl	80047bc <HAL_GPIO_DeInit>
  /* Configure USARTx Rx as alternate function  */
  HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <HAL_UART_MspDeInit+0x74>)
 8000af4:	f003 fe62 	bl	80047bc <HAL_GPIO_DeInit>
   
  /*##-3- Disable the DMA #####################################################*/
  /* De-Initialize the DMA channel associated to reception process */
  if(huart->hdmarx != 0)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <HAL_UART_MspDeInit+0x4a>
  {
    HAL_DMA_DeInit(huart->hdmarx);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 ffe1 	bl	8001acc <HAL_DMA_DeInit>
  }
  /* De-Initialize the DMA channel associated to transmission process */
  if(huart->hdmatx != 0)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d004      	beq.n	8000b1c <HAL_UART_MspDeInit+0x5c>
  {
    HAL_DMA_DeInit(huart->hdmatx);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 ffd8 	bl	8001acc <HAL_DMA_DeInit>
  }  
  
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 8000b1c:	2046      	movs	r0, #70	; 0x46
 8000b1e:	f000 fc5e 	bl	80013de <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(USARTx_DMA_RX_IRQn);
 8000b22:	2039      	movs	r0, #57	; 0x39
 8000b24:	f000 fc5b 	bl	80013de <HAL_NVIC_DisableIRQ>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58020800 	.word	0x58020800

08000b38 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000b8c:	f000 fab0 	bl	80010f0 <HAL_IncTick>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <DMA2_Stream1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA  
  *         used for USART data transmission     
  */
void USARTx_DMA_RX_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(UartHandle.hdmarx);
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <DMA2_Stream1_IRQHandler+0x14>)
 8000b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 f917 	bl	8002dd0 <HAL_DMA_IRQHandler>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	24000200 	.word	0x24000200

08000bac <DMA2_Stream7_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA  
  *         used for USART data reception    
  */
void USARTx_DMA_TX_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <DMA2_Stream7_IRQHandler+0x14>)
 8000bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 f90b 	bl	8002dd0 <HAL_DMA_IRQHandler>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	24000200 	.word	0x24000200

08000bc4 <USART6_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA  
  *         used for USART data transmission     
  */
void USARTx_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartHandle);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART6_IRQHandler+0x10>)
 8000bca:	f005 faef 	bl	80061ac <HAL_UART_IRQHandler>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	24000200 	.word	0x24000200

08000bd8 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8000bdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000be0:	f003 ff29 	bl	8004a36 <HAL_GPIO_EXTI_IRQHandler>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d009      	beq.n	8000c10 <BSP_LED_Init+0x28>
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d006      	beq.n	8000c10 <BSP_LED_Init+0x28>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d003      	beq.n	8000c10 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c08:	f06f 0301 	mvn.w	r3, #1
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c0e:	e055      	b.n	8000cbc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10f      	bne.n	8000c36 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <BSP_LED_Init+0xe0>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a2a      	ldr	r2, [pc, #168]	; (8000cc8 <BSP_LED_Init+0xe0>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <BSP_LED_Init+0xe0>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	e021      	b.n	8000c7a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d10f      	bne.n	8000c5c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <BSP_LED_Init+0xe0>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <BSP_LED_Init+0xe0>)
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <BSP_LED_Init+0xe0>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	e00e      	b.n	8000c7a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <BSP_LED_Init+0xe0>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <BSP_LED_Init+0xe0>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <BSP_LED_Init+0xe0>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <BSP_LED_Init+0xe4>)
 8000c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c82:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <BSP_LED_Init+0xe8>)
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	f107 0218 	add.w	r2, r7, #24
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fbdc 	bl	800445c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <BSP_LED_Init+0xe8>)
 8000ca8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <BSP_LED_Init+0xe4>)
 8000cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f003 fe8a 	bl	80049d0 <HAL_GPIO_WritePin>
  }

  return ret;
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3730      	adds	r7, #48	; 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	08007770 	.word	0x08007770
 8000cd0:	240000a4 	.word	0x240000a4

08000cd4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d009      	beq.n	8000cfc <BSP_LED_On+0x28>
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d006      	beq.n	8000cfc <BSP_LED_On+0x28>
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d003      	beq.n	8000cfc <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cf4:	f06f 0301 	mvn.w	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e00b      	b.n	8000d14 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <BSP_LED_On+0x4c>)
 8000d00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <BSP_LED_On+0x50>)
 8000d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f003 fe5e 	bl	80049d0 <HAL_GPIO_WritePin>
  }

  return ret;
 8000d14:	68fb      	ldr	r3, [r7, #12]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	240000a4 	.word	0x240000a4
 8000d24:	08007770 	.word	0x08007770

08000d28 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d009      	beq.n	8000d50 <BSP_LED_Off+0x28>
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d006      	beq.n	8000d50 <BSP_LED_Off+0x28>
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d003      	beq.n	8000d50 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d48:	f06f 0301 	mvn.w	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	e00b      	b.n	8000d68 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <BSP_LED_Off+0x4c>)
 8000d54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <BSP_LED_Off+0x50>)
 8000d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d60:	2200      	movs	r2, #0
 8000d62:	4619      	mov	r1, r3
 8000d64:	f003 fe34 	bl	80049d0 <HAL_GPIO_WritePin>
  }

  return ret;
 8000d68:	68fb      	ldr	r3, [r7, #12]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	240000a4 	.word	0x240000a4
 8000d78:	08007770 	.word	0x08007770

08000d7c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d009      	beq.n	8000da4 <BSP_LED_Toggle+0x28>
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d006      	beq.n	8000da4 <BSP_LED_Toggle+0x28>
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d003      	beq.n	8000da4 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d9c:	f06f 0301 	mvn.w	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e00b      	b.n	8000dbc <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <BSP_LED_Toggle+0x4c>)
 8000da8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4907      	ldr	r1, [pc, #28]	; (8000dcc <BSP_LED_Toggle+0x50>)
 8000db0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4610      	mov	r0, r2
 8000db8:	f003 fe23 	bl	8004a02 <HAL_GPIO_TogglePin>
  }

  return ret;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	240000a4 	.word	0x240000a4
 8000dcc:	08007770 	.word	0x08007770

08000dd0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000de0:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <BSP_PB_Init+0xc8>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a2c      	ldr	r2, [pc, #176]	; (8000e98 <BSP_PB_Init+0xc8>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <BSP_PB_Init+0xc8>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e02:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000e04:	2302      	movs	r3, #2
 8000e06:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <BSP_PB_Init+0xcc>)
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fb19 	bl	800445c <HAL_GPIO_Init>
 8000e2a:	e030      	b.n	8000e8e <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <BSP_PB_Init+0xd0>)
 8000e2e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <BSP_PB_Init+0xcc>)
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	f107 020c 	add.w	r2, r7, #12
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 fb0c 	bl	800445c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <BSP_PB_Init+0xd4>)
 8000e4a:	441a      	add	r2, r3
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4916      	ldr	r1, [pc, #88]	; (8000ea8 <BSP_PB_Init+0xd8>)
 8000e50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4610      	mov	r0, r2
 8000e58:	f003 faeb 	bl	8004432 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <BSP_PB_Init+0xd4>)
 8000e62:	1898      	adds	r0, r3, r2
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a11      	ldr	r2, [pc, #68]	; (8000eac <BSP_PB_Init+0xdc>)
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f003 fac0 	bl	80043f4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e74:	2028      	movs	r0, #40	; 0x28
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <BSP_PB_Init+0xe0>)
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	f000 fa84 	bl	800138e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e86:	2328      	movs	r3, #40	; 0x28
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fa9a 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	240000b0 	.word	0x240000b0
 8000ea0:	11110000 	.word	0x11110000
 8000ea4:	24000340 	.word	0x24000340
 8000ea8:	08007778 	.word	0x08007778
 8000eac:	240000b4 	.word	0x240000b4
 8000eb0:	240000b8 	.word	0x240000b8

08000eb4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff fff0 	bl	8000eb4 <BSP_PB_Callback>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <SystemInit+0xb4>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a2a      	ldr	r2, [pc, #168]	; (8000f8c <SystemInit+0xb4>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <SystemInit+0xb8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a27      	ldr	r2, [pc, #156]	; (8000f90 <SystemInit+0xb8>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ef8:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <SystemInit+0xb8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <SystemInit+0xb8>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4923      	ldr	r1, [pc, #140]	; (8000f90 <SystemInit+0xb8>)
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <SystemInit+0xbc>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <SystemInit+0xb8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <SystemInit+0xb8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <SystemInit+0xb8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <SystemInit+0xb8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <SystemInit+0xb8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <SystemInit+0xb8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <SystemInit+0xb8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <SystemInit+0xb8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <SystemInit+0xb8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <SystemInit+0xb8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <SystemInit+0xb8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <SystemInit+0xb8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <SystemInit+0xb8>)
 8000f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <SystemInit+0xb8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <SystemInit+0xc0>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <SystemInit+0xc4>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f6a:	d202      	bcs.n	8000f72 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <SystemInit+0xc8>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <SystemInit+0xcc>)
 8000f74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f78:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SystemInit+0xb4>)
 8000f7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f80:	609a      	str	r2, [r3, #8]
#endif  


}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	58024400 	.word	0x58024400
 8000f94:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f98:	5c001000 	.word	0x5c001000
 8000f9c:	ffff0000 	.word	0xffff0000
 8000fa0:	51008108 	.word	0x51008108
 8000fa4:	52004000 	.word	0x52004000

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fac:	f7ff ff94 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f006 fb9b 	bl	8007710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff faf9 	bl	80005d0 <main>
  bx  lr
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fe4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe8:	240000cc 	.word	0x240000cc
  ldr r2, =_sidata
 8000fec:	080077bc 	.word	0x080077bc
  ldr r2, =_sbss
 8000ff0:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8000ff4:	240003dc 	.word	0x240003dc

08000ff8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC3_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 f9b8 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001008:	f004 fb30 	bl	800566c <HAL_RCC_GetSysClockFreq>
 800100c:	4602      	mov	r2, r0
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_Init+0x68>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	4913      	ldr	r1, [pc, #76]	; (8001068 <HAL_Init+0x6c>)
 800101a:	5ccb      	ldrb	r3, [r1, r3]
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	fa22 f303 	lsr.w	r3, r2, r3
 8001024:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_Init+0x68>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_Init+0x6c>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_Init+0x70>)
 800103e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <HAL_Init+0x74>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f81c 	bl	8001084 <HAL_InitTick>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e002      	b.n	800105c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001056:	f000 f80d 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	58024400 	.word	0x58024400
 8001068:	0800777c 	.word	0x0800777c
 800106c:	240000c0 	.word	0x240000c0
 8001070:	240000bc 	.word	0x240000bc

08001074 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_InitTick+0x60>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e021      	b.n	80010dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_InitTick+0x64>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_InitTick+0x60>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f9a3 	bl	80013fa <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f95f 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <HAL_InitTick+0x68>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	240000c8 	.word	0x240000c8
 80010e8:	240000bc 	.word	0x240000bc
 80010ec:	240000c4 	.word	0x240000c4

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	240000c8 	.word	0x240000c8
 8001114:	240003d8 	.word	0x240003d8

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	240003d8 	.word	0x240003d8

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	240000c8 	.word	0x240000c8

08001178 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetREVID+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	0c1b      	lsrs	r3, r3, #16
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	5c001000 	.word	0x5c001000

08001190 <__NVIC_SetPriorityGrouping>:
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	05fa0000 	.word	0x05fa0000

080011d8 <__NVIC_GetPriorityGrouping>:
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_DisableIRQ>:
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db12      	blt.n	8001268 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	490a      	ldr	r1, [pc, #40]	; (8001274 <__NVIC_DisableIRQ+0x44>)
 800124a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	3320      	adds	r3, #32
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800125c:	f3bf 8f4f 	dsb	sy
}
 8001260:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001262:	f3bf 8f6f 	isb	sy
}
 8001266:	bf00      	nop
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff05 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff1c 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff90 	bl	80012cc <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5f 	bl	8001278 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff0f 	bl	80011f4 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff1f 	bl	8001230 <__NVIC_DisableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff96 	bl	8001334 <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff fe7c 	bl	8001118 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e316      	b.n	8001a5a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a66      	ldr	r2, [pc, #408]	; (80015cc <HAL_DMA_Init+0x1b8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d04a      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a65      	ldr	r2, [pc, #404]	; (80015d0 <HAL_DMA_Init+0x1bc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d045      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a63      	ldr	r2, [pc, #396]	; (80015d4 <HAL_DMA_Init+0x1c0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d040      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a62      	ldr	r2, [pc, #392]	; (80015d8 <HAL_DMA_Init+0x1c4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d03b      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a60      	ldr	r2, [pc, #384]	; (80015dc <HAL_DMA_Init+0x1c8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d036      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a5f      	ldr	r2, [pc, #380]	; (80015e0 <HAL_DMA_Init+0x1cc>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d031      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a5d      	ldr	r2, [pc, #372]	; (80015e4 <HAL_DMA_Init+0x1d0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d02c      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a5c      	ldr	r2, [pc, #368]	; (80015e8 <HAL_DMA_Init+0x1d4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d027      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a5a      	ldr	r2, [pc, #360]	; (80015ec <HAL_DMA_Init+0x1d8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d022      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a59      	ldr	r2, [pc, #356]	; (80015f0 <HAL_DMA_Init+0x1dc>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d01d      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a57      	ldr	r2, [pc, #348]	; (80015f4 <HAL_DMA_Init+0x1e0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d018      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <HAL_DMA_Init+0x1e4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d013      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_DMA_Init+0x1e8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00e      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a53      	ldr	r2, [pc, #332]	; (8001600 <HAL_DMA_Init+0x1ec>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d009      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a51      	ldr	r2, [pc, #324]	; (8001604 <HAL_DMA_Init+0x1f0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d004      	beq.n	80014cc <HAL_DMA_Init+0xb8>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a50      	ldr	r2, [pc, #320]	; (8001608 <HAL_DMA_Init+0x1f4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_DMA_Init+0xbc>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_DMA_Init+0xbe>
 80014d0:	2300      	movs	r3, #0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 813b 	beq.w	800174e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a37      	ldr	r2, [pc, #220]	; (80015cc <HAL_DMA_Init+0x1b8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d04a      	beq.n	8001588 <HAL_DMA_Init+0x174>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a36      	ldr	r2, [pc, #216]	; (80015d0 <HAL_DMA_Init+0x1bc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d045      	beq.n	8001588 <HAL_DMA_Init+0x174>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a34      	ldr	r2, [pc, #208]	; (80015d4 <HAL_DMA_Init+0x1c0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d040      	beq.n	8001588 <HAL_DMA_Init+0x174>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a33      	ldr	r2, [pc, #204]	; (80015d8 <HAL_DMA_Init+0x1c4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d03b      	beq.n	8001588 <HAL_DMA_Init+0x174>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a31      	ldr	r2, [pc, #196]	; (80015dc <HAL_DMA_Init+0x1c8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d036      	beq.n	8001588 <HAL_DMA_Init+0x174>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <HAL_DMA_Init+0x1cc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d031      	beq.n	8001588 <HAL_DMA_Init+0x174>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <HAL_DMA_Init+0x1d0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d02c      	beq.n	8001588 <HAL_DMA_Init+0x174>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a2d      	ldr	r2, [pc, #180]	; (80015e8 <HAL_DMA_Init+0x1d4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d027      	beq.n	8001588 <HAL_DMA_Init+0x174>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <HAL_DMA_Init+0x1d8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d022      	beq.n	8001588 <HAL_DMA_Init+0x174>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <HAL_DMA_Init+0x1dc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d01d      	beq.n	8001588 <HAL_DMA_Init+0x174>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <HAL_DMA_Init+0x1e0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d018      	beq.n	8001588 <HAL_DMA_Init+0x174>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_DMA_Init+0x1e4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d013      	beq.n	8001588 <HAL_DMA_Init+0x174>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a25      	ldr	r2, [pc, #148]	; (80015fc <HAL_DMA_Init+0x1e8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00e      	beq.n	8001588 <HAL_DMA_Init+0x174>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <HAL_DMA_Init+0x1ec>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d009      	beq.n	8001588 <HAL_DMA_Init+0x174>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <HAL_DMA_Init+0x1f0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d004      	beq.n	8001588 <HAL_DMA_Init+0x174>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a21      	ldr	r2, [pc, #132]	; (8001608 <HAL_DMA_Init+0x1f4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d108      	bne.n	800159a <HAL_DMA_Init+0x186>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e007      	b.n	80015aa <HAL_DMA_Init+0x196>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015aa:	e02f      	b.n	800160c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ac:	f7ff fdb4 	bl	8001118 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d928      	bls.n	800160c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2203      	movs	r2, #3
 80015c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e246      	b.n	8001a5a <HAL_DMA_Init+0x646>
 80015cc:	40020010 	.word	0x40020010
 80015d0:	40020028 	.word	0x40020028
 80015d4:	40020040 	.word	0x40020040
 80015d8:	40020058 	.word	0x40020058
 80015dc:	40020070 	.word	0x40020070
 80015e0:	40020088 	.word	0x40020088
 80015e4:	400200a0 	.word	0x400200a0
 80015e8:	400200b8 	.word	0x400200b8
 80015ec:	40020410 	.word	0x40020410
 80015f0:	40020428 	.word	0x40020428
 80015f4:	40020440 	.word	0x40020440
 80015f8:	40020458 	.word	0x40020458
 80015fc:	40020470 	.word	0x40020470
 8001600:	40020488 	.word	0x40020488
 8001604:	400204a0 	.word	0x400204a0
 8001608:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1c8      	bne.n	80015ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4b83      	ldr	r3, [pc, #524]	; (8001834 <HAL_DMA_Init+0x420>)
 8001626:	4013      	ands	r3, r2
 8001628:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001632:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	2b04      	cmp	r3, #4
 800165e:	d107      	bne.n	8001670 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4313      	orrs	r3, r2
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4313      	orrs	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001670:	4b71      	ldr	r3, [pc, #452]	; (8001838 <HAL_DMA_Init+0x424>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b71      	ldr	r3, [pc, #452]	; (800183c <HAL_DMA_Init+0x428>)
 8001676:	4013      	ands	r3, r2
 8001678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167c:	d328      	bcc.n	80016d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b28      	cmp	r3, #40	; 0x28
 8001684:	d903      	bls.n	800168e <HAL_DMA_Init+0x27a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b2e      	cmp	r3, #46	; 0x2e
 800168c:	d917      	bls.n	80016be <HAL_DMA_Init+0x2aa>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b3e      	cmp	r3, #62	; 0x3e
 8001694:	d903      	bls.n	800169e <HAL_DMA_Init+0x28a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b42      	cmp	r3, #66	; 0x42
 800169c:	d90f      	bls.n	80016be <HAL_DMA_Init+0x2aa>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b46      	cmp	r3, #70	; 0x46
 80016a4:	d903      	bls.n	80016ae <HAL_DMA_Init+0x29a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b48      	cmp	r3, #72	; 0x48
 80016ac:	d907      	bls.n	80016be <HAL_DMA_Init+0x2aa>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b4e      	cmp	r3, #78	; 0x4e
 80016b4:	d905      	bls.n	80016c2 <HAL_DMA_Init+0x2ae>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b52      	cmp	r3, #82	; 0x52
 80016bc:	d801      	bhi.n	80016c2 <HAL_DMA_Init+0x2ae>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_DMA_Init+0x2b0>
 80016c2:	2300      	movs	r3, #0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f023 0307 	bic.w	r3, r3, #7
 80016e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d117      	bne.n	800172a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4313      	orrs	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00e      	beq.n	800172a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f002 fce7 	bl	80040e0 <DMA_CheckFifoParam>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e197      	b.n	8001a5a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f002 fc22 	bl	8003f7c <DMA_CalcBaseAndBitshift>
 8001738:	4603      	mov	r3, r0
 800173a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	223f      	movs	r2, #63	; 0x3f
 8001746:	409a      	lsls	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e0cd      	b.n	80018ea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a3b      	ldr	r2, [pc, #236]	; (8001840 <HAL_DMA_Init+0x42c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d022      	beq.n	800179e <HAL_DMA_Init+0x38a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a39      	ldr	r2, [pc, #228]	; (8001844 <HAL_DMA_Init+0x430>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01d      	beq.n	800179e <HAL_DMA_Init+0x38a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a38      	ldr	r2, [pc, #224]	; (8001848 <HAL_DMA_Init+0x434>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d018      	beq.n	800179e <HAL_DMA_Init+0x38a>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a36      	ldr	r2, [pc, #216]	; (800184c <HAL_DMA_Init+0x438>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_DMA_Init+0x38a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a35      	ldr	r2, [pc, #212]	; (8001850 <HAL_DMA_Init+0x43c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00e      	beq.n	800179e <HAL_DMA_Init+0x38a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a33      	ldr	r2, [pc, #204]	; (8001854 <HAL_DMA_Init+0x440>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d009      	beq.n	800179e <HAL_DMA_Init+0x38a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a32      	ldr	r2, [pc, #200]	; (8001858 <HAL_DMA_Init+0x444>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d004      	beq.n	800179e <HAL_DMA_Init+0x38a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a30      	ldr	r2, [pc, #192]	; (800185c <HAL_DMA_Init+0x448>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_DMA_Init+0x38e>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_DMA_Init+0x390>
 80017a2:	2300      	movs	r3, #0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 8097 	beq.w	80018d8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_DMA_Init+0x42c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d021      	beq.n	80017f8 <HAL_DMA_Init+0x3e4>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a22      	ldr	r2, [pc, #136]	; (8001844 <HAL_DMA_Init+0x430>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d01c      	beq.n	80017f8 <HAL_DMA_Init+0x3e4>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <HAL_DMA_Init+0x434>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d017      	beq.n	80017f8 <HAL_DMA_Init+0x3e4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a1f      	ldr	r2, [pc, #124]	; (800184c <HAL_DMA_Init+0x438>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d012      	beq.n	80017f8 <HAL_DMA_Init+0x3e4>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <HAL_DMA_Init+0x43c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00d      	beq.n	80017f8 <HAL_DMA_Init+0x3e4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_DMA_Init+0x440>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d008      	beq.n	80017f8 <HAL_DMA_Init+0x3e4>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <HAL_DMA_Init+0x444>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d003      	beq.n	80017f8 <HAL_DMA_Init+0x3e4>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_DMA_Init+0x448>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2202      	movs	r2, #2
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_DMA_Init+0x44c>)
 8001816:	4013      	ands	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b40      	cmp	r3, #64	; 0x40
 8001820:	d020      	beq.n	8001864 <HAL_DMA_Init+0x450>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b80      	cmp	r3, #128	; 0x80
 8001828:	d102      	bne.n	8001830 <HAL_DMA_Init+0x41c>
 800182a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800182e:	e01a      	b.n	8001866 <HAL_DMA_Init+0x452>
 8001830:	2300      	movs	r3, #0
 8001832:	e018      	b.n	8001866 <HAL_DMA_Init+0x452>
 8001834:	fe10803f 	.word	0xfe10803f
 8001838:	5c001000 	.word	0x5c001000
 800183c:	ffff0000 	.word	0xffff0000
 8001840:	58025408 	.word	0x58025408
 8001844:	5802541c 	.word	0x5802541c
 8001848:	58025430 	.word	0x58025430
 800184c:	58025444 	.word	0x58025444
 8001850:	58025458 	.word	0x58025458
 8001854:	5802546c 	.word	0x5802546c
 8001858:	58025480 	.word	0x58025480
 800185c:	58025494 	.word	0x58025494
 8001860:	fffe000f 	.word	0xfffe000f
 8001864:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68d2      	ldr	r2, [r2, #12]
 800186a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800186c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001874:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800187c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001884:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800188c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001894:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b6e      	ldr	r3, [pc, #440]	; (8001a64 <HAL_DMA_Init+0x650>)
 80018ac:	4413      	add	r3, r2
 80018ae:	4a6e      	ldr	r2, [pc, #440]	; (8001a68 <HAL_DMA_Init+0x654>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	009a      	lsls	r2, r3, #2
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f002 fb5d 	bl	8003f7c <DMA_CalcBaseAndBitshift>
 80018c2:	4603      	mov	r3, r0
 80018c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2201      	movs	r2, #1
 80018d0:	409a      	lsls	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	e008      	b.n	80018ea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2203      	movs	r2, #3
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0b7      	b.n	8001a5a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a5f      	ldr	r2, [pc, #380]	; (8001a6c <HAL_DMA_Init+0x658>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d072      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a5d      	ldr	r2, [pc, #372]	; (8001a70 <HAL_DMA_Init+0x65c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d06d      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a5c      	ldr	r2, [pc, #368]	; (8001a74 <HAL_DMA_Init+0x660>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d068      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a5a      	ldr	r2, [pc, #360]	; (8001a78 <HAL_DMA_Init+0x664>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d063      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a59      	ldr	r2, [pc, #356]	; (8001a7c <HAL_DMA_Init+0x668>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d05e      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a57      	ldr	r2, [pc, #348]	; (8001a80 <HAL_DMA_Init+0x66c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d059      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a56      	ldr	r2, [pc, #344]	; (8001a84 <HAL_DMA_Init+0x670>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d054      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a54      	ldr	r2, [pc, #336]	; (8001a88 <HAL_DMA_Init+0x674>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d04f      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a53      	ldr	r2, [pc, #332]	; (8001a8c <HAL_DMA_Init+0x678>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d04a      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <HAL_DMA_Init+0x67c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d045      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a50      	ldr	r2, [pc, #320]	; (8001a94 <HAL_DMA_Init+0x680>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d040      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a4e      	ldr	r2, [pc, #312]	; (8001a98 <HAL_DMA_Init+0x684>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d03b      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a4d      	ldr	r2, [pc, #308]	; (8001a9c <HAL_DMA_Init+0x688>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d036      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <HAL_DMA_Init+0x68c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d031      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_DMA_Init+0x690>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d02c      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_DMA_Init+0x694>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d027      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a47      	ldr	r2, [pc, #284]	; (8001aac <HAL_DMA_Init+0x698>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d022      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a45      	ldr	r2, [pc, #276]	; (8001ab0 <HAL_DMA_Init+0x69c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01d      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a44      	ldr	r2, [pc, #272]	; (8001ab4 <HAL_DMA_Init+0x6a0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d018      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a42      	ldr	r2, [pc, #264]	; (8001ab8 <HAL_DMA_Init+0x6a4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a41      	ldr	r2, [pc, #260]	; (8001abc <HAL_DMA_Init+0x6a8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00e      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <HAL_DMA_Init+0x6ac>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d009      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a3e      	ldr	r2, [pc, #248]	; (8001ac4 <HAL_DMA_Init+0x6b0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d004      	beq.n	80019da <HAL_DMA_Init+0x5c6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a3c      	ldr	r2, [pc, #240]	; (8001ac8 <HAL_DMA_Init+0x6b4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_DMA_Init+0x5ca>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_DMA_Init+0x5cc>
 80019de:	2300      	movs	r3, #0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d032      	beq.n	8001a4a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f002 fbf7 	bl	80041d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b80      	cmp	r3, #128	; 0x80
 80019f0:	d102      	bne.n	80019f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a0c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d010      	beq.n	8001a38 <HAL_DMA_Init+0x624>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d80c      	bhi.n	8001a38 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f002 fc74 	bl	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	e008      	b.n	8001a4a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	a7fdabf8 	.word	0xa7fdabf8
 8001a68:	cccccccd 	.word	0xcccccccd
 8001a6c:	40020010 	.word	0x40020010
 8001a70:	40020028 	.word	0x40020028
 8001a74:	40020040 	.word	0x40020040
 8001a78:	40020058 	.word	0x40020058
 8001a7c:	40020070 	.word	0x40020070
 8001a80:	40020088 	.word	0x40020088
 8001a84:	400200a0 	.word	0x400200a0
 8001a88:	400200b8 	.word	0x400200b8
 8001a8c:	40020410 	.word	0x40020410
 8001a90:	40020428 	.word	0x40020428
 8001a94:	40020440 	.word	0x40020440
 8001a98:	40020458 	.word	0x40020458
 8001a9c:	40020470 	.word	0x40020470
 8001aa0:	40020488 	.word	0x40020488
 8001aa4:	400204a0 	.word	0x400204a0
 8001aa8:	400204b8 	.word	0x400204b8
 8001aac:	58025408 	.word	0x58025408
 8001ab0:	5802541c 	.word	0x5802541c
 8001ab4:	58025430 	.word	0x58025430
 8001ab8:	58025444 	.word	0x58025444
 8001abc:	58025458 	.word	0x58025458
 8001ac0:	5802546c 	.word	0x5802546c
 8001ac4:	58025480 	.word	0x58025480
 8001ac8:	58025494 	.word	0x58025494

08001acc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1a8      	b.n	8001e30 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a82      	ldr	r2, [pc, #520]	; (8001cec <HAL_DMA_DeInit+0x220>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d04a      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a80      	ldr	r2, [pc, #512]	; (8001cf0 <HAL_DMA_DeInit+0x224>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d045      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7f      	ldr	r2, [pc, #508]	; (8001cf4 <HAL_DMA_DeInit+0x228>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d040      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a7d      	ldr	r2, [pc, #500]	; (8001cf8 <HAL_DMA_DeInit+0x22c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d03b      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a7c      	ldr	r2, [pc, #496]	; (8001cfc <HAL_DMA_DeInit+0x230>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d036      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a7a      	ldr	r2, [pc, #488]	; (8001d00 <HAL_DMA_DeInit+0x234>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d031      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a79      	ldr	r2, [pc, #484]	; (8001d04 <HAL_DMA_DeInit+0x238>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d02c      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a77      	ldr	r2, [pc, #476]	; (8001d08 <HAL_DMA_DeInit+0x23c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d027      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a76      	ldr	r2, [pc, #472]	; (8001d0c <HAL_DMA_DeInit+0x240>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d022      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a74      	ldr	r2, [pc, #464]	; (8001d10 <HAL_DMA_DeInit+0x244>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01d      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a73      	ldr	r2, [pc, #460]	; (8001d14 <HAL_DMA_DeInit+0x248>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d018      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a71      	ldr	r2, [pc, #452]	; (8001d18 <HAL_DMA_DeInit+0x24c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a70      	ldr	r2, [pc, #448]	; (8001d1c <HAL_DMA_DeInit+0x250>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d00e      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6e      	ldr	r2, [pc, #440]	; (8001d20 <HAL_DMA_DeInit+0x254>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d009      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6d      	ldr	r2, [pc, #436]	; (8001d24 <HAL_DMA_DeInit+0x258>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d004      	beq.n	8001b7e <HAL_DMA_DeInit+0xb2>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6b      	ldr	r2, [pc, #428]	; (8001d28 <HAL_DMA_DeInit+0x25c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d108      	bne.n	8001b90 <HAL_DMA_DeInit+0xc4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e007      	b.n	8001ba0 <HAL_DMA_DeInit+0xd4>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a51      	ldr	r2, [pc, #324]	; (8001cec <HAL_DMA_DeInit+0x220>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d04a      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_DMA_DeInit+0x224>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d045      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a4e      	ldr	r2, [pc, #312]	; (8001cf4 <HAL_DMA_DeInit+0x228>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d040      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a4d      	ldr	r2, [pc, #308]	; (8001cf8 <HAL_DMA_DeInit+0x22c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d03b      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a4b      	ldr	r2, [pc, #300]	; (8001cfc <HAL_DMA_DeInit+0x230>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d036      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <HAL_DMA_DeInit+0x234>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d031      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a48      	ldr	r2, [pc, #288]	; (8001d04 <HAL_DMA_DeInit+0x238>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d02c      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a47      	ldr	r2, [pc, #284]	; (8001d08 <HAL_DMA_DeInit+0x23c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d027      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a45      	ldr	r2, [pc, #276]	; (8001d0c <HAL_DMA_DeInit+0x240>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d022      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a44      	ldr	r2, [pc, #272]	; (8001d10 <HAL_DMA_DeInit+0x244>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01d      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <HAL_DMA_DeInit+0x248>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d018      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a41      	ldr	r2, [pc, #260]	; (8001d18 <HAL_DMA_DeInit+0x24c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d013      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3f      	ldr	r2, [pc, #252]	; (8001d1c <HAL_DMA_DeInit+0x250>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00e      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a3e      	ldr	r2, [pc, #248]	; (8001d20 <HAL_DMA_DeInit+0x254>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <HAL_DMA_DeInit+0x258>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_DMA_DeInit+0x174>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3b      	ldr	r2, [pc, #236]	; (8001d28 <HAL_DMA_DeInit+0x25c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_DMA_DeInit+0x178>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_DeInit+0x17a>
 8001c44:	2300      	movs	r3, #0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d025      	beq.n	8001c96 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2221      	movs	r2, #33	; 0x21
 8001c78:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f002 f97e 	bl	8003f7c <DMA_CalcBaseAndBitshift>
 8001c80:	4603      	mov	r3, r0
 8001c82:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	223f      	movs	r2, #63	; 0x3f
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	e081      	b.n	8001d9a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_DMA_DeInit+0x260>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d022      	beq.n	8001ce6 <HAL_DMA_DeInit+0x21a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <HAL_DMA_DeInit+0x264>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01d      	beq.n	8001ce6 <HAL_DMA_DeInit+0x21a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <HAL_DMA_DeInit+0x268>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d018      	beq.n	8001ce6 <HAL_DMA_DeInit+0x21a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_DMA_DeInit+0x26c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_DMA_DeInit+0x21a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_DMA_DeInit+0x270>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_DMA_DeInit+0x21a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_DMA_DeInit+0x274>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d009      	beq.n	8001ce6 <HAL_DMA_DeInit+0x21a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_DMA_DeInit+0x278>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d004      	beq.n	8001ce6 <HAL_DMA_DeInit+0x21a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_DMA_DeInit+0x27c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d132      	bne.n	8001d4c <HAL_DMA_DeInit+0x280>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e031      	b.n	8001d4e <HAL_DMA_DeInit+0x282>
 8001cea:	bf00      	nop
 8001cec:	40020010 	.word	0x40020010
 8001cf0:	40020028 	.word	0x40020028
 8001cf4:	40020040 	.word	0x40020040
 8001cf8:	40020058 	.word	0x40020058
 8001cfc:	40020070 	.word	0x40020070
 8001d00:	40020088 	.word	0x40020088
 8001d04:	400200a0 	.word	0x400200a0
 8001d08:	400200b8 	.word	0x400200b8
 8001d0c:	40020410 	.word	0x40020410
 8001d10:	40020428 	.word	0x40020428
 8001d14:	40020440 	.word	0x40020440
 8001d18:	40020458 	.word	0x40020458
 8001d1c:	40020470 	.word	0x40020470
 8001d20:	40020488 	.word	0x40020488
 8001d24:	400204a0 	.word	0x400204a0
 8001d28:	400204b8 	.word	0x400204b8
 8001d2c:	58025408 	.word	0x58025408
 8001d30:	5802541c 	.word	0x5802541c
 8001d34:	58025430 	.word	0x58025430
 8001d38:	58025444 	.word	0x58025444
 8001d3c:	58025458 	.word	0x58025458
 8001d40:	5802546c 	.word	0x5802546c
 8001d44:	58025480 	.word	0x58025480
 8001d48:	58025494 	.word	0x58025494
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d021      	beq.n	8001d96 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f002 f8fe 	bl	8003f7c <DMA_CalcBaseAndBitshift>
 8001d80:	4603      	mov	r3, r0
 8001d82:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	e001      	b.n	8001d9a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e04a      	b.n	8001e30 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f002 fa1c 	bl	80041d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001db8:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00f      	beq.n	8001de2 <HAL_DMA_DeInit+0x316>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d80b      	bhi.n	8001de2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f002 fa9e 	bl	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001de0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e226      	b.n	80022a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Start_IT+0x2a>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e21f      	b.n	80022a2 <HAL_DMA_Start_IT+0x46a>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	f040 820a 	bne.w	800228c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a68      	ldr	r2, [pc, #416]	; (800202c <HAL_DMA_Start_IT+0x1f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d04a      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a66      	ldr	r2, [pc, #408]	; (8002030 <HAL_DMA_Start_IT+0x1f8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d045      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a65      	ldr	r2, [pc, #404]	; (8002034 <HAL_DMA_Start_IT+0x1fc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d040      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a63      	ldr	r2, [pc, #396]	; (8002038 <HAL_DMA_Start_IT+0x200>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d03b      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a62      	ldr	r2, [pc, #392]	; (800203c <HAL_DMA_Start_IT+0x204>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d036      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a60      	ldr	r2, [pc, #384]	; (8002040 <HAL_DMA_Start_IT+0x208>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d031      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5f      	ldr	r2, [pc, #380]	; (8002044 <HAL_DMA_Start_IT+0x20c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d02c      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5d      	ldr	r2, [pc, #372]	; (8002048 <HAL_DMA_Start_IT+0x210>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d027      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5c      	ldr	r2, [pc, #368]	; (800204c <HAL_DMA_Start_IT+0x214>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d022      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5a      	ldr	r2, [pc, #360]	; (8002050 <HAL_DMA_Start_IT+0x218>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01d      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a59      	ldr	r2, [pc, #356]	; (8002054 <HAL_DMA_Start_IT+0x21c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d018      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a57      	ldr	r2, [pc, #348]	; (8002058 <HAL_DMA_Start_IT+0x220>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_DMA_Start_IT+0x224>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00e      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a54      	ldr	r2, [pc, #336]	; (8002060 <HAL_DMA_Start_IT+0x228>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a53      	ldr	r2, [pc, #332]	; (8002064 <HAL_DMA_Start_IT+0x22c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d004      	beq.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a51      	ldr	r2, [pc, #324]	; (8002068 <HAL_DMA_Start_IT+0x230>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d108      	bne.n	8001f38 <HAL_DMA_Start_IT+0x100>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e007      	b.n	8001f48 <HAL_DMA_Start_IT+0x110>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f001 fe68 	bl	8003c24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_DMA_Start_IT+0x1f4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d04a      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a33      	ldr	r2, [pc, #204]	; (8002030 <HAL_DMA_Start_IT+0x1f8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d045      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a31      	ldr	r2, [pc, #196]	; (8002034 <HAL_DMA_Start_IT+0x1fc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d040      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a30      	ldr	r2, [pc, #192]	; (8002038 <HAL_DMA_Start_IT+0x200>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d03b      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <HAL_DMA_Start_IT+0x204>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d036      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	; (8002040 <HAL_DMA_Start_IT+0x208>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d031      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <HAL_DMA_Start_IT+0x20c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02c      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <HAL_DMA_Start_IT+0x210>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d027      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a28      	ldr	r2, [pc, #160]	; (800204c <HAL_DMA_Start_IT+0x214>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d022      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_DMA_Start_IT+0x218>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d01d      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a25      	ldr	r2, [pc, #148]	; (8002054 <HAL_DMA_Start_IT+0x21c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d018      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a24      	ldr	r2, [pc, #144]	; (8002058 <HAL_DMA_Start_IT+0x220>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a22      	ldr	r2, [pc, #136]	; (800205c <HAL_DMA_Start_IT+0x224>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00e      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a21      	ldr	r2, [pc, #132]	; (8002060 <HAL_DMA_Start_IT+0x228>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <HAL_DMA_Start_IT+0x22c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x1bc>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_DMA_Start_IT+0x230>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_DMA_Start_IT+0x1c0>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_Start_IT+0x1c2>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d036      	beq.n	800206c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 021e 	bic.w	r2, r3, #30
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0216 	orr.w	r2, r2, #22
 8002010:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d03e      	beq.n	8002098 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0208 	orr.w	r2, r2, #8
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e035      	b.n	8002098 <HAL_DMA_Start_IT+0x260>
 800202c:	40020010 	.word	0x40020010
 8002030:	40020028 	.word	0x40020028
 8002034:	40020040 	.word	0x40020040
 8002038:	40020058 	.word	0x40020058
 800203c:	40020070 	.word	0x40020070
 8002040:	40020088 	.word	0x40020088
 8002044:	400200a0 	.word	0x400200a0
 8002048:	400200b8 	.word	0x400200b8
 800204c:	40020410 	.word	0x40020410
 8002050:	40020428 	.word	0x40020428
 8002054:	40020440 	.word	0x40020440
 8002058:	40020458 	.word	0x40020458
 800205c:	40020470 	.word	0x40020470
 8002060:	40020488 	.word	0x40020488
 8002064:	400204a0 	.word	0x400204a0
 8002068:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 020e 	bic.w	r2, r3, #14
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 020a 	orr.w	r2, r2, #10
 800207e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0204 	orr.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a83      	ldr	r2, [pc, #524]	; (80022ac <HAL_DMA_Start_IT+0x474>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d072      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a82      	ldr	r2, [pc, #520]	; (80022b0 <HAL_DMA_Start_IT+0x478>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d06d      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a80      	ldr	r2, [pc, #512]	; (80022b4 <HAL_DMA_Start_IT+0x47c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d068      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a7f      	ldr	r2, [pc, #508]	; (80022b8 <HAL_DMA_Start_IT+0x480>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d063      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a7d      	ldr	r2, [pc, #500]	; (80022bc <HAL_DMA_Start_IT+0x484>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d05e      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7c      	ldr	r2, [pc, #496]	; (80022c0 <HAL_DMA_Start_IT+0x488>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d059      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a7a      	ldr	r2, [pc, #488]	; (80022c4 <HAL_DMA_Start_IT+0x48c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d054      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a79      	ldr	r2, [pc, #484]	; (80022c8 <HAL_DMA_Start_IT+0x490>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04f      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a77      	ldr	r2, [pc, #476]	; (80022cc <HAL_DMA_Start_IT+0x494>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d04a      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a76      	ldr	r2, [pc, #472]	; (80022d0 <HAL_DMA_Start_IT+0x498>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d045      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a74      	ldr	r2, [pc, #464]	; (80022d4 <HAL_DMA_Start_IT+0x49c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d040      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a73      	ldr	r2, [pc, #460]	; (80022d8 <HAL_DMA_Start_IT+0x4a0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d03b      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a71      	ldr	r2, [pc, #452]	; (80022dc <HAL_DMA_Start_IT+0x4a4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d036      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a70      	ldr	r2, [pc, #448]	; (80022e0 <HAL_DMA_Start_IT+0x4a8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d031      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6e      	ldr	r2, [pc, #440]	; (80022e4 <HAL_DMA_Start_IT+0x4ac>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d02c      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6d      	ldr	r2, [pc, #436]	; (80022e8 <HAL_DMA_Start_IT+0x4b0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d027      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6b      	ldr	r2, [pc, #428]	; (80022ec <HAL_DMA_Start_IT+0x4b4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d022      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6a      	ldr	r2, [pc, #424]	; (80022f0 <HAL_DMA_Start_IT+0x4b8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d01d      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a68      	ldr	r2, [pc, #416]	; (80022f4 <HAL_DMA_Start_IT+0x4bc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d018      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_DMA_Start_IT+0x4c0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a65      	ldr	r2, [pc, #404]	; (80022fc <HAL_DMA_Start_IT+0x4c4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00e      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a64      	ldr	r2, [pc, #400]	; (8002300 <HAL_DMA_Start_IT+0x4c8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a62      	ldr	r2, [pc, #392]	; (8002304 <HAL_DMA_Start_IT+0x4cc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_DMA_Start_IT+0x350>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a61      	ldr	r2, [pc, #388]	; (8002308 <HAL_DMA_Start_IT+0x4d0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_DMA_Start_IT+0x354>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_DMA_Start_IT+0x356>
 800218c:	2300      	movs	r3, #0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01a      	beq.n	80021c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a37      	ldr	r2, [pc, #220]	; (80022ac <HAL_DMA_Start_IT+0x474>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d04a      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a36      	ldr	r2, [pc, #216]	; (80022b0 <HAL_DMA_Start_IT+0x478>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d045      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <HAL_DMA_Start_IT+0x47c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d040      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a33      	ldr	r2, [pc, #204]	; (80022b8 <HAL_DMA_Start_IT+0x480>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d03b      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a31      	ldr	r2, [pc, #196]	; (80022bc <HAL_DMA_Start_IT+0x484>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d036      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a30      	ldr	r2, [pc, #192]	; (80022c0 <HAL_DMA_Start_IT+0x488>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d031      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2e      	ldr	r2, [pc, #184]	; (80022c4 <HAL_DMA_Start_IT+0x48c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02c      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <HAL_DMA_Start_IT+0x490>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d027      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <HAL_DMA_Start_IT+0x494>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d022      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <HAL_DMA_Start_IT+0x498>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d01d      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <HAL_DMA_Start_IT+0x49c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d018      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_DMA_Start_IT+0x4a0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a25      	ldr	r2, [pc, #148]	; (80022dc <HAL_DMA_Start_IT+0x4a4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00e      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <HAL_DMA_Start_IT+0x4a8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_DMA_Start_IT+0x4ac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_DMA_Start_IT+0x430>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_DMA_Start_IT+0x4b0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d108      	bne.n	800227a <HAL_DMA_Start_IT+0x442>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e012      	b.n	80022a0 <HAL_DMA_Start_IT+0x468>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e009      	b.n	80022a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800229a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40020010 	.word	0x40020010
 80022b0:	40020028 	.word	0x40020028
 80022b4:	40020040 	.word	0x40020040
 80022b8:	40020058 	.word	0x40020058
 80022bc:	40020070 	.word	0x40020070
 80022c0:	40020088 	.word	0x40020088
 80022c4:	400200a0 	.word	0x400200a0
 80022c8:	400200b8 	.word	0x400200b8
 80022cc:	40020410 	.word	0x40020410
 80022d0:	40020428 	.word	0x40020428
 80022d4:	40020440 	.word	0x40020440
 80022d8:	40020458 	.word	0x40020458
 80022dc:	40020470 	.word	0x40020470
 80022e0:	40020488 	.word	0x40020488
 80022e4:	400204a0 	.word	0x400204a0
 80022e8:	400204b8 	.word	0x400204b8
 80022ec:	58025408 	.word	0x58025408
 80022f0:	5802541c 	.word	0x5802541c
 80022f4:	58025430 	.word	0x58025430
 80022f8:	58025444 	.word	0x58025444
 80022fc:	58025458 	.word	0x58025458
 8002300:	5802546c 	.word	0x5802546c
 8002304:	58025480 	.word	0x58025480
 8002308:	58025494 	.word	0x58025494

0800230c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002314:	f7fe ff00 	bl	8001118 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e2dc      	b.n	80028de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d008      	beq.n	8002342 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e2cd      	b.n	80028de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a76      	ldr	r2, [pc, #472]	; (8002520 <HAL_DMA_Abort+0x214>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d04a      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a74      	ldr	r2, [pc, #464]	; (8002524 <HAL_DMA_Abort+0x218>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d045      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a73      	ldr	r2, [pc, #460]	; (8002528 <HAL_DMA_Abort+0x21c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d040      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a71      	ldr	r2, [pc, #452]	; (800252c <HAL_DMA_Abort+0x220>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d03b      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a70      	ldr	r2, [pc, #448]	; (8002530 <HAL_DMA_Abort+0x224>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d036      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_DMA_Abort+0x228>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d031      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6d      	ldr	r2, [pc, #436]	; (8002538 <HAL_DMA_Abort+0x22c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d02c      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6b      	ldr	r2, [pc, #428]	; (800253c <HAL_DMA_Abort+0x230>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d027      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6a      	ldr	r2, [pc, #424]	; (8002540 <HAL_DMA_Abort+0x234>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d022      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a68      	ldr	r2, [pc, #416]	; (8002544 <HAL_DMA_Abort+0x238>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01d      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a67      	ldr	r2, [pc, #412]	; (8002548 <HAL_DMA_Abort+0x23c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d018      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a65      	ldr	r2, [pc, #404]	; (800254c <HAL_DMA_Abort+0x240>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a64      	ldr	r2, [pc, #400]	; (8002550 <HAL_DMA_Abort+0x244>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00e      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a62      	ldr	r2, [pc, #392]	; (8002554 <HAL_DMA_Abort+0x248>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a61      	ldr	r2, [pc, #388]	; (8002558 <HAL_DMA_Abort+0x24c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_DMA_Abort+0xd6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a5f      	ldr	r2, [pc, #380]	; (800255c <HAL_DMA_Abort+0x250>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_DMA_Abort+0xda>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_DMA_Abort+0xdc>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 021e 	bic.w	r2, r2, #30
 80023fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800240a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e00a      	b.n	800242a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 020e 	bic.w	r2, r2, #14
 8002422:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a3c      	ldr	r2, [pc, #240]	; (8002520 <HAL_DMA_Abort+0x214>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d072      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <HAL_DMA_Abort+0x218>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d06d      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a39      	ldr	r2, [pc, #228]	; (8002528 <HAL_DMA_Abort+0x21c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d068      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a37      	ldr	r2, [pc, #220]	; (800252c <HAL_DMA_Abort+0x220>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d063      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a36      	ldr	r2, [pc, #216]	; (8002530 <HAL_DMA_Abort+0x224>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d05e      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a34      	ldr	r2, [pc, #208]	; (8002534 <HAL_DMA_Abort+0x228>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d059      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a33      	ldr	r2, [pc, #204]	; (8002538 <HAL_DMA_Abort+0x22c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d054      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a31      	ldr	r2, [pc, #196]	; (800253c <HAL_DMA_Abort+0x230>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d04f      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a30      	ldr	r2, [pc, #192]	; (8002540 <HAL_DMA_Abort+0x234>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d04a      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2e      	ldr	r2, [pc, #184]	; (8002544 <HAL_DMA_Abort+0x238>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d045      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2d      	ldr	r2, [pc, #180]	; (8002548 <HAL_DMA_Abort+0x23c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d040      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_DMA_Abort+0x240>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d03b      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <HAL_DMA_Abort+0x244>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d036      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_DMA_Abort+0x248>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d031      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_DMA_Abort+0x24c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d02c      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a25      	ldr	r2, [pc, #148]	; (800255c <HAL_DMA_Abort+0x250>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d027      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a24      	ldr	r2, [pc, #144]	; (8002560 <HAL_DMA_Abort+0x254>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_DMA_Abort+0x258>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01d      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a21      	ldr	r2, [pc, #132]	; (8002568 <HAL_DMA_Abort+0x25c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d018      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_DMA_Abort+0x260>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <HAL_DMA_Abort+0x264>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00e      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_DMA_Abort+0x268>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d009      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_DMA_Abort+0x26c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d004      	beq.n	800251a <HAL_DMA_Abort+0x20e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_DMA_Abort+0x270>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d132      	bne.n	8002580 <HAL_DMA_Abort+0x274>
 800251a:	2301      	movs	r3, #1
 800251c:	e031      	b.n	8002582 <HAL_DMA_Abort+0x276>
 800251e:	bf00      	nop
 8002520:	40020010 	.word	0x40020010
 8002524:	40020028 	.word	0x40020028
 8002528:	40020040 	.word	0x40020040
 800252c:	40020058 	.word	0x40020058
 8002530:	40020070 	.word	0x40020070
 8002534:	40020088 	.word	0x40020088
 8002538:	400200a0 	.word	0x400200a0
 800253c:	400200b8 	.word	0x400200b8
 8002540:	40020410 	.word	0x40020410
 8002544:	40020428 	.word	0x40020428
 8002548:	40020440 	.word	0x40020440
 800254c:	40020458 	.word	0x40020458
 8002550:	40020470 	.word	0x40020470
 8002554:	40020488 	.word	0x40020488
 8002558:	400204a0 	.word	0x400204a0
 800255c:	400204b8 	.word	0x400204b8
 8002560:	58025408 	.word	0x58025408
 8002564:	5802541c 	.word	0x5802541c
 8002568:	58025430 	.word	0x58025430
 800256c:	58025444 	.word	0x58025444
 8002570:	58025458 	.word	0x58025458
 8002574:	5802546c 	.word	0x5802546c
 8002578:	58025480 	.word	0x58025480
 800257c:	58025494 	.word	0x58025494
 8002580:	2300      	movs	r3, #0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002594:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6d      	ldr	r2, [pc, #436]	; (8002750 <HAL_DMA_Abort+0x444>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04a      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a6b      	ldr	r2, [pc, #428]	; (8002754 <HAL_DMA_Abort+0x448>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d045      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6a      	ldr	r2, [pc, #424]	; (8002758 <HAL_DMA_Abort+0x44c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d040      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a68      	ldr	r2, [pc, #416]	; (800275c <HAL_DMA_Abort+0x450>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d03b      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a67      	ldr	r2, [pc, #412]	; (8002760 <HAL_DMA_Abort+0x454>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d036      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_DMA_Abort+0x458>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d031      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a64      	ldr	r2, [pc, #400]	; (8002768 <HAL_DMA_Abort+0x45c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02c      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a62      	ldr	r2, [pc, #392]	; (800276c <HAL_DMA_Abort+0x460>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d027      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a61      	ldr	r2, [pc, #388]	; (8002770 <HAL_DMA_Abort+0x464>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5f      	ldr	r2, [pc, #380]	; (8002774 <HAL_DMA_Abort+0x468>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5e      	ldr	r2, [pc, #376]	; (8002778 <HAL_DMA_Abort+0x46c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d018      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5c      	ldr	r2, [pc, #368]	; (800277c <HAL_DMA_Abort+0x470>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5b      	ldr	r2, [pc, #364]	; (8002780 <HAL_DMA_Abort+0x474>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a59      	ldr	r2, [pc, #356]	; (8002784 <HAL_DMA_Abort+0x478>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_DMA_Abort+0x47c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_Abort+0x32a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a56      	ldr	r2, [pc, #344]	; (800278c <HAL_DMA_Abort+0x480>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <HAL_DMA_Abort+0x33c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e007      	b.n	8002658 <HAL_DMA_Abort+0x34c>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002658:	e013      	b.n	8002682 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800265a:	f7fe fd5d 	bl	8001118 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b05      	cmp	r3, #5
 8002666:	d90c      	bls.n	8002682 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2203      	movs	r2, #3
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e12d      	b.n	80028de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e5      	bne.n	800265a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <HAL_DMA_Abort+0x444>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d04a      	beq.n	800272e <HAL_DMA_Abort+0x422>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2d      	ldr	r2, [pc, #180]	; (8002754 <HAL_DMA_Abort+0x448>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d045      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2c      	ldr	r2, [pc, #176]	; (8002758 <HAL_DMA_Abort+0x44c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d040      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2a      	ldr	r2, [pc, #168]	; (800275c <HAL_DMA_Abort+0x450>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d03b      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <HAL_DMA_Abort+0x454>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d036      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_DMA_Abort+0x458>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d031      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a26      	ldr	r2, [pc, #152]	; (8002768 <HAL_DMA_Abort+0x45c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d02c      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a24      	ldr	r2, [pc, #144]	; (800276c <HAL_DMA_Abort+0x460>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d027      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a23      	ldr	r2, [pc, #140]	; (8002770 <HAL_DMA_Abort+0x464>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d022      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a21      	ldr	r2, [pc, #132]	; (8002774 <HAL_DMA_Abort+0x468>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01d      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a20      	ldr	r2, [pc, #128]	; (8002778 <HAL_DMA_Abort+0x46c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d018      	beq.n	800272e <HAL_DMA_Abort+0x422>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_DMA_Abort+0x470>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_DMA_Abort+0x422>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_DMA_Abort+0x474>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00e      	beq.n	800272e <HAL_DMA_Abort+0x422>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <HAL_DMA_Abort+0x478>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d009      	beq.n	800272e <HAL_DMA_Abort+0x422>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_DMA_Abort+0x47c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d004      	beq.n	800272e <HAL_DMA_Abort+0x422>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <HAL_DMA_Abort+0x480>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_DMA_Abort+0x426>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_DMA_Abort+0x428>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d02b      	beq.n	8002790 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	223f      	movs	r2, #63	; 0x3f
 8002748:	409a      	lsls	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	e02a      	b.n	80027a6 <HAL_DMA_Abort+0x49a>
 8002750:	40020010 	.word	0x40020010
 8002754:	40020028 	.word	0x40020028
 8002758:	40020040 	.word	0x40020040
 800275c:	40020058 	.word	0x40020058
 8002760:	40020070 	.word	0x40020070
 8002764:	40020088 	.word	0x40020088
 8002768:	400200a0 	.word	0x400200a0
 800276c:	400200b8 	.word	0x400200b8
 8002770:	40020410 	.word	0x40020410
 8002774:	40020428 	.word	0x40020428
 8002778:	40020440 	.word	0x40020440
 800277c:	40020458 	.word	0x40020458
 8002780:	40020470 	.word	0x40020470
 8002784:	40020488 	.word	0x40020488
 8002788:	400204a0 	.word	0x400204a0
 800278c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2201      	movs	r2, #1
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a4f      	ldr	r2, [pc, #316]	; (80028e8 <HAL_DMA_Abort+0x5dc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d072      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a4d      	ldr	r2, [pc, #308]	; (80028ec <HAL_DMA_Abort+0x5e0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d06d      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a4c      	ldr	r2, [pc, #304]	; (80028f0 <HAL_DMA_Abort+0x5e4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d068      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a4a      	ldr	r2, [pc, #296]	; (80028f4 <HAL_DMA_Abort+0x5e8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d063      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a49      	ldr	r2, [pc, #292]	; (80028f8 <HAL_DMA_Abort+0x5ec>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d05e      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a47      	ldr	r2, [pc, #284]	; (80028fc <HAL_DMA_Abort+0x5f0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d059      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a46      	ldr	r2, [pc, #280]	; (8002900 <HAL_DMA_Abort+0x5f4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d054      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a44      	ldr	r2, [pc, #272]	; (8002904 <HAL_DMA_Abort+0x5f8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d04f      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a43      	ldr	r2, [pc, #268]	; (8002908 <HAL_DMA_Abort+0x5fc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d04a      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a41      	ldr	r2, [pc, #260]	; (800290c <HAL_DMA_Abort+0x600>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d045      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a40      	ldr	r2, [pc, #256]	; (8002910 <HAL_DMA_Abort+0x604>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d040      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3e      	ldr	r2, [pc, #248]	; (8002914 <HAL_DMA_Abort+0x608>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d03b      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3d      	ldr	r2, [pc, #244]	; (8002918 <HAL_DMA_Abort+0x60c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d036      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a3b      	ldr	r2, [pc, #236]	; (800291c <HAL_DMA_Abort+0x610>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d031      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a3a      	ldr	r2, [pc, #232]	; (8002920 <HAL_DMA_Abort+0x614>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d02c      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a38      	ldr	r2, [pc, #224]	; (8002924 <HAL_DMA_Abort+0x618>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d027      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a37      	ldr	r2, [pc, #220]	; (8002928 <HAL_DMA_Abort+0x61c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d022      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a35      	ldr	r2, [pc, #212]	; (800292c <HAL_DMA_Abort+0x620>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01d      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a34      	ldr	r2, [pc, #208]	; (8002930 <HAL_DMA_Abort+0x624>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d018      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a32      	ldr	r2, [pc, #200]	; (8002934 <HAL_DMA_Abort+0x628>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a31      	ldr	r2, [pc, #196]	; (8002938 <HAL_DMA_Abort+0x62c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00e      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2f      	ldr	r2, [pc, #188]	; (800293c <HAL_DMA_Abort+0x630>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <HAL_DMA_Abort+0x634>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d004      	beq.n	8002896 <HAL_DMA_Abort+0x58a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <HAL_DMA_Abort+0x638>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_DMA_Abort+0x58e>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_DMA_Abort+0x590>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00c      	beq.n	80028cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40020010 	.word	0x40020010
 80028ec:	40020028 	.word	0x40020028
 80028f0:	40020040 	.word	0x40020040
 80028f4:	40020058 	.word	0x40020058
 80028f8:	40020070 	.word	0x40020070
 80028fc:	40020088 	.word	0x40020088
 8002900:	400200a0 	.word	0x400200a0
 8002904:	400200b8 	.word	0x400200b8
 8002908:	40020410 	.word	0x40020410
 800290c:	40020428 	.word	0x40020428
 8002910:	40020440 	.word	0x40020440
 8002914:	40020458 	.word	0x40020458
 8002918:	40020470 	.word	0x40020470
 800291c:	40020488 	.word	0x40020488
 8002920:	400204a0 	.word	0x400204a0
 8002924:	400204b8 	.word	0x400204b8
 8002928:	58025408 	.word	0x58025408
 800292c:	5802541c 	.word	0x5802541c
 8002930:	58025430 	.word	0x58025430
 8002934:	58025444 	.word	0x58025444
 8002938:	58025458 	.word	0x58025458
 800293c:	5802546c 	.word	0x5802546c
 8002940:	58025480 	.word	0x58025480
 8002944:	58025494 	.word	0x58025494

08002948 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e205      	b.n	8002d66 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d004      	beq.n	8002970 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e1fa      	b.n	8002d66 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a8c      	ldr	r2, [pc, #560]	; (8002ba8 <HAL_DMA_Abort_IT+0x260>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d04a      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a8b      	ldr	r2, [pc, #556]	; (8002bac <HAL_DMA_Abort_IT+0x264>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d045      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a89      	ldr	r2, [pc, #548]	; (8002bb0 <HAL_DMA_Abort_IT+0x268>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d040      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a88      	ldr	r2, [pc, #544]	; (8002bb4 <HAL_DMA_Abort_IT+0x26c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d03b      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a86      	ldr	r2, [pc, #536]	; (8002bb8 <HAL_DMA_Abort_IT+0x270>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d036      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a85      	ldr	r2, [pc, #532]	; (8002bbc <HAL_DMA_Abort_IT+0x274>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d031      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a83      	ldr	r2, [pc, #524]	; (8002bc0 <HAL_DMA_Abort_IT+0x278>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02c      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a82      	ldr	r2, [pc, #520]	; (8002bc4 <HAL_DMA_Abort_IT+0x27c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d027      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a80      	ldr	r2, [pc, #512]	; (8002bc8 <HAL_DMA_Abort_IT+0x280>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d022      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7f      	ldr	r2, [pc, #508]	; (8002bcc <HAL_DMA_Abort_IT+0x284>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d01d      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a7d      	ldr	r2, [pc, #500]	; (8002bd0 <HAL_DMA_Abort_IT+0x288>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d018      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7c      	ldr	r2, [pc, #496]	; (8002bd4 <HAL_DMA_Abort_IT+0x28c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a7a      	ldr	r2, [pc, #488]	; (8002bd8 <HAL_DMA_Abort_IT+0x290>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00e      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a79      	ldr	r2, [pc, #484]	; (8002bdc <HAL_DMA_Abort_IT+0x294>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a77      	ldr	r2, [pc, #476]	; (8002be0 <HAL_DMA_Abort_IT+0x298>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a76      	ldr	r2, [pc, #472]	; (8002be4 <HAL_DMA_Abort_IT+0x29c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Abort_IT+0xcc>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <HAL_DMA_Abort_IT+0xce>
 8002a14:	2300      	movs	r3, #0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d065      	beq.n	8002ae6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a60      	ldr	r2, [pc, #384]	; (8002ba8 <HAL_DMA_Abort_IT+0x260>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04a      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5e      	ldr	r2, [pc, #376]	; (8002bac <HAL_DMA_Abort_IT+0x264>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d045      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5d      	ldr	r2, [pc, #372]	; (8002bb0 <HAL_DMA_Abort_IT+0x268>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d040      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5b      	ldr	r2, [pc, #364]	; (8002bb4 <HAL_DMA_Abort_IT+0x26c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d03b      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5a      	ldr	r2, [pc, #360]	; (8002bb8 <HAL_DMA_Abort_IT+0x270>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d036      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <HAL_DMA_Abort_IT+0x274>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d031      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <HAL_DMA_Abort_IT+0x278>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02c      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a55      	ldr	r2, [pc, #340]	; (8002bc4 <HAL_DMA_Abort_IT+0x27c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a54      	ldr	r2, [pc, #336]	; (8002bc8 <HAL_DMA_Abort_IT+0x280>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a52      	ldr	r2, [pc, #328]	; (8002bcc <HAL_DMA_Abort_IT+0x284>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a51      	ldr	r2, [pc, #324]	; (8002bd0 <HAL_DMA_Abort_IT+0x288>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4f      	ldr	r2, [pc, #316]	; (8002bd4 <HAL_DMA_Abort_IT+0x28c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a4e      	ldr	r2, [pc, #312]	; (8002bd8 <HAL_DMA_Abort_IT+0x290>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a4c      	ldr	r2, [pc, #304]	; (8002bdc <HAL_DMA_Abort_IT+0x294>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a4b      	ldr	r2, [pc, #300]	; (8002be0 <HAL_DMA_Abort_IT+0x298>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a49      	ldr	r2, [pc, #292]	; (8002be4 <HAL_DMA_Abort_IT+0x29c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d108      	bne.n	8002ad4 <HAL_DMA_Abort_IT+0x18c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e147      	b.n	8002d64 <HAL_DMA_Abort_IT+0x41c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e13e      	b.n	8002d64 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 020e 	bic.w	r2, r2, #14
 8002af4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <HAL_DMA_Abort_IT+0x260>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d04a      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a29      	ldr	r2, [pc, #164]	; (8002bac <HAL_DMA_Abort_IT+0x264>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d045      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a28      	ldr	r2, [pc, #160]	; (8002bb0 <HAL_DMA_Abort_IT+0x268>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d040      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a26      	ldr	r2, [pc, #152]	; (8002bb4 <HAL_DMA_Abort_IT+0x26c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d03b      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a25      	ldr	r2, [pc, #148]	; (8002bb8 <HAL_DMA_Abort_IT+0x270>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d036      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <HAL_DMA_Abort_IT+0x274>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <HAL_DMA_Abort_IT+0x278>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d02c      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <HAL_DMA_Abort_IT+0x27c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d027      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <HAL_DMA_Abort_IT+0x280>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d022      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_DMA_Abort_IT+0x284>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01d      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <HAL_DMA_Abort_IT+0x288>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <HAL_DMA_Abort_IT+0x28c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <HAL_DMA_Abort_IT+0x290>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a17      	ldr	r2, [pc, #92]	; (8002bdc <HAL_DMA_Abort_IT+0x294>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <HAL_DMA_Abort_IT+0x298>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x24e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_DMA_Abort_IT+0x29c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d128      	bne.n	8002be8 <HAL_DMA_Abort_IT+0x2a0>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e027      	b.n	8002bf8 <HAL_DMA_Abort_IT+0x2b0>
 8002ba8:	40020010 	.word	0x40020010
 8002bac:	40020028 	.word	0x40020028
 8002bb0:	40020040 	.word	0x40020040
 8002bb4:	40020058 	.word	0x40020058
 8002bb8:	40020070 	.word	0x40020070
 8002bbc:	40020088 	.word	0x40020088
 8002bc0:	400200a0 	.word	0x400200a0
 8002bc4:	400200b8 	.word	0x400200b8
 8002bc8:	40020410 	.word	0x40020410
 8002bcc:	40020428 	.word	0x40020428
 8002bd0:	40020440 	.word	0x40020440
 8002bd4:	40020458 	.word	0x40020458
 8002bd8:	40020470 	.word	0x40020470
 8002bdc:	40020488 	.word	0x40020488
 8002be0:	400204a0 	.word	0x400204a0
 8002be4:	400204b8 	.word	0x400204b8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a5c      	ldr	r2, [pc, #368]	; (8002d70 <HAL_DMA_Abort_IT+0x428>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d072      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a5b      	ldr	r2, [pc, #364]	; (8002d74 <HAL_DMA_Abort_IT+0x42c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d06d      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a59      	ldr	r2, [pc, #356]	; (8002d78 <HAL_DMA_Abort_IT+0x430>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d068      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_DMA_Abort_IT+0x434>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d063      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a56      	ldr	r2, [pc, #344]	; (8002d80 <HAL_DMA_Abort_IT+0x438>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d05e      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a55      	ldr	r2, [pc, #340]	; (8002d84 <HAL_DMA_Abort_IT+0x43c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d059      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a53      	ldr	r2, [pc, #332]	; (8002d88 <HAL_DMA_Abort_IT+0x440>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d054      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_DMA_Abort_IT+0x444>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04f      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_DMA_Abort_IT+0x448>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d04a      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a4f      	ldr	r2, [pc, #316]	; (8002d94 <HAL_DMA_Abort_IT+0x44c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d045      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4d      	ldr	r2, [pc, #308]	; (8002d98 <HAL_DMA_Abort_IT+0x450>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d040      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a4c      	ldr	r2, [pc, #304]	; (8002d9c <HAL_DMA_Abort_IT+0x454>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d03b      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a4a      	ldr	r2, [pc, #296]	; (8002da0 <HAL_DMA_Abort_IT+0x458>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d036      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a49      	ldr	r2, [pc, #292]	; (8002da4 <HAL_DMA_Abort_IT+0x45c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d031      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a47      	ldr	r2, [pc, #284]	; (8002da8 <HAL_DMA_Abort_IT+0x460>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02c      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a46      	ldr	r2, [pc, #280]	; (8002dac <HAL_DMA_Abort_IT+0x464>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d027      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a44      	ldr	r2, [pc, #272]	; (8002db0 <HAL_DMA_Abort_IT+0x468>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d022      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a43      	ldr	r2, [pc, #268]	; (8002db4 <HAL_DMA_Abort_IT+0x46c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d01d      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a41      	ldr	r2, [pc, #260]	; (8002db8 <HAL_DMA_Abort_IT+0x470>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d018      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a40      	ldr	r2, [pc, #256]	; (8002dbc <HAL_DMA_Abort_IT+0x474>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3e      	ldr	r2, [pc, #248]	; (8002dc0 <HAL_DMA_Abort_IT+0x478>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00e      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3d      	ldr	r2, [pc, #244]	; (8002dc4 <HAL_DMA_Abort_IT+0x47c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3b      	ldr	r2, [pc, #236]	; (8002dc8 <HAL_DMA_Abort_IT+0x480>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x3a0>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a3a      	ldr	r2, [pc, #232]	; (8002dcc <HAL_DMA_Abort_IT+0x484>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_DMA_Abort_IT+0x3a4>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_DMA_Abort_IT+0x3a6>
 8002cec:	2300      	movs	r3, #0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d028      	beq.n	8002d44 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d00:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2201      	movs	r2, #1
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d20:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00c      	beq.n	8002d44 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d38:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d42:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40020010 	.word	0x40020010
 8002d74:	40020028 	.word	0x40020028
 8002d78:	40020040 	.word	0x40020040
 8002d7c:	40020058 	.word	0x40020058
 8002d80:	40020070 	.word	0x40020070
 8002d84:	40020088 	.word	0x40020088
 8002d88:	400200a0 	.word	0x400200a0
 8002d8c:	400200b8 	.word	0x400200b8
 8002d90:	40020410 	.word	0x40020410
 8002d94:	40020428 	.word	0x40020428
 8002d98:	40020440 	.word	0x40020440
 8002d9c:	40020458 	.word	0x40020458
 8002da0:	40020470 	.word	0x40020470
 8002da4:	40020488 	.word	0x40020488
 8002da8:	400204a0 	.word	0x400204a0
 8002dac:	400204b8 	.word	0x400204b8
 8002db0:	58025408 	.word	0x58025408
 8002db4:	5802541c 	.word	0x5802541c
 8002db8:	58025430 	.word	0x58025430
 8002dbc:	58025444 	.word	0x58025444
 8002dc0:	58025458 	.word	0x58025458
 8002dc4:	5802546c 	.word	0x5802546c
 8002dc8:	58025480 	.word	0x58025480
 8002dcc:	58025494 	.word	0x58025494

08002dd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ddc:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <HAL_DMA_IRQHandler+0x1ac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a67      	ldr	r2, [pc, #412]	; (8002f80 <HAL_DMA_IRQHandler+0x1b0>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0a9b      	lsrs	r3, r3, #10
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5f      	ldr	r2, [pc, #380]	; (8002f84 <HAL_DMA_IRQHandler+0x1b4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04a      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5d      	ldr	r2, [pc, #372]	; (8002f88 <HAL_DMA_IRQHandler+0x1b8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d045      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5c      	ldr	r2, [pc, #368]	; (8002f8c <HAL_DMA_IRQHandler+0x1bc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d040      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a5a      	ldr	r2, [pc, #360]	; (8002f90 <HAL_DMA_IRQHandler+0x1c0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d03b      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a59      	ldr	r2, [pc, #356]	; (8002f94 <HAL_DMA_IRQHandler+0x1c4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d036      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a57      	ldr	r2, [pc, #348]	; (8002f98 <HAL_DMA_IRQHandler+0x1c8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a56      	ldr	r2, [pc, #344]	; (8002f9c <HAL_DMA_IRQHandler+0x1cc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d02c      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a54      	ldr	r2, [pc, #336]	; (8002fa0 <HAL_DMA_IRQHandler+0x1d0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d027      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a53      	ldr	r2, [pc, #332]	; (8002fa4 <HAL_DMA_IRQHandler+0x1d4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a51      	ldr	r2, [pc, #324]	; (8002fa8 <HAL_DMA_IRQHandler+0x1d8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a50      	ldr	r2, [pc, #320]	; (8002fac <HAL_DMA_IRQHandler+0x1dc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d018      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a4e      	ldr	r2, [pc, #312]	; (8002fb0 <HAL_DMA_IRQHandler+0x1e0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a4d      	ldr	r2, [pc, #308]	; (8002fb4 <HAL_DMA_IRQHandler+0x1e4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_DMA_IRQHandler+0x1e8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <HAL_DMA_IRQHandler+0x1ec>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a48      	ldr	r2, [pc, #288]	; (8002fc0 <HAL_DMA_IRQHandler+0x1f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0xd6>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_DMA_IRQHandler+0xd8>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 842b 	beq.w	8003704 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80a2 	beq.w	8003008 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2e      	ldr	r2, [pc, #184]	; (8002f84 <HAL_DMA_IRQHandler+0x1b4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04a      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <HAL_DMA_IRQHandler+0x1b8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d045      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2b      	ldr	r2, [pc, #172]	; (8002f8c <HAL_DMA_IRQHandler+0x1bc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d040      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <HAL_DMA_IRQHandler+0x1c0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03b      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	; (8002f94 <HAL_DMA_IRQHandler+0x1c4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d036      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <HAL_DMA_IRQHandler+0x1c8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d031      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a25      	ldr	r2, [pc, #148]	; (8002f9c <HAL_DMA_IRQHandler+0x1cc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02c      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <HAL_DMA_IRQHandler+0x1d0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d027      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_DMA_IRQHandler+0x1d4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d022      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <HAL_DMA_IRQHandler+0x1d8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <HAL_DMA_IRQHandler+0x1dc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d018      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <HAL_DMA_IRQHandler+0x1e0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_DMA_IRQHandler+0x1e4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_DMA_IRQHandler+0x1e8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <HAL_DMA_IRQHandler+0x1ec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d12f      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x1f4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e02e      	b.n	8002fd8 <HAL_DMA_IRQHandler+0x208>
 8002f7a:	bf00      	nop
 8002f7c:	240000bc 	.word	0x240000bc
 8002f80:	1b4e81b5 	.word	0x1b4e81b5
 8002f84:	40020010 	.word	0x40020010
 8002f88:	40020028 	.word	0x40020028
 8002f8c:	40020040 	.word	0x40020040
 8002f90:	40020058 	.word	0x40020058
 8002f94:	40020070 	.word	0x40020070
 8002f98:	40020088 	.word	0x40020088
 8002f9c:	400200a0 	.word	0x400200a0
 8002fa0:	400200b8 	.word	0x400200b8
 8002fa4:	40020410 	.word	0x40020410
 8002fa8:	40020428 	.word	0x40020428
 8002fac:	40020440 	.word	0x40020440
 8002fb0:	40020458 	.word	0x40020458
 8002fb4:	40020470 	.word	0x40020470
 8002fb8:	40020488 	.word	0x40020488
 8002fbc:	400204a0 	.word	0x400204a0
 8002fc0:	400204b8 	.word	0x400204b8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d06e      	beq.n	80030fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <HAL_DMA_IRQHandler+0x3f8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04a      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a67      	ldr	r2, [pc, #412]	; (80031cc <HAL_DMA_IRQHandler+0x3fc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d045      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a66      	ldr	r2, [pc, #408]	; (80031d0 <HAL_DMA_IRQHandler+0x400>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d040      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a64      	ldr	r2, [pc, #400]	; (80031d4 <HAL_DMA_IRQHandler+0x404>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d03b      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_DMA_IRQHandler+0x408>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d036      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a61      	ldr	r2, [pc, #388]	; (80031dc <HAL_DMA_IRQHandler+0x40c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a60      	ldr	r2, [pc, #384]	; (80031e0 <HAL_DMA_IRQHandler+0x410>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02c      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5e      	ldr	r2, [pc, #376]	; (80031e4 <HAL_DMA_IRQHandler+0x414>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d027      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5d      	ldr	r2, [pc, #372]	; (80031e8 <HAL_DMA_IRQHandler+0x418>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a5b      	ldr	r2, [pc, #364]	; (80031ec <HAL_DMA_IRQHandler+0x41c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01d      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a5a      	ldr	r2, [pc, #360]	; (80031f0 <HAL_DMA_IRQHandler+0x420>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d018      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a58      	ldr	r2, [pc, #352]	; (80031f4 <HAL_DMA_IRQHandler+0x424>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a57      	ldr	r2, [pc, #348]	; (80031f8 <HAL_DMA_IRQHandler+0x428>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a55      	ldr	r2, [pc, #340]	; (80031fc <HAL_DMA_IRQHandler+0x42c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a54      	ldr	r2, [pc, #336]	; (8003200 <HAL_DMA_IRQHandler+0x430>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_DMA_IRQHandler+0x434>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10a      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x304>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e003      	b.n	80030dc <HAL_DMA_IRQHandler+0x30c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2201      	movs	r2, #1
 80030ea:	409a      	lsls	r2, r3
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	f043 0202 	orr.w	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2204      	movs	r2, #4
 8003106:	409a      	lsls	r2, r3
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 808f 	beq.w	8003230 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <HAL_DMA_IRQHandler+0x3f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_DMA_IRQHandler+0x3fc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a29      	ldr	r2, [pc, #164]	; (80031d0 <HAL_DMA_IRQHandler+0x400>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_DMA_IRQHandler+0x404>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <HAL_DMA_IRQHandler+0x408>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_DMA_IRQHandler+0x40c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <HAL_DMA_IRQHandler+0x410>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a21      	ldr	r2, [pc, #132]	; (80031e4 <HAL_DMA_IRQHandler+0x414>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a20      	ldr	r2, [pc, #128]	; (80031e8 <HAL_DMA_IRQHandler+0x418>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <HAL_DMA_IRQHandler+0x41c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <HAL_DMA_IRQHandler+0x420>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <HAL_DMA_IRQHandler+0x424>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1a      	ldr	r2, [pc, #104]	; (80031f8 <HAL_DMA_IRQHandler+0x428>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_DMA_IRQHandler+0x42c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a17      	ldr	r2, [pc, #92]	; (8003200 <HAL_DMA_IRQHandler+0x430>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a15      	ldr	r2, [pc, #84]	; (8003204 <HAL_DMA_IRQHandler+0x434>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d12a      	bne.n	8003208 <HAL_DMA_IRQHandler+0x438>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e023      	b.n	8003210 <HAL_DMA_IRQHandler+0x440>
 80031c8:	40020010 	.word	0x40020010
 80031cc:	40020028 	.word	0x40020028
 80031d0:	40020040 	.word	0x40020040
 80031d4:	40020058 	.word	0x40020058
 80031d8:	40020070 	.word	0x40020070
 80031dc:	40020088 	.word	0x40020088
 80031e0:	400200a0 	.word	0x400200a0
 80031e4:	400200b8 	.word	0x400200b8
 80031e8:	40020410 	.word	0x40020410
 80031ec:	40020428 	.word	0x40020428
 80031f0:	40020440 	.word	0x40020440
 80031f4:	40020458 	.word	0x40020458
 80031f8:	40020470 	.word	0x40020470
 80031fc:	40020488 	.word	0x40020488
 8003200:	400204a0 	.word	0x400204a0
 8003204:	400204b8 	.word	0x400204b8
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2204      	movs	r2, #4
 800321e:	409a      	lsls	r2, r3
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f043 0204 	orr.w	r2, r3, #4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2210      	movs	r2, #16
 800323a:	409a      	lsls	r2, r3
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80a6 	beq.w	8003392 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a85      	ldr	r2, [pc, #532]	; (8003460 <HAL_DMA_IRQHandler+0x690>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d04a      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a83      	ldr	r2, [pc, #524]	; (8003464 <HAL_DMA_IRQHandler+0x694>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d045      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a82      	ldr	r2, [pc, #520]	; (8003468 <HAL_DMA_IRQHandler+0x698>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d040      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a80      	ldr	r2, [pc, #512]	; (800346c <HAL_DMA_IRQHandler+0x69c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d03b      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7f      	ldr	r2, [pc, #508]	; (8003470 <HAL_DMA_IRQHandler+0x6a0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d036      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7d      	ldr	r2, [pc, #500]	; (8003474 <HAL_DMA_IRQHandler+0x6a4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d031      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7c      	ldr	r2, [pc, #496]	; (8003478 <HAL_DMA_IRQHandler+0x6a8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d02c      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a7a      	ldr	r2, [pc, #488]	; (800347c <HAL_DMA_IRQHandler+0x6ac>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d027      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a79      	ldr	r2, [pc, #484]	; (8003480 <HAL_DMA_IRQHandler+0x6b0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d022      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a77      	ldr	r2, [pc, #476]	; (8003484 <HAL_DMA_IRQHandler+0x6b4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01d      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a76      	ldr	r2, [pc, #472]	; (8003488 <HAL_DMA_IRQHandler+0x6b8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d018      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a74      	ldr	r2, [pc, #464]	; (800348c <HAL_DMA_IRQHandler+0x6bc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a73      	ldr	r2, [pc, #460]	; (8003490 <HAL_DMA_IRQHandler+0x6c0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00e      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a71      	ldr	r2, [pc, #452]	; (8003494 <HAL_DMA_IRQHandler+0x6c4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d009      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a70      	ldr	r2, [pc, #448]	; (8003498 <HAL_DMA_IRQHandler+0x6c8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6e      	ldr	r2, [pc, #440]	; (800349c <HAL_DMA_IRQHandler+0x6cc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d10a      	bne.n	80032fc <HAL_DMA_IRQHandler+0x52c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e009      	b.n	8003310 <HAL_DMA_IRQHandler+0x540>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d03e      	beq.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2210      	movs	r2, #16
 800331e:	409a      	lsls	r2, r3
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d018      	beq.n	8003364 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d108      	bne.n	8003352 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d024      	beq.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
 8003350:	e01f      	b.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01b      	beq.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
 8003362:	e016      	b.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d107      	bne.n	8003382 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0208 	bic.w	r2, r2, #8
 8003380:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	2220      	movs	r2, #32
 800339c:	409a      	lsls	r2, r3
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8110 	beq.w	80035c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <HAL_DMA_IRQHandler+0x690>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d04a      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <HAL_DMA_IRQHandler+0x694>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d045      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a29      	ldr	r2, [pc, #164]	; (8003468 <HAL_DMA_IRQHandler+0x698>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d040      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a28      	ldr	r2, [pc, #160]	; (800346c <HAL_DMA_IRQHandler+0x69c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d03b      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a26      	ldr	r2, [pc, #152]	; (8003470 <HAL_DMA_IRQHandler+0x6a0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d036      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a25      	ldr	r2, [pc, #148]	; (8003474 <HAL_DMA_IRQHandler+0x6a4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d031      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a23      	ldr	r2, [pc, #140]	; (8003478 <HAL_DMA_IRQHandler+0x6a8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d02c      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a22      	ldr	r2, [pc, #136]	; (800347c <HAL_DMA_IRQHandler+0x6ac>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d027      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_DMA_IRQHandler+0x6b0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d022      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_DMA_IRQHandler+0x6b4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d01d      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <HAL_DMA_IRQHandler+0x6b8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d018      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_DMA_IRQHandler+0x6bc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1a      	ldr	r2, [pc, #104]	; (8003490 <HAL_DMA_IRQHandler+0x6c0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00e      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a19      	ldr	r2, [pc, #100]	; (8003494 <HAL_DMA_IRQHandler+0x6c4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_DMA_IRQHandler+0x6c8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <HAL_DMA_IRQHandler+0x6cc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d12b      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x6d0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e02a      	b.n	80034b4 <HAL_DMA_IRQHandler+0x6e4>
 800345e:	bf00      	nop
 8003460:	40020010 	.word	0x40020010
 8003464:	40020028 	.word	0x40020028
 8003468:	40020040 	.word	0x40020040
 800346c:	40020058 	.word	0x40020058
 8003470:	40020070 	.word	0x40020070
 8003474:	40020088 	.word	0x40020088
 8003478:	400200a0 	.word	0x400200a0
 800347c:	400200b8 	.word	0x400200b8
 8003480:	40020410 	.word	0x40020410
 8003484:	40020428 	.word	0x40020428
 8003488:	40020440 	.word	0x40020440
 800348c:	40020458 	.word	0x40020458
 8003490:	40020470 	.word	0x40020470
 8003494:	40020488 	.word	0x40020488
 8003498:	400204a0 	.word	0x400204a0
 800349c:	400204b8 	.word	0x400204b8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bf14      	ite	ne
 80034ae:	2301      	movne	r3, #1
 80034b0:	2300      	moveq	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8087 	beq.w	80035c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2220      	movs	r2, #32
 80034c4:	409a      	lsls	r2, r3
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d139      	bne.n	800354a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0216 	bic.w	r2, r2, #22
 80034e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_DMA_IRQHandler+0x736>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0208 	bic.w	r2, r2, #8
 8003514:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	223f      	movs	r2, #63	; 0x3f
 8003520:	409a      	lsls	r2, r3
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 834a 	beq.w	8003bd4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
          }
          return;
 8003548:	e344      	b.n	8003bd4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d018      	beq.n	800358a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d108      	bne.n	8003578 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02c      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
 8003576:	e027      	b.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d023      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
 8003588:	e01e      	b.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0210 	bic.w	r2, r2, #16
 80035a6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8306 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8088 	beq.w	80036f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a7a      	ldr	r2, [pc, #488]	; (80037d8 <HAL_DMA_IRQHandler+0xa08>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d04a      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a79      	ldr	r2, [pc, #484]	; (80037dc <HAL_DMA_IRQHandler+0xa0c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d045      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a77      	ldr	r2, [pc, #476]	; (80037e0 <HAL_DMA_IRQHandler+0xa10>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d040      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a76      	ldr	r2, [pc, #472]	; (80037e4 <HAL_DMA_IRQHandler+0xa14>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d03b      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a74      	ldr	r2, [pc, #464]	; (80037e8 <HAL_DMA_IRQHandler+0xa18>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d036      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a73      	ldr	r2, [pc, #460]	; (80037ec <HAL_DMA_IRQHandler+0xa1c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d031      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a71      	ldr	r2, [pc, #452]	; (80037f0 <HAL_DMA_IRQHandler+0xa20>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d02c      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a70      	ldr	r2, [pc, #448]	; (80037f4 <HAL_DMA_IRQHandler+0xa24>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d027      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <HAL_DMA_IRQHandler+0xa28>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d022      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6d      	ldr	r2, [pc, #436]	; (80037fc <HAL_DMA_IRQHandler+0xa2c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d01d      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6b      	ldr	r2, [pc, #428]	; (8003800 <HAL_DMA_IRQHandler+0xa30>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d018      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6a      	ldr	r2, [pc, #424]	; (8003804 <HAL_DMA_IRQHandler+0xa34>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a68      	ldr	r2, [pc, #416]	; (8003808 <HAL_DMA_IRQHandler+0xa38>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00e      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a67      	ldr	r2, [pc, #412]	; (800380c <HAL_DMA_IRQHandler+0xa3c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d009      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a65      	ldr	r2, [pc, #404]	; (8003810 <HAL_DMA_IRQHandler+0xa40>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a64      	ldr	r2, [pc, #400]	; (8003814 <HAL_DMA_IRQHandler+0xa44>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d108      	bne.n	800369a <HAL_DMA_IRQHandler+0x8ca>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e007      	b.n	80036aa <HAL_DMA_IRQHandler+0x8da>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3301      	adds	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d307      	bcc.n	80036c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f2      	bne.n	80036aa <HAL_DMA_IRQHandler+0x8da>
 80036c4:	e000      	b.n	80036c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036c6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2203      	movs	r2, #3
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80036e6:	e003      	b.n	80036f0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8272 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
 8003702:	e26c      	b.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a43      	ldr	r2, [pc, #268]	; (8003818 <HAL_DMA_IRQHandler+0xa48>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d022      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a42      	ldr	r2, [pc, #264]	; (800381c <HAL_DMA_IRQHandler+0xa4c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d01d      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a40      	ldr	r2, [pc, #256]	; (8003820 <HAL_DMA_IRQHandler+0xa50>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d018      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3f      	ldr	r2, [pc, #252]	; (8003824 <HAL_DMA_IRQHandler+0xa54>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3d      	ldr	r2, [pc, #244]	; (8003828 <HAL_DMA_IRQHandler+0xa58>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00e      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3c      	ldr	r2, [pc, #240]	; (800382c <HAL_DMA_IRQHandler+0xa5c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d009      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3a      	ldr	r2, [pc, #232]	; (8003830 <HAL_DMA_IRQHandler+0xa60>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a39      	ldr	r2, [pc, #228]	; (8003834 <HAL_DMA_IRQHandler+0xa64>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_DMA_IRQHandler+0x988>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_DMA_IRQHandler+0x98a>
 8003758:	2300      	movs	r3, #0
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 823f 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2204      	movs	r2, #4
 8003772:	409a      	lsls	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80cd 	beq.w	8003918 <HAL_DMA_IRQHandler+0xb48>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80c7 	beq.w	8003918 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2204      	movs	r2, #4
 8003794:	409a      	lsls	r2, r3
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d049      	beq.n	8003838 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8210 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037c0:	e20a      	b.n	8003bd8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8206 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d4:	e200      	b.n	8003bd8 <HAL_DMA_IRQHandler+0xe08>
 80037d6:	bf00      	nop
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
 8003818:	58025408 	.word	0x58025408
 800381c:	5802541c 	.word	0x5802541c
 8003820:	58025430 	.word	0x58025430
 8003824:	58025444 	.word	0x58025444
 8003828:	58025458 	.word	0x58025458
 800382c:	5802546c 	.word	0x5802546c
 8003830:	58025480 	.word	0x58025480
 8003834:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d160      	bne.n	8003904 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a8c      	ldr	r2, [pc, #560]	; (8003a78 <HAL_DMA_IRQHandler+0xca8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d04a      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a8a      	ldr	r2, [pc, #552]	; (8003a7c <HAL_DMA_IRQHandler+0xcac>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d045      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a89      	ldr	r2, [pc, #548]	; (8003a80 <HAL_DMA_IRQHandler+0xcb0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d040      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a87      	ldr	r2, [pc, #540]	; (8003a84 <HAL_DMA_IRQHandler+0xcb4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d03b      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a86      	ldr	r2, [pc, #536]	; (8003a88 <HAL_DMA_IRQHandler+0xcb8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d036      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a84      	ldr	r2, [pc, #528]	; (8003a8c <HAL_DMA_IRQHandler+0xcbc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d031      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a83      	ldr	r2, [pc, #524]	; (8003a90 <HAL_DMA_IRQHandler+0xcc0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d02c      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a81      	ldr	r2, [pc, #516]	; (8003a94 <HAL_DMA_IRQHandler+0xcc4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d027      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a80      	ldr	r2, [pc, #512]	; (8003a98 <HAL_DMA_IRQHandler+0xcc8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d022      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7e      	ldr	r2, [pc, #504]	; (8003a9c <HAL_DMA_IRQHandler+0xccc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a7d      	ldr	r2, [pc, #500]	; (8003aa0 <HAL_DMA_IRQHandler+0xcd0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a7b      	ldr	r2, [pc, #492]	; (8003aa4 <HAL_DMA_IRQHandler+0xcd4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7a      	ldr	r2, [pc, #488]	; (8003aa8 <HAL_DMA_IRQHandler+0xcd8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a78      	ldr	r2, [pc, #480]	; (8003aac <HAL_DMA_IRQHandler+0xcdc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a77      	ldr	r2, [pc, #476]	; (8003ab0 <HAL_DMA_IRQHandler+0xce0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a75      	ldr	r2, [pc, #468]	; (8003ab4 <HAL_DMA_IRQHandler+0xce4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <HAL_DMA_IRQHandler+0xb24>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0208 	bic.w	r2, r2, #8
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e007      	b.n	8003904 <HAL_DMA_IRQHandler+0xb34>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8165 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003916:	e15f      	b.n	8003bd8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	2202      	movs	r2, #2
 8003922:	409a      	lsls	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80c5 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0xce8>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80bf 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2202      	movs	r2, #2
 8003944:	409a      	lsls	r2, r3
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d018      	beq.n	8003986 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 813a 	beq.w	8003bdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003970:	e134      	b.n	8003bdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8130 	beq.w	8003bdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003984:	e12a      	b.n	8003bdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d168      	bne.n	8003a62 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a38      	ldr	r2, [pc, #224]	; (8003a78 <HAL_DMA_IRQHandler+0xca8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d04a      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a37      	ldr	r2, [pc, #220]	; (8003a7c <HAL_DMA_IRQHandler+0xcac>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d045      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a35      	ldr	r2, [pc, #212]	; (8003a80 <HAL_DMA_IRQHandler+0xcb0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d040      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a34      	ldr	r2, [pc, #208]	; (8003a84 <HAL_DMA_IRQHandler+0xcb4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d03b      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a32      	ldr	r2, [pc, #200]	; (8003a88 <HAL_DMA_IRQHandler+0xcb8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d036      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a31      	ldr	r2, [pc, #196]	; (8003a8c <HAL_DMA_IRQHandler+0xcbc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d031      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2f      	ldr	r2, [pc, #188]	; (8003a90 <HAL_DMA_IRQHandler+0xcc0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02c      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2e      	ldr	r2, [pc, #184]	; (8003a94 <HAL_DMA_IRQHandler+0xcc4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d027      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <HAL_DMA_IRQHandler+0xcc8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d022      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <HAL_DMA_IRQHandler+0xccc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d01d      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <HAL_DMA_IRQHandler+0xcd0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d018      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a28      	ldr	r2, [pc, #160]	; (8003aa4 <HAL_DMA_IRQHandler+0xcd4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d013      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a26      	ldr	r2, [pc, #152]	; (8003aa8 <HAL_DMA_IRQHandler+0xcd8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00e      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a25      	ldr	r2, [pc, #148]	; (8003aac <HAL_DMA_IRQHandler+0xcdc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d009      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a23      	ldr	r2, [pc, #140]	; (8003ab0 <HAL_DMA_IRQHandler+0xce0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d004      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xc60>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <HAL_DMA_IRQHandler+0xce4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d108      	bne.n	8003a42 <HAL_DMA_IRQHandler+0xc72>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0214 	bic.w	r2, r2, #20
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e007      	b.n	8003a52 <HAL_DMA_IRQHandler+0xc82>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 020a 	bic.w	r2, r2, #10
 8003a50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80b8 	beq.w	8003bdc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a74:	e0b2      	b.n	8003bdc <HAL_DMA_IRQHandler+0xe0c>
 8003a76:	bf00      	nop
 8003a78:	40020010 	.word	0x40020010
 8003a7c:	40020028 	.word	0x40020028
 8003a80:	40020040 	.word	0x40020040
 8003a84:	40020058 	.word	0x40020058
 8003a88:	40020070 	.word	0x40020070
 8003a8c:	40020088 	.word	0x40020088
 8003a90:	400200a0 	.word	0x400200a0
 8003a94:	400200b8 	.word	0x400200b8
 8003a98:	40020410 	.word	0x40020410
 8003a9c:	40020428 	.word	0x40020428
 8003aa0:	40020440 	.word	0x40020440
 8003aa4:	40020458 	.word	0x40020458
 8003aa8:	40020470 	.word	0x40020470
 8003aac:	40020488 	.word	0x40020488
 8003ab0:	400204a0 	.word	0x400204a0
 8003ab4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8088 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8082 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a41      	ldr	r2, [pc, #260]	; (8003be4 <HAL_DMA_IRQHandler+0xe14>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d04a      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3f      	ldr	r2, [pc, #252]	; (8003be8 <HAL_DMA_IRQHandler+0xe18>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d045      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a3e      	ldr	r2, [pc, #248]	; (8003bec <HAL_DMA_IRQHandler+0xe1c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d040      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a3c      	ldr	r2, [pc, #240]	; (8003bf0 <HAL_DMA_IRQHandler+0xe20>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d03b      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a3b      	ldr	r2, [pc, #236]	; (8003bf4 <HAL_DMA_IRQHandler+0xe24>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d036      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a39      	ldr	r2, [pc, #228]	; (8003bf8 <HAL_DMA_IRQHandler+0xe28>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d031      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a38      	ldr	r2, [pc, #224]	; (8003bfc <HAL_DMA_IRQHandler+0xe2c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d02c      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a36      	ldr	r2, [pc, #216]	; (8003c00 <HAL_DMA_IRQHandler+0xe30>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d027      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a35      	ldr	r2, [pc, #212]	; (8003c04 <HAL_DMA_IRQHandler+0xe34>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d022      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a33      	ldr	r2, [pc, #204]	; (8003c08 <HAL_DMA_IRQHandler+0xe38>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01d      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a32      	ldr	r2, [pc, #200]	; (8003c0c <HAL_DMA_IRQHandler+0xe3c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d018      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a30      	ldr	r2, [pc, #192]	; (8003c10 <HAL_DMA_IRQHandler+0xe40>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2f      	ldr	r2, [pc, #188]	; (8003c14 <HAL_DMA_IRQHandler+0xe44>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00e      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2d      	ldr	r2, [pc, #180]	; (8003c18 <HAL_DMA_IRQHandler+0xe48>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d009      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2c      	ldr	r2, [pc, #176]	; (8003c1c <HAL_DMA_IRQHandler+0xe4c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2a      	ldr	r2, [pc, #168]	; (8003c20 <HAL_DMA_IRQHandler+0xe50>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d108      	bne.n	8003b8c <HAL_DMA_IRQHandler+0xdbc>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 021c 	bic.w	r2, r2, #28
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e007      	b.n	8003b9c <HAL_DMA_IRQHandler+0xdcc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 020e 	bic.w	r2, r2, #14
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3
 8003bd2:	e004      	b.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003bd4:	bf00      	nop
 8003bd6:	e002      	b.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bdc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40020010 	.word	0x40020010
 8003be8:	40020028 	.word	0x40020028
 8003bec:	40020040 	.word	0x40020040
 8003bf0:	40020058 	.word	0x40020058
 8003bf4:	40020070 	.word	0x40020070
 8003bf8:	40020088 	.word	0x40020088
 8003bfc:	400200a0 	.word	0x400200a0
 8003c00:	400200b8 	.word	0x400200b8
 8003c04:	40020410 	.word	0x40020410
 8003c08:	40020428 	.word	0x40020428
 8003c0c:	40020440 	.word	0x40020440
 8003c10:	40020458 	.word	0x40020458
 8003c14:	40020470 	.word	0x40020470
 8003c18:	40020488 	.word	0x40020488
 8003c1c:	400204a0 	.word	0x400204a0
 8003c20:	400204b8 	.word	0x400204b8

08003c24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a84      	ldr	r2, [pc, #528]	; (8003e54 <DMA_SetConfig+0x230>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d072      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a82      	ldr	r2, [pc, #520]	; (8003e58 <DMA_SetConfig+0x234>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d06d      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a81      	ldr	r2, [pc, #516]	; (8003e5c <DMA_SetConfig+0x238>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d068      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7f      	ldr	r2, [pc, #508]	; (8003e60 <DMA_SetConfig+0x23c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d063      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7e      	ldr	r2, [pc, #504]	; (8003e64 <DMA_SetConfig+0x240>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d05e      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a7c      	ldr	r2, [pc, #496]	; (8003e68 <DMA_SetConfig+0x244>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d059      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7b      	ldr	r2, [pc, #492]	; (8003e6c <DMA_SetConfig+0x248>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d054      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a79      	ldr	r2, [pc, #484]	; (8003e70 <DMA_SetConfig+0x24c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d04f      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a78      	ldr	r2, [pc, #480]	; (8003e74 <DMA_SetConfig+0x250>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d04a      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a76      	ldr	r2, [pc, #472]	; (8003e78 <DMA_SetConfig+0x254>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d045      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a75      	ldr	r2, [pc, #468]	; (8003e7c <DMA_SetConfig+0x258>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d040      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a73      	ldr	r2, [pc, #460]	; (8003e80 <DMA_SetConfig+0x25c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d03b      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a72      	ldr	r2, [pc, #456]	; (8003e84 <DMA_SetConfig+0x260>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d036      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a70      	ldr	r2, [pc, #448]	; (8003e88 <DMA_SetConfig+0x264>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d031      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a6f      	ldr	r2, [pc, #444]	; (8003e8c <DMA_SetConfig+0x268>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d02c      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6d      	ldr	r2, [pc, #436]	; (8003e90 <DMA_SetConfig+0x26c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d027      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6c      	ldr	r2, [pc, #432]	; (8003e94 <DMA_SetConfig+0x270>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6a      	ldr	r2, [pc, #424]	; (8003e98 <DMA_SetConfig+0x274>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01d      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a69      	ldr	r2, [pc, #420]	; (8003e9c <DMA_SetConfig+0x278>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d018      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a67      	ldr	r2, [pc, #412]	; (8003ea0 <DMA_SetConfig+0x27c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a66      	ldr	r2, [pc, #408]	; (8003ea4 <DMA_SetConfig+0x280>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00e      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a64      	ldr	r2, [pc, #400]	; (8003ea8 <DMA_SetConfig+0x284>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d009      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a63      	ldr	r2, [pc, #396]	; (8003eac <DMA_SetConfig+0x288>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <DMA_SetConfig+0x10a>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a61      	ldr	r2, [pc, #388]	; (8003eb0 <DMA_SetConfig+0x28c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <DMA_SetConfig+0x10e>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <DMA_SetConfig+0x110>
 8003d32:	2300      	movs	r3, #0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a3e      	ldr	r2, [pc, #248]	; (8003e54 <DMA_SetConfig+0x230>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d04a      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3d      	ldr	r2, [pc, #244]	; (8003e58 <DMA_SetConfig+0x234>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d045      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a3b      	ldr	r2, [pc, #236]	; (8003e5c <DMA_SetConfig+0x238>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d040      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a3a      	ldr	r2, [pc, #232]	; (8003e60 <DMA_SetConfig+0x23c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d03b      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a38      	ldr	r2, [pc, #224]	; (8003e64 <DMA_SetConfig+0x240>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d036      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a37      	ldr	r2, [pc, #220]	; (8003e68 <DMA_SetConfig+0x244>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d031      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a35      	ldr	r2, [pc, #212]	; (8003e6c <DMA_SetConfig+0x248>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02c      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a34      	ldr	r2, [pc, #208]	; (8003e70 <DMA_SetConfig+0x24c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d027      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a32      	ldr	r2, [pc, #200]	; (8003e74 <DMA_SetConfig+0x250>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d022      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <DMA_SetConfig+0x254>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d01d      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2f      	ldr	r2, [pc, #188]	; (8003e7c <DMA_SetConfig+0x258>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2e      	ldr	r2, [pc, #184]	; (8003e80 <DMA_SetConfig+0x25c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	; (8003e84 <DMA_SetConfig+0x260>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00e      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <DMA_SetConfig+0x264>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a29      	ldr	r2, [pc, #164]	; (8003e8c <DMA_SetConfig+0x268>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <DMA_SetConfig+0x1d0>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <DMA_SetConfig+0x26c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d101      	bne.n	8003df8 <DMA_SetConfig+0x1d4>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <DMA_SetConfig+0x1d6>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d05a      	beq.n	8003eb4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	223f      	movs	r2, #63	; 0x3f
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d108      	bne.n	8003e40 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e3e:	e087      	b.n	8003f50 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]
}
 8003e50:	e07e      	b.n	8003f50 <DMA_SetConfig+0x32c>
 8003e52:	bf00      	nop
 8003e54:	40020010 	.word	0x40020010
 8003e58:	40020028 	.word	0x40020028
 8003e5c:	40020040 	.word	0x40020040
 8003e60:	40020058 	.word	0x40020058
 8003e64:	40020070 	.word	0x40020070
 8003e68:	40020088 	.word	0x40020088
 8003e6c:	400200a0 	.word	0x400200a0
 8003e70:	400200b8 	.word	0x400200b8
 8003e74:	40020410 	.word	0x40020410
 8003e78:	40020428 	.word	0x40020428
 8003e7c:	40020440 	.word	0x40020440
 8003e80:	40020458 	.word	0x40020458
 8003e84:	40020470 	.word	0x40020470
 8003e88:	40020488 	.word	0x40020488
 8003e8c:	400204a0 	.word	0x400204a0
 8003e90:	400204b8 	.word	0x400204b8
 8003e94:	58025408 	.word	0x58025408
 8003e98:	5802541c 	.word	0x5802541c
 8003e9c:	58025430 	.word	0x58025430
 8003ea0:	58025444 	.word	0x58025444
 8003ea4:	58025458 	.word	0x58025458
 8003ea8:	5802546c 	.word	0x5802546c
 8003eac:	58025480 	.word	0x58025480
 8003eb0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <DMA_SetConfig+0x338>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d022      	beq.n	8003f04 <DMA_SetConfig+0x2e0>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <DMA_SetConfig+0x33c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d01d      	beq.n	8003f04 <DMA_SetConfig+0x2e0>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a25      	ldr	r2, [pc, #148]	; (8003f64 <DMA_SetConfig+0x340>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <DMA_SetConfig+0x2e0>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a24      	ldr	r2, [pc, #144]	; (8003f68 <DMA_SetConfig+0x344>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <DMA_SetConfig+0x2e0>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <DMA_SetConfig+0x348>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <DMA_SetConfig+0x2e0>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <DMA_SetConfig+0x34c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <DMA_SetConfig+0x2e0>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <DMA_SetConfig+0x350>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <DMA_SetConfig+0x2e0>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <DMA_SetConfig+0x354>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <DMA_SetConfig+0x2e4>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <DMA_SetConfig+0x2e6>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d020      	beq.n	8003f50 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2201      	movs	r2, #1
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d108      	bne.n	8003f40 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
}
 8003f3e:	e007      	b.n	8003f50 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	58025408 	.word	0x58025408
 8003f60:	5802541c 	.word	0x5802541c
 8003f64:	58025430 	.word	0x58025430
 8003f68:	58025444 	.word	0x58025444
 8003f6c:	58025458 	.word	0x58025458
 8003f70:	5802546c 	.word	0x5802546c
 8003f74:	58025480 	.word	0x58025480
 8003f78:	58025494 	.word	0x58025494

08003f7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a42      	ldr	r2, [pc, #264]	; (8004094 <DMA_CalcBaseAndBitshift+0x118>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d04a      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a41      	ldr	r2, [pc, #260]	; (8004098 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d045      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3f      	ldr	r2, [pc, #252]	; (800409c <DMA_CalcBaseAndBitshift+0x120>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d040      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3e      	ldr	r2, [pc, #248]	; (80040a0 <DMA_CalcBaseAndBitshift+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d03b      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <DMA_CalcBaseAndBitshift+0x128>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d036      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d031      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a39      	ldr	r2, [pc, #228]	; (80040ac <DMA_CalcBaseAndBitshift+0x130>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d02c      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <DMA_CalcBaseAndBitshift+0x134>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d027      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a36      	ldr	r2, [pc, #216]	; (80040b4 <DMA_CalcBaseAndBitshift+0x138>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d022      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a35      	ldr	r2, [pc, #212]	; (80040b8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d01d      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a33      	ldr	r2, [pc, #204]	; (80040bc <DMA_CalcBaseAndBitshift+0x140>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d018      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a32      	ldr	r2, [pc, #200]	; (80040c0 <DMA_CalcBaseAndBitshift+0x144>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <DMA_CalcBaseAndBitshift+0x148>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2d      	ldr	r2, [pc, #180]	; (80040cc <DMA_CalcBaseAndBitshift+0x150>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xa8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <DMA_CalcBaseAndBitshift+0x154>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <DMA_CalcBaseAndBitshift+0xac>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <DMA_CalcBaseAndBitshift+0xae>
 8004028:	2300      	movs	r3, #0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d024      	beq.n	8004078 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	3b10      	subs	r3, #16
 8004036:	4a27      	ldr	r2, [pc, #156]	; (80040d4 <DMA_CalcBaseAndBitshift+0x158>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	4a24      	ldr	r2, [pc, #144]	; (80040d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004048:	5cd3      	ldrb	r3, [r2, r3]
 800404a:	461a      	mov	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d908      	bls.n	8004068 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <DMA_CalcBaseAndBitshift+0x160>)
 800405e:	4013      	ands	r3, r2
 8004060:	1d1a      	adds	r2, r3, #4
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	659a      	str	r2, [r3, #88]	; 0x58
 8004066:	e00d      	b.n	8004084 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <DMA_CalcBaseAndBitshift+0x160>)
 8004070:	4013      	ands	r3, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6593      	str	r3, [r2, #88]	; 0x58
 8004076:	e005      	b.n	8004084 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40020010 	.word	0x40020010
 8004098:	40020028 	.word	0x40020028
 800409c:	40020040 	.word	0x40020040
 80040a0:	40020058 	.word	0x40020058
 80040a4:	40020070 	.word	0x40020070
 80040a8:	40020088 	.word	0x40020088
 80040ac:	400200a0 	.word	0x400200a0
 80040b0:	400200b8 	.word	0x400200b8
 80040b4:	40020410 	.word	0x40020410
 80040b8:	40020428 	.word	0x40020428
 80040bc:	40020440 	.word	0x40020440
 80040c0:	40020458 	.word	0x40020458
 80040c4:	40020470 	.word	0x40020470
 80040c8:	40020488 	.word	0x40020488
 80040cc:	400204a0 	.word	0x400204a0
 80040d0:	400204b8 	.word	0x400204b8
 80040d4:	aaaaaaab 	.word	0xaaaaaaab
 80040d8:	0800778c 	.word	0x0800778c
 80040dc:	fffffc00 	.word	0xfffffc00

080040e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d120      	bne.n	8004136 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d858      	bhi.n	80041ae <DMA_CheckFifoParam+0xce>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <DMA_CheckFifoParam+0x24>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004115 	.word	0x08004115
 8004108:	08004127 	.word	0x08004127
 800410c:	08004115 	.word	0x08004115
 8004110:	080041af 	.word	0x080041af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d048      	beq.n	80041b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004124:	e045      	b.n	80041b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800412e:	d142      	bne.n	80041b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004134:	e03f      	b.n	80041b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413e:	d123      	bne.n	8004188 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	2b03      	cmp	r3, #3
 8004146:	d838      	bhi.n	80041ba <DMA_CheckFifoParam+0xda>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <DMA_CheckFifoParam+0x70>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	08004167 	.word	0x08004167
 8004158:	08004161 	.word	0x08004161
 800415c:	08004179 	.word	0x08004179
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
        break;
 8004164:	e030      	b.n	80041c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d025      	beq.n	80041be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004176:	e022      	b.n	80041be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004180:	d11f      	bne.n	80041c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004186:	e01c      	b.n	80041c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	2b02      	cmp	r3, #2
 800418e:	d902      	bls.n	8004196 <DMA_CheckFifoParam+0xb6>
 8004190:	2b03      	cmp	r3, #3
 8004192:	d003      	beq.n	800419c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004194:	e018      	b.n	80041c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
        break;
 800419a:	e015      	b.n	80041c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00e      	beq.n	80041c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
    break;
 80041ac:	e00b      	b.n	80041c6 <DMA_CheckFifoParam+0xe6>
        break;
 80041ae:	bf00      	nop
 80041b0:	e00a      	b.n	80041c8 <DMA_CheckFifoParam+0xe8>
        break;
 80041b2:	bf00      	nop
 80041b4:	e008      	b.n	80041c8 <DMA_CheckFifoParam+0xe8>
        break;
 80041b6:	bf00      	nop
 80041b8:	e006      	b.n	80041c8 <DMA_CheckFifoParam+0xe8>
        break;
 80041ba:	bf00      	nop
 80041bc:	e004      	b.n	80041c8 <DMA_CheckFifoParam+0xe8>
        break;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <DMA_CheckFifoParam+0xe8>
        break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <DMA_CheckFifoParam+0xe8>
    break;
 80041c6:	bf00      	nop
    }
  }

  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop

080041d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a38      	ldr	r2, [pc, #224]	; (80042cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a36      	ldr	r2, [pc, #216]	; (80042d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01d      	beq.n	8004236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a35      	ldr	r2, [pc, #212]	; (80042d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d018      	beq.n	8004236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a33      	ldr	r2, [pc, #204]	; (80042d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a32      	ldr	r2, [pc, #200]	; (80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a30      	ldr	r2, [pc, #192]	; (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01a      	beq.n	8004276 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3b08      	subs	r3, #8
 8004248:	4a28      	ldr	r2, [pc, #160]	; (80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004264:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004274:	e024      	b.n	80042c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3b10      	subs	r3, #16
 800427e:	4a1e      	ldr	r2, [pc, #120]	; (80042f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d806      	bhi.n	800429e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d902      	bls.n	800429e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3308      	adds	r3, #8
 800429c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4b18      	ldr	r3, [pc, #96]	; (8004304 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a16      	ldr	r2, [pc, #88]	; (8004308 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80042b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2201      	movs	r2, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	58025408 	.word	0x58025408
 80042d0:	5802541c 	.word	0x5802541c
 80042d4:	58025430 	.word	0x58025430
 80042d8:	58025444 	.word	0x58025444
 80042dc:	58025458 	.word	0x58025458
 80042e0:	5802546c 	.word	0x5802546c
 80042e4:	58025480 	.word	0x58025480
 80042e8:	58025494 	.word	0x58025494
 80042ec:	cccccccd 	.word	0xcccccccd
 80042f0:	16009600 	.word	0x16009600
 80042f4:	58025880 	.word	0x58025880
 80042f8:	aaaaaaab 	.word	0xaaaaaaab
 80042fc:	400204b8 	.word	0x400204b8
 8004300:	4002040f 	.word	0x4002040f
 8004304:	10008200 	.word	0x10008200
 8004308:	40020880 	.word	0x40020880

0800430c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d04a      	beq.n	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d847      	bhi.n	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a25      	ldr	r2, [pc, #148]	; (80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d022      	beq.n	8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a24      	ldr	r2, [pc, #144]	; (80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d01d      	beq.n	8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a22      	ldr	r2, [pc, #136]	; (80043cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d018      	beq.n	8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a21      	ldr	r2, [pc, #132]	; (80043d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d009      	beq.n	8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d101      	bne.n	800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800437c:	2300      	movs	r3, #0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	461a      	mov	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004394:	671a      	str	r2, [r3, #112]	; 0x70
 8004396:	e009      	b.n	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4b14      	ldr	r3, [pc, #80]	; (80043ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	2201      	movs	r2, #1
 80043b2:	409a      	lsls	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	58025408 	.word	0x58025408
 80043c8:	5802541c 	.word	0x5802541c
 80043cc:	58025430 	.word	0x58025430
 80043d0:	58025444 	.word	0x58025444
 80043d4:	58025458 	.word	0x58025458
 80043d8:	5802546c 	.word	0x5802546c
 80043dc:	58025480 	.word	0x58025480
 80043e0:	58025494 	.word	0x58025494
 80043e4:	1600963f 	.word	0x1600963f
 80043e8:	58025940 	.word	0x58025940
 80043ec:	1000823f 	.word	0x1000823f
 80043f0:	40020940 	.word	0x40020940

080043f4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	460b      	mov	r3, r1
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e00a      	b.n	8004426 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004410:	7afb      	ldrb	r3, [r7, #11]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	605a      	str	r2, [r3, #4]
      break;
 800441c:	e002      	b.n	8004424 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
      break;
 8004422:	bf00      	nop
  }

  return status;
 8004424:	7dfb      	ldrb	r3, [r7, #23]
}
 8004426:	4618      	mov	r0, r3
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e003      	b.n	800444e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800445c:	b480      	push	{r7}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800446a:	4b89      	ldr	r3, [pc, #548]	; (8004690 <HAL_GPIO_Init+0x234>)
 800446c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800446e:	e194      	b.n	800479a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8186 	beq.w	8004794 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d00b      	beq.n	80044a8 <HAL_GPIO_Init+0x4c>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d007      	beq.n	80044a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800449c:	2b11      	cmp	r3, #17
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b12      	cmp	r3, #18
 80044a6:	d130      	bne.n	800450a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	2203      	movs	r2, #3
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044de:	2201      	movs	r2, #1
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 0201 	and.w	r2, r3, #1
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	2203      	movs	r2, #3
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0xee>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b12      	cmp	r3, #18
 8004548:	d123      	bne.n	8004592 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	08da      	lsrs	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3208      	adds	r2, #8
 8004552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	220f      	movs	r2, #15
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	08da      	lsrs	r2, r3, #3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3208      	adds	r2, #8
 800458c:	69b9      	ldr	r1, [r7, #24]
 800458e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	2203      	movs	r2, #3
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 0203 	and.w	r2, r3, #3
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80e0 	beq.w	8004794 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d4:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <HAL_GPIO_Init+0x238>)
 80045d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045da:	4a2e      	ldr	r2, [pc, #184]	; (8004694 <HAL_GPIO_Init+0x238>)
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <HAL_GPIO_Init+0x238>)
 80045e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045f2:	4a29      	ldr	r2, [pc, #164]	; (8004698 <HAL_GPIO_Init+0x23c>)
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	3302      	adds	r3, #2
 80045fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	220f      	movs	r2, #15
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a20      	ldr	r2, [pc, #128]	; (800469c <HAL_GPIO_Init+0x240>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d052      	beq.n	80046c4 <HAL_GPIO_Init+0x268>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_GPIO_Init+0x244>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d031      	beq.n	800468a <HAL_GPIO_Init+0x22e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <HAL_GPIO_Init+0x248>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d02b      	beq.n	8004686 <HAL_GPIO_Init+0x22a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <HAL_GPIO_Init+0x24c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d025      	beq.n	8004682 <HAL_GPIO_Init+0x226>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1c      	ldr	r2, [pc, #112]	; (80046ac <HAL_GPIO_Init+0x250>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01f      	beq.n	800467e <HAL_GPIO_Init+0x222>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <HAL_GPIO_Init+0x254>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d019      	beq.n	800467a <HAL_GPIO_Init+0x21e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1a      	ldr	r2, [pc, #104]	; (80046b4 <HAL_GPIO_Init+0x258>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_GPIO_Init+0x21a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <HAL_GPIO_Init+0x25c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00d      	beq.n	8004672 <HAL_GPIO_Init+0x216>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a18      	ldr	r2, [pc, #96]	; (80046bc <HAL_GPIO_Init+0x260>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <HAL_GPIO_Init+0x212>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <HAL_GPIO_Init+0x264>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <HAL_GPIO_Init+0x20e>
 8004666:	2309      	movs	r3, #9
 8004668:	e02d      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 800466a:	230a      	movs	r3, #10
 800466c:	e02b      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 800466e:	2308      	movs	r3, #8
 8004670:	e029      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 8004672:	2307      	movs	r3, #7
 8004674:	e027      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 8004676:	2306      	movs	r3, #6
 8004678:	e025      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 800467a:	2305      	movs	r3, #5
 800467c:	e023      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 800467e:	2304      	movs	r3, #4
 8004680:	e021      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 8004682:	2303      	movs	r3, #3
 8004684:	e01f      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 8004686:	2302      	movs	r3, #2
 8004688:	e01d      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 800468a:	2301      	movs	r3, #1
 800468c:	e01b      	b.n	80046c6 <HAL_GPIO_Init+0x26a>
 800468e:	bf00      	nop
 8004690:	58000080 	.word	0x58000080
 8004694:	58024400 	.word	0x58024400
 8004698:	58000400 	.word	0x58000400
 800469c:	58020000 	.word	0x58020000
 80046a0:	58020400 	.word	0x58020400
 80046a4:	58020800 	.word	0x58020800
 80046a8:	58020c00 	.word	0x58020c00
 80046ac:	58021000 	.word	0x58021000
 80046b0:	58021400 	.word	0x58021400
 80046b4:	58021800 	.word	0x58021800
 80046b8:	58021c00 	.word	0x58021c00
 80046bc:	58022000 	.word	0x58022000
 80046c0:	58022400 	.word	0x58022400
 80046c4:	2300      	movs	r3, #0
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	f002 0203 	and.w	r2, r2, #3
 80046cc:	0092      	lsls	r2, r2, #2
 80046ce:	4093      	lsls	r3, r2
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046d6:	4938      	ldr	r1, [pc, #224]	; (80047b8 <HAL_GPIO_Init+0x35c>)
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	089b      	lsrs	r3, r3, #2
 80046dc:	3302      	adds	r3, #2
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800475e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800478c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f47f ae63 	bne.w	8004470 <HAL_GPIO_Init+0x14>
  }
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	3724      	adds	r7, #36	; 0x24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	58000400 	.word	0x58000400

080047bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047ca:	4b75      	ldr	r3, [pc, #468]	; (80049a0 <HAL_GPIO_DeInit+0x1e4>)
 80047cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80047ce:	e0d9      	b.n	8004984 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80047d0:	2201      	movs	r2, #1
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	4013      	ands	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80cc 	beq.w	800497e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80047e6:	4a6f      	ldr	r2, [pc, #444]	; (80049a4 <HAL_GPIO_DeInit+0x1e8>)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	220f      	movs	r2, #15
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a67      	ldr	r2, [pc, #412]	; (80049a8 <HAL_GPIO_DeInit+0x1ec>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d037      	beq.n	8004880 <HAL_GPIO_DeInit+0xc4>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a66      	ldr	r2, [pc, #408]	; (80049ac <HAL_GPIO_DeInit+0x1f0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d031      	beq.n	800487c <HAL_GPIO_DeInit+0xc0>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a65      	ldr	r2, [pc, #404]	; (80049b0 <HAL_GPIO_DeInit+0x1f4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d02b      	beq.n	8004878 <HAL_GPIO_DeInit+0xbc>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a64      	ldr	r2, [pc, #400]	; (80049b4 <HAL_GPIO_DeInit+0x1f8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d025      	beq.n	8004874 <HAL_GPIO_DeInit+0xb8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a63      	ldr	r2, [pc, #396]	; (80049b8 <HAL_GPIO_DeInit+0x1fc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d01f      	beq.n	8004870 <HAL_GPIO_DeInit+0xb4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a62      	ldr	r2, [pc, #392]	; (80049bc <HAL_GPIO_DeInit+0x200>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d019      	beq.n	800486c <HAL_GPIO_DeInit+0xb0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a61      	ldr	r2, [pc, #388]	; (80049c0 <HAL_GPIO_DeInit+0x204>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <HAL_GPIO_DeInit+0xac>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a60      	ldr	r2, [pc, #384]	; (80049c4 <HAL_GPIO_DeInit+0x208>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00d      	beq.n	8004864 <HAL_GPIO_DeInit+0xa8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a5f      	ldr	r2, [pc, #380]	; (80049c8 <HAL_GPIO_DeInit+0x20c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d007      	beq.n	8004860 <HAL_GPIO_DeInit+0xa4>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a5e      	ldr	r2, [pc, #376]	; (80049cc <HAL_GPIO_DeInit+0x210>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <HAL_GPIO_DeInit+0xa0>
 8004858:	2309      	movs	r3, #9
 800485a:	e012      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 800485c:	230a      	movs	r3, #10
 800485e:	e010      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 8004860:	2308      	movs	r3, #8
 8004862:	e00e      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 8004864:	2307      	movs	r3, #7
 8004866:	e00c      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 8004868:	2306      	movs	r3, #6
 800486a:	e00a      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 800486c:	2305      	movs	r3, #5
 800486e:	e008      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 8004870:	2304      	movs	r3, #4
 8004872:	e006      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 8004874:	2303      	movs	r3, #3
 8004876:	e004      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 8004878:	2302      	movs	r3, #2
 800487a:	e002      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_GPIO_DeInit+0xc6>
 8004880:	2300      	movs	r3, #0
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	f002 0203 	and.w	r2, r2, #3
 8004888:	0092      	lsls	r2, r2, #2
 800488a:	4093      	lsls	r3, r2
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	d136      	bne.n	8004900 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	43db      	mvns	r3, r3
 800489a:	401a      	ands	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	401a      	ands	r2, r3
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80048ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048bc:	4013      	ands	r3, r2
 80048be:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ce:	4013      	ands	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	220f      	movs	r2, #15
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80048e2:	4a30      	ldr	r2, [pc, #192]	; (80049a4 <HAL_GPIO_DeInit+0x1e8>)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	3302      	adds	r3, #2
 80048ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	482c      	ldr	r0, [pc, #176]	; (80049a4 <HAL_GPIO_DeInit+0x1e8>)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	089b      	lsrs	r3, r3, #2
 80048f8:	400a      	ands	r2, r1
 80048fa:	3302      	adds	r3, #2
 80048fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2103      	movs	r1, #3
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	08da      	lsrs	r2, r3, #3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3208      	adds	r2, #8
 800491c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	220f      	movs	r2, #15
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	08d2      	lsrs	r2, r2, #3
 8004934:	4019      	ands	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3208      	adds	r2, #8
 800493a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2103      	movs	r1, #3
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	2101      	movs	r1, #1
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	401a      	ands	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	2103      	movs	r1, #3
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	401a      	ands	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	3301      	adds	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	f47f af1f 	bne.w	80047d0 <HAL_GPIO_DeInit+0x14>
  }
}
 8004992:	bf00      	nop
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	58000080 	.word	0x58000080
 80049a4:	58000400 	.word	0x58000400
 80049a8:	58020000 	.word	0x58020000
 80049ac:	58020400 	.word	0x58020400
 80049b0:	58020800 	.word	0x58020800
 80049b4:	58020c00 	.word	0x58020c00
 80049b8:	58021000 	.word	0x58021000
 80049bc:	58021400 	.word	0x58021400
 80049c0:	58021800 	.word	0x58021800
 80049c4:	58021c00 	.word	0x58021c00
 80049c8:	58022000 	.word	0x58022000
 80049cc:	58022400 	.word	0x58022400

080049d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
 80049dc:	4613      	mov	r3, r2
 80049de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049e0:	787b      	ldrb	r3, [r7, #1]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049ec:	e003      	b.n	80049f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	041a      	lsls	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	619a      	str	r2, [r3, #24]
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a14:	887a      	ldrh	r2, [r7, #2]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	041a      	lsls	r2, r3, #16
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	43d9      	mvns	r1, r3
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	400b      	ands	r3, r1
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	619a      	str	r2, [r3, #24]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb febd 	bl	80007dc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_PWREx_ConfigSupply+0x70>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d00a      	beq.n	8004a96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a80:	4b16      	ldr	r3, [pc, #88]	; (8004adc <HAL_PWREx_ConfigSupply+0x70>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d001      	beq.n	8004a92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e01f      	b.n	8004ad2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e01d      	b.n	8004ad2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_PWREx_ConfigSupply+0x70>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f023 0207 	bic.w	r2, r3, #7
 8004a9e:	490f      	ldr	r1, [pc, #60]	; (8004adc <HAL_PWREx_ConfigSupply+0x70>)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004aa6:	f7fc fb37 	bl	8001118 <HAL_GetTick>
 8004aaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004aac:	e009      	b.n	8004ac2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004aae:	f7fc fb33 	bl	8001118 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004abc:	d901      	bls.n	8004ac2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e007      	b.n	8004ad2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_PWREx_ConfigSupply+0x70>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ace:	d1ee      	bne.n	8004aae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	58024800 	.word	0x58024800

08004ae0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	; 0x30
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e3ff      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 8087 	beq.w	8004c0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b00:	4b99      	ldr	r3, [pc, #612]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b0a:	4b97      	ldr	r3, [pc, #604]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d007      	beq.n	8004b26 <HAL_RCC_OscConfig+0x46>
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	2b18      	cmp	r3, #24
 8004b1a:	d110      	bne.n	8004b3e <HAL_RCC_OscConfig+0x5e>
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d10b      	bne.n	8004b3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b26:	4b90      	ldr	r3, [pc, #576]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d06c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x12c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d168      	bne.n	8004c0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e3d9      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b46:	d106      	bne.n	8004b56 <HAL_RCC_OscConfig+0x76>
 8004b48:	4b87      	ldr	r3, [pc, #540]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a86      	ldr	r2, [pc, #536]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	e02e      	b.n	8004bb4 <HAL_RCC_OscConfig+0xd4>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x98>
 8004b5e:	4b82      	ldr	r3, [pc, #520]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a81      	ldr	r2, [pc, #516]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b7f      	ldr	r3, [pc, #508]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a7e      	ldr	r2, [pc, #504]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e01d      	b.n	8004bb4 <HAL_RCC_OscConfig+0xd4>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0xbc>
 8004b82:	4b79      	ldr	r3, [pc, #484]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a78      	ldr	r2, [pc, #480]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a75      	ldr	r2, [pc, #468]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e00b      	b.n	8004bb4 <HAL_RCC_OscConfig+0xd4>
 8004b9c:	4b72      	ldr	r3, [pc, #456]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a71      	ldr	r2, [pc, #452]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	4b6f      	ldr	r3, [pc, #444]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a6e      	ldr	r2, [pc, #440]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d013      	beq.n	8004be4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fc faac 	bl	8001118 <HAL_GetTick>
 8004bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7fc faa8 	bl	8001118 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e38d      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bd6:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xe4>
 8004be2:	e014      	b.n	8004c0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fc fa98 	bl	8001118 <HAL_GetTick>
 8004be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bec:	f7fc fa94 	bl	8001118 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e379      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bfe:	4b5a      	ldr	r3, [pc, #360]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x10c>
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80ae 	beq.w	8004d78 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1c:	4b52      	ldr	r3, [pc, #328]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c26:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <HAL_RCC_OscConfig+0x162>
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	2b18      	cmp	r3, #24
 8004c36:	d13a      	bne.n	8004cae <HAL_RCC_OscConfig+0x1ce>
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d135      	bne.n	8004cae <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c42:	4b49      	ldr	r3, [pc, #292]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_RCC_OscConfig+0x17a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e34b      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5a:	f7fc fa8d 	bl	8001178 <HAL_GetREVID>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d817      	bhi.n	8004c98 <HAL_RCC_OscConfig+0x1b8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d108      	bne.n	8004c82 <HAL_RCC_OscConfig+0x1a2>
 8004c70:	4b3d      	ldr	r3, [pc, #244]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c78:	4a3b      	ldr	r2, [pc, #236]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c80:	e07a      	b.n	8004d78 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c82:	4b39      	ldr	r3, [pc, #228]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	031b      	lsls	r3, r3, #12
 8004c90:	4935      	ldr	r1, [pc, #212]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c96:	e06f      	b.n	8004d78 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c98:	4b33      	ldr	r3, [pc, #204]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	4930      	ldr	r1, [pc, #192]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cac:	e064      	b.n	8004d78 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d045      	beq.n	8004d42 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 0219 	bic.w	r2, r3, #25
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	4929      	ldr	r1, [pc, #164]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fc fa26 	bl	8001118 <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd0:	f7fc fa22 	bl	8001118 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e307      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ce2:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cee:	f7fc fa43 	bl	8001178 <HAL_GetREVID>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d817      	bhi.n	8004d2c <HAL_RCC_OscConfig+0x24c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d108      	bne.n	8004d16 <HAL_RCC_OscConfig+0x236>
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d0c:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d12:	6053      	str	r3, [r2, #4]
 8004d14:	e030      	b.n	8004d78 <HAL_RCC_OscConfig+0x298>
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	031b      	lsls	r3, r3, #12
 8004d24:	4910      	ldr	r1, [pc, #64]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	604b      	str	r3, [r1, #4]
 8004d2a:	e025      	b.n	8004d78 <HAL_RCC_OscConfig+0x298>
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	061b      	lsls	r3, r3, #24
 8004d3a:	490b      	ldr	r1, [pc, #44]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
 8004d40:	e01a      	b.n	8004d78 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <HAL_RCC_OscConfig+0x288>)
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4e:	f7fc f9e3 	bl	8001118 <HAL_GetTick>
 8004d52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d54:	e00a      	b.n	8004d6c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d56:	f7fc f9df 	bl	8001118 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d903      	bls.n	8004d6c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e2c4      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
 8004d68:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d6c:	4ba4      	ldr	r3, [pc, #656]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1ee      	bne.n	8004d56 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80a9 	beq.w	8004ed8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d86:	4b9e      	ldr	r3, [pc, #632]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d90:	4b9b      	ldr	r3, [pc, #620]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d007      	beq.n	8004dac <HAL_RCC_OscConfig+0x2cc>
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b18      	cmp	r3, #24
 8004da0:	d13a      	bne.n	8004e18 <HAL_RCC_OscConfig+0x338>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d135      	bne.n	8004e18 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dac:	4b94      	ldr	r3, [pc, #592]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x2e4>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	2b80      	cmp	r3, #128	; 0x80
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e296      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dc4:	f7fc f9d8 	bl	8001178 <HAL_GetREVID>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f241 0203 	movw	r2, #4099	; 0x1003
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d817      	bhi.n	8004e02 <HAL_RCC_OscConfig+0x322>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d108      	bne.n	8004dec <HAL_RCC_OscConfig+0x30c>
 8004dda:	4b89      	ldr	r3, [pc, #548]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004de2:	4a87      	ldr	r2, [pc, #540]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dea:	e075      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dec:	4b84      	ldr	r3, [pc, #528]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	069b      	lsls	r3, r3, #26
 8004dfa:	4981      	ldr	r1, [pc, #516]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e00:	e06a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e02:	4b7f      	ldr	r3, [pc, #508]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	497b      	ldr	r1, [pc, #492]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e16:	e05f      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d042      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e20:	4b77      	ldr	r3, [pc, #476]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a76      	ldr	r2, [pc, #472]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fc f974 	bl	8001118 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e34:	f7fc f970 	bl	8001118 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e255      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e46:	4b6e      	ldr	r3, [pc, #440]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e52:	f7fc f991 	bl	8001178 <HAL_GetREVID>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d817      	bhi.n	8004e90 <HAL_RCC_OscConfig+0x3b0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d108      	bne.n	8004e7a <HAL_RCC_OscConfig+0x39a>
 8004e68:	4b65      	ldr	r3, [pc, #404]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e70:	4a63      	ldr	r2, [pc, #396]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e76:	6053      	str	r3, [r2, #4]
 8004e78:	e02e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3f8>
 8004e7a:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	069b      	lsls	r3, r3, #26
 8004e88:	495d      	ldr	r1, [pc, #372]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	604b      	str	r3, [r1, #4]
 8004e8e:	e023      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3f8>
 8004e90:	4b5b      	ldr	r3, [pc, #364]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	061b      	lsls	r3, r3, #24
 8004e9e:	4958      	ldr	r1, [pc, #352]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60cb      	str	r3, [r1, #12]
 8004ea4:	e018      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ea6:	4b56      	ldr	r3, [pc, #344]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a55      	ldr	r2, [pc, #340]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fc f931 	bl	8001118 <HAL_GetTick>
 8004eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004eba:	f7fc f92d 	bl	8001118 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e212      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ecc:	4b4c      	ldr	r3, [pc, #304]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f0      	bne.n	8004eba <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d036      	beq.n	8004f52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d019      	beq.n	8004f20 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eec:	4b44      	ldr	r3, [pc, #272]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef0:	4a43      	ldr	r2, [pc, #268]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef8:	f7fc f90e 	bl	8001118 <HAL_GetTick>
 8004efc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f00:	f7fc f90a 	bl	8001118 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e1ef      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f12:	4b3b      	ldr	r3, [pc, #236]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x420>
 8004f1e:	e018      	b.n	8004f52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f20:	4b37      	ldr	r3, [pc, #220]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f24:	4a36      	ldr	r2, [pc, #216]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7fc f8f4 	bl	8001118 <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f34:	f7fc f8f0 	bl	8001118 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1d5      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f46:	4b2e      	ldr	r3, [pc, #184]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d036      	beq.n	8004fcc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d019      	beq.n	8004f9a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f66:	4b26      	ldr	r3, [pc, #152]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a25      	ldr	r2, [pc, #148]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004f6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f72:	f7fc f8d1 	bl	8001118 <HAL_GetTick>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f7a:	f7fc f8cd 	bl	8001118 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e1b2      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x49a>
 8004f98:	e018      	b.n	8004fcc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f9a:	4b19      	ldr	r3, [pc, #100]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a18      	ldr	r2, [pc, #96]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fa6:	f7fc f8b7 	bl	8001118 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004fae:	f7fc f8b3 	bl	8001118 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e198      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_RCC_OscConfig+0x520>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f0      	bne.n	8004fae <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8085 	beq.w	80050e4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_RCC_OscConfig+0x524>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a09      	ldr	r2, [pc, #36]	; (8005004 <HAL_RCC_OscConfig+0x524>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe6:	f7fc f897 	bl	8001118 <HAL_GetTick>
 8004fea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fec:	e00c      	b.n	8005008 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fc f893 	bl	8001118 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b64      	cmp	r3, #100	; 0x64
 8004ffa:	d905      	bls.n	8005008 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e178      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
 8005000:	58024400 	.word	0x58024400
 8005004:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005008:	4b96      	ldr	r3, [pc, #600]	; (8005264 <HAL_RCC_OscConfig+0x784>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0ec      	beq.n	8004fee <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x54a>
 800501c:	4b92      	ldr	r3, [pc, #584]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	4a91      	ldr	r2, [pc, #580]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	; 0x70
 8005028:	e02d      	b.n	8005086 <HAL_RCC_OscConfig+0x5a6>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x56c>
 8005032:	4b8d      	ldr	r3, [pc, #564]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	4a8c      	ldr	r2, [pc, #560]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	6713      	str	r3, [r2, #112]	; 0x70
 800503e:	4b8a      	ldr	r3, [pc, #552]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	4a89      	ldr	r2, [pc, #548]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
 800504a:	e01c      	b.n	8005086 <HAL_RCC_OscConfig+0x5a6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d10c      	bne.n	800506e <HAL_RCC_OscConfig+0x58e>
 8005054:	4b84      	ldr	r3, [pc, #528]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005058:	4a83      	ldr	r2, [pc, #524]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 800505a:	f043 0304 	orr.w	r3, r3, #4
 800505e:	6713      	str	r3, [r2, #112]	; 0x70
 8005060:	4b81      	ldr	r3, [pc, #516]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	4a80      	ldr	r2, [pc, #512]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6713      	str	r3, [r2, #112]	; 0x70
 800506c:	e00b      	b.n	8005086 <HAL_RCC_OscConfig+0x5a6>
 800506e:	4b7e      	ldr	r3, [pc, #504]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	4a7d      	ldr	r2, [pc, #500]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	6713      	str	r3, [r2, #112]	; 0x70
 800507a:	4b7b      	ldr	r3, [pc, #492]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507e:	4a7a      	ldr	r2, [pc, #488]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d015      	beq.n	80050ba <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508e:	f7fc f843 	bl	8001118 <HAL_GetTick>
 8005092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fc f83f 	bl	8001118 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e122      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ac:	4b6e      	ldr	r3, [pc, #440]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ee      	beq.n	8005096 <HAL_RCC_OscConfig+0x5b6>
 80050b8:	e014      	b.n	80050e4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ba:	f7fc f82d 	bl	8001118 <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fc f829 	bl	8001118 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e10c      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050d8:	4b63      	ldr	r3, [pc, #396]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ee      	bne.n	80050c2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8101 	beq.w	80052f0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050ee:	4b5e      	ldr	r3, [pc, #376]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050f6:	2b18      	cmp	r3, #24
 80050f8:	f000 80bc 	beq.w	8005274 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b02      	cmp	r3, #2
 8005102:	f040 8095 	bne.w	8005230 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005106:	4b58      	ldr	r3, [pc, #352]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a57      	ldr	r2, [pc, #348]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 800510c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7fc f801 	bl	8001118 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800511a:	f7fb fffd 	bl	8001118 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e0e2      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800512c:	4b4e      	ldr	r3, [pc, #312]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005138:	4b4b      	ldr	r3, [pc, #300]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 800513a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800513c:	4b4b      	ldr	r3, [pc, #300]	; (800526c <HAL_RCC_OscConfig+0x78c>)
 800513e:	4013      	ands	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005148:	0112      	lsls	r2, r2, #4
 800514a:	430a      	orrs	r2, r1
 800514c:	4946      	ldr	r1, [pc, #280]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 800514e:	4313      	orrs	r3, r2
 8005150:	628b      	str	r3, [r1, #40]	; 0x28
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	3b01      	subs	r3, #1
 8005158:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005160:	3b01      	subs	r3, #1
 8005162:	025b      	lsls	r3, r3, #9
 8005164:	b29b      	uxth	r3, r3
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	3b01      	subs	r3, #1
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	3b01      	subs	r3, #1
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005182:	4939      	ldr	r1, [pc, #228]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005184:	4313      	orrs	r3, r2
 8005186:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005188:	4b37      	ldr	r3, [pc, #220]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	4a36      	ldr	r2, [pc, #216]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005194:	4b34      	ldr	r3, [pc, #208]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005198:	4b35      	ldr	r3, [pc, #212]	; (8005270 <HAL_RCC_OscConfig+0x790>)
 800519a:	4013      	ands	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051a0:	00d2      	lsls	r2, r2, #3
 80051a2:	4931      	ldr	r1, [pc, #196]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051a8:	4b2f      	ldr	r3, [pc, #188]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	f023 020c 	bic.w	r2, r3, #12
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	492c      	ldr	r1, [pc, #176]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051ba:	4b2b      	ldr	r3, [pc, #172]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	f023 0202 	bic.w	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c6:	4928      	ldr	r1, [pc, #160]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051cc:	4b26      	ldr	r3, [pc, #152]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	4a25      	ldr	r2, [pc, #148]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d8:	4b23      	ldr	r3, [pc, #140]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4a22      	ldr	r2, [pc, #136]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051e4:	4b20      	ldr	r3, [pc, #128]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80051f0:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	4a1c      	ldr	r2, [pc, #112]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051fc:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a19      	ldr	r2, [pc, #100]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fb ff86 	bl	8001118 <HAL_GetTick>
 800520c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005210:	f7fb ff82 	bl	8001118 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e067      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005222:	4b11      	ldr	r3, [pc, #68]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x730>
 800522e:	e05f      	b.n	80052f0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a0c      	ldr	r2, [pc, #48]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800523a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fb ff6c 	bl	8001118 <HAL_GetTick>
 8005240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005244:	f7fb ff68 	bl	8001118 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e04d      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005256:	4b04      	ldr	r3, [pc, #16]	; (8005268 <HAL_RCC_OscConfig+0x788>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0x764>
 8005262:	e045      	b.n	80052f0 <HAL_RCC_OscConfig+0x810>
 8005264:	58024800 	.word	0x58024800
 8005268:	58024400 	.word	0x58024400
 800526c:	fffffc0c 	.word	0xfffffc0c
 8005270:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005274:	4b21      	ldr	r3, [pc, #132]	; (80052fc <HAL_RCC_OscConfig+0x81c>)
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_RCC_OscConfig+0x81c>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	2b01      	cmp	r3, #1
 8005286:	d031      	beq.n	80052ec <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f003 0203 	and.w	r2, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d12a      	bne.n	80052ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d122      	bne.n	80052ec <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d11a      	bne.n	80052ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	0a5b      	lsrs	r3, r3, #9
 80052ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d111      	bne.n	80052ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d108      	bne.n	80052ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d001      	beq.n	80052f0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3730      	adds	r7, #48	; 0x30
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400

08005300 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e19c      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005314:	4b8a      	ldr	r3, [pc, #552]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d910      	bls.n	8005344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b87      	ldr	r3, [pc, #540]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 020f 	bic.w	r2, r3, #15
 800532a:	4985      	ldr	r1, [pc, #532]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b83      	ldr	r3, [pc, #524]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e184      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d010      	beq.n	8005372 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800535c:	429a      	cmp	r2, r3
 800535e:	d908      	bls.n	8005372 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005360:	4b78      	ldr	r3, [pc, #480]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	4975      	ldr	r1, [pc, #468]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800536e:	4313      	orrs	r3, r2
 8005370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d010      	beq.n	80053a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695a      	ldr	r2, [r3, #20]
 8005382:	4b70      	ldr	r3, [pc, #448]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800538a:	429a      	cmp	r2, r3
 800538c:	d908      	bls.n	80053a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800538e:	4b6d      	ldr	r3, [pc, #436]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	496a      	ldr	r1, [pc, #424]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800539c:	4313      	orrs	r3, r2
 800539e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d010      	beq.n	80053ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	4b64      	ldr	r3, [pc, #400]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d908      	bls.n	80053ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053bc:	4b61      	ldr	r3, [pc, #388]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	495e      	ldr	r1, [pc, #376]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d908      	bls.n	80053fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053ea:	4b56      	ldr	r3, [pc, #344]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	4953      	ldr	r1, [pc, #332]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	4b4d      	ldr	r3, [pc, #308]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	429a      	cmp	r2, r3
 8005416:	d908      	bls.n	800542a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005418:	4b4a      	ldr	r3, [pc, #296]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f023 020f 	bic.w	r2, r3, #15
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4947      	ldr	r1, [pc, #284]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005426:	4313      	orrs	r3, r2
 8005428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d055      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005436:	4b43      	ldr	r3, [pc, #268]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	4940      	ldr	r1, [pc, #256]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005444:	4313      	orrs	r3, r2
 8005446:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d107      	bne.n	8005460 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005450:	4b3c      	ldr	r3, [pc, #240]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d121      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0f6      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d107      	bne.n	8005478 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005468:	4b36      	ldr	r3, [pc, #216]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d115      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0ea      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d107      	bne.n	8005490 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005480:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0de      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0d6      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f023 0207 	bic.w	r2, r3, #7
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4925      	ldr	r1, [pc, #148]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b2:	f7fb fe31 	bl	8001118 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b8:	e00a      	b.n	80054d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ba:	f7fb fe2d 	bl	8001118 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e0be      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d0:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	429a      	cmp	r2, r3
 80054e0:	d1eb      	bne.n	80054ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d010      	beq.n	8005510 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	4b14      	ldr	r3, [pc, #80]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d208      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f023 020f 	bic.w	r2, r3, #15
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	490e      	ldr	r1, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x244>)
 800550c:	4313      	orrs	r3, r2
 800550e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d214      	bcs.n	8005548 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551e:	4b08      	ldr	r3, [pc, #32]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 020f 	bic.w	r2, r3, #15
 8005526:	4906      	ldr	r1, [pc, #24]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	4313      	orrs	r3, r2
 800552c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <HAL_RCC_ClockConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d005      	beq.n	8005548 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e086      	b.n	800564e <HAL_RCC_ClockConfig+0x34e>
 8005540:	52002000 	.word	0x52002000
 8005544:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	4b3f      	ldr	r3, [pc, #252]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005560:	429a      	cmp	r2, r3
 8005562:	d208      	bcs.n	8005576 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005564:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	4939      	ldr	r1, [pc, #228]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005572:	4313      	orrs	r3, r2
 8005574:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d010      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	4b34      	ldr	r3, [pc, #208]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800558e:	429a      	cmp	r2, r3
 8005590:	d208      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005592:	4b31      	ldr	r3, [pc, #196]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	492e      	ldr	r1, [pc, #184]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	4b28      	ldr	r3, [pc, #160]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055bc:	429a      	cmp	r2, r3
 80055be:	d208      	bcs.n	80055d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055c0:	4b25      	ldr	r3, [pc, #148]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	4922      	ldr	r1, [pc, #136]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d208      	bcs.n	8005600 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80055ee:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4917      	ldr	r1, [pc, #92]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005600:	f000 f834 	bl	800566c <HAL_RCC_GetSysClockFreq>
 8005604:	4602      	mov	r2, r0
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	4912      	ldr	r1, [pc, #72]	; (800565c <HAL_RCC_ClockConfig+0x35c>)
 8005612:	5ccb      	ldrb	r3, [r1, r3]
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
 800561c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800561e:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <HAL_RCC_ClockConfig+0x358>)
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	4a0d      	ldr	r2, [pc, #52]	; (800565c <HAL_RCC_ClockConfig+0x35c>)
 8005628:	5cd3      	ldrb	r3, [r2, r3]
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <HAL_RCC_ClockConfig+0x360>)
 8005636:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005638:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <HAL_RCC_ClockConfig+0x364>)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800563e:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <HAL_RCC_ClockConfig+0x368>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fb fd1e 	bl	8001084 <HAL_InitTick>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	58024400 	.word	0x58024400
 800565c:	0800777c 	.word	0x0800777c
 8005660:	240000c0 	.word	0x240000c0
 8005664:	240000bc 	.word	0x240000bc
 8005668:	240000c4 	.word	0x240000c4

0800566c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	b089      	sub	sp, #36	; 0x24
 8005670:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005672:	4bb3      	ldr	r3, [pc, #716]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567a:	2b18      	cmp	r3, #24
 800567c:	f200 8155 	bhi.w	800592a <HAL_RCC_GetSysClockFreq+0x2be>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056ed 	.word	0x080056ed
 800568c:	0800592b 	.word	0x0800592b
 8005690:	0800592b 	.word	0x0800592b
 8005694:	0800592b 	.word	0x0800592b
 8005698:	0800592b 	.word	0x0800592b
 800569c:	0800592b 	.word	0x0800592b
 80056a0:	0800592b 	.word	0x0800592b
 80056a4:	0800592b 	.word	0x0800592b
 80056a8:	08005713 	.word	0x08005713
 80056ac:	0800592b 	.word	0x0800592b
 80056b0:	0800592b 	.word	0x0800592b
 80056b4:	0800592b 	.word	0x0800592b
 80056b8:	0800592b 	.word	0x0800592b
 80056bc:	0800592b 	.word	0x0800592b
 80056c0:	0800592b 	.word	0x0800592b
 80056c4:	0800592b 	.word	0x0800592b
 80056c8:	08005719 	.word	0x08005719
 80056cc:	0800592b 	.word	0x0800592b
 80056d0:	0800592b 	.word	0x0800592b
 80056d4:	0800592b 	.word	0x0800592b
 80056d8:	0800592b 	.word	0x0800592b
 80056dc:	0800592b 	.word	0x0800592b
 80056e0:	0800592b 	.word	0x0800592b
 80056e4:	0800592b 	.word	0x0800592b
 80056e8:	0800571f 	.word	0x0800571f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056ec:	4b94      	ldr	r3, [pc, #592]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056f8:	4b91      	ldr	r3, [pc, #580]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	08db      	lsrs	r3, r3, #3
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	4a90      	ldr	r2, [pc, #576]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
 8005708:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800570a:	e111      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800570c:	4b8d      	ldr	r3, [pc, #564]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800570e:	61bb      	str	r3, [r7, #24]
    break;
 8005710:	e10e      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005712:	4b8d      	ldr	r3, [pc, #564]	; (8005948 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005714:	61bb      	str	r3, [r7, #24]
    break;
 8005716:	e10b      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005718:	4b8c      	ldr	r3, [pc, #560]	; (800594c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800571a:	61bb      	str	r3, [r7, #24]
    break;
 800571c:	e108      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800571e:	4b88      	ldr	r3, [pc, #544]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005728:	4b85      	ldr	r3, [pc, #532]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	091b      	lsrs	r3, r3, #4
 800572e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005732:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005734:	4b82      	ldr	r3, [pc, #520]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800573e:	4b80      	ldr	r3, [pc, #512]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	08db      	lsrs	r3, r3, #3
 8005744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80e1 	beq.w	8005924 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b02      	cmp	r3, #2
 8005766:	f000 8083 	beq.w	8005870 <HAL_RCC_GetSysClockFreq+0x204>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b02      	cmp	r3, #2
 800576e:	f200 80a1 	bhi.w	80058b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_RCC_GetSysClockFreq+0x114>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d056      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0x1c0>
 800577e:	e099      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005780:	4b6f      	ldr	r3, [pc, #444]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02d      	beq.n	80057e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800578c:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	4a6b      	ldr	r2, [pc, #428]	; (8005944 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b6:	4b62      	ldr	r3, [pc, #392]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80057e6:	e087      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005954 <HAL_RCC_GetSysClockFreq+0x2e8>
 80057f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fa:	4b51      	ldr	r3, [pc, #324]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580a:	ed97 6a02 	vldr	s12, [r7, #8]
 800580e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800582a:	e065      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005836:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005958 <HAL_RCC_GetSysClockFreq+0x2ec>
 800583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583e:	4b40      	ldr	r3, [pc, #256]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005852:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800586e:	e043      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800595c <HAL_RCC_GetSysClockFreq+0x2f0>
 800587e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005882:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005892:	ed97 6a02 	vldr	s12, [r7, #8]
 8005896:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 800589a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058b2:	e021      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005958 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c6:	4b1e      	ldr	r3, [pc, #120]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005950 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	0a5b      	lsrs	r3, r3, #9
 80058fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005902:	3301      	adds	r3, #1
 8005904:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005910:	edd7 6a07 	vldr	s13, [r7, #28]
 8005914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591c:	ee17 3a90 	vmov	r3, s15
 8005920:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005922:	e005      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	61bb      	str	r3, [r7, #24]
    break;
 8005928:	e002      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800592c:	61bb      	str	r3, [r7, #24]
    break;
 800592e:	bf00      	nop
  }

  return sysclockfreq;
 8005930:	69bb      	ldr	r3, [r7, #24]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3724      	adds	r7, #36	; 0x24
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	58024400 	.word	0x58024400
 8005944:	03d09000 	.word	0x03d09000
 8005948:	003d0900 	.word	0x003d0900
 800594c:	007a1200 	.word	0x007a1200
 8005950:	46000000 	.word	0x46000000
 8005954:	4c742400 	.word	0x4c742400
 8005958:	4a742400 	.word	0x4a742400
 800595c:	4af42400 	.word	0x4af42400

08005960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005966:	f7ff fe81 	bl	800566c <HAL_RCC_GetSysClockFreq>
 800596a:	4602      	mov	r2, r0
 800596c:	4b10      	ldr	r3, [pc, #64]	; (80059b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	0a1b      	lsrs	r3, r3, #8
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	490f      	ldr	r1, [pc, #60]	; (80059b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005978:	5ccb      	ldrb	r3, [r1, r3]
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	fa22 f303 	lsr.w	r3, r2, r3
 8005982:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800598e:	5cd3      	ldrb	r3, [r2, r3]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	fa22 f303 	lsr.w	r3, r2, r3
 800599a:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800599c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800599e:	4a07      	ldr	r2, [pc, #28]	; (80059bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80059a6:	681b      	ldr	r3, [r3, #0]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	58024400 	.word	0x58024400
 80059b4:	0800777c 	.word	0x0800777c
 80059b8:	240000c0 	.word	0x240000c0
 80059bc:	240000bc 	.word	0x240000bc

080059c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059c4:	f7ff ffcc 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	091b      	lsrs	r3, r3, #4
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4904      	ldr	r1, [pc, #16]	; (80059e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	58024400 	.word	0x58024400
 80059e8:	0800777c 	.word	0x0800777c

080059ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80059f0:	f7ff ffb6 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 80059f4:	4602      	mov	r2, r0
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	4904      	ldr	r1, [pc, #16]	; (8005a14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a02:	5ccb      	ldrb	r3, [r1, r3]
 8005a04:	f003 031f 	and.w	r3, r3, #31
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	58024400 	.word	0x58024400
 8005a14:	0800777c 	.word	0x0800777c

08005a18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a1c:	f7ff ffa0 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	4904      	ldr	r1, [pc, #16]	; (8005a40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	0800777c 	.word	0x0800777c

08005a44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b089      	sub	sp, #36	; 0x24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a4c:	4ba1      	ldr	r3, [pc, #644]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005a56:	4b9f      	ldr	r3, [pc, #636]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	0b1b      	lsrs	r3, r3, #12
 8005a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a62:	4b9c      	ldr	r3, [pc, #624]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	091b      	lsrs	r3, r3, #4
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005a6e:	4b99      	ldr	r3, [pc, #612]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	08db      	lsrs	r3, r3, #3
 8005a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8111 	beq.w	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	f000 8083 	beq.w	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	f200 80a1 	bhi.w	8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d056      	beq.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005aae:	e099      	b.n	8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ab0:	4b88      	ldr	r3, [pc, #544]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d02d      	beq.n	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005abc:	4b85      	ldr	r3, [pc, #532]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	08db      	lsrs	r3, r3, #3
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	4a84      	ldr	r2, [pc, #528]	; (8005cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8005acc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	ee07 3a90 	vmov	s15, r3
 8005ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae6:	4b7b      	ldr	r3, [pc, #492]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005afa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b16:	e087      	b.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2a:	4b6a      	ldr	r3, [pc, #424]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b5a:	e065      	b.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6e:	4b59      	ldr	r3, [pc, #356]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b9e:	e043      	b.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005baa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb2:	4b48      	ldr	r3, [pc, #288]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005be2:	e021      	b.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf6:	4b37      	ldr	r3, [pc, #220]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005c28:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	0a5b      	lsrs	r3, r3, #9
 8005c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4e:	ee17 2a90 	vmov	r2, s15
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005c56:	4b1f      	ldr	r3, [pc, #124]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	0c1b      	lsrs	r3, r3, #16
 8005c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c60:	ee07 3a90 	vmov	s15, r3
 8005c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7c:	ee17 2a90 	vmov	r2, s15
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005c84:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	0e1b      	lsrs	r3, r3, #24
 8005c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005caa:	ee17 2a90 	vmov	r2, s15
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	609a      	str	r2, [r3, #8]
}
 8005cc6:	bf00      	nop
 8005cc8:	3724      	adds	r7, #36	; 0x24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	58024400 	.word	0x58024400
 8005cd8:	03d09000 	.word	0x03d09000
 8005cdc:	46000000 	.word	0x46000000
 8005ce0:	4c742400 	.word	0x4c742400
 8005ce4:	4a742400 	.word	0x4a742400
 8005ce8:	4af42400 	.word	0x4af42400

08005cec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cf4:	4ba1      	ldr	r3, [pc, #644]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005cfe:	4b9f      	ldr	r3, [pc, #636]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	0d1b      	lsrs	r3, r3, #20
 8005d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d0a:	4b9c      	ldr	r3, [pc, #624]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005d16:	4b99      	ldr	r3, [pc, #612]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	08db      	lsrs	r3, r3, #3
 8005d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8111 	beq.w	8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	f000 8083 	beq.w	8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	f200 80a1 	bhi.w	8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d056      	beq.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d56:	e099      	b.n	8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d58:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02d      	beq.n	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d64:	4b85      	ldr	r3, [pc, #532]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	08db      	lsrs	r3, r3, #3
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	4a84      	ldr	r2, [pc, #528]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b7b      	ldr	r3, [pc, #492]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005dbe:	e087      	b.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd2:	4b6a      	ldr	r3, [pc, #424]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e02:	e065      	b.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e16:	4b59      	ldr	r3, [pc, #356]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e46:	e043      	b.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5a:	4b48      	ldr	r3, [pc, #288]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e8a:	e021      	b.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9e:	4b37      	ldr	r3, [pc, #220]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ece:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005ed0:	4b2a      	ldr	r3, [pc, #168]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	0a5b      	lsrs	r3, r3, #9
 8005ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef6:	ee17 2a90 	vmov	r2, s15
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005efe:	4b1f      	ldr	r3, [pc, #124]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	0c1b      	lsrs	r3, r3, #16
 8005f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f24:	ee17 2a90 	vmov	r2, s15
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005f2c:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	0e1b      	lsrs	r3, r3, #24
 8005f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f52:	ee17 2a90 	vmov	r2, s15
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f5a:	e008      	b.n	8005f6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	609a      	str	r2, [r3, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	3724      	adds	r7, #36	; 0x24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	03d09000 	.word	0x03d09000
 8005f84:	46000000 	.word	0x46000000
 8005f88:	4c742400 	.word	0x4c742400
 8005f8c:	4a742400 	.word	0x4a742400
 8005f90:	4af42400 	.word	0x4af42400

08005f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e042      	b.n	800602c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d106      	bne.n	8005fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fa fc97 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2224      	movs	r2, #36	; 0x24
 8005fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fbb8 	bl	800674c <UART_SetConfig>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e022      	b.n	800602c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 f90c 	bl	800720c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 f993 	bl	8007350 <UART_CheckIdleState>
 800602a:	4603      	mov	r3, r0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e02e      	b.n	80060a4 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2224      	movs	r2, #36	; 0x24
 800604a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fa fd22 	bl	8000ac0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d168      	bne.n	8006196 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_Transmit_DMA+0x24>
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e061      	b.n	8006198 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_UART_Transmit_DMA+0x36>
 80060de:	2302      	movs	r3, #2
 80060e0:	e05a      	b.n	8006198 <HAL_UART_Transmit_DMA+0xec>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	88fa      	ldrh	r2, [r7, #6]
 80060f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	88fa      	ldrh	r2, [r7, #6]
 80060fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2221      	movs	r2, #33	; 0x21
 800610c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006114:	2b00      	cmp	r3, #0
 8006116:	d02c      	beq.n	8006172 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800611c:	4a20      	ldr	r2, [pc, #128]	; (80061a0 <HAL_UART_Transmit_DMA+0xf4>)
 800611e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006124:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <HAL_UART_Transmit_DMA+0xf8>)
 8006126:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800612c:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <HAL_UART_Transmit_DMA+0xfc>)
 800612e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006134:	2200      	movs	r2, #0
 8006136:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006140:	4619      	mov	r1, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3328      	adds	r3, #40	; 0x28
 8006148:	461a      	mov	r2, r3
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	f7fb fe74 	bl	8001e38 <HAL_DMA_Start_IT>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2210      	movs	r2, #16
 800615a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e012      	b.n	8006198 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2240      	movs	r2, #64	; 0x40
 8006178:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006190:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	08007589 	.word	0x08007589
 80061a4:	080075d9 	.word	0x080075d9
 80061a8:	080075f5 	.word	0x080075f5

080061ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80061d2:	4013      	ands	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d118      	bne.n	800620e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d013      	beq.n	800620e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8282 	beq.w	8006708 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
      }
      return;
 800620c:	e27c      	b.n	8006708 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 80ef 	beq.w	80063f4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4b73      	ldr	r3, [pc, #460]	; (80063e8 <HAL_UART_IRQHandler+0x23c>)
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d105      	bne.n	800622c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4b72      	ldr	r3, [pc, #456]	; (80063ec <HAL_UART_IRQHandler+0x240>)
 8006224:	4013      	ands	r3, r2
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80e4 	beq.w	80063f4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d010      	beq.n	8006258 <HAL_UART_IRQHandler+0xac>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2201      	movs	r2, #1
 8006246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800624e:	f043 0201 	orr.w	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d010      	beq.n	8006284 <HAL_UART_IRQHandler+0xd8>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2202      	movs	r2, #2
 8006272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800627a:	f043 0204 	orr.w	r2, r3, #4
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d010      	beq.n	80062b0 <HAL_UART_IRQHandler+0x104>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00b      	beq.n	80062b0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2204      	movs	r2, #4
 800629e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a6:	f043 0202 	orr.w	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d015      	beq.n	80062e6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4b48      	ldr	r3, [pc, #288]	; (80063e8 <HAL_UART_IRQHandler+0x23c>)
 80062c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2208      	movs	r2, #8
 80062d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062dc:	f043 0208 	orr.w	r2, r3, #8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d011      	beq.n	8006314 <HAL_UART_IRQHandler+0x168>
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800630a:	f043 0220 	orr.w	r2, r3, #32
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 81f6 	beq.w	800670c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d011      	beq.n	800634e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d104      	bne.n	800633e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006354:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b40      	cmp	r3, #64	; 0x40
 8006362:	d004      	beq.n	800636e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800636a:	2b00      	cmp	r3, #0
 800636c:	d031      	beq.n	80063d2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 f8d8 	bl	8007524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637e:	2b40      	cmp	r3, #64	; 0x40
 8006380:	d123      	bne.n	80063ca <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006390:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d013      	beq.n	80063c2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800639e:	4a14      	ldr	r2, [pc, #80]	; (80063f0 <HAL_UART_IRQHandler+0x244>)
 80063a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fc face 	bl	8002948 <HAL_DMA_Abort_IT>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d017      	beq.n	80063e2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80063bc:	4610      	mov	r0, r2
 80063be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	e00f      	b.n	80063e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fa fa00 	bl	80007c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c8:	e00b      	b.n	80063e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fa f9fc 	bl	80007c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	e007      	b.n	80063e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fa f9f8 	bl	80007c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80063e0:	e194      	b.n	800670c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e2:	bf00      	nop
    return;
 80063e4:	e192      	b.n	800670c <HAL_UART_IRQHandler+0x560>
 80063e6:	bf00      	nop
 80063e8:	10000001 	.word	0x10000001
 80063ec:	04000120 	.word	0x04000120
 80063f0:	08007675 	.word	0x08007675

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	f040 810f 	bne.w	800661c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8109 	beq.w	800661c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8103 	beq.w	800661c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2210      	movs	r2, #16
 800641c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b40      	cmp	r3, #64	; 0x40
 800642a:	f040 80bb 	bne.w	80065a4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a96      	ldr	r2, [pc, #600]	; (8006690 <HAL_UART_IRQHandler+0x4e4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d059      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a94      	ldr	r2, [pc, #592]	; (8006694 <HAL_UART_IRQHandler+0x4e8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d053      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a92      	ldr	r2, [pc, #584]	; (8006698 <HAL_UART_IRQHandler+0x4ec>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d04d      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a90      	ldr	r2, [pc, #576]	; (800669c <HAL_UART_IRQHandler+0x4f0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d047      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a8e      	ldr	r2, [pc, #568]	; (80066a0 <HAL_UART_IRQHandler+0x4f4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d041      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a8c      	ldr	r2, [pc, #560]	; (80066a4 <HAL_UART_IRQHandler+0x4f8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d03b      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a8a      	ldr	r2, [pc, #552]	; (80066a8 <HAL_UART_IRQHandler+0x4fc>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d035      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a88      	ldr	r2, [pc, #544]	; (80066ac <HAL_UART_IRQHandler+0x500>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d02f      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a86      	ldr	r2, [pc, #536]	; (80066b0 <HAL_UART_IRQHandler+0x504>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d029      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a84      	ldr	r2, [pc, #528]	; (80066b4 <HAL_UART_IRQHandler+0x508>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d023      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a82      	ldr	r2, [pc, #520]	; (80066b8 <HAL_UART_IRQHandler+0x50c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d01d      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a80      	ldr	r2, [pc, #512]	; (80066bc <HAL_UART_IRQHandler+0x510>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d017      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a7e      	ldr	r2, [pc, #504]	; (80066c0 <HAL_UART_IRQHandler+0x514>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d011      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a7c      	ldr	r2, [pc, #496]	; (80066c4 <HAL_UART_IRQHandler+0x518>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00b      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a7a      	ldr	r2, [pc, #488]	; (80066c8 <HAL_UART_IRQHandler+0x51c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d005      	beq.n	80064ee <HAL_UART_IRQHandler+0x342>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a78      	ldr	r2, [pc, #480]	; (80066cc <HAL_UART_IRQHandler+0x520>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d105      	bne.n	80064fa <HAL_UART_IRQHandler+0x34e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	e004      	b.n	8006504 <HAL_UART_IRQHandler+0x358>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	b29b      	uxth	r3, r3
 8006504:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006506:	893b      	ldrh	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8101 	beq.w	8006710 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006514:	893a      	ldrh	r2, [r7, #8]
 8006516:	429a      	cmp	r2, r3
 8006518:	f080 80fa 	bcs.w	8006710 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	893a      	ldrh	r2, [r7, #8]
 8006520:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652e:	d02b      	beq.n	8006588 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800653e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0210 	bic.w	r2, r2, #16
 800657c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006582:	4618      	mov	r0, r3
 8006584:	f7fb fec2 	bl	800230c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006594:	b29b      	uxth	r3, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	b29b      	uxth	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f8c9 	bl	8006734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065a2:	e0b5      	b.n	8006710 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80a8 	beq.w	8006714 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80065c4:	897b      	ldrh	r3, [r7, #10]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80a4 	beq.w	8006714 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065da:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6899      	ldr	r1, [r3, #8]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b3a      	ldr	r3, [pc, #232]	; (80066d0 <HAL_UART_IRQHandler+0x524>)
 80065e8:	400b      	ands	r3, r1
 80065ea:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0210 	bic.w	r2, r2, #16
 800660e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006610:	897b      	ldrh	r3, [r7, #10]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f88d 	bl	8006734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800661a:	e07b      	b.n	8006714 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00d      	beq.n	8006642 <HAL_UART_IRQHandler+0x496>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006638:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 f84a 	bl	80076d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006640:	e06b      	b.n	800671a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006648:	2b00      	cmp	r3, #0
 800664a:	d012      	beq.n	8006672 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006664:	2b00      	cmp	r3, #0
 8006666:	d057      	beq.n	8006718 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
    }
    return;
 8006670:	e052      	b.n	8006718 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d02b      	beq.n	80066d4 <HAL_UART_IRQHandler+0x528>
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d026      	beq.n	80066d4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 f80a 	bl	80076a0 <UART_EndTransmit_IT>
    return;
 800668c:	e045      	b.n	800671a <HAL_UART_IRQHandler+0x56e>
 800668e:	bf00      	nop
 8006690:	40020010 	.word	0x40020010
 8006694:	40020028 	.word	0x40020028
 8006698:	40020040 	.word	0x40020040
 800669c:	40020058 	.word	0x40020058
 80066a0:	40020070 	.word	0x40020070
 80066a4:	40020088 	.word	0x40020088
 80066a8:	400200a0 	.word	0x400200a0
 80066ac:	400200b8 	.word	0x400200b8
 80066b0:	40020410 	.word	0x40020410
 80066b4:	40020428 	.word	0x40020428
 80066b8:	40020440 	.word	0x40020440
 80066bc:	40020458 	.word	0x40020458
 80066c0:	40020470 	.word	0x40020470
 80066c4:	40020488 	.word	0x40020488
 80066c8:	400204a0 	.word	0x400204a0
 80066cc:	400204b8 	.word	0x400204b8
 80066d0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d008      	beq.n	80066f0 <HAL_UART_IRQHandler+0x544>
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 f807 	bl	80076fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066ee:	e014      	b.n	800671a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00f      	beq.n	800671a <HAL_UART_IRQHandler+0x56e>
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	da0c      	bge.n	800671a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fff1 	bl	80076e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006706:	e008      	b.n	800671a <HAL_UART_IRQHandler+0x56e>
      return;
 8006708:	bf00      	nop
 800670a:	e006      	b.n	800671a <HAL_UART_IRQHandler+0x56e>
    return;
 800670c:	bf00      	nop
 800670e:	e004      	b.n	800671a <HAL_UART_IRQHandler+0x56e>
      return;
 8006710:	bf00      	nop
 8006712:	e002      	b.n	800671a <HAL_UART_IRQHandler+0x56e>
      return;
 8006714:	bf00      	nop
 8006716:	e000      	b.n	800671a <HAL_UART_IRQHandler+0x56e>
    return;
 8006718:	bf00      	nop
  }
}
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800674c:	b5b0      	push	{r4, r5, r7, lr}
 800674e:	b08e      	sub	sp, #56	; 0x38
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	4313      	orrs	r3, r2
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	4bbf      	ldr	r3, [pc, #764]	; (8006a78 <UART_SetConfig+0x32c>)
 800677a:	4013      	ands	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006782:	430b      	orrs	r3, r1
 8006784:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4ab5      	ldr	r2, [pc, #724]	; (8006a7c <UART_SetConfig+0x330>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d004      	beq.n	80067b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067b2:	4313      	orrs	r3, r2
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	4bb0      	ldr	r3, [pc, #704]	; (8006a80 <UART_SetConfig+0x334>)
 80067be:	4013      	ands	r3, r2
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067c6:	430b      	orrs	r3, r1
 80067c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	f023 010f 	bic.w	r1, r3, #15
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4aa7      	ldr	r2, [pc, #668]	; (8006a84 <UART_SetConfig+0x338>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d176      	bne.n	80068d8 <UART_SetConfig+0x18c>
 80067ea:	4ba7      	ldr	r3, [pc, #668]	; (8006a88 <UART_SetConfig+0x33c>)
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067f2:	2b28      	cmp	r3, #40	; 0x28
 80067f4:	d86c      	bhi.n	80068d0 <UART_SetConfig+0x184>
 80067f6:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <UART_SetConfig+0xb0>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	080068a1 	.word	0x080068a1
 8006800:	080068d1 	.word	0x080068d1
 8006804:	080068d1 	.word	0x080068d1
 8006808:	080068d1 	.word	0x080068d1
 800680c:	080068d1 	.word	0x080068d1
 8006810:	080068d1 	.word	0x080068d1
 8006814:	080068d1 	.word	0x080068d1
 8006818:	080068d1 	.word	0x080068d1
 800681c:	080068a9 	.word	0x080068a9
 8006820:	080068d1 	.word	0x080068d1
 8006824:	080068d1 	.word	0x080068d1
 8006828:	080068d1 	.word	0x080068d1
 800682c:	080068d1 	.word	0x080068d1
 8006830:	080068d1 	.word	0x080068d1
 8006834:	080068d1 	.word	0x080068d1
 8006838:	080068d1 	.word	0x080068d1
 800683c:	080068b1 	.word	0x080068b1
 8006840:	080068d1 	.word	0x080068d1
 8006844:	080068d1 	.word	0x080068d1
 8006848:	080068d1 	.word	0x080068d1
 800684c:	080068d1 	.word	0x080068d1
 8006850:	080068d1 	.word	0x080068d1
 8006854:	080068d1 	.word	0x080068d1
 8006858:	080068d1 	.word	0x080068d1
 800685c:	080068b9 	.word	0x080068b9
 8006860:	080068d1 	.word	0x080068d1
 8006864:	080068d1 	.word	0x080068d1
 8006868:	080068d1 	.word	0x080068d1
 800686c:	080068d1 	.word	0x080068d1
 8006870:	080068d1 	.word	0x080068d1
 8006874:	080068d1 	.word	0x080068d1
 8006878:	080068d1 	.word	0x080068d1
 800687c:	080068c1 	.word	0x080068c1
 8006880:	080068d1 	.word	0x080068d1
 8006884:	080068d1 	.word	0x080068d1
 8006888:	080068d1 	.word	0x080068d1
 800688c:	080068d1 	.word	0x080068d1
 8006890:	080068d1 	.word	0x080068d1
 8006894:	080068d1 	.word	0x080068d1
 8006898:	080068d1 	.word	0x080068d1
 800689c:	080068c9 	.word	0x080068c9
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a6:	e222      	b.n	8006cee <UART_SetConfig+0x5a2>
 80068a8:	2304      	movs	r3, #4
 80068aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ae:	e21e      	b.n	8006cee <UART_SetConfig+0x5a2>
 80068b0:	2308      	movs	r3, #8
 80068b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b6:	e21a      	b.n	8006cee <UART_SetConfig+0x5a2>
 80068b8:	2310      	movs	r3, #16
 80068ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068be:	e216      	b.n	8006cee <UART_SetConfig+0x5a2>
 80068c0:	2320      	movs	r3, #32
 80068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c6:	e212      	b.n	8006cee <UART_SetConfig+0x5a2>
 80068c8:	2340      	movs	r3, #64	; 0x40
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ce:	e20e      	b.n	8006cee <UART_SetConfig+0x5a2>
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d6:	e20a      	b.n	8006cee <UART_SetConfig+0x5a2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a6b      	ldr	r2, [pc, #428]	; (8006a8c <UART_SetConfig+0x340>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d130      	bne.n	8006944 <UART_SetConfig+0x1f8>
 80068e2:	4b69      	ldr	r3, [pc, #420]	; (8006a88 <UART_SetConfig+0x33c>)
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d826      	bhi.n	800693c <UART_SetConfig+0x1f0>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0x1a8>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	0800690d 	.word	0x0800690d
 80068f8:	08006915 	.word	0x08006915
 80068fc:	0800691d 	.word	0x0800691d
 8006900:	08006925 	.word	0x08006925
 8006904:	0800692d 	.word	0x0800692d
 8006908:	08006935 	.word	0x08006935
 800690c:	2300      	movs	r3, #0
 800690e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006912:	e1ec      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691a:	e1e8      	b.n	8006cee <UART_SetConfig+0x5a2>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006922:	e1e4      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800692a:	e1e0      	b.n	8006cee <UART_SetConfig+0x5a2>
 800692c:	2320      	movs	r3, #32
 800692e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006932:	e1dc      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006934:	2340      	movs	r3, #64	; 0x40
 8006936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800693a:	e1d8      	b.n	8006cee <UART_SetConfig+0x5a2>
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006942:	e1d4      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a51      	ldr	r2, [pc, #324]	; (8006a90 <UART_SetConfig+0x344>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d130      	bne.n	80069b0 <UART_SetConfig+0x264>
 800694e:	4b4e      	ldr	r3, [pc, #312]	; (8006a88 <UART_SetConfig+0x33c>)
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b05      	cmp	r3, #5
 8006958:	d826      	bhi.n	80069a8 <UART_SetConfig+0x25c>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <UART_SetConfig+0x214>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006979 	.word	0x08006979
 8006964:	08006981 	.word	0x08006981
 8006968:	08006989 	.word	0x08006989
 800696c:	08006991 	.word	0x08006991
 8006970:	08006999 	.word	0x08006999
 8006974:	080069a1 	.word	0x080069a1
 8006978:	2300      	movs	r3, #0
 800697a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800697e:	e1b6      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006980:	2304      	movs	r3, #4
 8006982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006986:	e1b2      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006988:	2308      	movs	r3, #8
 800698a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800698e:	e1ae      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006990:	2310      	movs	r3, #16
 8006992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006996:	e1aa      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006998:	2320      	movs	r3, #32
 800699a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800699e:	e1a6      	b.n	8006cee <UART_SetConfig+0x5a2>
 80069a0:	2340      	movs	r3, #64	; 0x40
 80069a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069a6:	e1a2      	b.n	8006cee <UART_SetConfig+0x5a2>
 80069a8:	2380      	movs	r3, #128	; 0x80
 80069aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ae:	e19e      	b.n	8006cee <UART_SetConfig+0x5a2>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a37      	ldr	r2, [pc, #220]	; (8006a94 <UART_SetConfig+0x348>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d130      	bne.n	8006a1c <UART_SetConfig+0x2d0>
 80069ba:	4b33      	ldr	r3, [pc, #204]	; (8006a88 <UART_SetConfig+0x33c>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d826      	bhi.n	8006a14 <UART_SetConfig+0x2c8>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0x280>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069e5 	.word	0x080069e5
 80069d0:	080069ed 	.word	0x080069ed
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006a05 	.word	0x08006a05
 80069e0:	08006a0d 	.word	0x08006a0d
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ea:	e180      	b.n	8006cee <UART_SetConfig+0x5a2>
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069f2:	e17c      	b.n	8006cee <UART_SetConfig+0x5a2>
 80069f4:	2308      	movs	r3, #8
 80069f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069fa:	e178      	b.n	8006cee <UART_SetConfig+0x5a2>
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a02:	e174      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006a04:	2320      	movs	r3, #32
 8006a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a0a:	e170      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006a0c:	2340      	movs	r3, #64	; 0x40
 8006a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a12:	e16c      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006a14:	2380      	movs	r3, #128	; 0x80
 8006a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a1a:	e168      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1d      	ldr	r2, [pc, #116]	; (8006a98 <UART_SetConfig+0x34c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d142      	bne.n	8006aac <UART_SetConfig+0x360>
 8006a26:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <UART_SetConfig+0x33c>)
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	2b05      	cmp	r3, #5
 8006a30:	d838      	bhi.n	8006aa4 <UART_SetConfig+0x358>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <UART_SetConfig+0x2ec>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a51 	.word	0x08006a51
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	08006a61 	.word	0x08006a61
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a71 	.word	0x08006a71
 8006a4c:	08006a9d 	.word	0x08006a9d
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a56:	e14a      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5e:	e146      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006a60:	2308      	movs	r3, #8
 8006a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a66:	e142      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a6e:	e13e      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006a70:	2320      	movs	r3, #32
 8006a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a76:	e13a      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006a78:	cfff69f3 	.word	0xcfff69f3
 8006a7c:	58000c00 	.word	0x58000c00
 8006a80:	11fff4ff 	.word	0x11fff4ff
 8006a84:	40011000 	.word	0x40011000
 8006a88:	58024400 	.word	0x58024400
 8006a8c:	40004400 	.word	0x40004400
 8006a90:	40004800 	.word	0x40004800
 8006a94:	40004c00 	.word	0x40004c00
 8006a98:	40005000 	.word	0x40005000
 8006a9c:	2340      	movs	r3, #64	; 0x40
 8006a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa2:	e124      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006aa4:	2380      	movs	r3, #128	; 0x80
 8006aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aaa:	e120      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4acc      	ldr	r2, [pc, #816]	; (8006de4 <UART_SetConfig+0x698>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d176      	bne.n	8006ba4 <UART_SetConfig+0x458>
 8006ab6:	4bcc      	ldr	r3, [pc, #816]	; (8006de8 <UART_SetConfig+0x69c>)
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006abe:	2b28      	cmp	r3, #40	; 0x28
 8006ac0:	d86c      	bhi.n	8006b9c <UART_SetConfig+0x450>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <UART_SetConfig+0x37c>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006b6d 	.word	0x08006b6d
 8006acc:	08006b9d 	.word	0x08006b9d
 8006ad0:	08006b9d 	.word	0x08006b9d
 8006ad4:	08006b9d 	.word	0x08006b9d
 8006ad8:	08006b9d 	.word	0x08006b9d
 8006adc:	08006b9d 	.word	0x08006b9d
 8006ae0:	08006b9d 	.word	0x08006b9d
 8006ae4:	08006b9d 	.word	0x08006b9d
 8006ae8:	08006b75 	.word	0x08006b75
 8006aec:	08006b9d 	.word	0x08006b9d
 8006af0:	08006b9d 	.word	0x08006b9d
 8006af4:	08006b9d 	.word	0x08006b9d
 8006af8:	08006b9d 	.word	0x08006b9d
 8006afc:	08006b9d 	.word	0x08006b9d
 8006b00:	08006b9d 	.word	0x08006b9d
 8006b04:	08006b9d 	.word	0x08006b9d
 8006b08:	08006b7d 	.word	0x08006b7d
 8006b0c:	08006b9d 	.word	0x08006b9d
 8006b10:	08006b9d 	.word	0x08006b9d
 8006b14:	08006b9d 	.word	0x08006b9d
 8006b18:	08006b9d 	.word	0x08006b9d
 8006b1c:	08006b9d 	.word	0x08006b9d
 8006b20:	08006b9d 	.word	0x08006b9d
 8006b24:	08006b9d 	.word	0x08006b9d
 8006b28:	08006b85 	.word	0x08006b85
 8006b2c:	08006b9d 	.word	0x08006b9d
 8006b30:	08006b9d 	.word	0x08006b9d
 8006b34:	08006b9d 	.word	0x08006b9d
 8006b38:	08006b9d 	.word	0x08006b9d
 8006b3c:	08006b9d 	.word	0x08006b9d
 8006b40:	08006b9d 	.word	0x08006b9d
 8006b44:	08006b9d 	.word	0x08006b9d
 8006b48:	08006b8d 	.word	0x08006b8d
 8006b4c:	08006b9d 	.word	0x08006b9d
 8006b50:	08006b9d 	.word	0x08006b9d
 8006b54:	08006b9d 	.word	0x08006b9d
 8006b58:	08006b9d 	.word	0x08006b9d
 8006b5c:	08006b9d 	.word	0x08006b9d
 8006b60:	08006b9d 	.word	0x08006b9d
 8006b64:	08006b9d 	.word	0x08006b9d
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b72:	e0bc      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006b74:	2304      	movs	r3, #4
 8006b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b7a:	e0b8      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b82:	e0b4      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006b84:	2310      	movs	r3, #16
 8006b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b8a:	e0b0      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b92:	e0ac      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006b94:	2340      	movs	r3, #64	; 0x40
 8006b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b9a:	e0a8      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006b9c:	2380      	movs	r3, #128	; 0x80
 8006b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba2:	e0a4      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a90      	ldr	r2, [pc, #576]	; (8006dec <UART_SetConfig+0x6a0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d130      	bne.n	8006c10 <UART_SetConfig+0x4c4>
 8006bae:	4b8e      	ldr	r3, [pc, #568]	; (8006de8 <UART_SetConfig+0x69c>)
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	d826      	bhi.n	8006c08 <UART_SetConfig+0x4bc>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <UART_SetConfig+0x474>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bd9 	.word	0x08006bd9
 8006bc4:	08006be1 	.word	0x08006be1
 8006bc8:	08006be9 	.word	0x08006be9
 8006bcc:	08006bf1 	.word	0x08006bf1
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	08006c01 	.word	0x08006c01
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bde:	e086      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006be0:	2304      	movs	r3, #4
 8006be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006be6:	e082      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006be8:	2308      	movs	r3, #8
 8006bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bee:	e07e      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf6:	e07a      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bfe:	e076      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c00:	2340      	movs	r3, #64	; 0x40
 8006c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c06:	e072      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c08:	2380      	movs	r3, #128	; 0x80
 8006c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c0e:	e06e      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a76      	ldr	r2, [pc, #472]	; (8006df0 <UART_SetConfig+0x6a4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d130      	bne.n	8006c7c <UART_SetConfig+0x530>
 8006c1a:	4b73      	ldr	r3, [pc, #460]	; (8006de8 <UART_SetConfig+0x69c>)
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	d826      	bhi.n	8006c74 <UART_SetConfig+0x528>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x4e0>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c45 	.word	0x08006c45
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	08006c55 	.word	0x08006c55
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c6d 	.word	0x08006c6d
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c4a:	e050      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c52:	e04c      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c54:	2308      	movs	r3, #8
 8006c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c5a:	e048      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c62:	e044      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c64:	2320      	movs	r3, #32
 8006c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c6a:	e040      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c6c:	2340      	movs	r3, #64	; 0x40
 8006c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c72:	e03c      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c7a:	e038      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a5c      	ldr	r2, [pc, #368]	; (8006df4 <UART_SetConfig+0x6a8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d130      	bne.n	8006ce8 <UART_SetConfig+0x59c>
 8006c86:	4b58      	ldr	r3, [pc, #352]	; (8006de8 <UART_SetConfig+0x69c>)
 8006c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	2b05      	cmp	r3, #5
 8006c90:	d826      	bhi.n	8006ce0 <UART_SetConfig+0x594>
 8006c92:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <UART_SetConfig+0x54c>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006cb1 	.word	0x08006cb1
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	08006cc1 	.word	0x08006cc1
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cd1 	.word	0x08006cd1
 8006cac:	08006cd9 	.word	0x08006cd9
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cb6:	e01a      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cbe:	e016      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cc6:	e012      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cce:	e00e      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cd6:	e00a      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006cd8:	2340      	movs	r3, #64	; 0x40
 8006cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cde:	e006      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006ce0:	2380      	movs	r3, #128	; 0x80
 8006ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ce6:	e002      	b.n	8006cee <UART_SetConfig+0x5a2>
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a40      	ldr	r2, [pc, #256]	; (8006df4 <UART_SetConfig+0x6a8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	f040 80ef 	bne.w	8006ed8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	dc46      	bgt.n	8006d90 <UART_SetConfig+0x644>
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	f2c0 8081 	blt.w	8006e0a <UART_SetConfig+0x6be>
 8006d08:	3b02      	subs	r3, #2
 8006d0a:	2b1e      	cmp	r3, #30
 8006d0c:	d87d      	bhi.n	8006e0a <UART_SetConfig+0x6be>
 8006d0e:	a201      	add	r2, pc, #4	; (adr r2, 8006d14 <UART_SetConfig+0x5c8>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006d97 	.word	0x08006d97
 8006d18:	08006e0b 	.word	0x08006e0b
 8006d1c:	08006d9f 	.word	0x08006d9f
 8006d20:	08006e0b 	.word	0x08006e0b
 8006d24:	08006e0b 	.word	0x08006e0b
 8006d28:	08006e0b 	.word	0x08006e0b
 8006d2c:	08006daf 	.word	0x08006daf
 8006d30:	08006e0b 	.word	0x08006e0b
 8006d34:	08006e0b 	.word	0x08006e0b
 8006d38:	08006e0b 	.word	0x08006e0b
 8006d3c:	08006e0b 	.word	0x08006e0b
 8006d40:	08006e0b 	.word	0x08006e0b
 8006d44:	08006e0b 	.word	0x08006e0b
 8006d48:	08006e0b 	.word	0x08006e0b
 8006d4c:	08006dbf 	.word	0x08006dbf
 8006d50:	08006e0b 	.word	0x08006e0b
 8006d54:	08006e0b 	.word	0x08006e0b
 8006d58:	08006e0b 	.word	0x08006e0b
 8006d5c:	08006e0b 	.word	0x08006e0b
 8006d60:	08006e0b 	.word	0x08006e0b
 8006d64:	08006e0b 	.word	0x08006e0b
 8006d68:	08006e0b 	.word	0x08006e0b
 8006d6c:	08006e0b 	.word	0x08006e0b
 8006d70:	08006e0b 	.word	0x08006e0b
 8006d74:	08006e0b 	.word	0x08006e0b
 8006d78:	08006e0b 	.word	0x08006e0b
 8006d7c:	08006e0b 	.word	0x08006e0b
 8006d80:	08006e0b 	.word	0x08006e0b
 8006d84:	08006e0b 	.word	0x08006e0b
 8006d88:	08006e0b 	.word	0x08006e0b
 8006d8c:	08006dfd 	.word	0x08006dfd
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d036      	beq.n	8006e02 <UART_SetConfig+0x6b6>
 8006d94:	e039      	b.n	8006e0a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d96:	f7fe fe3f 	bl	8005a18 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d9c:	e03b      	b.n	8006e16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe fe4e 	bl	8005a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dac:	e033      	b.n	8006e16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dae:	f107 0308 	add.w	r3, r7, #8
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe ff9a 	bl	8005cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dbc:	e02b      	b.n	8006e16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <UART_SetConfig+0x69c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dca:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <UART_SetConfig+0x69c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	08db      	lsrs	r3, r3, #3
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	4a08      	ldr	r2, [pc, #32]	; (8006df8 <UART_SetConfig+0x6ac>)
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ddc:	e01b      	b.n	8006e16 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006dde:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <UART_SetConfig+0x6ac>)
 8006de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006de2:	e018      	b.n	8006e16 <UART_SetConfig+0x6ca>
 8006de4:	40011400 	.word	0x40011400
 8006de8:	58024400 	.word	0x58024400
 8006dec:	40007800 	.word	0x40007800
 8006df0:	40007c00 	.word	0x40007c00
 8006df4:	58000c00 	.word	0x58000c00
 8006df8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006dfc:	4bc4      	ldr	r3, [pc, #784]	; (8007110 <UART_SetConfig+0x9c4>)
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e00:	e009      	b.n	8006e16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e08:	e005      	b.n	8006e16 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 81da 	beq.w	80071d2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	4abc      	ldr	r2, [pc, #752]	; (8007114 <UART_SetConfig+0x9c8>)
 8006e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e30:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	4413      	add	r3, r2
 8006e3c:	6a3a      	ldr	r2, [r7, #32]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d305      	bcc.n	8006e4e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e48:	6a3a      	ldr	r2, [r7, #32]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d903      	bls.n	8006e56 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006e54:	e1bd      	b.n	80071d2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	4aac      	ldr	r2, [pc, #688]	; (8007114 <UART_SetConfig+0x9c8>)
 8006e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	f7f9 fa33 	bl	80002d8 <__aeabi_uldivmod>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4610      	mov	r0, r2
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	020b      	lsls	r3, r1, #8
 8006e84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e88:	0202      	lsls	r2, r0, #8
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	6849      	ldr	r1, [r1, #4]
 8006e8e:	0849      	lsrs	r1, r1, #1
 8006e90:	4608      	mov	r0, r1
 8006e92:	f04f 0100 	mov.w	r1, #0
 8006e96:	1814      	adds	r4, r2, r0
 8006e98:	eb43 0501 	adc.w	r5, r3, r1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f7f9 fa15 	bl	80002d8 <__aeabi_uldivmod>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ebc:	d308      	bcc.n	8006ed0 <UART_SetConfig+0x784>
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec4:	d204      	bcs.n	8006ed0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ecc:	60da      	str	r2, [r3, #12]
 8006ece:	e180      	b.n	80071d2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ed6:	e17c      	b.n	80071d2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee0:	f040 80bf 	bne.w	8007062 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	dc49      	bgt.n	8006f80 <UART_SetConfig+0x834>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	db7c      	blt.n	8006fea <UART_SetConfig+0x89e>
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d87a      	bhi.n	8006fea <UART_SetConfig+0x89e>
 8006ef4:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x7b0>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f87 	.word	0x08006f87
 8006f00:	08006f8f 	.word	0x08006f8f
 8006f04:	08006feb 	.word	0x08006feb
 8006f08:	08006feb 	.word	0x08006feb
 8006f0c:	08006f97 	.word	0x08006f97
 8006f10:	08006feb 	.word	0x08006feb
 8006f14:	08006feb 	.word	0x08006feb
 8006f18:	08006feb 	.word	0x08006feb
 8006f1c:	08006fa7 	.word	0x08006fa7
 8006f20:	08006feb 	.word	0x08006feb
 8006f24:	08006feb 	.word	0x08006feb
 8006f28:	08006feb 	.word	0x08006feb
 8006f2c:	08006feb 	.word	0x08006feb
 8006f30:	08006feb 	.word	0x08006feb
 8006f34:	08006feb 	.word	0x08006feb
 8006f38:	08006feb 	.word	0x08006feb
 8006f3c:	08006fb7 	.word	0x08006fb7
 8006f40:	08006feb 	.word	0x08006feb
 8006f44:	08006feb 	.word	0x08006feb
 8006f48:	08006feb 	.word	0x08006feb
 8006f4c:	08006feb 	.word	0x08006feb
 8006f50:	08006feb 	.word	0x08006feb
 8006f54:	08006feb 	.word	0x08006feb
 8006f58:	08006feb 	.word	0x08006feb
 8006f5c:	08006feb 	.word	0x08006feb
 8006f60:	08006feb 	.word	0x08006feb
 8006f64:	08006feb 	.word	0x08006feb
 8006f68:	08006feb 	.word	0x08006feb
 8006f6c:	08006feb 	.word	0x08006feb
 8006f70:	08006feb 	.word	0x08006feb
 8006f74:	08006feb 	.word	0x08006feb
 8006f78:	08006feb 	.word	0x08006feb
 8006f7c:	08006fdd 	.word	0x08006fdd
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d02e      	beq.n	8006fe2 <UART_SetConfig+0x896>
 8006f84:	e031      	b.n	8006fea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f86:	f7fe fd1b 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 8006f8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f8c:	e033      	b.n	8006ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f8e:	f7fe fd2d 	bl	80059ec <HAL_RCC_GetPCLK2Freq>
 8006f92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f94:	e02f      	b.n	8006ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fd52 	bl	8005a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fa4:	e027      	b.n	8006ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fe9e 	bl	8005cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fb4:	e01f      	b.n	8006ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fb6:	4b58      	ldr	r3, [pc, #352]	; (8007118 <UART_SetConfig+0x9cc>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fc2:	4b55      	ldr	r3, [pc, #340]	; (8007118 <UART_SetConfig+0x9cc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	08db      	lsrs	r3, r3, #3
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	4a53      	ldr	r2, [pc, #332]	; (800711c <UART_SetConfig+0x9d0>)
 8006fce:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fd4:	e00f      	b.n	8006ff6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006fd6:	4b51      	ldr	r3, [pc, #324]	; (800711c <UART_SetConfig+0x9d0>)
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fda:	e00c      	b.n	8006ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fdc:	4b4c      	ldr	r3, [pc, #304]	; (8007110 <UART_SetConfig+0x9c4>)
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fe0:	e009      	b.n	8006ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fe8:	e005      	b.n	8006ff6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006ff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 80ea 	beq.w	80071d2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	4a44      	ldr	r2, [pc, #272]	; (8007114 <UART_SetConfig+0x9c8>)
 8007004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007008:	461a      	mov	r2, r3
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007010:	005a      	lsls	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	441a      	add	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007022:	b29b      	uxth	r3, r3
 8007024:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	2b0f      	cmp	r3, #15
 800702a:	d916      	bls.n	800705a <UART_SetConfig+0x90e>
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d212      	bcs.n	800705a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	b29b      	uxth	r3, r3
 8007038:	f023 030f 	bic.w	r3, r3, #15
 800703c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	b29b      	uxth	r3, r3
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	b29a      	uxth	r2, r3
 800704a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800704c:	4313      	orrs	r3, r2
 800704e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007056:	60da      	str	r2, [r3, #12]
 8007058:	e0bb      	b.n	80071d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007060:	e0b7      	b.n	80071d2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007066:	2b20      	cmp	r3, #32
 8007068:	dc4a      	bgt.n	8007100 <UART_SetConfig+0x9b4>
 800706a:	2b00      	cmp	r3, #0
 800706c:	f2c0 8086 	blt.w	800717c <UART_SetConfig+0xa30>
 8007070:	2b20      	cmp	r3, #32
 8007072:	f200 8083 	bhi.w	800717c <UART_SetConfig+0xa30>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <UART_SetConfig+0x930>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	08007107 	.word	0x08007107
 8007080:	08007121 	.word	0x08007121
 8007084:	0800717d 	.word	0x0800717d
 8007088:	0800717d 	.word	0x0800717d
 800708c:	08007129 	.word	0x08007129
 8007090:	0800717d 	.word	0x0800717d
 8007094:	0800717d 	.word	0x0800717d
 8007098:	0800717d 	.word	0x0800717d
 800709c:	08007139 	.word	0x08007139
 80070a0:	0800717d 	.word	0x0800717d
 80070a4:	0800717d 	.word	0x0800717d
 80070a8:	0800717d 	.word	0x0800717d
 80070ac:	0800717d 	.word	0x0800717d
 80070b0:	0800717d 	.word	0x0800717d
 80070b4:	0800717d 	.word	0x0800717d
 80070b8:	0800717d 	.word	0x0800717d
 80070bc:	08007149 	.word	0x08007149
 80070c0:	0800717d 	.word	0x0800717d
 80070c4:	0800717d 	.word	0x0800717d
 80070c8:	0800717d 	.word	0x0800717d
 80070cc:	0800717d 	.word	0x0800717d
 80070d0:	0800717d 	.word	0x0800717d
 80070d4:	0800717d 	.word	0x0800717d
 80070d8:	0800717d 	.word	0x0800717d
 80070dc:	0800717d 	.word	0x0800717d
 80070e0:	0800717d 	.word	0x0800717d
 80070e4:	0800717d 	.word	0x0800717d
 80070e8:	0800717d 	.word	0x0800717d
 80070ec:	0800717d 	.word	0x0800717d
 80070f0:	0800717d 	.word	0x0800717d
 80070f4:	0800717d 	.word	0x0800717d
 80070f8:	0800717d 	.word	0x0800717d
 80070fc:	0800716f 	.word	0x0800716f
 8007100:	2b40      	cmp	r3, #64	; 0x40
 8007102:	d037      	beq.n	8007174 <UART_SetConfig+0xa28>
 8007104:	e03a      	b.n	800717c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007106:	f7fe fc5b 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 800710a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800710c:	e03c      	b.n	8007188 <UART_SetConfig+0xa3c>
 800710e:	bf00      	nop
 8007110:	003d0900 	.word	0x003d0900
 8007114:	08007794 	.word	0x08007794
 8007118:	58024400 	.word	0x58024400
 800711c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007120:	f7fe fc64 	bl	80059ec <HAL_RCC_GetPCLK2Freq>
 8007124:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007126:	e02f      	b.n	8007188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007128:	f107 0314 	add.w	r3, r7, #20
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fc89 	bl	8005a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007136:	e027      	b.n	8007188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fdd5 	bl	8005cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007146:	e01f      	b.n	8007188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007148:	4b2c      	ldr	r3, [pc, #176]	; (80071fc <UART_SetConfig+0xab0>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007154:	4b29      	ldr	r3, [pc, #164]	; (80071fc <UART_SetConfig+0xab0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	08db      	lsrs	r3, r3, #3
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	4a28      	ldr	r2, [pc, #160]	; (8007200 <UART_SetConfig+0xab4>)
 8007160:	fa22 f303 	lsr.w	r3, r2, r3
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007166:	e00f      	b.n	8007188 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007168:	4b25      	ldr	r3, [pc, #148]	; (8007200 <UART_SetConfig+0xab4>)
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800716c:	e00c      	b.n	8007188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800716e:	4b25      	ldr	r3, [pc, #148]	; (8007204 <UART_SetConfig+0xab8>)
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007172:	e009      	b.n	8007188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800717a:	e005      	b.n	8007188 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007186:	bf00      	nop
    }

    if (pclk != 0U)
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d021      	beq.n	80071d2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	4a1d      	ldr	r2, [pc, #116]	; (8007208 <UART_SetConfig+0xabc>)
 8007194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007198:	461a      	mov	r2, r3
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	fbb3 f2f2 	udiv	r2, r3, r2
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	441a      	add	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d908      	bls.n	80071cc <UART_SetConfig+0xa80>
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c0:	d204      	bcs.n	80071cc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c8:	60da      	str	r2, [r3, #12]
 80071ca:	e002      	b.n	80071d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80071ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3738      	adds	r7, #56	; 0x38
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bdb0      	pop	{r4, r5, r7, pc}
 80071fa:	bf00      	nop
 80071fc:	58024400 	.word	0x58024400
 8007200:	03d09000 	.word	0x03d09000
 8007204:	003d0900 	.word	0x003d0900
 8007208:	08007794 	.word	0x08007794

0800720c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01a      	beq.n	8007322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730a:	d10a      	bne.n	8007322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	605a      	str	r2, [r3, #4]
  }
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af02      	add	r7, sp, #8
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007360:	f7f9 feda 	bl	8001118 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b08      	cmp	r3, #8
 8007372:	d10e      	bne.n	8007392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f82f 	bl	80073e6 <UART_WaitOnFlagUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e025      	b.n	80073de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b04      	cmp	r3, #4
 800739e:	d10e      	bne.n	80073be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f819 	bl	80073e6 <UART_WaitOnFlagUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e00f      	b.n	80073de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	603b      	str	r3, [r7, #0]
 80073f2:	4613      	mov	r3, r2
 80073f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f6:	e062      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d05e      	beq.n	80074be <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007400:	f7f9 fe8a 	bl	8001118 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	429a      	cmp	r2, r3
 800740e:	d302      	bcc.n	8007416 <UART_WaitOnFlagUntilTimeout+0x30>
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d11d      	bne.n	8007452 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007424:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0201 	bic.w	r2, r2, #1
 8007434:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e045      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02e      	beq.n	80074be <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800746e:	d126      	bne.n	80074be <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007478:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007488:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0201 	bic.w	r2, r2, #1
 8007498:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e00f      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d08d      	beq.n	80073f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80074fc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800750c:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800753a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6899      	ldr	r1, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <UART_EndRxTransfer+0x60>)
 8007548:	400b      	ands	r3, r1
 800754a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007550:	2b01      	cmp	r3, #1
 8007552:	d107      	bne.n	8007564 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0210 	bic.w	r2, r2, #16
 8007562:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2220      	movs	r2, #32
 8007568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	effffffe 	.word	0xeffffffe

08007588 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800759e:	d014      	beq.n	80075ca <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075b6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075c6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075c8:	e002      	b.n	80075d0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7f9 f8ec 	bl	80007a8 <HAL_UART_TxCpltCallback>
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff f89a 	bl	8006720 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ec:	bf00      	nop
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007608:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007610:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761c:	2b80      	cmp	r3, #128	; 0x80
 800761e:	d109      	bne.n	8007634 <UART_DMAError+0x40>
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	2b21      	cmp	r3, #33	; 0x21
 8007624:	d106      	bne.n	8007634 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2200      	movs	r2, #0
 800762a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800762e:	6978      	ldr	r0, [r7, #20]
 8007630:	f7ff ff59 	bl	80074e6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763e:	2b40      	cmp	r3, #64	; 0x40
 8007640:	d109      	bne.n	8007656 <UART_DMAError+0x62>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b22      	cmp	r3, #34	; 0x22
 8007646:	d106      	bne.n	8007656 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007650:	6978      	ldr	r0, [r7, #20]
 8007652:	f7ff ff67 	bl	8007524 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800765c:	f043 0210 	orr.w	r2, r3, #16
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007666:	6978      	ldr	r0, [r7, #20]
 8007668:	f7f9 f8ae 	bl	80007c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800766c:	bf00      	nop
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f7f9 f898 	bl	80007c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7f9 f86e 	bl	80007a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <__libc_init_array>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	4d0d      	ldr	r5, [pc, #52]	; (8007748 <__libc_init_array+0x38>)
 8007714:	4c0d      	ldr	r4, [pc, #52]	; (800774c <__libc_init_array+0x3c>)
 8007716:	1b64      	subs	r4, r4, r5
 8007718:	10a4      	asrs	r4, r4, #2
 800771a:	2600      	movs	r6, #0
 800771c:	42a6      	cmp	r6, r4
 800771e:	d109      	bne.n	8007734 <__libc_init_array+0x24>
 8007720:	4d0b      	ldr	r5, [pc, #44]	; (8007750 <__libc_init_array+0x40>)
 8007722:	4c0c      	ldr	r4, [pc, #48]	; (8007754 <__libc_init_array+0x44>)
 8007724:	f000 f818 	bl	8007758 <_init>
 8007728:	1b64      	subs	r4, r4, r5
 800772a:	10a4      	asrs	r4, r4, #2
 800772c:	2600      	movs	r6, #0
 800772e:	42a6      	cmp	r6, r4
 8007730:	d105      	bne.n	800773e <__libc_init_array+0x2e>
 8007732:	bd70      	pop	{r4, r5, r6, pc}
 8007734:	f855 3b04 	ldr.w	r3, [r5], #4
 8007738:	4798      	blx	r3
 800773a:	3601      	adds	r6, #1
 800773c:	e7ee      	b.n	800771c <__libc_init_array+0xc>
 800773e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007742:	4798      	blx	r3
 8007744:	3601      	adds	r6, #1
 8007746:	e7f2      	b.n	800772e <__libc_init_array+0x1e>
 8007748:	080077b4 	.word	0x080077b4
 800774c:	080077b4 	.word	0x080077b4
 8007750:	080077b4 	.word	0x080077b4
 8007754:	080077b8 	.word	0x080077b8

08007758 <_init>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr

08007764 <_fini>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr
